(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1020194,      18344]
NotebookOptionsPosition[   1014570,      18267]
NotebookOutlinePosition[   1014906,      18282]
CellTagsIndexPosition[   1014863,      18279]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[TextData[{
 StyleBox["(*",
  FontFamily->"Source Code Pro",
  FontWeight->"Bold",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox["\n", "Title",
  FontFamily->"Utopia",
  FontColor->RGBColor[0.5, 0, 0.5]],
 StyleBox["ForkNet", "Title",
  FontFamily->"Utopia",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox[" ", "Title",
  FontFamily->"Utopia",
  FontColor->RGBColor[1, 0.5, 0]],
 StyleBox[" ", "Title",
  FontFamily->"Utopia",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox[" ",
  FontFamily->"Source Code Pro",
  FontSize->32,
  FontWeight->"Bold"],
 "\n",
 StyleBox["Copyrights (c) Essam Rashed (essam.rashed@nitech.ac.jp), NITech, \
Nagoya, JP \nFor any questions, please cnotact using the above e-mail address \
or (essam.rashed@gmial.com)\nThis code aims at mapping MRI 2D image with \
segmented labels of different anatomical structure. \nThe design of ForkNet \
is based on unified encoders and individual decoders.\nThis implementation is \
for ForkNet (N=2) to segment MRI images of GM & WM. \nIt is aimed to be a \
platform for further extensions and improvements.\nThis code is compatable \
with Mathematica 11.3 and byond and tested over Windows 10 and Ubuntu 16.04\n\
More details are in our paper mentioned below. If you are using this code, \
please refer to our paper.\n\n",
  FontFamily->"Source Code Pro",
  FontWeight->"Plain",
  FontColor->GrayLevel[0]],
 StyleBox["MRI data is available here: http://hdl.handle.net/1926/1687\n\n\
\[Rule] Input images are in MATLAB \"*.mat\" formats for easy use \n\[Rule] \
To Run Select Evaluation \[Rule] Evaluate Notebook \nInput: 256x256 (2D) MRI \
slices \nOutputs: 256x256 (2D) Label slices \n\n",
  FontFamily->"Source Code Pro",
  FontWeight->"Plain",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox["Reference:",
  FontFamily->"Source Code Pro",
  FontWeight->"Bold",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox["\nRashed, Gomez-Tames & Hirata, \n\"Development of Accurate Human \
Head Model for Personalized Dosimetry Using Deep Learning\", 2019 \n\
(submitted for publication)\n",
  FontFamily->"Source Code Pro",
  FontWeight->"Plain",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox["*) ",
  FontFamily->"Source Code Pro",
  FontWeight->"Bold",
  FontColor->RGBColor[0, 0, 1]]
}], "Input",
 CellChangeTimes->{{3.74892351049205*^9, 3.74892369823372*^9}, {
   3.749167681856616*^9, 3.7491677446896267`*^9}, {3.7491679895634403`*^9, 
   3.749167990202631*^9}, {3.749171468044774*^9, 3.749171469531754*^9}, {
   3.749184281323601*^9, 3.749184301880286*^9}, {3.749241745645048*^9, 
   3.749241746204126*^9}, {3.749241795647564*^9, 3.749241835149988*^9}, {
   3.752815010011116*^9, 3.752815034168871*^9}, {3.752815671116115*^9, 
   3.752815690986676*^9}, {3.752875132909789*^9, 3.752875179897293*^9}, 
   3.752878850411211*^9, {3.752977471794961*^9, 3.752977515603724*^9}, {
   3.7533976562319107`*^9, 3.7533976583062897`*^9}, {3.753402776507723*^9, 
   3.7534028463113947`*^9}, 3.753402944523135*^9, {3.753403553377976*^9, 
   3.753403568355207*^9}, {3.7534037360367126`*^9, 3.753403736922435*^9}, {
   3.75349804148811*^9, 3.753498042233445*^9}, {3.7534984001899548`*^9, 
   3.753498425386454*^9}, {3.753512429196314*^9, 3.753512630317462*^9}, {
   3.753753109329463*^9, 3.7537532279275503`*^9}, {3.7537532756270313`*^9, 
   3.7537532949083557`*^9}, {3.7537534043470087`*^9, 
   3.7537534604591913`*^9}, {3.753753544341243*^9, 3.753753552220665*^9}, {
   3.753753602504183*^9, 3.753753727602655*^9}, 3.753753801942245*^9, {
   3.753753868348963*^9, 3.753753877456559*^9}, {3.753753926031163*^9, 
   3.7537539278047132`*^9}, {3.753754161066535*^9, 3.753754173358058*^9}, {
   3.7537544834884157`*^9, 3.7537544998567877`*^9}, {3.753754810619499*^9, 
   3.7537548608030653`*^9}, {3.7537549086448383`*^9, 3.753754914275263*^9}, {
   3.753755003747654*^9, 3.753755060211144*^9}, {3.75375515535425*^9, 
   3.7537551618054323`*^9}, {3.753756318125739*^9, 3.753756345513481*^9}, {
   3.755899941795198*^9, 3.755900022504961*^9}, {3.755900170302047*^9, 
   3.755900192447057*^9}, {3.755900267193136*^9, 3.755900296043651*^9}, {
   3.755912251982359*^9, 3.755912298775446*^9}, {3.756161909875474*^9, 
   3.756162043735346*^9}, {3.756435197017518*^9, 3.756435217352363*^9}, {
   3.756513371489191*^9, 3.75651340964776*^9}, {3.756592099069408*^9, 
   3.756592118044404*^9}, {3.757043511133102*^9, 3.7570435558685637`*^9}, {
   3.757043733692625*^9, 3.757043781387183*^9}, 3.757112344631073*^9, {
   3.757112624430728*^9, 3.757112644950506*^9}, {3.757203502504942*^9, 
   3.757203602013139*^9}, {3.75721417513311*^9, 3.757214201979862*^9}, {
   3.757560964023637*^9, 3.757560991457918*^9}, {3.757567476577846*^9, 
   3.757567477878076*^9}, {3.75762433206194*^9, 3.75762438167341*^9}, {
   3.757624461262907*^9, 3.757624512160347*^9}, {3.7577117325242443`*^9, 
   3.757711759015335*^9}, {3.759794651011661*^9, 3.7597946523698263`*^9}, {
   3.760321121969858*^9, 3.760321140446681*^9}, {3.7603211723438797`*^9, 
   3.7603212739022703`*^9}, {3.760322220873266*^9, 3.7603222216085653`*^9}, {
   3.76032687286239*^9, 3.760326929197287*^9}, {3.760388739238215*^9, 
   3.76038897319781*^9}, {3.760389025965158*^9, 3.760389126318343*^9}, {
   3.760390944810182*^9, 3.760390946875651*^9}, 3.761290217791391*^9, 
   3.761290249542491*^9, {3.761342425655397*^9, 3.761342430277464*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"31ab4f15-a564-4379-aefb-635198957c4a"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
   RowBox[{"Experiment", " ", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Parameters", " ", "--"}], "--"}], "--"}], "--"}],
                     "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
                    "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
                 "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
          "--"}], "--"}], "--"}], "--"}], "--"}], "--"}]}], "-"}], 
  "*)"}]], "Input",
 CellChangeTimes->{{3.753752314801449*^9, 3.753752330657073*^9}, {
  3.756162095056327*^9, 3.756162098368149*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"01d0cbb4-b87c-499c-9627-f4fe1ee2a535"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"NIter", "=", "100"}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Training", " ", "Iterations"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.753751603214044*^9, 3.753751622479108*^9}, {
   3.7537516640141077`*^9, 3.753751669858054*^9}, {3.753753957011574*^9, 
   3.753753974573078*^9}, 3.75590723233488*^9, {3.756162084972871*^9, 
   3.756162085688817*^9}, 3.756175089935894*^9, {3.7561786608977633`*^9, 
   3.7561786615510387`*^9}, 3.7570434815170307`*^9, 3.7576539168595667`*^9, {
   3.75765538571122*^9, 3.7576553903827677`*^9}, 3.7578216692019777`*^9, 
   3.757829894226021*^9, 3.7578318382521276`*^9, 3.757907151340994*^9, 
   3.757916060335773*^9, 3.759124105727275*^9, 3.759182180946722*^9, 
   3.75953695440657*^9, 3.7595506544243593`*^9, {3.75961395954538*^9, 
   3.7596139622296257`*^9}, {3.75961625062604*^9, 3.759616256848761*^9}, 
   3.759617160923605*^9, 3.75961747413923*^9, {3.759617807532545*^9, 
   3.759617809866475*^9}, 3.760219644369536*^9, 3.7602220705293217`*^9, 
   3.760222442867589*^9, 3.7602233514108686`*^9, {3.7602260154485617`*^9, 
   3.7602260188455353`*^9}, {3.760226903743425*^9, 3.7602269051134853`*^9}, {
   3.760227324015276*^9, 3.760227324788589*^9}, 3.760227969305378*^9, 
   3.760229117370069*^9, {3.76023126921902*^9, 3.7602312697232523`*^9}, 
   3.760234693538568*^9, 3.76023593888446*^9, 3.7602364554459352`*^9, 
   3.760236973526524*^9, {3.760238612328189*^9, 3.7602386394941893`*^9}, {
   3.7602391705049667`*^9, 3.7602391710223083`*^9}, 3.760240901674025*^9, 
   3.7602429379051037`*^9, {3.760323937803195*^9, 3.7603239408441763`*^9}, 
   3.76032523136285*^9, 3.760326171529458*^9, 3.7603265151560907`*^9, {
   3.760389733047159*^9, 3.760389737743833*^9}, 3.761286544095264*^9, 
   3.761287101622381*^9, {3.761289595005506*^9, 3.761289601035407*^9}, 
   3.761289958514929*^9, 3.761290625169096*^9, 3.761291109699757*^9},
 CellLabel->"In[3]:=",ExpressionUUID->"19bf18a9-4a02-4073-bb97-9344b4bb5fe8"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"BS", "=", "4"}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Batch", " ", "Size"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.760326173914192*^9, 3.760326174286371*^9}, 
   3.760326510252033*^9, 3.760389736179883*^9},
 CellLabel->"In[4]:=",ExpressionUUID->"9dcd62c5-15ab-48b8-9119-ad743d62527e"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Dir", "=", "\"\<axial\>\""}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Slicing", " ", "direction", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"axial", "/", "sagittal"}], "/", "coronal"}]}]}], 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.75731533174929*^9, 3.757315354497697*^9}, 
   3.7573161526135197`*^9, 3.757317240109387*^9, {3.757558300960265*^9, 
   3.7575583013737917`*^9}, {3.757565133703865*^9, 3.7575651381523323`*^9}, 
   3.757625343905033*^9, 3.757653921068493*^9, 3.757728814643424*^9, 
   3.757815996225774*^9, 3.757821676596262*^9, 3.7578299010476723`*^9, 
   3.757888255111807*^9, 3.757907237437831*^9, 3.7579267524056873`*^9, 
   3.7579734800729713`*^9, {3.759182100923773*^9, 3.7591821031936703`*^9}, {
   3.7591937382589703`*^9, 3.7591937401252747`*^9}, 3.75920145292104*^9, 
   3.759210937994485*^9, 3.7592152035758753`*^9, {3.7594398789416533`*^9, 
   3.759439879259081*^9}, {3.759443106842037*^9, 3.7594431106815*^9}, 
   3.7594583038448563`*^9, 3.759463543245269*^9, 3.759465973988454*^9, 
   3.75946739805961*^9, 3.759536950241076*^9, 3.759537614674099*^9, 
   3.759543452242025*^9, 3.759550657635111*^9, 3.759617803308627*^9, 
   3.759641151152114*^9, 3.759729310795908*^9, 3.759806526757729*^9, 
   3.7600713111293488`*^9, 3.760134155380975*^9, 3.760159556268723*^9, 
   3.7602196051398487`*^9, 3.760249742015395*^9, 3.7603044132317123`*^9, 
   3.760318896334034*^9, 3.76031904697558*^9, {3.7603213195196447`*^9, 
   3.760321336816771*^9}, {3.761345831243903*^9, 3.761345832682932*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"40d3c13f-f9e8-4df4-98ba-3b66cbd95bbb"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"TrainingPercentage", "=", "0.9"}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "%", " ", "of", " ", "data", " ", "used", " ", "for", " ", "training"}], 
    " ", "-", " ", 
    RowBox[{"remaining", " ", "are", " ", "for", " ", "validation"}]}], 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.760321823185313*^9, 3.760321862719727*^9}, {
  3.7603891577890177`*^9, 3.7603891642690477`*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"5c1a61d2-be85-4f4c-a6df-bf26a68d0c78"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", 
              RowBox[{"--", 
               RowBox[{"--", 
                RowBox[{"--", "LOAD"}]}]}]}]}]}]}]}]}]}]}], " ", "DATA"}], 
     " ", "&"}], " ", 
    RowBox[{
     RowBox[{
      RowBox[{"Preprocessing", "--"}], "--"}], "--"}]}], "-", 
   RowBox[{"--", 
    RowBox[{"--", 
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", 
              RowBox[{"--", 
               RowBox[{"--", "--"}]}]}]}]}]}]}]}]}]}]}]}]}]}], 
  "*)"}]], "Input",
 CellChangeTimes->{3.749180760399023*^9},
 CellLabel->"In[7]:=",ExpressionUUID->"770dfb72-c407-41bf-8fae-2b849abb648d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"NetworkName", "=", 
   RowBox[{
   "\"\</home/essam/Github/ForkNet/Results/ForkNet_\>\"", "<>", "Dir", "<>", 
    "\"\<_\>\"", "<>", 
    RowBox[{"ToString", "[", "NIter", "]"}], "<>", "\"\<_\>\"", "<>", 
    RowBox[{"ToString", "[", "BS", "]"}], "<>", "\"\<.wlnet\>\""}]}], ";", 
  RowBox[{"Print", "[", 
   RowBox[{"Style", "[", 
    RowBox[{
     RowBox[{"\"\<NetworkName >>> \>\"", "<>", "NetworkName"}], ",", "Red"}], 
    "]"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.757315454225069*^9, 3.7573156229651814`*^9}, 
   3.757315679899254*^9, {3.759107412138389*^9, 3.759107446734747*^9}, {
   3.759109256697713*^9, 3.7591092589194803`*^9}, 3.759707739424911*^9, {
   3.760219635395721*^9, 3.760219635968523*^9}, {3.760249729162218*^9, 
   3.760249729606773*^9}, {3.760321401127873*^9, 3.7603214505584173`*^9}, {
   3.7603216445756483`*^9, 3.760321661864923*^9}, 3.760323255720003*^9, 
   3.76032715567583*^9, {3.761288241687479*^9, 3.7612882420228653`*^9}, {
   3.761339266014234*^9, 3.761339267837105*^9}, 3.761345821900682*^9},
 CellLabel->"In[8]:=",ExpressionUUID->"e7109a96-6ed4-4fef-ace3-b4d8683ee8cb"],

Cell[BoxData[
 StyleBox["\<\"NetworkName >>> \
/home/essam/Github/ForkNet/Results/ForkNet_axial_100_4.wlnet\"\>",
  StripOnInput->False,
  LineColor->RGBColor[1, 0, 0],
  FrontFaceColor->RGBColor[1, 0, 0],
  BackFaceColor->RGBColor[1, 0, 0],
  GraphicsColor->RGBColor[1, 0, 0],
  FontColor->RGBColor[1, 0, 0]]], "Print",
 CellChangeTimes->{3.7612882446467743`*^9, 3.761289357835534*^9, 
  3.7612899619809303`*^9, 3.7612906282810383`*^9, 3.7612911122031937`*^9, 
  3.761291761777911*^9, 3.76129219049196*^9, 3.7613420808367033`*^9, 
  3.761343718300682*^9, 3.761345316545806*^9, 3.7613454176893997`*^9, 
  3.7613459197757063`*^9},
 CellLabel->
  "During evaluation of \
In[8]:=",ExpressionUUID->"cb2e8f5b-32ee-4c8d-8651-e80c5fbe2181"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
  "NetworkArch", "=", 
   "\"\</home/essam/Github/ForkNet/Arch/ForkNet_N_2.nb\>\""}], ";", 
  RowBox[{"Print", "[", 
   RowBox[{"Style", "[", 
    RowBox[{
     RowBox[{"\"\<NetworkArch >>> \>\"", "<>", "NetworkArch"}], ",", "Red"}], 
    "]"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.760321951585156*^9, 3.760321992224265*^9}, 
   3.7603232648906517`*^9, {3.760323952892601*^9, 3.760323965188011*^9}, 
   3.760327155693222*^9, 3.7612882681705723`*^9},
 CellLabel->"In[9]:=",ExpressionUUID->"a8a8228e-d60c-4fd9-88db-364653aa7362"],

Cell[BoxData[
 StyleBox["\<\"NetworkArch >>> /home/essam/Github/ForkNet/Arch/ForkNet_N_2.nb\
\"\>",
  StripOnInput->False,
  LineColor->RGBColor[1, 0, 0],
  FrontFaceColor->RGBColor[1, 0, 0],
  BackFaceColor->RGBColor[1, 0, 0],
  GraphicsColor->RGBColor[1, 0, 0],
  FontColor->RGBColor[1, 0, 0]]], "Print",
 CellChangeTimes->{3.761288269413474*^9, 3.761289357871064*^9, 
  3.761289962021317*^9, 3.7612906283171988`*^9, 3.761291112239451*^9, 
  3.761291761819916*^9, 3.761292190549039*^9, 3.7613420808737993`*^9, 
  3.76134371833536*^9, 3.761345316586035*^9, 3.7613454177200527`*^9, 
  3.761345919809293*^9},
 CellLabel->
  "During evaluation of \
In[9]:=",ExpressionUUID->"0d8f0502-61ff-44f9-aed6-b1fb8b848fa7"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
  "TestName", "=", 
   "\"\</home/essam/Github/ForkNet/Test/ForkNet_Test.nb\>\""}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.761274789665511*^9, 3.761274837005818*^9}, {
   3.761275016341077*^9, 3.761275017809154*^9}, 3.761288273245564*^9},
 CellLabel->"In[10]:=",ExpressionUUID->"90ee4cd3-6bf6-498e-95ab-23fb1fa454e3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"LossName", "=", 
   RowBox[{
   "\"\</home/essam/Github/ForkNet/Results/ForkNet_Loss_\>\"", "<>", "Dir", 
    "<>", "\"\<_\>\"", "<>", 
    RowBox[{"ToString", "[", "NIter", "]"}], "<>", "\"\<_\>\"", "<>", 
    RowBox[{"ToString", "[", "BS", "]"}], "<>", "\"\<.txt\>\""}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7612745558243217`*^9, 3.761274558478899*^9}, {
   3.761339280591433*^9, 3.761339282108947*^9}, 3.761345848994875*^9},
 CellLabel->"In[11]:=",ExpressionUUID->"6dc56c54-8f5d-42b0-8ce1-6cb60fbb4259"],

Cell[BoxData[
 RowBox[{
  RowBox[{"VLossName", "=", 
   RowBox[{
   "\"\</home/essam/Github/ForkNet/Results/ForkNet_VLoss_\>\"", "<>", "Dir", 
    "<>", "\"\<_\>\"", "<>", 
    RowBox[{"ToString", "[", "NIter", "]"}], "<>", "\"\<_\>\"", "<>", 
    RowBox[{"ToString", "[", "BS", "]"}], "<>", "\"\<.txt\>\""}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.761274562590261*^9, 3.761274565535522*^9}, {
   3.76133928550318*^9, 3.761339286909154*^9}, 3.761345855461707*^9},
 CellLabel->"In[12]:=",ExpressionUUID->"9cd0de19-6e9b-4cc8-9497-5ecb4a403ea8"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
   RowBox[{"Lodaind", " ", "data"}], "..."}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.757316191093004*^9, 3.757316204323451*^9}, {
  3.7603266400435057`*^9, 3.760326640426508*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"d9b50d74-06b3-4ee3-a18f-5a334ef0d6dd"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
   RowBox[{
    RowBox[{
    "This", " ", "is", " ", "just", " ", "a", " ", "sample", " ", "data", " ",
      "of", " ", "single", " ", "MRI", " ", "image"}], "..."}], " ", "Add", 
   " ", "more", " ", "data", " ", "for", " ", "effective", " ", "training"}], 
  " ", "*)"}]], "Input",
 CellChangeTimes->{{3.760389871251978*^9, 3.760389898879882*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"8ada1602-9534-48d1-9946-a5b32567d09a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ana", " ", "=", 
    RowBox[{"Flatten", "[", 
     RowBox[{
      RowBox[{
      "Import", "[", "\"\</home/essam/Github/ForkNet/NAMIC/case01015.mat\>\"",
        "]"}], ",", "1"}], "]"}]}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"anatomical", " ", "volume"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.757315639858612*^9, 3.757315715296424*^9}, 
   3.757316095363429*^9, {3.7591821597251368`*^9, 3.759182164363336*^9}, {
   3.759182764965914*^9, 3.7591827691318274`*^9}, 3.759182832542677*^9, {
   3.759192511835094*^9, 3.759192515579267*^9}, {3.759707387212988*^9, 
   3.75970741784568*^9}, 3.760321634784123*^9, 3.760321678016632*^9, {
   3.7603217141922693`*^9, 3.7603217671202707`*^9}, {3.760323999235259*^9, 
   3.7603239996258993`*^9}, {3.7603240449708548`*^9, 3.760324076730708*^9}, 
   3.7603271557023373`*^9, {3.760389913794135*^9, 3.760389929024085*^9}, 
   3.761289888367045*^9},
 CellLabel->"In[15]:=",ExpressionUUID->"33e0d287-d599-49d3-b23f-7ac8815928e8"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"msk1", " ", "=", 
    RowBox[{"Flatten", "[", 
     RowBox[{
      RowBox[{
      "Import", "[", 
       "\"\</home/essam/Github/ForkNet/NAMIC/case01015_WM.mat\>\"", "]"}], 
      ",", "1"}], "]"}]}], ";"}], "  ", 
  RowBox[{"(*", " ", 
   RowBox[{"labels", " ", "\"\<1\>\""}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7603240737147493`*^9, 3.760324106876334*^9}, 
   3.760327155706843*^9, {3.760389925169396*^9, 3.760389943136485*^9}, 
   3.761289890017949*^9},
 CellLabel->"In[16]:=",ExpressionUUID->"384f51e6-b757-4e32-9c5b-ae8246b1c113"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"msk2", " ", "=", 
    RowBox[{"Flatten", "[", 
     RowBox[{
      RowBox[{
      "Import", "[", 
       "\"\</home/essam/Github/ForkNet/NAMIC/case01015_GM.mat\>\"", "]"}], 
      ",", "1"}], "]"}]}], ";"}], "   ", 
  RowBox[{"(*", " ", 
   RowBox[{"labels", " ", "\"\<2\>\""}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7603241104153214`*^9, 3.760324110683144*^9}, 
   3.7603271557096*^9, {3.76038994600191*^9, 3.760389953745668*^9}, 
   3.761289891182144*^9},
 CellLabel->"In[17]:=",ExpressionUUID->"301c04c9-4ac2-4c28-8b31-6e3038f4a20b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"msk", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"msk1", ",", "msk2"}], "}"}], ",", "1"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7612706057723*^9, 3.761270622179172*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"98157c25-6aa1-426f-8404-bfd7d8c13271"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c"}], "}"}], "=", 
   RowBox[{"Dimensions", "[", "ana", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.760325401637219*^9, 3.76032540880276*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"b09c3920-4d3b-4f8c-a27f-244cadb7ca06"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{
    RowBox[{"--", 
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", 
              RowBox[{"--", "Preparing"}]}]}]}]}]}]}]}]}]}]}], " ", "Data", 
    " ", "for", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"ForkNet", "--"}], "--"}], "--"}]}], "-", 
   RowBox[{"--", 
    RowBox[{"--", 
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", 
              RowBox[{"--", "-"}]}]}]}]}]}]}]}]}]}]}]}]}], "*)"}]], "Input",
 CellChangeTimes->{{3.753750063770671*^9, 3.7537501211806173`*^9}, 
   3.753750262107339*^9, 3.7537522140515327`*^9, {3.757316531849683*^9, 
   3.757316541892467*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"6d2b4912-fc26-4cef-abc6-045a30dd3625"],

Cell[BoxData[
 RowBox[{
  RowBox[{"images", "=", 
   RowBox[{"Image3DSlices", "[", 
    RowBox[{"Image3D", "[", "ana", "]"}], "]"}]}], ";", 
  RowBox[{"Clear", "[", "ana", "]"}]}]], "Input",
 CellChangeTimes->{{3.753482379695827*^9, 3.753482382108797*^9}, 
   3.753496457631076*^9, {3.7571128486309557`*^9, 3.757112852082877*^9}, {
   3.7571163861588*^9, 3.757116391596746*^9}, {3.757120642918284*^9, 
   3.757120648963847*^9}, {3.761345246006267*^9, 3.761345248119421*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"0179a921-4b73-494a-af12-32452fef2bd3"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{"Shuffling", "..."}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.7603892449578753`*^9, 3.760389251712009*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"c511a134-5acf-4cd6-af91-39c150b17639"],

Cell[BoxData[
 RowBox[{
  RowBox[{"miximages", "=", 
   RowBox[{"RandomSample", "@", 
    RowBox[{"Thread", "[", 
     RowBox[{
      RowBox[{"Range", "@", 
       RowBox[{"Length", "@", "images"}]}], "\[Rule]", "images"}], "]"}]}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.753481501780724*^9, 3.7534815111758738`*^9}, {
  3.75349558108165*^9, 3.753495583675735*^9}, {3.7571128649378643`*^9, 
  3.757112869667398*^9}, {3.7571163972924137`*^9, 3.757116402319862*^9}, {
  3.761286344931034*^9, 3.7612863453049717`*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"be5b521f-30ba-4d7a-b740-46526839d30c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mixkeys", "=", 
   RowBox[{"Keys", "@", "miximages"}]}], ";"}]], "Input",
 CellChangeTimes->{
  3.753481516550537*^9, {3.753495587881756*^9, 3.753495589526662*^9}, {
   3.757112873222431*^9, 3.757112875941163*^9}, {3.7571164069246683`*^9, 
   3.757116408186287*^9}, {3.761286350467598*^9, 3.7612863622584677`*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"4518c605-7189-429e-9dec-4ba48ab5231b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mixmasks1", "=", 
   RowBox[{"Lookup", "[", 
    RowBox[{
     RowBox[{"<|", 
      RowBox[{"Thread", "[", 
       RowBox[{
        RowBox[{"Range", "@", 
         RowBox[{"Length", "@", "msk1"}]}], "\[Rule]", "msk1"}], "]"}], 
      "|>"}], ",", "mixkeys"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.752878040967293*^9, 3.752878046296371*^9}, 
   3.753481533254095*^9, {3.7534955984797573`*^9, 3.7534956161996737`*^9}, {
   3.753498557997745*^9, 3.753498562708634*^9}, {3.753500662108364*^9, 
   3.753500671281184*^9}, {3.753749611591693*^9, 3.753749619381564*^9}, 
   3.753749666358533*^9, {3.7571128785499983`*^9, 3.757112902883658*^9}, {
   3.757116396029681*^9, 3.757116432027082*^9}, {3.761286381227528*^9, 
   3.76128640275093*^9}, 3.761292187311317*^9},
 CellLabel->"In[25]:=",ExpressionUUID->"d02c9aca-cf40-428b-a381-c5cd1e1b308b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mixmasks2", "=", 
   RowBox[{"Lookup", "[", 
    RowBox[{
     RowBox[{"<|", 
      RowBox[{"Thread", "[", 
       RowBox[{
        RowBox[{"Range", "@", 
         RowBox[{"Length", "@", "msk2"}]}], "\[Rule]", "msk2"}], "]"}], 
      "|>"}], ",", "mixkeys"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.753495630202333*^9, 3.753495634679118*^9}, {
   3.7534985642553453`*^9, 3.75349856761124*^9}, 3.753500663616544*^9, {
   3.7535008484292917`*^9, 3.7535008489052963`*^9}, {3.7537496231274147`*^9, 
   3.753749625333987*^9}, 3.753749668090625*^9, {3.7571128800702477`*^9, 
   3.757112903635724*^9}, {3.757116410175213*^9, 3.757116433364956*^9}, {
   3.761286386699994*^9, 3.7612864080415792`*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"c03f909f-484d-484d-aba1-3f414ba87195"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{"Splitting", "..."}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.760389260110467*^9, 3.7603892677897243`*^9}, 
   3.760389298029354*^9},
 CellLabel->"In[27]:=",ExpressionUUID->"bc5aa311-ad28-4cc3-ba3d-318d5de2f6e8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TrainPack", "=", 
   RowBox[{"Round", "[", 
    RowBox[{"TrainingPercentage", "*", "a"}], "]"}]}], ";", 
  RowBox[{"ValPack", "=", 
   RowBox[{"Round", "[", 
    RowBox[{"(", 
     RowBox[{"a", "-", "TrainPack"}], ")"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.755912599113283*^9, 3.755912609991191*^9}, 
   3.755918108569941*^9, 3.755919590421777*^9, 3.7603218764819937`*^9},
 CellLabel->"In[28]:=",ExpressionUUID->"91fc435c-d86d-4d51-9a40-62f9900431a7"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"MRId", ",", "MRIv"}], "}"}], "=", 
    RowBox[{"TakeList", "[", 
     RowBox[{
      RowBox[{"Values", "@", "miximages"}], ",", 
      RowBox[{"{", 
       RowBox[{"TrainPack", ",", "ValPack"}], "}"}]}], "]"}]}], ";"}], 
  " "}]], "Input",
 CellChangeTimes->{{3.7528154457126703`*^9, 3.752815470075314*^9}, 
   3.752818157500496*^9, {3.752875461292577*^9, 3.752875477848516*^9}, {
   3.752875547690523*^9, 3.752875566345916*^9}, {3.7528780014462957`*^9, 
   3.752878002084096*^9}, {3.7528780502762127`*^9, 3.752878060691414*^9}, {
   3.752977684341707*^9, 3.7529776935411177`*^9}, {3.7534036587241383`*^9, 
   3.753403665648405*^9}, 3.7534815358198147`*^9, {3.7535005917550783`*^9, 
   3.753500608058024*^9}, {3.75350207556746*^9, 3.753502092121217*^9}, {
   3.753581771691358*^9, 3.753581778997326*^9}, {3.753581838704852*^9, 
   3.753581846556364*^9}, {3.753582046285612*^9, 3.7535820682517843`*^9}, {
   3.7535981755963573`*^9, 3.753598192226454*^9}, {3.753655962915189*^9, 
   3.7536559769314537`*^9}, {3.755912618745088*^9, 3.755912624619495*^9}, {
   3.755918440280467*^9, 3.755918452238364*^9}, {3.755919628474609*^9, 
   3.7559196420205727`*^9}, {3.757112931461006*^9, 3.757112935734158*^9}, {
   3.7571164478240147`*^9, 3.757116449147376*^9}, 3.757117409576489*^9, {
   3.761286419787937*^9, 3.761286420201887*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"83a7aeb6-123d-4bb3-a5db-fb1c84c71597"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"mskd1", ",", "mskv1"}], "}"}], "=", 
   RowBox[{"TakeList", "[", 
    RowBox[{"mixmasks1", ",", 
     RowBox[{"{", 
      RowBox[{"TrainPack", ",", "ValPack"}], "}"}]}], "]"}]}], ";"}]], "Input",\

 CellChangeTimes->{{3.75281547260376*^9, 3.752815499085526*^9}, 
   3.7528181620821342`*^9, {3.752875481529703*^9, 3.75287548820078*^9}, {
   3.752875552170867*^9, 3.7528755781379128`*^9}, {3.752876346925022*^9, 
   3.752876347373686*^9}, {3.752878072134039*^9, 3.7528780807461977`*^9}, {
   3.752977697818632*^9, 3.752977707682405*^9}, {3.753403674906399*^9, 
   3.753403680554628*^9}, 3.753481538371217*^9, {3.753500616682631*^9, 
   3.753500638057266*^9}, {3.753500678103979*^9, 3.753500705018426*^9}, 
   3.753502089130394*^9, 3.7535818195955477`*^9, {3.753581851435266*^9, 
   3.753581878940127*^9}, {3.753582036253097*^9, 3.7535820421544037`*^9}, {
   3.753582078923401*^9, 3.753582097139369*^9}, {3.75359819726332*^9, 
   3.75359823679392*^9}, 3.753655985188941*^9, {3.753749678040744*^9, 
   3.753749693721352*^9}, {3.7559126315137053`*^9, 3.755912642303982*^9}, {
   3.755918454858281*^9, 3.755918485699114*^9}, {3.75591963075141*^9, 
   3.755919645117401*^9}, {3.757112938452388*^9, 3.7571129494272127`*^9}, {
   3.757116450236703*^9, 3.7571164671315193`*^9}, {3.761286424939884*^9, 
   3.761286425257599*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"f90b4ec9-4e85-4567-a977-b3f9e6f13bc8"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"mskd2", ",", "mskv2"}], "}"}], "=", 
   RowBox[{"TakeList", "[", 
    RowBox[{"mixmasks2", ",", 
     RowBox[{"{", 
      RowBox[{"TrainPack", ",", "ValPack"}], "}"}]}], "]"}]}], ";"}]], "Input",\

 CellChangeTimes->{{3.753588164464229*^9, 3.753588188937552*^9}, {
   3.753598223018915*^9, 3.7535982344118223`*^9}, 3.753655988311861*^9, {
   3.753749680105056*^9, 3.753749702568891*^9}, {3.755912633203392*^9, 
   3.755912644567254*^9}, {3.755918465170205*^9, 3.755918486901071*^9}, {
   3.75591963389404*^9, 3.7559196472109528`*^9}, {3.7571129405189533`*^9, 
   3.757112950451428*^9}, {3.757116450881398*^9, 3.757116468508793*^9}, 
   3.7571209885212727`*^9, {3.761286429036274*^9, 3.761286429418927*^9}},
 CellLabel->"In[31]:=",ExpressionUUID->"f41a683b-40bf-4d66-af32-637df5b081aa"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
   RowBox[{"prepare", " ", "for", " ", "ForkNet"}], "..."}], " ", 
  "*)"}]], "Input",
 CellChangeTimes->{{3.760389283501782*^9, 3.7603892948762407`*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"5f00e1f0-0a78-4caa-b170-9e48a8770cde"],

Cell[BoxData[
 RowBox[{
  RowBox[{"labels1d", "=", 
   RowBox[{"ArrayReshape", "[", 
    RowBox[{"mskd1", ",", 
     RowBox[{"{", 
      RowBox[{"TrainPack", ",", "1", ",", "b", ",", "c"}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.75358215361521*^9, 3.753582174626883*^9}, 
   3.753598283468207*^9, {3.753656001986998*^9, 3.753656008913753*^9}, {
   3.7537497318318853`*^9, 3.7537497432112923`*^9}, {3.757112958213756*^9, 
   3.757112967171386*^9}, {3.7571164792664843`*^9, 3.757116488539526*^9}, 
   3.760323569009577*^9, {3.760323679435865*^9, 3.760323681224843*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"7e8d7991-7e4f-4bca-b882-344f0eab7721"],

Cell[BoxData[
 RowBox[{
  RowBox[{"labels2d", "=", 
   RowBox[{"ArrayReshape", "[", 
    RowBox[{"mskd2", ",", 
     RowBox[{"{", 
      RowBox[{"TrainPack", ",", "1", ",", "b", ",", "c"}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7535882220990562`*^9, 3.753588234353044*^9}, 
   3.753598286157675*^9, {3.753656016884239*^9, 3.753656018611842*^9}, {
   3.753749735025722*^9, 3.753749745895295*^9}, {3.7571129592061234`*^9, 
   3.757112967942572*^9}, {3.757116480385404*^9, 3.757116489405178*^9}, 
   3.760323570742104*^9, {3.760323683914764*^9, 3.760323684057193*^9}},
 CellLabel->"In[34]:=",ExpressionUUID->"e1213eae-82e3-4d84-92e5-47e92c753f13"],

Cell[BoxData[
 RowBox[{
  RowBox[{"labels1v", "=", 
   RowBox[{"ArrayReshape", "[", 
    RowBox[{"mskv1", ",", 
     RowBox[{"{", 
      RowBox[{"ValPack", ",", "1", ",", "b", ",", "c"}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.753582176395887*^9, 3.75358219004471*^9}, {
   3.753598294943326*^9, 3.753598295531052*^9}, {3.7535994393319407`*^9, 
   3.753599444193432*^9}, {3.7536560421983137`*^9, 3.7536560458908453`*^9}, {
   3.75374975583186*^9, 3.753749769385207*^9}, {3.757112961879262*^9, 
   3.7571129702945557`*^9}, {3.757116482711557*^9, 3.7571164923365*^9}, 
   3.7603235721408043`*^9, {3.7603236861758127`*^9, 3.760323686282442*^9}},
 CellLabel->"In[35]:=",ExpressionUUID->"225623e1-9a79-4f0b-ab39-6df3dec00873"],

Cell[BoxData[
 RowBox[{
  RowBox[{"labels2v", "=", 
   RowBox[{"ArrayReshape", "[", 
    RowBox[{"mskv2", ",", 
     RowBox[{"{", 
      RowBox[{"ValPack", ",", "1", ",", "b", ",", "c"}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.753588260210958*^9, 3.7535882736725187`*^9}, {
   3.753598300124937*^9, 3.753598300476048*^9}, 3.753656056133506*^9, {
   3.753749757483756*^9, 3.7537497719373817`*^9}, {3.757112962709503*^9, 
   3.7571129711395483`*^9}, {3.757116483518127*^9, 3.7571164943655863`*^9}, 
   3.7603235736915903`*^9, {3.7603236896340322`*^9, 3.760323689721409*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"e08c641e-8f5f-4798-9545-d7ceaa3a48f1"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{"load", " ", "ForkNet", " ", "architecture"}], " ", "*)"}]], "Input",\

 CellChangeTimes->{{3.749160460330285*^9, 3.749160463981484*^9}, {
   3.7537540070737457`*^9, 3.753754030573264*^9}, 3.753754070646834*^9, {
   3.760389369746538*^9, 3.760389398701849*^9}},
 CellLabel->"In[37]:=",ExpressionUUID->"57ddec21-50b7-42f0-a67e-7e31f116e1c6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"NotebookEvaluate", "[", "NetworkArch", "]"}], ";", "  ", 
  "ForkNET"}]], "Input",
 CellChangeTimes->{{3.756592081882153*^9, 3.756592083438553*^9}, {
   3.756593274266226*^9, 3.756593274870644*^9}, {3.756593375098868*^9, 
   3.756593404057249*^9}, {3.756593551963952*^9, 3.756593569543461*^9}, 
   3.7570433754330797`*^9, {3.7579800249668493`*^9, 3.757980026117722*^9}, {
   3.759124450802758*^9, 3.759124474239852*^9}, 3.76032200512215*^9, 
   3.760326748380355*^9, {3.760389404543086*^9, 3.760389416653879*^9}, {
   3.76128644476398*^9, 3.7612864489894342`*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"07c5e4ae-a7f4-4fd6-90cb-81e4b7bd83c7"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.0149], {
                   GrayLevel[0.6], 
                   Thickness[0.03], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of outputs\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["2", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["39", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.0149], {
                   GrayLevel[0.6], 
                   Thickness[0.03], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    PaneBox[
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], {
                    
                    LineBox[{{-24., 1.4695761589768238`*^-15}, {-23., 
                    1.6713373488896576`*^-11}}], 
                    LineBox[CompressedData["
1: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
f+YDNx7lqaIo/B+EjAa4
                    "]], 
                    LineBox[CompressedData["
1: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
5D1btsBp83dViQLyF2uLbzQ=
                    "]], 
                    
                    LineBox[{{-23., 1.6713373488896576`*^-11}, {-22., 
                    2.2795558074663076`*^-11}}], 
                    LineBox[CompressedData["
1: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
phXs94v9/4cL/Mme1/8MseE7
                    "]], 
                    LineBox[CompressedData["
1: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
AX66wP8DaCZk7Q==
                    "]], 
                    
                    LineBox[{{-22., 
                    2.2795558074663076`*^-11}, {-21., \
-3.7344840312411764`*^-11}}], 
                    LineBox[CompressedData["
1:eJxN1X1ME3ccx/FShU5Bg7qAD4hBWyhtKXftzcl0IIguMidTI0GIops8CMyO
h4A6FYIRfIigIEslKlnonJEIVYkRO70PpoK6+gBOoePB4FAUlKEF5EkZ/d0f
/L655vJOmt+97nfX1OsH3fpYsUgk+mn8Yz8L8wW6q5vL6/PMNz5m7Ol6auPA
mQJj+jor+IQzIrf5LzmE5wVFlKSC/zqtMKfhKYfIGdtNjb73+D2D/syH2xzS
zp0t+0fXwC/0s3oevcJh7PSLvXPCmvjFM/LX5pdyWPMmd8f5sjb+smEtLzrC
QR1WU7Xi5nO+pHNuyvNUDvqw5MDoxJd8t/X9j9ooDtszzfVzI7p4ry7vRIdV
HM5M1Zb3Zb/ls6qsG3JYDq8ijlX+sa6XnxLg7HXVg0O28UZGcds7vjrTVH9a
wmFWoaJ8RbyNL/q5K3bxey0MI4/XXO7u4/WL9K05LVowb6uj25MGePNx85Kc
Wi1McS2Njzo/8POu6TI5oxYhCUtrsmOG+Kaplz5uidSi1zG2rLj/E99jDlxf
EKpFeFolkzdbBKfBo0NxjBbtr7funXxFBA+D3vZinhYVL2urQsIcoLm7fbmL
RIurO9qtwW0O+Ca+95n1nQaDqcZuB50Ym/cvbVjbokG6mOvKGRUjdfoq96Ra
DVSzk5+Ycych1921Um3UwLMq8mLdtMkI7NiU9t0GDbIdlfHFi5xgeHFhbv5y
Db4MvrOvMM8JrjWfpkb4abDPuk5ueeaEAxkbQ3+fo0H4g7q4EJUEQ46Vtb84
alCxQBHQnyxBus650NrL4tT9XaUdv0kwcDnx3M1mFjObrpxy/UuCfY8sk5S1
LNyDmn12v5Jgyh32gqeRRbn4v9WewxLEkWGh2WAdGxuTYNgQPn6wGJU0kM7/
d8n4weLE4YekF5Jh0dNYT/rqVufxg8UsWxPpsNK+1aV9DMTNHaTbWu3D4HpB
P+lUj7oUjzoGS2c4j7+3n8Ep2ugYbWRwMEZGWvAw6GgtIC14GAwEV5IWPAyC
k+6RXkQ8DG5taicteBjsmdZH+mTg66LA1/7YkSt2sPefJvv4o8DsQposl++P
N3UzSTuTBfyRdfxz0vct9lFD0ywhbb+71aVqGC4I6823306KGuySUXK9laH2
UaPxgHD9pBq35Bo3NU4e6yZdTDx+2LlR8AoeP8Q0PyHdQTx+SFxwl7QL8fgh
38skmvCowMoPiSY8KujMu0UTHhVKonZSHhWMXbGkk4lHhYvpW6n9UeLXwc2U
R4nEjC2URwl5zzbKo0R9TALlUUAfcYTyKDB/4CRp8rhTFDg9qZT0KuJRwC3r
POVRIC/hEuki4vGFja+mPL6IOlhDeXxx7dodyuOLmVEPSROORQ59/HPSNuKR
44G1k/LI8bjsDWnCCZXDcLuXel5yBAfR748PKlw/UB4fvAoYojw+6Lk+LJp4
f3xwq2iE2h9v6NNHqP3xxopvRyiPNwLcRqjn5Y3MJ8PU/nhj5NAw5ZGhjhmm
PDK0WGiPDF9tHqI8MjxrHyStJSODJUroOaZdH21OMtyuF+5vf6TBZVmrFPrv
hd5GFpBiWeMAaTy+OLTthBRVsUKfvXS0MUgnhWi0n/q9SrGwROi/7V/XSOG+
XGil5fB0x9lStL8V9lf4/5Iiq0zo/wG/cBsZ
                    "]], 
                    LineBox[CompressedData["
1:eJxN1X9ME2ccx/FSpKci0mE0MmsWawullNJrz80p406U+WNOmHNRwClKFAQV
UXFARIbiVFwIW/HHFrRzsiWK26oOnTrnB0X8xRSVVY2126qiiAW0BQEV1j7P
/rhvrmleyfXp+567pmMWZ89eIpVIJCu8L987nXFoPXG3+vqWutO/7Ftju+nm
cPFQVXX96595/bSH5+XNHC7oJtn/LQZf4J5z9ZiNg2u925w49TL/9f6z7efP
c7gRJGlxbLnB583Ta2OPclhXYrpSseI2Hxmyu/AtC4fFyoqOS00Ovrqxv2XZ
Ng5X3OW6Mw4n321ekj16NYfBmSuld8zN/LD5l4ImJHnXX+PMP7LtCV+0Mycj
Jp6DvQwHLh9y8Xn/lG5oNXBofEdRmJjWwfe9OzxxqoKDIvCHmm9bn/HB++X3
EhgOibUFfZOz3Xz1qEJ1wHMTVibvmTuzzcPb9idHpNtNWGcbUns0o4svnXjg
cW69CRnjLk0ocLzgG5wZaazVhLjPbtRZEnp42y7tjJ4kE8yu8gf3rX180Chm
4814E6Z3s8HxT/t5T9IY/ULWhOSQXNZTLhHK5uTPqlSYkH7C3t6s8RNsg4Pv
lzImzHx27WzvaT/h6npnq/a5EczJWQejE6VC/kF3xnq7EZXDkn7c/LdUaDLH
JRfVGzGwr+3Yqyx/wTH+2hmT1YiZ+XJ7Rae/kLX3vdGW2V73zz0cpJAJS5sW
pAwQjHB92TDfUiwT7Ju2VjzVGRH8jco/9q5MaDx08uLcUCOOjE2tatEwQkxC
54v4ACOadEXC95mMoM4arzzewWLdr8W30r9jhFJJydTquyx2n0xfNuEyIywL
vp2urGcRw7NdoY8ZoW4Xt0lhZbEwzlEo62WEpWRYSG1rvM/RQKG3KsF7sNj4
YS5x2f3x3oPFJCO1kgyLiSX0/GOpgd6DRc7kVcQzLJ7pFo8BzuwsYsc93xhQ
PmgJ8WrFhRzFBQMK5J8Sy1KsASlWA/aVfExMewyQVkaJegxQblaKegzYKg8l
Hkt6DGBj3xD1GPDm0EDiitgWc2xLNKZ9LiP+/ZRvonGiwp+YLFcWjeUfSIkD
yQLRSKui/rPBN3pktA4m9l3ddIseeblBxKN9l5OjR09BMHH8FN/o0fxSTpxV
O2J57Qg9+G7at4P0REG2KkTUE4WJadQPSE8U7Nfp+UNITxSenpKLenSo7BD3
6PB6zCBRjw5/ZDOiHh3sdwKIl5MeHT5JHSDan0hE+fuLeiKRdtZP1BOJrj0S
UU8kHu3o9w7zf48W146/IqY9Woz86yUxud05WvQ86iV+n/Rosbajh5j2aPFF
WzexmfREgHW+IKY9EVh7pYuY9kQg8WAnMe2JwLkNHmKS06BBzaYOYjfp0aAt
s13Uo4FrZxsxyZmigZWhpvdLg7dPu4jp/oSj6LhL1BOOsi6XqCccqQX08/T5
CUdXXLtof8JQ8/K5aH/C0O7nEfWEIayGmt6vMKQM7xTtTxi2KztFPWr8ZveI
etRwTvaIetQYNM8t6lFDH0q/30RGjVlb6P6Ensp77ZapEXub9m+YVzUk5p4K
jZPo9S0iC6gwoK6VGDd/6ln0lQp3Fjwh3nt4+y0+W4WPQlqI6e9VhUzHI+Im
3+lGFdTnmokjG7YNDRipwkY8JKb/XyoU2x4Q/wcxpDkm
                    "]], 
                    
                    LineBox[{{-21., -3.7344840312411764`*^-11}, {-20., 
                    3.408912075550648*^-10}}], 
                    LineBox[CompressedData["
1:eJxN1H9M1HUcx/HT210qB0LBceGlAzXzfn6/9yXCIZQOiB9TMAhBrCX+WNg5
PZqtoq2tmtulUcIBbW53M/BXCTuEjgjPz8sZsULR6MA5ol+SDu2EAzoyj7vu
3t9/eO/z3XeP7bvvnp/Pd/smVx18ae9iiUSSH74id3FS4Z+8/6HswFzmuYYL
fw/NCPD3bm28NvAVi4v9Y2X0HQHFFUHPy3Y3e+7w0ab2EQGe2P6607Z+tuJK
R0l3nwC0JazvPHmDuR+WlK3rFLBdXpb0tXeYrXyyxh60CzDUr1lR0T7KspIV
ukyrgJazaLzu+52pH08J/WkRcD3ZdepK7jj75n5n4lS5gBNdNe4lI3dZS7zh
30U5AgT1lrxPvrjHFHwzLnEC9v2Y9GbJHi+bfmHy0NNqAc2/ee1t0VOsNDtt
6YbHBOTNv1g6tNvHUjPMVr/PhOxLJ241d02z+rXHfa/+YsKxlAlDMDTDDkhP
bar53oRkDVcqy/2H9XnOvMM5TVg8fCi/7YifVUR5d3RsCXu7qrjb84jJYsqr
V2004XCm5DtXV4A9Ksko9K03wZG27EHlu/Nsw1iTZF2iCbWb0wZPrw0ydm6/
FVITFLs+2tPsCrJjPa6/3JM8iupnnXp9iLUqahNWjfLIHTnSWW0NMWlLt2q8
j4dPl2EuHAixL98zTyqcPIqb4kaHpkNsHw2PArY88uHwX2tRePFoGH6CXHc7
Pbx4yBuU5BQaHifnEsmu16LCi0eVVEUucMzmO2Y5FLrE538diwyHnbHx5Bp1
v0Xdz6ExLpYsr3TKKp0c/D3LyGIPh8DUnVB4mNjDIen1W2Sxh4N80yB5NfVw
QG0fWezhsFnFyLasiYasCSM+U/aSL/ZGxojzb/WQ6XV1RtjSvyVH0QuMyNvp
Jl+7GhkDjIGfyJHd5TsM2HZe7Hkqsh2LAVNFt8k52ZExYMndB+Q3LivNl5UG
fG4JkBupR4+hORntV+zRw+aMIY9Tjx7xu8XzVFCPHtuWryaLPTp0SAvIYo8O
3q2lZLFHB/+9HWSxR4cfbr5CNlOPDnsTRIvno8VAS/mCHi0CHxQv6NHCfyF7
QY8WF4VnyalCZLQolKWQk3rfnp+Ra8Fs0eT3y1sVG8c0MNtnaf9VdMAaVFTf
IOPntoe7jmuQ83E72dFx9ObzBzVIXfTpgu+vwZpBC9kTedykgdJXRtZetcbI
VBos3Z9FFv8/GgTSnyH/D8/+UHY=
                    "]], 
                    LineBox[CompressedData["
1:eJxN1HtMU1ccB3BAwE3JFscCzKEbYjD2xX0QRubgGCNZkLm6BTYXsuF0ghZY
LT4qbhmPsQyUKSJ184GdAUOc1baubEMG+eIoZFqxi9U9RNdIhSBjRECKMtq1
v/7Tb87NzSf33pPvOSe5CZvVb28NCwkJyfJd/nsgKZgeH/08osSdbrG6Ljkm
RSTOXncW6M+x9D/Ovvv8kIh677/VfFEnO/GK8lbXLRGS0S9eSt/ex64NOlId
VhHab42FWyrt7MbAq2U534uoQ+jI4u6bzLissonpRdhz26OtO2+z/LbWZl2t
b35udNJkczJX44UD75SKcKsNF2fiXCy9W5db9Z6ILaqXe9tPDbOiry9V784U
cfniho+9RQ+Y3CqkxfIi9s7k9s4pxljVOo+6MF5EzSqu3zI8zlQrlsgK5ouY
7hxf81z2QzaUd6g4ekLAzQHznqSmCTY9nMOrBwTk7/sgLPbBJDt2tWRfWa8A
3dFH9wf5R8we+dfrgknAHl6b8NWuaWbb2HNXs14AdKmGePssK+tNWD22SoCr
suOzaPN/LMV6fvDKSgFn+hVjDdo5Npuz7dcFsQLCP613H0/0MNvutx4a5gmY
rXU2Sds87LsV2/PM4zwaZpY618q8rFFlnB93m0dPX3bXUI2X7c9YPu20+p67
C9IWXfWyuua+pCgTj7kvd7zZM+FlBRQeYWsS/Ae3+kmL0jd4KJNeIB8cTPMN
HvfMi8jLKDzaXQvIP2xa6Bs8HF3h5HX6qSz9FAdVhcfrC7t7xx8Olt+myKXx
fZr4Pg77Nf+QI/NMEXkmDiP598mBPhzSljrIgT4csuXXyYE+HKQNV8iJ1IfD
n2/0kgN9OCjfv0xuzBg5kjGSjMZfusg/d/iTjObyDjJNdzAZFYd/Ii+kCZKx
8nEb+ZrNHwVUoUayf3VZegWOuQ3kJf7laBTY9fQ5cuZafxR4knqWXNQdU9wd
o0BSRStZR33k8LjOBPWRo2prC9lFfeS4ENpMjqI+clS3nw7qI0P4U6eC+shQ
+ePJoD4ybJh3IqiPDJrRb8jF1EeGe+qjQfsjxen6I0F9pLCsrw/qI0VMa11Q
HylsJ2vIKaI/UtgV1eTFHXvnJiOl+NtYTi7f2BL12h0JLKWfkDfTBkug1GrJ
uHH+8YeHJTB07iTrzQd+Z2oJ+jN3BJ2/7/tnS8gO/+uCBJteVJGlttpnIuIk
sG8rJAf+PxKEz3xE/h9lDpC+
                    "]], 
                    
                    LineBox[{{-20., 3.408912075550648*^-10}, {-19., 
                    2.4557520362328253`*^-11}}], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGBQBWIQDQHGBxYWmV4NZtht2xWVum7eZ6MDpYbW5osPrdg/
TXuNqs1TowNv7HjCbh3etV+p+ErqjStGBxQqZ4ifnXx0v67hvbziQ0YHYm+2
TvY4dm7/rtSTDrzrjA6IKaSfX19zZf9xgWm3l043OnD02g6ZTrFb+0ONXOxt
640OxHPckYiQeLA/5dTl7MspRgcY0o3aJ6U+3v/5hktihofRAdf2+JufPz3b
/+rM/ZRP5kYHQmqPitvffLFf2en85X1qRgdMz5/yC2l7tX+2hfC6syJGB57X
5NcZ/3q9P3DD6s9yTEYHMto2L7tj8na/28oZSza9Mzyw6/W04/5m7/bXKN86
0HHL8MC9NZIPe/692/9RrsBj4VHDAxdOWn+e3Pt+/7LZUdZ/1hsemOr092/K
4/f708DA8EDSvFBgOH3Y/2uJPxAZHrAVMgDz+x5bAJHhgaDXfGC+EhgYHnAO
fvL////3+7clcAOR4YHAWZvBfK/5XzznfzE4cGV1N5h/7y4IGBw41Z4D5hfJ
HC+UOW5wwFgvDMxni97AGr3B4AD/fA8wf9ZMEDA4EHfLGczvjd3zr7LZ4EBP
LYTvoBPENi/P4ACXGoS/kRVkgMGBa5edwPwHL6/92eBhcOBdG4R/4cbR1/PN
DQ6E2EP4dZfUay+pGxzg+OsI5r8CKZcEmncAwhd75tLOxGNwIKoDwoekH4MD
30MhfAA/vE12
                    "]], 
                    LineBox[CompressedData["
1:eJwl0l1Ik1EYB/AxULBWgcW0FKlAd6HRec+aE5ycQSYzFqbtIhplH1sZg21Z
UEZmJM2sFFNI54WbOTFKtlXgRVk8KHOEbPixrbVSVrPhB26yedOYrnfHP//D
4QcP5+LhHLmqq1NzORxOIXvS906EMNgo8p7jfK4w16utA3EMHkVr6dDEG7JO
RgslfzGcvLGlCEx+ImGzR+33YNDnjfBdPQ7S/nhRe3sCg5l3qFs25SaBpW/S
PVYMxkmN2/bAQ3zOVz+HezG8dOjy2vkB8qj4FKlowVBg4OWezw0S7z6vZl6F
YXpaaOhWh4jvTtWVBhmG2Y/H/PFYmCizf6tiYgyWs8/55McykZfPzH8twuC+
13lGYVglb6P7ra4DGOQl4mZhYo3oj4/GC7gYDmueDP86sU5eJ/osHyIMVIma
pmpKI0RaG4CnAQYcz7KDL7YjRCbUywYdDPRqamM9HVEybr5QnrQxAN9FW6pQ
lFynYUAjKWP3tEESlhq2DLjkAurOUBlbBtyQQ32Uhp3vy6Ieu7ybLQPykX+p
VCpKTps2q02bCJJLf6gXF9JBsLzipm7Md97KdyLYO/aFOlNpz1DaEWirbdT9
xnQQ7LIMUXdcHN9uakXAvDNSS0vqMge0CCSVXdTvM9IPIBDo2qiDK76kXYZg
o7iFesbvWDOJEfTfv0v9cE7QPCdAUKTUU6+mxw8i6HLdpOaHK9u4PAQLs9eo
d/4PgqyGS9T/AQH5PT4=
                    "]], 
                    
                    LineBox[{{-19., 
                    2.4557520362328253`*^-11}, {-18., \
-1.9757624505818456`*^-9}}], 
                    
                    LineBox[{{-18., -1.9757624505818456`*^-9}, {-17., 
                    2.136754524475566*^-10}}], 
                    
                    LineBox[{{-17., 
                    2.136754524475566*^-10}, {-16., -0.9999999986127354}}], 
                    
                    LineBox[{{-17., 2.136754524475566*^-10}, {-16., 
                    0.9999999988242517}}], 
                    
                    LineBox[{{-16., -0.9999999986127354}, {-15., \
-0.9999999987907691}}], 
                    
                    LineBox[{{-15., -0.9999999987907691}, {-14., \
-0.9999999975340748}}], 
                    
                    LineBox[{{-14., -0.9999999975340748}, {-13., \
-1.9999999968600255`}}], 
                    
                    LineBox[{{-13., -1.9999999968600255`}, {-12., \
-2.000000006643858}}], 
                    
                    LineBox[{{-12., -2.000000006643858}, {-11., \
-2.00000000688675}}], 
                    
                    LineBox[{{-11., -2.00000000688675}, {-10., \
-3.000000007119922}}], 
                    
                    LineBox[{{-10., -3.000000007119922}, {-9., \
-3.000000009634561}}], 
                    
                    LineBox[{{-9., -3.000000009634561}, {-8., \
-3.000000010138933}}], 
                    
                    LineBox[{{-8., -3.000000010138933}, {-7., \
-4.000000009710163}}], 
                    
                    LineBox[{{-7., -4.000000009710163}, {-6., \
-4.000000010061058}}], 
                    
                    LineBox[{{-6., -4.000000010061058}, {-5., \
-4.000000010854649}}], 
                    
                    LineBox[{{-5., -4.000000010854649}, {-4., \
-4.604697076064156}}], 
                    
                    LineBox[{{-4., -4.604697076064156}, \
{-3.0000000000000004`, -4.604697076009302}}], 
                    
                    LineBox[{{-3.0000000000000004`, -4.604697076009302}, \
{-2.0000000000000004`, -4.604697076024024}}], 
                    
                    LineBox[{{-2.0000000000000004`, -4.604697076024024}, \
{-1.0000000000000002`, -4.604697076020727}}], 
                    
                    LineBox[{{-1.0000000000000002`, -4.604697076020727}, \
{-2.8195637676008876`*^-16, -4.604697076028742}}], 
                    
                    LineBox[{{-16., 0.9999999988242517}, {-15., 
                    0.9999999977129059}}], 
                    
                    LineBox[{{-15., 0.9999999977129059}, {-14., 
                    0.9999999986775956}}], 
                    
                    LineBox[{{-14., 0.9999999986775956}, {-13., 
                    1.9999999977439993`}}], 
                    
                    LineBox[{{-13., 1.9999999977439993`}, {-12., 
                    1.9999999989236137`}}], 
                    
                    LineBox[{{-12., 1.9999999989236137`}, {-11., 
                    1.9999999994340676`}}], 
                    
                    LineBox[{{-11., 1.9999999994340676`}, {-10., 
                    2.999999999209479}}], 
                    
                    LineBox[{{-10., 2.999999999209479}, {-9., 
                    2.9999999998220237`}}], 
                    
                    LineBox[{{-9., 2.9999999998220237`}, {-8., 
                    3.000000000061164}}], 
                    
                    LineBox[{{-8., 3.000000000061164}, {-7., 
                    4.0000000000187015`}}], 
                    
                    LineBox[{{-7., 4.0000000000187015`}, {-6., 
                    4.000000000250282}}], 
                    
                    LineBox[{{-6., 4.000000000250282}, {-5., 
                    4.000000000760963}}], 
                    
                    LineBox[{{-5., 4.000000000760963}, {-3.9999999999999996`, 
                    4.600341767462567}}], 
                    
                    LineBox[{{-3.9999999999999996`, 
                    4.600341767462567}, {-2.9999999999999996`, 
                    4.600341767572786}}], 
                    
                    LineBox[{{-2.9999999999999996`, 
                    4.600341767572786}, {-1.9999999999999998`, 
                    4.600341767590464}}], 
                    
                    LineBox[{{-1.9999999999999998`, 
                    4.600341767590464}, {-0.9999999999999997, 
                    4.600341767613145}}], 
                    
                    LineBox[{{-0.9999999999999997, 4.600341767613145}, {
                    2.816896910347363*^-16, 4.60034176761593}}]}}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-23.4, 
                    1.0028611923801536`*^-11}, {-0.25, 0}, 
                    Offset[8], {1., 1.67119039127376*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"256\"", 
                    "\"256\""}, "RowWithSeparators"], LabelStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"1", "256", "256"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-17.54430405944036, -4.999179305492513}, {-0.25,
                     0}, 
                    Offset[8], {0.2886081188807239, -0.001641401918586638}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"8\"", "\"128\"", 
                    "\"128\""}, "RowWithSeparators"], LabelStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"8", "128", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-17.54433036980758, 
                    4.999258169656988}, {-0.25, 0}, 
                    Offset[8], {0.28866073961516037`, 
                    0.0014836694619662083`}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"8\"", "\"128\"", 
                    "\"128\""}, "RowWithSeparators"], LabelStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"8", "128", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-22.4, 
                    2.0362684240356475`*^-11}, {-0.25, 0}, 
                    Offset[8], {1., 6.0821845857665005`*^-12}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"8\"", "\"128\"", 
                    "\"128\""}, "RowWithSeparators"], LabelStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"8", "128", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-17.818420595097063`, -3.984847361208867}, \
{-0.25, 0}, 
                    Offset[8], {0.08596456033107103, -0.01165588223420766}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"16\"", "\"64\"", "\"64\""},
                     "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"16", "64", "64"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-17.81840498328792, 
                    3.984818239152402}, {-0.25, 0}, 
                    Offset[8], {0.08595255124711443, 0.011678280949905862`}], 
                    
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"16\"", "\"64\"", "\"64\""},
                     "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"16", "64", "64"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-21.4, -1.3288680957581827`*^-11}, {-0.25, 0}, 
                    Offset[8], {1., -6.014039838707485*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"16\"", "\"64\"", "\"64\""},
                     "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"16", "64", "64"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-17.939898881330436`, -2.951177428912601}, \
{-0.25, 0}, 
                    Offset[8], {0.1630420843894278, -0.0459506551770108}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"32\"", "\"32\"", "\"32\""},
                     "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"32", "32", "32"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-17.939340575750872`, 
                    2.950405753783765}, {-0.25, 0}, 
                    Offset[8], {0.16251662031454117`, 0.04667694053361693}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"32\"", "\"32\"", "\"32\""},
                     "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"32", "32", "32"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-20.4, 
                    1.8959678840807415`*^-10}, {-0.25, 0}, 
                    Offset[8], {1., 3.7823604786747654`*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"32\"", "\"32\"", "\"32\""},
                     "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"32", "32", "32"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-18.089247365248287`, -1.8809754002038424`}, \
{-0.25, 0}, 
                    Offset[8], {0.1491814741550428, -0.07720514564666847}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"16\"", "\"16\""},
                     "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"64", "16", "16"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-18.088804870754302`, 
                    1.8804619518293926`}, {-0.25, 0}, 
                    Offset[8], {0.14889445069948692`, 0.07753819485852409}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"16\"", "\"16\""},
                     "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"64", "16", "16"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-19.4, 
                    1.5109099523942288`*^-10}, {-0.25, 0}, 
                    Offset[8], {1., -3.1633368719273654`*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"16\"", "\"16\""},
                     "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"64", "16", "16"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-17.49927680686261, -0.9982540592223907}, \
{-0.25, 0}, 
                    Offset[8], {0.3763313915030011, -0.0034918829542759378`}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"8\"", "\"8\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "8", "8"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-17.499276806864923`, 
                    0.9982540584330956}, {-0.25, 0}, 
                    Offset[8], {0.37633139150762673`, 
                    0.0034918842775895076`}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"8\"", "\"8\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "8", "8"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-18.4, -1.175634462204176*^-9}, {-0.25, 0}, 
                    Offset[8], {1., -2.0003199709441738`*^-9}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"8\"", "\"8\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "8", "8"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-17.4, -6.620997087642043*^-10}, {-0.25, 0}, 
                    Offset[8], {1., 2.189437903029402*^-9}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"4\"", "\"4\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "4", "4"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-16.4, -0.599999999082171}, {-0.25, 0}, 
                    Offset[8], {1., -0.9999999988264108}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"8\"", "\"8\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "8", "8"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-16.4, 
                    0.5999999993800212}, {-0.25, 0}, 
                    Offset[8], {1., 0.9999999986105763}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"8\"", "\"8\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "8", "8"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-15.4, -0.9999999987195556}, {-0.25, 0}, 
                    Offset[8], {1., -1.7803369889435317`*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"8\"", "\"8\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "8", "8"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-14.4, -0.9999999980367524}, {-0.25, 0}, 
                    Offset[8], {1., 1.2566943041747436`*^-9}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"8\"", "\"8\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "8", "8"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-13.4, -1.599999997129645}, {-0.25, 0}, 
                    Offset[8], {1., -0.9999999993259507}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"16\"", "\"16\""},
                     "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"64", "16", "16"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-12.399999999999999`, -2.0000000027303253`}, \
{-0.25, 0}, 
                    Offset[8], {1., -9.783832410903415*^-9}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], LabelStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"128", "16", "16"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-11.4, -2.000000006789593}, {-0.25, 0}, 
                    Offset[8], {1., -2.4289192879223265`*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"16\"", "\"16\""},
                     "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"64", "16", "16"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-10.4, -2.600000007026653}, {-0.25, 0}, 
                    Offset[8], {1., -1.0000000002331721`}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"32\"", "\"32\"", "\"32\""},
                     "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"32", "32", "32"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-9.399999999999999, -3.0000000086287057`}, \
{-0.25, 0}, 
                    Offset[8], {1., -2.514639163564425*^-9}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"32\"", "\"32\""},
                     "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"64", "32", "32"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-8.4, -3.0000000099371844`}, {-0.25, 0}, 
                    Offset[8], {1., -5.043716555519495*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"32\"", "\"32\"", "\"32\""},
                     "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"32", "32", "32"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-7.4, -3.600000009881671}, {-0.25, 0}, 
                    Offset[8], {1., -0.9999999995712305}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"16\"", "\"64\"", "\"64\""},
                     "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"16", "64", "64"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-6.4, -4.0000000099207}, {-0.25, 0}, 
                    Offset[8], {1., -3.508944246277679*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"32\"", "\"64\"", "\"64\""},
                     "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"32", "64", "64"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-5.4, -4.000000010537212}, {-0.25, 0}, 
                    Offset[8], {1., -7.935909707157407*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"16\"", "\"64\"", "\"64\""},
                     "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"16", "64", "64"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-4.4, -4.362818249980353}, {-0.25, 0}, 
                    Offset[8], {1., -0.604697065209507}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"8\"", "\"128\"", 
                    "\"128\""}, "RowWithSeparators"], LabelStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"8", "128", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-3.4000000000000004`, -4.604697076031243}, \
{-0.25, 0}, 
                    Offset[8], {0.9999999999999996, 
                    5.4853899200679734`*^-11}], 
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"16\"", "\"128\"", 
                    "\"128\""}, "RowWithSeparators"], LabelStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"16", "128", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-2.4000000000000004`, -4.604697076018136}, \
{-0.25, 0}, 
                    Offset[8], {1., -1.4722445484949276`*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"8\"", "\"128\"", 
                    "\"128\""}, "RowWithSeparators"], LabelStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"8", "128", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-1.4000000000000004`, -4.604697076022046}, \
{-0.25, 0}, 
                    Offset[8], {1.0000000000000002`, 3.296918293926865*^-12}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"4\"", "\"256\"", 
                    "\"256\""}, "RowWithSeparators"], LabelStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"4", "256", "256"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-0.4000000000000003, -4.604697076025536}, \
{-0.25, 0}, 
                    Offset[8], {0.9999999999999999, -8.01492205937393*^-12}], 
                    
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"256\"", 
                    "\"256\""}, "RowWithSeparators"], LabelStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"1", "256", "256"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-15.4, 
                    0.9999999981574443}, {-0.25, 0}, 
                    Offset[8], {1., -1.11134579316996*^-9}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"8\"", "\"8\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "8", "8"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-14.4, 
                    0.9999999982917197}, {-0.25, 0}, 
                    Offset[8], {1., 9.646896614867728*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"8\"", "\"8\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "8", "8"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-13.4, 
                    1.599999998117438}, {-0.25, 0}, 
                    Offset[8], {1., 0.9999999990664037}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"16\"", "\"16\""},
                     "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"64", "16", "16"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-12.399999999999999`, 
                    1.9999999984517678`}, {-0.25, 0}, 
                    Offset[8], {1., 1.179614406154883*^-9}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], LabelStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"128", "16", "16"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-11.4, 
                    1.999999999229886}, {-0.25, 0}, 
                    Offset[8], {1., 5.10453901370056*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"16\"", "\"16\""},
                     "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"64", "16", "16"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-10.4, 
                    2.599999999299315}, {-0.25, 0}, 
                    Offset[8], {1., 0.9999999997754114}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"32\"", "\"32\"", "\"32\""},
                     "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"32", "32", "32"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-9.399999999999999, 
                    2.999999999577006}, {-0.25, 0}, 
                    Offset[8], {1., 6.125446816440672*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"32\"", "\"32\""},
                     "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"64", "32", "32"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-8.4, 
                    2.9999999999655076`}, {-0.25, 0}, 
                    Offset[8], {1., 2.391402631474193*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"32\"", "\"32\"", "\"32\""},
                     "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"32", "32", "32"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-7.4, 
                    3.6000000000356867`}, {-0.25, 0}, 
                    Offset[8], {1., 0.9999999999575375}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"16\"", "\"64\"", "\"64\""},
                     "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"16", "64", "64"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-6.4, 
                    4.00000000015765}, {-0.25, 0}, 
                    Offset[8], {1., 2.3158008843893185`*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"32\"", "\"64\"", "\"64\""},
                     "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"32", "64", "64"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-5.4, 
                    4.000000000556691}, {-0.25, 0}, 
                    Offset[8], {1., 5.106812750454992*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"16\"", "\"64\"", "\"64\""},
                     "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"16", "64", "64"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-4.3999999999999995`, 
                    4.360205060781925}, {-0.25, 0}, 
                    Offset[8], {1.0000000000000004`, 0.6003417667016038}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"8\"", "\"128\"", 
                    "\"128\""}, "RowWithSeparators"], LabelStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"8", "128", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-3.3999999999999995`, 
                    4.600341767528699}, {-0.25, 0}, 
                    Offset[8], {1., 1.1021938917110674`*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"16\"", "\"128\"", 
                    "\"128\""}, "RowWithSeparators"], LabelStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"16", "128", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-2.3999999999999995`, 
                    4.600341767583393}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999998, 
                    1.7678303265711293`*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"8\"", "\"128\"", 
                    "\"128\""}, "RowWithSeparators"], LabelStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"8", "128", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-1.3999999999999997`, 
                    4.600341767604073}, {-0.25, 0}, 
                    Offset[8], {1., 2.2680524125462398`*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"4\"", "\"256\"", 
                    "\"256\""}, "RowWithSeparators"], LabelStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"4", "256", "256"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-0.39999999999999974`, 
                    4.600341767614816}, {-0.25, 0}, 
                    Offset[8], {1., 2.7853275241795927`*^-12}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"256\"", 
                    "\"256\""}, "RowWithSeparators"], LabelStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"1", "256", "256"}, "\[Cross]"], "Tooltip"]& ]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-24., 1.4695761589768238`*^-15}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-23., 1.6713373488896576`*^-11}], 
                    Offset[{12, 12}, {-23., 1.6713373488896576`*^-11}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-23., 1.6713373488896576`*^-11}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"EncMod01\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["EncMod01", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-4., -4.604697076064156}], 
                    Offset[{10, 10}, {-4., -4.604697076064156}]]}, 
                    InsetBox[
                    FormBox["\"C\"", TraditionalForm], 
                    Offset[{0, -1}, {-4., -4.604697076064156}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Concat11\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"CatenateLayer", "[", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"8", ",", "128", ",", "128"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"8", ",", "128", ",", "128"}], "}"}]}], "}"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Concat11", Bold], 
                    Style[
                    HoldForm[
                    CatenateLayer[
                    "Inputs" -> {{8, 128, 128}, {8, 128, 128}}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    
                    Offset[{-10, -10}, {-3.9999999999999996`, 
                    4.600341767462567}], 
                    
                    Offset[{10, 10}, {-3.9999999999999996`, 
                    4.600341767462567}]]}, 
                    InsetBox[
                    FormBox["\"C\"", TraditionalForm], 
                    
                    Offset[{0, -1}, {-3.9999999999999996`, 
                    4.600341767462567}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Concat12\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"CatenateLayer", "[", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"8", ",", "128", ",", "128"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"8", ",", "128", ",", "128"}], "}"}]}], "}"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Concat12", Bold], 
                    Style[
                    HoldForm[
                    CatenateLayer[
                    "Inputs" -> {{8, 128, 128}, {8, 128, 128}}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-22., 2.2795558074663076`*^-11}], 
                    Offset[{12, 12}, {-22., 2.2795558074663076`*^-11}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-22., 2.2795558074663076`*^-11}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"EncMod02\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["EncMod02", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-7., -4.000000009710163}], 
                    Offset[{10, 10}, {-7., -4.000000009710163}]]}, 
                    InsetBox[
                    FormBox["\"C\"", TraditionalForm], 
                    Offset[{0, -1}, {-7., -4.000000009710163}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Concat21\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"CatenateLayer", "[", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"16", ",", "64", ",", "64"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"16", ",", "64", ",", "64"}], "}"}]}], "}"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Concat21", Bold], 
                    Style[
                    HoldForm[
                    CatenateLayer["Inputs" -> {{16, 64, 64}, {16, 64, 64}}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-7., 4.0000000000187015`}], 
                    Offset[{10, 10}, {-7., 4.0000000000187015`}]]}, 
                    InsetBox[
                    FormBox["\"C\"", TraditionalForm], 
                    Offset[{0, -1}, {-7., 4.0000000000187015`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Concat22\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"CatenateLayer", "[", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"16", ",", "64", ",", "64"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"16", ",", "64", ",", "64"}], "}"}]}], "}"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Concat22", Bold], 
                    Style[
                    HoldForm[
                    CatenateLayer["Inputs" -> {{16, 64, 64}, {16, 64, 64}}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-21., -3.7344840312411764`*^-11}], 
                    Offset[{12, 12}, {-21., -3.7344840312411764`*^-11}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-21., -3.7344840312411764`*^-11}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"EncMod03\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["EncMod03", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-10., -3.000000007119922}], 
                    Offset[{10, 10}, {-10., -3.000000007119922}]]}, 
                    InsetBox[
                    FormBox["\"C\"", TraditionalForm], 
                    Offset[{0, -1}, {-10., -3.000000007119922}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Concat31\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"CatenateLayer", "[", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"32", ",", "32", ",", "32"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"32", ",", "32", ",", "32"}], "}"}]}], "}"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Concat31", Bold], 
                    Style[
                    HoldForm[
                    CatenateLayer["Inputs" -> {{32, 32, 32}, {32, 32, 32}}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-10., 2.999999999209479}], 
                    Offset[{10, 10}, {-10., 2.999999999209479}]]}, 
                    InsetBox[
                    FormBox["\"C\"", TraditionalForm], 
                    Offset[{0, -1}, {-10., 2.999999999209479}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Concat32\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"CatenateLayer", "[", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"32", ",", "32", ",", "32"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"32", ",", "32", ",", "32"}], "}"}]}], "}"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Concat32", Bold], 
                    Style[
                    HoldForm[
                    CatenateLayer["Inputs" -> {{32, 32, 32}, {32, 32, 32}}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 10), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-20., 3.408912075550648*^-10}], 
                    Offset[{12, 12}, {-20., 3.408912075550648*^-10}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-20., 3.408912075550648*^-10}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"EncMod04\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["EncMod04", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 11), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-13., -1.9999999968600255`}], 
                    Offset[{10, 10}, {-13., -1.9999999968600255`}]]}, 
                    InsetBox[
                    FormBox["\"C\"", TraditionalForm], 
                    Offset[{0, -1}, {-13., -1.9999999968600255`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Concat41\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"CatenateLayer", "[", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"64", ",", "16", ",", "16"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"64", ",", "16", ",", "16"}], "}"}]}], "}"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Concat41", Bold], 
                    Style[
                    HoldForm[
                    CatenateLayer["Inputs" -> {{64, 16, 16}, {64, 16, 16}}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 12), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-13., 1.9999999977439993`}], 
                    Offset[{10, 10}, {-13., 1.9999999977439993`}]]}, 
                    InsetBox[
                    FormBox["\"C\"", TraditionalForm], 
                    Offset[{0, -1}, {-13., 1.9999999977439993`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Concat42\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"CatenateLayer", "[", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"64", ",", "16", ",", "16"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"64", ",", "16", ",", "16"}], "}"}]}], "}"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Concat42", Bold], 
                    Style[
                    HoldForm[
                    CatenateLayer["Inputs" -> {{64, 16, 16}, {64, 16, 16}}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 13), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-19., 2.4557520362328253`*^-11}], 
                    Offset[{12, 12}, {-19., 2.4557520362328253`*^-11}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-19., 2.4557520362328253`*^-11}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"EncMod05\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["EncMod05", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 14), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-16., -0.9999999986127354}], 
                    Offset[{10, 10}, {-16., -0.9999999986127354}]]}, 
                    InsetBox[
                    FormBox["\"C\"", TraditionalForm], 
                    Offset[{0, -1}, {-16., -0.9999999986127354}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Concat51\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"CatenateLayer", "[", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"128", ",", "8", ",", "8"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"128", ",", "8", ",", "8"}], "}"}]}], "}"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Concat51", Bold], 
                    Style[
                    HoldForm[
                    CatenateLayer["Inputs" -> {{128, 8, 8}, {128, 8, 8}}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 15), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-16., 0.9999999988242517}], 
                    Offset[{10, 10}, {-16., 0.9999999988242517}]]}, 
                    InsetBox[
                    FormBox["\"C\"", TraditionalForm], 
                    Offset[{0, -1}, {-16., 0.9999999988242517}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Concat52\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"CatenateLayer", "[", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"128", ",", "8", ",", "8"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"128", ",", "8", ",", "8"}], "}"}]}], "}"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Concat52", Bold], 
                    Style[
                    HoldForm[
                    CatenateLayer["Inputs" -> {{128, 8, 8}, {128, 8, 8}}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 16), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-18., -1.9757624505818456`*^-9}], 
                    Offset[{12, 12}, {-18., -1.9757624505818456`*^-9}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-18., -1.9757624505818456`*^-9}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"EncMod06\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["EncMod06", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 17), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-17., 2.136754524475566*^-10}], 
                    Offset[{12, 12}, {-17., 2.136754524475566*^-10}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-17., 2.136754524475566*^-10}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"DecMod6\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["DecMod6", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[4]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 18), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-15., -0.9999999987907691}], 
                    Offset[{12, 12}, {-15., -0.9999999987907691}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-15., -0.9999999987907691}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"ConvMod51\"", Bold, StripOnInput -> False]}, {
                    
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "3", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["ConvMod51", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[3]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 19), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-14., -0.9999999975340748}], 
                    Offset[{12, 12}, {-14., -0.9999999975340748}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-14., -0.9999999975340748}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"DecMod51\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["DecMod51", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[4]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 20), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-12., -2.000000006643858}], 
                    Offset[{12, 12}, {-12., -2.000000006643858}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-12., -2.000000006643858}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"ConvMod41\"", Bold, StripOnInput -> False]}, {
                    
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "3", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["ConvMod41", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[3]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 21), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-11., -2.00000000688675}], 
                    Offset[{12, 12}, {-11., -2.00000000688675}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-11., -2.00000000688675}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"DecMod41\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["DecMod41", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[4]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 22), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-9., -3.000000009634561}], 
                    Offset[{12, 12}, {-9., -3.000000009634561}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-9., -3.000000009634561}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"ConvMod31\"", Bold, StripOnInput -> False]}, {
                    
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "3", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["ConvMod31", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[3]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 23), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-8., -3.000000010138933}], 
                    Offset[{12, 12}, {-8., -3.000000010138933}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-8., -3.000000010138933}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"DecMod31\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["DecMod31", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[4]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 24), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-6., -4.000000010061058}], 
                    Offset[{12, 12}, {-6., -4.000000010061058}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-6., -4.000000010061058}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"ConvMod21\"", Bold, StripOnInput -> False]}, {
                    
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "3", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["ConvMod21", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[3]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 25), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-5., -4.000000010854649}], 
                    Offset[{12, 12}, {-5., -4.000000010854649}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-5., -4.000000010854649}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"DecMod21\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["DecMod21", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[4]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 26), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    
                    Offset[{-12, -12}, {-3.0000000000000004`, \
-4.604697076009302}], 
                    
                    Offset[{12, 
                    12}, {-3.0000000000000004`, -4.604697076009302}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[
                    0.4]], {-3.0000000000000004`, -4.604697076009302}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"ConvMod11\"", Bold, StripOnInput -> False]}, {
                    
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "3", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["ConvMod11", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[3]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 27), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    
                    Offset[{-12, -12}, {-2.0000000000000004`, \
-4.604697076024024}], 
                    
                    Offset[{12, 
                    12}, {-2.0000000000000004`, -4.604697076024024}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[
                    0.4]], {-2.0000000000000004`, -4.604697076024024}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"DecMod11\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["DecMod11", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[4]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 28), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    
                    Offset[{-12, -12}, {-1.0000000000000002`, \
-4.604697076020727}], 
                    
                    Offset[{12, 
                    12}, {-1.0000000000000002`, -4.604697076020727}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[
                    0.4]], {-1.0000000000000002`, -4.604697076020727}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"map1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["map1", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 29), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-2.8195637676008876`*^-16, -4.604697076028742}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Output1\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Output1", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 30), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-15., 0.9999999977129059}], 
                    Offset[{12, 12}, {-15., 0.9999999977129059}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-15., 0.9999999977129059}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"ConvMod52\"", Bold, StripOnInput -> False]}, {
                    
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "3", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["ConvMod52", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[3]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 31), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-14., 0.9999999986775956}], 
                    Offset[{12, 12}, {-14., 0.9999999986775956}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-14., 0.9999999986775956}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"DecMod52\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["DecMod52", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[4]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 32), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-12., 1.9999999989236137`}], 
                    Offset[{12, 12}, {-12., 1.9999999989236137`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-12., 1.9999999989236137`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"ConvMod42\"", Bold, StripOnInput -> False]}, {
                    
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "3", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["ConvMod42", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[3]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 33), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-11., 1.9999999994340676`}], 
                    Offset[{12, 12}, {-11., 1.9999999994340676`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-11., 1.9999999994340676`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"DecMod42\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["DecMod42", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[4]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 34), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-9., 2.9999999998220237`}], 
                    Offset[{12, 12}, {-9., 2.9999999998220237`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-9., 2.9999999998220237`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"ConvMod32\"", Bold, StripOnInput -> False]}, {
                    
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "3", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["ConvMod32", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[3]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 35), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-8., 3.000000000061164}], 
                    Offset[{12, 12}, {-8., 3.000000000061164}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-8., 3.000000000061164}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"DecMod32\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["DecMod32", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[4]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 36), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-6., 4.000000000250282}], 
                    Offset[{12, 12}, {-6., 4.000000000250282}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-6., 4.000000000250282}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"ConvMod22\"", Bold, StripOnInput -> False]}, {
                    
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "3", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["ConvMod22", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[3]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 37), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-5., 4.000000000760963}], 
                    Offset[{12, 12}, {-5., 4.000000000760963}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-5., 4.000000000760963}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"DecMod22\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["DecMod22", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[4]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 38), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    
                    Offset[{-12, -12}, {-2.9999999999999996`, 
                    4.600341767572786}], 
                    
                    Offset[{12, 12}, {-2.9999999999999996`, 
                    4.600341767572786}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-2.9999999999999996`, 
                    4.600341767572786}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"ConvMod12\"", Bold, StripOnInput -> False]}, {
                    
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "3", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["ConvMod12", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[3]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 39), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    
                    Offset[{-12, -12}, {-1.9999999999999998`, 
                    4.600341767590464}], 
                    
                    Offset[{12, 12}, {-1.9999999999999998`, 
                    4.600341767590464}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-1.9999999999999998`, 
                    4.600341767590464}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"DecMod12\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["DecMod12", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[4]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 40), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    
                    Offset[{-12, -12}, {-0.9999999999999997, 
                    4.600341767613145}], 
                    
                    Offset[{12, 12}, {-0.9999999999999997, 
                    4.600341767613145}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-0.9999999999999997, 
                    4.600341767613145}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"map2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["map2", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 41), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{2.816896910347363*^-16, 4.60034176761593}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Output2\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Output2", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 42), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    Part[CompressedData["
1:eJxTTMoPSmViYGDQAmIQDQEWB7i65vlYVt6ygfDND2xdGl2dmrDJFsIXOHBg
17WtptlCB/6DAf+BA5vY/u1PE3KAyJsd+CBxSTBRYCdUvcyBAxeXgfXB+A5B
YHOg6k0PvN55e/XF9iN7IXyVA/WLvwBpjgMwfuO1J0B72KHqTQ58e/+6mTX3
O9R8rQN/LDRADtkP47P8SAHx7SF84wMLi0yvBjPshqo3OPA91BEo/X4/jM+Z
EQfiQ9UbHTBZoZG4/4fCPgjf8ICyt0sCZ9xbqH69Az/ORiLp1znwQ3TtPwRf
48A/9ycgBtT9agfqFrxB4isdqOfyZkT4T+HA/7gYJL7EAYaba5DCS+SAQ/Uu
MJ8RzOc40HDyKjj8IXyGAw5c15D4H/Yf+A2RLz15L1w3cMseBnmIPMz9HKuO
/kP4V+cAh4MXkv81DjBzbEMKP7UDzDI3kfhKBxof/USKD4UDjFKg1MPhAHP/
AR8WBkT8ihw4IMQL5kPSC/uBhukc4PQC4f/f7/AUwv8L5gLD0ZMTIl8y54uj
zxYbh1AIHwDfqOjj
                    "], 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 24, 20, 20, 24, 20, 20, 24, 20, 20, 24, 20, 20, 
                    24, 20, 20, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 
                    24, 24, 8, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 8},
                     NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, ImageSize -> {896., 395.94531163023254`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{28., 28.}, {28., 18.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Scrollbars -> {True, False}, ImageSizeAction -> 
                    "Scrollable", ImageSize -> {800, Automatic}]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "EncMod01"], 
                    NeuralNetworks`NetPath["Nodes", "Concat11"], 
                    NeuralNetworks`NetPath["Nodes", "Concat12"], 
                    NeuralNetworks`NetPath["Nodes", "EncMod02"], 
                    NeuralNetworks`NetPath["Nodes", "Concat21"], 
                    NeuralNetworks`NetPath["Nodes", "Concat22"], 
                    NeuralNetworks`NetPath["Nodes", "EncMod03"], 
                    NeuralNetworks`NetPath["Nodes", "Concat31"], 
                    NeuralNetworks`NetPath["Nodes", "Concat32"], 
                    NeuralNetworks`NetPath["Nodes", "EncMod04"], 
                    NeuralNetworks`NetPath["Nodes", "Concat41"], 
                    NeuralNetworks`NetPath["Nodes", "Concat42"], 
                    NeuralNetworks`NetPath["Nodes", "EncMod05"], 
                    NeuralNetworks`NetPath["Nodes", "Concat51"], 
                    NeuralNetworks`NetPath["Nodes", "Concat52"], 
                    NeuralNetworks`NetPath["Nodes", "EncMod06"], 
                    NeuralNetworks`NetPath["Nodes", "DecMod6"], 
                    NeuralNetworks`NetPath["Nodes", "ConvMod51"], 
                    NeuralNetworks`NetPath["Nodes", "DecMod51"], 
                    NeuralNetworks`NetPath["Nodes", "ConvMod41"], 
                    NeuralNetworks`NetPath["Nodes", "DecMod41"], 
                    NeuralNetworks`NetPath["Nodes", "ConvMod31"], 
                    NeuralNetworks`NetPath["Nodes", "DecMod31"], 
                    NeuralNetworks`NetPath["Nodes", "ConvMod21"], 
                    NeuralNetworks`NetPath["Nodes", "DecMod21"], 
                    NeuralNetworks`NetPath["Nodes", "ConvMod11"], 
                    NeuralNetworks`NetPath["Nodes", "DecMod11"], 
                    NeuralNetworks`NetPath["Nodes", "map1"], 
                    NeuralNetworks`NetPath["Outputs", "Output1"], 
                    NeuralNetworks`NetPath["Nodes", "ConvMod52"], 
                    NeuralNetworks`NetPath["Nodes", "DecMod52"], 
                    NeuralNetworks`NetPath["Nodes", "ConvMod42"], 
                    NeuralNetworks`NetPath["Nodes", "DecMod42"], 
                    NeuralNetworks`NetPath["Nodes", "ConvMod32"], 
                    NeuralNetworks`NetPath["Nodes", "DecMod32"], 
                    NeuralNetworks`NetPath["Nodes", "ConvMod22"], 
                    NeuralNetworks`NetPath["Nodes", "DecMod22"], 
                    NeuralNetworks`NetPath["Nodes", "ConvMod12"], 
                    NeuralNetworks`NetPath["Nodes", "DecMod12"], 
                    NeuralNetworks`NetPath["Nodes", "map2"], 
                    NeuralNetworks`NetPath["Outputs", "Output2"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {256, 256}, "ColorSpace" -> "Grayscale", 
                    "ColorChannels" -> 1, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{1, 256, 256}, 
                    NeuralNetworks`RealT]]], 
                    Association[
                    "Output1" -> 
                    NeuralNetworks`TensorT[{1, 256, 256}, 
                    NeuralNetworks`RealT], "Output2" -> 
                    NeuralNetworks`TensorT[{1, 256, 256}, 
                    NeuralNetworks`RealT]], 
                    Association[
                    "EncMod01" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{8, 1, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 8, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {256, 256}, 
                    "$OutputSize" -> {256, 256}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 256, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{8, 256, 256}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT], 
                    "MovingMean" -> NeuralNetworks`TensorT[{8}, 
                    NeuralNetworks`RealT], "MovingVariance" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 8, 
                    "$SpatialDimensions" -> {256, 256}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{8, 256, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{8, 256, 256}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {8, 256, 256}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{8, 256, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{8, 256, 256}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 256, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{8, 256, 256}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 8, "$InputSize" -> {256, 256}, 
                    "$OutputSize" -> {128, 128}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{8, 256, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 256, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]]], "EncMod02" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{16, 8, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 16, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 8, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 128}, 
                    "$OutputSize" -> {128, 128}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{16, 128, 128}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
                    "MovingVariance" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`RealT]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 16, 
                    "$SpatialDimensions" -> {128, 128}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{16, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{16, 128, 128}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {16, 128, 128}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{16, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{16, 128, 128}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{16, 128, 128}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 16, "$InputSize" -> {128, 128}, 
                    "$OutputSize" -> {64, 64}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{16, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]]], "EncMod03" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{32, 16, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 32, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 16, 
                    "$GroupNumber" -> 1, "$InputSize" -> {64, 64}, 
                    "$OutputSize" -> {64, 64}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 64, 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{32}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
                    "MovingVariance" -> NeuralNetworks`TensorT[{32}, 
                    NeuralNetworks`RealT]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 32, 
                    "$SpatialDimensions" -> {64, 64}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{32, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 64, 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {32, 64, 64}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{32, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 64, 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 64, 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 32, "$InputSize" -> {64, 64}, 
                    "$OutputSize" -> {32, 32}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{32, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]]], "EncMod04" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{64, 32, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 32, 
                    "$GroupNumber" -> 1, "$InputSize" -> {32, 32}, 
                    "$OutputSize" -> {32, 32}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 32, 32}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {32, 32}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 32, 32}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 32, 32}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 32, 32}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 32, 32}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 64, "$InputSize" -> {32, 32}, 
                    "$OutputSize" -> {16, 16}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]]], "EncMod05" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{128, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 64, 
                    "$GroupNumber" -> 1, "$InputSize" -> {16, 16}, 
                    "$OutputSize" -> {16, 16}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 16, 16}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {16, 16}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 16, 16}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 16, 16}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 16, 16}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 128, "$InputSize" -> {16, 16}, 
                    "$OutputSize" -> {8, 8}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]]], "EncMod06" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{256, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 8, 8}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 8, 8}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 8, 8}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 8, 8}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 256, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {4, 4}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 4, 4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 4, 4}, 
                    NeuralNetworks`RealT]]], "DecMod6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{256, 128, 2, 2}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {4, 4}, "$OutputSize" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 4, 4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 4, 4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]]], "Concat51" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 8, 8}, 
                    NeuralNetworks`RealT]]], "ConvMod51" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{128, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]]], "DecMod51" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{128, 64, 2, 2}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 64, 
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {16, 16}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 16, 16}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 64, 
                    "$GroupNumber" -> 1, "$InputSize" -> {16, 16}, 
                    "$OutputSize" -> {16, 16}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {16, 16}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 16, 16}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]]], "Concat41" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 16, 16}, 
                    NeuralNetworks`RealT]]], "ConvMod41" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{64, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 64, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {16, 16}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 16, 16}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]]], "DecMod41" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{64, 32, 2, 2}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 32, 
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {32, 32}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{32}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 32, 
                    "$SpatialDimensions" -> {32, 32}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {32, 32, 32}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{32, 32, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 32, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 32, 
                    "$GroupNumber" -> 1, "$InputSize" -> {32, 32}, 
                    "$OutputSize" -> {32, 32}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{32}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
                    "MovingVariance" -> NeuralNetworks`TensorT[{32}, 
                    NeuralNetworks`RealT]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 32, 
                    "$SpatialDimensions" -> {32, 32}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {32, 32, 32}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]]], "Concat31" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 32, 32}, 
                    NeuralNetworks`RealT]]], "ConvMod31" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{32, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 32, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{32}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 32, 
                    "$SpatialDimensions" -> {32, 32}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {32, 32, 32}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]]], "DecMod31" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{32, 16, 2, 2}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 16, 
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Interleaving" -> False, 
                    "$InputChannels" -> 32, "$GroupNumber" -> 1, 
                    "$InputSize" -> {32, 32}, "$OutputSize" -> {64, 64}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 16, 
                    "$SpatialDimensions" -> {64, 64}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {16, 64, 64}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{16, 16, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 16, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 16, 
                    "$GroupNumber" -> 1, "$InputSize" -> {64, 64}, 
                    "$OutputSize" -> {64, 64}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
                    "MovingVariance" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`RealT]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 16, 
                    "$SpatialDimensions" -> {64, 64}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {16, 64, 64}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]]], "Concat21" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{32, 64, 64}, 
                    NeuralNetworks`RealT]]], "ConvMod21" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{16, 32, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 16, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 32, "$GroupNumber" -> 1, "$InputSize" -> 
                    {64, 64}, "$OutputSize" -> {64, 64}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{32, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 16, 
                    "$SpatialDimensions" -> {64, 64}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {16, 64, 64}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{32, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]]], "DecMod21" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{16, 8, 2, 2}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 8, "KernelSize" -> {2, 2},
                     "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Interleaving" -> False, "$InputChannels" -> 16, 
                    "$GroupNumber" -> 1, "$InputSize" -> {64, 64}, 
                    "$OutputSize" -> {128, 128}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT], 
                    "MovingMean" -> NeuralNetworks`TensorT[{8}, 
                    NeuralNetworks`RealT], "MovingVariance" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 8, 
                    "$SpatialDimensions" -> {128, 128}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {8, 128, 128}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{8, 8, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 8, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 8, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 128}, 
                    "$OutputSize" -> {128, 128}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT], 
                    "MovingMean" -> NeuralNetworks`TensorT[{8}, 
                    NeuralNetworks`RealT], "MovingVariance" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 8, 
                    "$SpatialDimensions" -> {128, 128}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {8, 128, 128}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]]], "Concat11" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{16, 128, 128}, 
                    NeuralNetworks`RealT]]], "ConvMod11" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{8, 16, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 8, "KernelSize" -> {3, 3},
                     "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 16, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 128}, 
                    "$OutputSize" -> {128, 128}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{16, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT], 
                    "MovingMean" -> NeuralNetworks`TensorT[{8}, 
                    NeuralNetworks`RealT], "MovingVariance" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 8, 
                    "$SpatialDimensions" -> {128, 128}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {8, 128, 128}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{16, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]]], "DecMod11" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{8, 4, 2, 2}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 4, "KernelSize" -> {2, 2},
                     "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Interleaving" -> False, "$InputChannels" -> 8, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 128}, 
                    "$OutputSize" -> {256, 256}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4, 256, 256}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], 
                    "MovingMean" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT], "MovingVariance" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 4, 
                    "$SpatialDimensions" -> {256, 256}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4, 256, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4, 256, 256}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4, 256, 256}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4, 256, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4, 256, 256}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{4, 4, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 4, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 4, 
                    "$GroupNumber" -> 1, "$InputSize" -> {256, 256}, 
                    "$OutputSize" -> {256, 256}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4, 256, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4, 256, 256}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], 
                    "MovingMean" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT], "MovingVariance" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 4, 
                    "$SpatialDimensions" -> {256, 256}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4, 256, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4, 256, 256}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4, 256, 256}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4, 256, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4, 256, 256}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4, 256, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4, 256, 256}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4, 256, 256}, 
                    NeuralNetworks`RealT]]], "map1" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{1, 4, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 1, "KernelSize" -> {3, 3},
                     "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 4, 
                    "$GroupNumber" -> 1, "$InputSize" -> {256, 256}, 
                    "$OutputSize" -> {256, 256}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4, 256, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 256, 256}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {1, 256, 256}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 256, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 256, 256}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4, 256, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 256, 256}, 
                    NeuralNetworks`RealT]]], "Concat52" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 8, 8}, 
                    NeuralNetworks`RealT]]], "ConvMod52" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{128, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]]], "DecMod52" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{128, 64, 2, 2}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 64, 
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {16, 16}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 16, 16}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 64, 
                    "$GroupNumber" -> 1, "$InputSize" -> {16, 16}, 
                    "$OutputSize" -> {16, 16}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {16, 16}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 16, 16}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]]], "Concat42" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 16, 16}, 
                    NeuralNetworks`RealT]]], "ConvMod42" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{64, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 64, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {16, 16}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 16, 16}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]]], "DecMod42" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{64, 32, 2, 2}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 32, 
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {32, 32}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{32}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 32, 
                    "$SpatialDimensions" -> {32, 32}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {32, 32, 32}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{32, 32, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 32, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 32, 
                    "$GroupNumber" -> 1, "$InputSize" -> {32, 32}, 
                    "$OutputSize" -> {32, 32}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{32}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
                    "MovingVariance" -> NeuralNetworks`TensorT[{32}, 
                    NeuralNetworks`RealT]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 32, 
                    "$SpatialDimensions" -> {32, 32}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {32, 32, 32}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]]], "Concat32" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 32, 32}, 
                    NeuralNetworks`RealT]]], "ConvMod32" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{32, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 32, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{32}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 32, 
                    "$SpatialDimensions" -> {32, 32}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {32, 32, 32}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]]], "DecMod32" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{32, 16, 2, 2}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 16, 
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Interleaving" -> False, 
                    "$InputChannels" -> 32, "$GroupNumber" -> 1, 
                    "$InputSize" -> {32, 32}, "$OutputSize" -> {64, 64}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 16, 
                    "$SpatialDimensions" -> {64, 64}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {16, 64, 64}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{16, 16, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 16, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 16, 
                    "$GroupNumber" -> 1, "$InputSize" -> {64, 64}, 
                    "$OutputSize" -> {64, 64}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
                    "MovingVariance" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`RealT]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 16, 
                    "$SpatialDimensions" -> {64, 64}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {16, 64, 64}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]]], "Concat22" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{32, 64, 64}, 
                    NeuralNetworks`RealT]]], "ConvMod22" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{16, 32, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 16, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 32, "$GroupNumber" -> 1, 
                    "$InputSize" -> {64, 64}, "$OutputSize" -> {64, 64}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{32, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 16, 
                    "$SpatialDimensions" -> {64, 64}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {16, 64, 64}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{32, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]]], "DecMod22" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{16, 8, 2, 2}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 8, "KernelSize" -> {2, 2},
                     "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Interleaving" -> False, "$InputChannels" -> 16, 
                    "$GroupNumber" -> 1, "$InputSize" -> {64, 64}, 
                    "$OutputSize" -> {128, 128}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT], 
                    "MovingMean" -> NeuralNetworks`TensorT[{8}, 
                    NeuralNetworks`RealT], "MovingVariance" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 8, 
                    "$SpatialDimensions" -> {128, 128}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {8, 128, 128}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{8, 8, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 8, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 8, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 128}, 
                    "$OutputSize" -> {128, 128}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT], 
                    "MovingMean" -> NeuralNetworks`TensorT[{8}, 
                    NeuralNetworks`RealT], "MovingVariance" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 8, 
                    "$SpatialDimensions" -> {128, 128}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {8, 128, 128}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]]], "Concat12" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{16, 128, 128}, 
                    NeuralNetworks`RealT]]], "ConvMod12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{8, 16, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 8, "KernelSize" -> {3, 3},
                     "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 16, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 128}, 
                    "$OutputSize" -> {128, 128}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{16, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT], 
                    "MovingMean" -> NeuralNetworks`TensorT[{8}, 
                    NeuralNetworks`RealT], "MovingVariance" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 8, 
                    "$SpatialDimensions" -> {128, 128}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {8, 128, 128}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{16, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]]], "DecMod12" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{8, 4, 2, 2}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 4, "KernelSize" -> {2, 2},
                     "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Interleaving" -> False, "$InputChannels" -> 8, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 128}, 
                    "$OutputSize" -> {256, 256}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4, 256, 256}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], 
                    "MovingMean" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT], "MovingVariance" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 4, 
                    "$SpatialDimensions" -> {256, 256}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4, 256, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4, 256, 256}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4, 256, 256}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4, 256, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4, 256, 256}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{4, 4, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 4, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 4, 
                    "$GroupNumber" -> 1, "$InputSize" -> {256, 256}, 
                    "$OutputSize" -> {256, 256}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4, 256, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4, 256, 256}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], 
                    "MovingMean" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT], "MovingVariance" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 4, 
                    "$SpatialDimensions" -> {256, 256}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4, 256, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4, 256, 256}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4, 256, 256}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4, 256, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4, 256, 256}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4, 256, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4, 256, 256}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4, 256, 256}, 
                    NeuralNetworks`RealT]]], "map2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{1, 4, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 1, "KernelSize" -> {3, 3},
                     "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 4, 
                    "$GroupNumber" -> 1, "$InputSize" -> {256, 256}, 
                    "$OutputSize" -> {256, 256}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4, 256, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 256, 256}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {1, 256, 256}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 256, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 256, 256}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4, 256, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 256, 256}, 
                    NeuralNetworks`RealT]]]]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"image\"", "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"Output1\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\"", 
                    "\"256\"", "\"256\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}, {"", "", "", "", 
                    StyleBox[
                    TemplateBox[{"\"Output2\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\"", 
                    "\"256\"", "\"256\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.761286560225099*^9, 3.761289368095758*^9, 
  3.76128997052372*^9, 3.7612906386251993`*^9, 3.7612911206378*^9, 
  3.761291772325139*^9, 3.761292199407673*^9, 3.761342091152652*^9, 
  3.761343729301037*^9, 3.7613453267597713`*^9, 3.761345426507781*^9, 
  3.76134593065863*^9},
 CellLabel->"Out[38]=",ExpressionUUID->"d1ef199d-12c1-4076-9b5e-edf23e2077dd"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{"Training", "..."}], "*)"}]], "Input",
 CellChangeTimes->{{3.749180926839899*^9, 3.7491809291346083`*^9}, {
  3.760389421121057*^9, 3.760389428781856*^9}},
 CellLabel->"In[39]:=",ExpressionUUID->"4663d994-23dd-44ef-97d9-3ede55ce38f6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"logFile", "=", 
   RowBox[{"CreateTemporary", "[", "]"}]}], ";", " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "save", " ", "training", " ", "data", " ", "into", " ", "TMP", " ", 
    "file"}], " ", "*)"}], 
  RowBox[{"appendToLog", "=", 
   RowBox[{
    RowBox[{"PutAppend", "[", 
     RowBox[{
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<Batch\>\"", "\[Rule]", "#AbsoluteBatch"}], ",", 
        RowBox[{"\"\<Loss\>\"", "\[Rule]", "#RoundLoss"}], ",", 
        RowBox[{"\"\<VLoss\>\"", "\[Rule]", "#ValidationLoss"}]}], 
       RowBox[{"(*", 
        RowBox[{",", " ", 
         RowBox[{"\"\<Error\>\"", "\[Rule]", "#RoundErrorRate"}]}], "*)"}], 
       "|>"}], ",", "logFile"}], "]"}], "&"}]}], ";", 
  RowBox[{"TN", "=", 
   RowBox[{"NetTrain", "[", 
    RowBox[{"ForkNET", ",", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<Input\>\"", " ", "\[Rule]", "MRId"}], ",", 
       RowBox[{"\"\<Output1\>\"", "\[Rule]", "labels1d"}], ",", 
       RowBox[{"\"\<Output2\>\"", "\[Rule]", "labels2d"}]}], "|>"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"BatchSize", "\[Rule]", "BS"}], ",", "\[IndentingNewLine]", 
     RowBox[{"ValidationSet", "\[Rule]", " ", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<Input\>\"", " ", "\[Rule]", "MRIv"}], ",", 
        RowBox[{"\"\<Output1\>\"", "\[Rule]", "labels1v"}], ",", 
        RowBox[{"\"\<Output2\>\"", "\[Rule]", "labels2v"}]}], "|>"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"MaxTrainingRounds", "\[Rule]", "NIter"}], ",", " ", 
     "\[IndentingNewLine]", 
     RowBox[{"TargetDevice", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<GPU\>\"", ",", "3"}], "}"}]}], ",", " ", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
       "\"\<3\>\"", " ", "is", " ", "the", " ", "number", " ", "of", " ", 
        "available", " ", "GPU", " ", "cards"}], " ", "-", " ", 
       RowBox[{
       "remove", " ", "this", " ", "line", " ", "if", " ", "you", " ", "do", 
        " ", "the", " ", "computation", " ", "on", " ", "CPU"}]}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"TrainingProgressFunction", "\[Rule]", "appendToLog"}]}], 
    "\[IndentingNewLine]", " ", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7528923126840153`*^9, 3.752892323210475*^9}, {
   3.7534949571599894`*^9, 3.753494962711824*^9}, {3.753495854576621*^9, 
   3.7534958557532063`*^9}, 3.753497109836812*^9, {3.753498233963657*^9, 
   3.753498234491576*^9}, {3.753500758955188*^9, 3.753500770792852*^9}, {
   3.753500972496809*^9, 3.753500976450741*^9}, {3.753501545232807*^9, 
   3.7535015695158253`*^9}, {3.753501601620249*^9, 3.753501605142626*^9}, {
   3.753501678913107*^9, 3.753501683205841*^9}, {3.75350196716754*^9, 
   3.7535019824887466`*^9}, {3.7535020280454187`*^9, 
   3.7535020358839893`*^9}, {3.7535023091892023`*^9, 3.75350232646257*^9}, {
   3.753502469699752*^9, 3.753502484964128*^9}, {3.753502580803392*^9, 
   3.7535026112952423`*^9}, 3.753502648242688*^9, 3.7535047947060204`*^9, {
   3.7535059787924*^9, 3.7535059918714333`*^9}, {3.753509768638771*^9, 
   3.7535097750345497`*^9}, 3.753510727318572*^9, 3.7535780527641773`*^9, {
   3.7535793233272*^9, 3.753579324747533*^9}, {3.753581433325955*^9, 
   3.7535814427015553`*^9}, {3.7535814915951443`*^9, 
   3.7535815782852087`*^9}, {3.753581681731287*^9, 3.75358170761045*^9}, {
   3.75358192740876*^9, 3.753581928427945*^9}, {3.753582287357547*^9, 
   3.753582324829526*^9}, {3.753582856043832*^9, 3.753582856850296*^9}, {
   3.753583144086906*^9, 3.7535831441805*^9}, {3.753583811962327*^9, 
   3.753583821679089*^9}, 3.753585081843851*^9, {3.753585217702911*^9, 
   3.753585315205152*^9}, {3.7535862981574574`*^9, 3.7535863092440977`*^9}, {
   3.753588064603486*^9, 3.75358811296129*^9}, {3.753588538567254*^9, 
   3.753588558998933*^9}, 3.753600057529098*^9, {3.753656253046254*^9, 
   3.753656256357978*^9}, 3.753656372369419*^9, {3.7536678908917627`*^9, 
   3.753667891424721*^9}, 3.753741700972168*^9, 3.753742260176405*^9, {
   3.75374985420041*^9, 3.753749878472701*^9}, 3.753749943039747*^9, {
   3.753751646897501*^9, 3.7537516534877253`*^9}, {3.755908416631464*^9, 
   3.7559084182300367`*^9}, 3.7559127478040133`*^9, {3.757113021112555*^9, 
   3.7571130381977577`*^9}, {3.75711745176248*^9, 3.757117471207033*^9}, {
   3.759537146724524*^9, 3.7595371498762493`*^9}, {3.759709340095549*^9, 
   3.759709357534075*^9}, {3.759712567075432*^9, 3.759712577171317*^9}, {
   3.7603220262748747`*^9, 3.760322081260001*^9}, 3.7603262393637114`*^9, {
   3.7603886766359243`*^9, 3.760388688889381*^9}, 3.761286787988851*^9, {
   3.761291141429582*^9, 3.7612911444191504`*^9}},
 CellLabel->"In[40]:=",ExpressionUUID->"92efc98e-0825-4e84-932e-7ecfaf7b1271"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "Plot", " ", "training", " ", "loss", " ", "and", " ", "validation", " ", 
   "loss"}], "  ", "*)"}]], "Input",
 CellChangeTimes->{{3.760326775196933*^9, 3.76032679678047*^9}, {
  3.76038943955302*^9, 3.7603894470249643`*^9}},
 CellLabel->"In[41]:=",ExpressionUUID->"6f91c3ee-3611-4932-a89d-1601171796a7"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"dataset", "=", 
   RowBox[{"Dataset", "[", 
    RowBox[{"ReadList", "[", "logFile", "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"LossData", "=", 
   RowBox[{"dataset", "[", 
    RowBox[{"All", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Batch\>\"", ",", "\"\<Loss\>\""}], "}"}]}], "]"}]}], ";", 
  RowBox[{"VLossData", "=", 
   RowBox[{"dataset", "[", 
    RowBox[{"All", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Batch\>\"", ",", "\"\<VLoss\>\""}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"t1", "=", 
   RowBox[{"ListLinePlot", "[", 
    RowBox[{"LossData", ",", 
     RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
     RowBox[{"PlotLegends", "\[Rule]", 
      RowBox[{"{", "\"\<Training Loss\>\"", "}"}]}], ",", 
     RowBox[{"PlotStyle", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"Dashed", ",", " ", "Blue"}], "}"}]}]}], "]"}]}], ";", 
  RowBox[{"t2", "=", 
   RowBox[{"ListLinePlot", "[", 
    RowBox[{"VLossData", ",", 
     RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
     RowBox[{"PlotLegends", "\[Rule]", 
      RowBox[{"{", "\"\<Validation Loss\>\"", "}"}]}], ",", 
     RowBox[{"PlotStyle", "\[Rule]", 
      RowBox[{"{", "Red", "}"}]}]}], "]"}]}], ";", 
  RowBox[{"Show", "[", 
   RowBox[{"t1", ",", "t2"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.753583050935899*^9, 3.753583050936544*^9}, {
   3.7535835986916656`*^9, 3.753583619991453*^9}, {3.753584269645391*^9, 
   3.753584280176929*^9}, {3.75358484102571*^9, 3.753584871702133*^9}, {
   3.753584922801922*^9, 3.753584929359668*^9}, 3.753585194454074*^9, {
   3.753585346855797*^9, 3.753585383499215*^9}, {3.753585944572729*^9, 
   3.7535859970978813`*^9}, {3.753656384853303*^9, 3.7536563944233513`*^9}, {
   3.760235402284286*^9, 3.760235414059041*^9}, {3.760235690016433*^9, 
   3.760235789631219*^9}, {3.7603251277391653`*^9, 3.760325134608643*^9}, {
   3.760325854361216*^9, 3.7603258562163343`*^9}, 3.7603267658266993`*^9, {
   3.760326801728064*^9, 3.760326803070217*^9}, {3.760390394502181*^9, 
   3.760390454447524*^9}},
 CellLabel->"In[42]:=",ExpressionUUID->"8463af53-db9d-4849-ae46-c2a96a34f072"],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{{}, {{{}, {}, {
         Hue[0.67, 0.6, 0.6], 
         Directive[
          PointSize[
           NCache[
            Rational[1, 72], 0.013888888888888888`]], 
          AbsoluteThickness[1.6], 
          Dashing[{Small, Small}], 
          RGBColor[0, 0, 1]], 
         LineBox[CompressedData["
1:eJw10Q1MlHUcB/BH3UgduGupjWR6NFiKhswTCWjH41ScjfmWpTRy13nd0TTh
prMXtE6jBGIEAoeHvBwcHHcHx51CJgT5dB6M912jkJzVRWa21I5BZaxV39t9
YQP22ff38v//n2h1zv7XFwqCoMFv8H/oZ7uIP8N5B/9MC/mAuFlx4mbVg/v0
YbHalHm1K/UOrRFHRzIGsnd8T7+BfrEvJnaSPg4HCm8Pjods0MPupT8862N+
EvO6im6eHmZ+Ck5+/JJ6gPk7ok6bHsja2M88D9494DjvZf6eqFBYnkt95kbI
ogHzVVuM4R7Wn0XeEfUg6suQpXNBa9rUEvvzsW9X9iH5dfZ/iPl34y57e9n/
EfLpFz3eHvafx32XpydPfs7+QrzPzMreim72FyEvqL/e0MX+j9E/aF+1iJaK
Ua+bKBm8xv4SnLf42hYFLX6C/cu+2jf9GV2KvED45verIftLkR93PZ1JG8qQ
j+ilM7T8AvL4DZ2naOkC9kevzqv9NGRVOew0H3ueFipQP+SLU9LmCpxvz6Z+
HS1WYv7KVysP0f6gA6+9r+3kfiN8UbjtoOVVmDd1LFJHS0F74u9MdnD/RdS/
vCjfQQsm5F+vzllLm03IJ0/uFGixGue571mylfZXI/8u8YjvCvdfwvf0zkzY
aHkN3j82ZqyAlmow/5VxUyStqkX/mE47cZn765A/itrXSZvrkKuX9gzRYj0c
9sutWdpfj/qfoo/OzedmvKfpnMVFl5pR/1Jnc/98fTBft8T1Jp3QgPyGY+qW
m+cP+oRM2Uz7GjA/3BcxTMsbxepIl89bTOc2ItdGK7JoqRH9p2Wpm2iZBe/x
x9vdGlplQf3BiN1K2m1B/a//Jf3t4v2b8L5PZIR76L1NyK19CxNZb25C/5qx
sPk8AN+t869PYi42o/9MjKKceWkz7vtI09BD+4OePVLlpBOs8LL8bVG0wYrv
ZW0qXNDO+1uxz5j9c4mT92/BefZYaw/QuS3Y99T4uym01CKOZmSVGctpmQ1W
zuxKolU2nDd5Q9E22g1rF/cGHqMFO86jnXprro33t2Pfk4U75lp5fzvmre0+
66EDdnFzh/6D3/Jp0YH6BfGrfmzh/R2o9xgX/2Pl/R3Yt9NjjGOe0IrvmVm2
bittCPrfFL2e9rViftL6nO023r8N89Qxxj7muUGnrQgb4nypDfUvfDvQT8uc
eM8V5Uol61VOnO9ohL6KdiMvno2t+YsW2sXRcNcXgYfct7cd7zv0cDDFzvsj
H0ncL7/HPIC8o6syfZoWXZinHr2itqX9D9yO5tU=
          
          "]]}}}, {}, {}, {}, {}}, {{}, {{{}, {}, {
         Hue[0.67, 0.6, 0.6], 
         Directive[
          PointSize[
           NCache[
            Rational[1, 72], 0.013888888888888888`]], 
          AbsoluteThickness[1.6], 
          RGBColor[1, 0, 0]], 
         LineBox[CompressedData["
1:eJw1lHtMk2cUxhuJoi4hZZs6YnVlf2BUokY3LI7Ed5uLuwQljmIDikUoSWei
dBM2h84PN2RzpoIDucilF+jlKy0ViWMudV+AWTSOdOocXv74krKFbX8Mks35
D8Nz1qdNgPzynHOe9znvWzIPHtljWaDRaCroh/8mPjuELmrbUW6d3Z7gQjFP
n9KqaXCpkGV5umxUBVeIXHt8Mv29+2CriBvsK8Jr7oIPi4AsR+qXxBIs2YQ9
bhh5WxmHfpT9zJOeH6DXCPpt7tg1Av2YiNp0/1waUaDXcr/5hdg16J+KQqOx
/VZaJMFCYn/Ta99fRX0dzx8fmAQrp3j+1n0lw+j/XNh00cclh79Bf734QBd1
z7wElk6L6zad2pp/Bf0NYsqQFpk/NoT+L3kfc38KsDjD/Qs1Fy6j/yv27zn7
I1g5y/qzq48Oot8ujMafX/+7FLo4x3mfWWu6BG6k+evG9kbCCVYbad7sMpMF
LDXR/stzp06C9ec5f0NKBlg5z/uqXGQcSLD5a8qzb3RVMeZrmqk+zXJtP+od
zZzXt3gU9aKF/Y7/NYx6tYXnmervQpcusP/BocKkfyvnmY/kJP1b+Tw5G7OD
8G+j/DuvzL0J1rTz/pZaxsGOdrqPnTe61oTg30Hn6dwbWw1d7eD9x88kdeki
99+eOt4P/07erzXrCOqVTtaV4FgA/l10/o8dxZlgTTefd2j5rAz/bnofytaO
dMwTPaQvK/5oP+rVHj5Pbl4WWDhIb8nxpqC+0cH+H+a5kvUOYbCXH/glG/M3
OXm/qZbdYMlJ53t/7t6EP8ExJ/lLj7qyknlc3F9pnUB9lYv9Q/++DFZc/D5e
1f+Hfq2b+h1q9btgs5t1Z+02cNhN8+LPPf7dh/y9zGNFTeCCXrqvXbUPlyb3
wTzx2+bF6J/p5fd8qk6L/Yo+3k/RIoH+xv85o3nQi/x9fP5zZVHomzy0H+/9
+TKw5KF649oX88ExD9/P0OaV8NN76fx/PPjkDcyr8pJ/erp7Gqx46XwbDM4g
WOvj91Z9qBps9lF905ZfT4PDPprf1maq8SC/n/fds0oHvcBP+pOK6DR0h5/9
Ur+1gmf8/J5OODNRL2TeX+073b3IL9P7bVju6wOrMuVdcaIyuw/5A5x3MEMF
SwHSU/W3P8O8WIC/j1/kLUG/vp/fU9GTmy7k76fziuvF68FKP99HxU+PwNog
zV84kZKL+eYg551ap03mZ/2VmsvDbuQP0f+bvOe/2wa/ghD5h966dyeZP0Tz
6/K9JZg3E6J5w62FC3BfYoDrw1Xtru1PAcK+9xA=
          "]]}}}, {}, {}, {}, {}}}, {
    DisplayFunction -> Identity, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.05]}}, AxesOrigin -> {0, 0}, 
     PlotRange -> {{0, 4000.}, {0, 1.3963582925498486`}}, PlotRangeClipping -> 
     True, ImagePadding -> All, DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
     Identity, Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           (Identity[#]& )[
            Part[#, 1]], 
           (Identity[#]& )[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           (Identity[#]& )[
            Part[#, 1]], 
           (Identity[#]& )[
            Part[#, 2]]}& )}}, 
     PlotRange -> {{0, 4000.}, {0, 1.3963582925498486`}}, PlotRangeClipping -> 
     True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}],FormBox[
    TagBox[
     GridBox[{{
        FormBox[
         TemplateBox[{"\"Training Loss\""}, "LineLegend", 
          DisplayFunction -> (StyleBox[
            StyleBox[
             PaneBox[
              TagBox[
               GridBox[{{
                  TagBox[
                   GridBox[{{
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[
                    NCache[
                    Rational[1, 8], 0.125]], 
                    AbsoluteThickness[1.6], 
                    Dashing[{Small, Small}], 
                    RGBColor[0, 0, 1]], {
                    LineBox[{{0, 10}, {40, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[
                    NCache[
                    Rational[1, 8], 0.125]], 
                    AbsoluteThickness[1.6], 
                    Dashing[{Small, Small}], 
                    RGBColor[0, 0, 1]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {40, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
               "Grid"], Alignment -> Left, AppearanceElements -> None, 
              ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
              "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
            FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
            False]& ), InterpretationFunction :> (RowBox[{"LineLegend", "[", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{"Directive", "[", 
                   RowBox[{
                    RowBox[{"PointSize", "[", 
                    FractionBox["1", "72"], "]"}], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                    RowBox[{"Dashing", "[", 
                    RowBox[{"{", 
                    RowBox[{"Small", ",", "Small"}], "}"}], "]"}], ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 0, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> RGBColor[0., 0., 0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0", ",", "0", ",", "1"}], "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 0, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0, 0, 1], Editable -> False, Selectable -> 
                    False]}], "]"}], "}"}], ",", 
               RowBox[{"{", #, "}"}], ",", 
               RowBox[{"LegendMarkers", "\[Rule]", 
                 RowBox[{"{", 
                   RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], "}"}]}], ",", 
               
               RowBox[{"Joined", "\[Rule]", 
                 RowBox[{"{", "True", "}"}]}], ",", 
               RowBox[{"LabelStyle", "\[Rule]", 
                 RowBox[{"{", "}"}]}], ",", 
               RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
          Editable -> True], TraditionalForm]}, {
        FormBox[
         TemplateBox[{"\"Validation Loss\""}, "LineLegend", 
          DisplayFunction -> (StyleBox[
            StyleBox[
             PaneBox[
              TagBox[
               GridBox[{{
                  TagBox[
                   GridBox[{{
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[
                    NCache[
                    Rational[1, 4], 0.25]], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0, 0]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[
                    NCache[
                    Rational[1, 4], 0.25]], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0, 0]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
               "Grid"], Alignment -> Left, AppearanceElements -> None, 
              ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
              "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
            FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
            False]& ), InterpretationFunction :> (RowBox[{"LineLegend", "[", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{"Directive", "[", 
                   RowBox[{
                    RowBox[{"PointSize", "[", 
                    FractionBox["1", "72"], "]"}], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> RGBColor[0.6666666666666666, 0., 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1, 0, 0], Editable -> False, Selectable -> 
                    False]}], "]"}], "}"}], ",", 
               RowBox[{"{", #, "}"}], ",", 
               RowBox[{"LegendMarkers", "\[Rule]", 
                 RowBox[{"{", 
                   RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], "}"}]}], ",", 
               
               RowBox[{"Joined", "\[Rule]", 
                 RowBox[{"{", "True", "}"}]}], ",", 
               RowBox[{"LabelStyle", "\[Rule]", 
                 RowBox[{"{", "}"}]}], ",", 
               RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
          Editable -> True], TraditionalForm]}}, 
      GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False, 
      GridBoxItemSize -> {
       "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
      GridBoxSpacings -> {"Columns" -> {{0}}}], "Grid"], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.7602357448966427`*^9, 3.760235790370225*^9}, 
   3.760236442405459*^9, 3.76023695309197*^9, 3.76023735028689*^9, 
   3.7602389323317957`*^9, 3.76024079988767*^9, 3.760242703531268*^9, 
   3.760249078971464*^9, 3.7602543529568663`*^9, 3.7603079595111647`*^9, 
   3.760311349022674*^9, 3.76031564052209*^9, 3.7603188652110357`*^9, 
   3.760323291774818*^9, 3.760323489006207*^9, {3.7603235782245493`*^9, 
   3.7603236263712997`*^9}, {3.760323668388774*^9, 3.760323739973877*^9}, 
   3.760323798174107*^9, 3.7603238627505198`*^9, 3.760324105491992*^9, 
   3.7603241894122763`*^9, 3.760325160063527*^9, 3.760325252704458*^9, 
   3.760325308145815*^9, 3.7603253670811567`*^9, 3.760325436795684*^9, 
   3.760325829287436*^9, 3.760325882922559*^9, 3.7603259367872353`*^9, 
   3.7603262519544983`*^9, 3.760326487274822*^9, 3.760326554956208*^9, 
   3.7603267699443893`*^9, 3.760326806188572*^9, 3.760327231628027*^9, 
   3.760389944503501*^9, 3.760390147270236*^9, {3.7603903984346027`*^9, 
   3.760390455070693*^9}, 3.760390561314451*^9, 3.7612746760687017`*^9, 
   3.7612749848241796`*^9, 3.76128635963465*^9, 3.7612895324237137`*^9, 
   3.761290296626335*^9, 3.761290657766973*^9, 3.761291284729334*^9, 
   3.761291940152774*^9, 3.761292292600952*^9, 3.761342190532745*^9, 
   3.761343826237484*^9, 3.76134532735701*^9, 3.7613455254220467`*^9, 
   3.761346028399124*^9},
 CellLabel->"Out[44]=",ExpressionUUID->"7fe658a7-64a5-4980-a007-1f5614820cd3"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
   RowBox[{
    RowBox[{"Save", " ", "trained", " ", "network"}], " ", "&"}], " ", "loss",
    " ", "data"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.760326826546832*^9, 3.760326846926167*^9}, {
  3.760389990775992*^9, 3.76039000116945*^9}},
 CellLabel->"In[45]:=",ExpressionUUID->"0324feec-e347-4a21-8fa0-d1799385b9c4"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Export", "[", 
    RowBox[{"NetworkName", ",", "TN"}], "]"}], ";"}], " "}]], "Input",
 CellChangeTimes->{
  3.753656422693387*^9, {3.753656509373851*^9, 3.753656513365068*^9}, {
   3.753747074455194*^9, 3.7537470881180353`*^9}, {3.7537499371459723`*^9, 
   3.7537499394478073`*^9}, 3.753751053070223*^9, {3.753751688366022*^9, 
   3.7537516913742113`*^9}, {3.753752124305316*^9, 3.7537521298396063`*^9}, {
   3.7603268168654623`*^9, 3.760326823749752*^9}},
 CellLabel->"In[46]:=",ExpressionUUID->"bc5b22f1-826f-44f6-bc0f-f106aee7f95f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Export", "[", 
   RowBox[{"LossName", ",", "LossData", ",", "\"\<Table\>\""}], "]"}], 
  ";"}]], "Input",
 CellChangeTimes->{3.76024969707056*^9},
 CellLabel->"In[47]:=",ExpressionUUID->"858236d6-d2bd-4c37-b622-d10f21debbe8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Export", "[", 
   RowBox[{"VLossName", ",", "VLossData", ",", "\"\<Table\>\""}], "]"}], 
  ";"}]], "Input",
 CellChangeTimes->{
  3.7602497005239162`*^9, {3.7603045400902567`*^9, 3.7603045459123287`*^9}},
 CellLabel->"In[48]:=",ExpressionUUID->"d1b33c75-4e08-4acf-b6e6-8d2a8361e3b0"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "Test", " ", "one", " ", "random", " ", "image", " ", "from", " ", "the", 
   " ", "validation", " ", "data", " ", 
   RowBox[{"(", 
    RowBox[{
    "\"\<Yellow\>\"", " ", "is", " ", "true", " ", "and", " ", 
     "\"\<Green\>\"", " ", "is", " ", "network", " ", "segmentation"}], " ", 
    ")"}]}], "*)"}]], "Input",
 CellChangeTimes->{{3.75954882085802*^9, 3.759548822578689*^9}, 
   3.759554466166265*^9, {3.760325066592903*^9, 3.760325075951737*^9}, {
   3.760326849405122*^9, 3.7603268503474894`*^9}, {3.760389453886512*^9, 
   3.7603894608939133`*^9}, {3.760390209332038*^9, 3.7603902262743607`*^9}, {
   3.761286460540943*^9, 3.7612864681386127`*^9}},
 CellLabel->"In[49]:=",ExpressionUUID->"b86be700-98bd-48b2-b088-116f6fce051a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"selectval", "=", 
   RowBox[{
    RowBox[{"RandomInteger", "[", 
     RowBox[{
      RowBox[{"Dimensions", "[", "MRIv", "]"}], "-", "1"}], "]"}], "+", 
    "1"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.760324964753759*^9, 3.760324973231522*^9}, 
   3.760325455973197*^9, {3.76032558857055*^9, 3.760325599427342*^9}, 
   3.760325688277672*^9, {3.760325759319414*^9, 3.760325789413406*^9}, 
   3.760325833720964*^9, {3.760325934537675*^9, 3.760325944775343*^9}, {
   3.760325976961053*^9, 3.760326015981525*^9}, 3.761290909531461*^9, 
   3.7612911609794407`*^9},
 CellLabel->"In[81]:=",ExpressionUUID->"7defed12-c732-41ab-971f-26b78af0980c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"NotebookEvaluate", "[", "TestName", "]"}], ";", 
  "DisplayResult"}]], "Input",
 CellChangeTimes->{{3.7603256544842453`*^9, 3.760325684356304*^9}, {
   3.760325726440309*^9, 3.760325756088546*^9}, 3.760327155747945*^9, {
   3.761274853263875*^9, 3.7612748549583387`*^9}},
 CellLabel->"In[82]:=",ExpressionUUID->"36823706-ce80-4016-838d-738be7c6ffb1"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzs3Qdw1dWitvFQRaV3EGmi9CaIIGCC0pQWeq/SpUSKIDXSQaQ36U16CT30
ACFAgPROCCGE3ouC1Mv+70nmDq+LIYoewOc3893nfHM0hLCzs/OuHFaedj3r
dUzs4ODQO8XT/1Ovbb9KvXq1/aF+ctv/p0PbbmVKd0jy9D86JHr6/5I6OFj/
GQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
/Hfcm/pFrQzlHbXXbv5Qu/KL93fbv1dDa729wtpXjen9/Kff/9fl4wMAAAAA
AAAAeL2w/9ux/wMAAAAAAAAA3iTs/3bs/wAAAAAAAACANwn7vx37PwAAAAAA
AADgRSR0Vzcx7OquVr+VOgyY+1XaK87a/pVmn3FrrDXtz6Y9v++5S1v7tpK6
bj/4fpV5vbT9bL9OJ2mCP55/2D5O7R2lhvcnwbu66c/L+HEz/DmaPv4v63zB
+Lh6xc4pXtb789yP0598HAAAAAAAAADgn8b+z/7P/s/+DwAAAAAAAODNw/7P
/s/+z/4PAAAAAAAA4M3D/s/+z/7P/g8AAAAAAADg9ZXQfdJ4j67h7SRwb7fv
9M21z92l/+T9NN7n++fvv1PE6FN9M7hoy2b1Wvekr9S+3zfQmvZ20+8roecp
xj/Hl3MuY/x9vazd3vR2TH++f+lxm4DzoIT+8wmV0McDAAAAAAAAALws7P/s
/+z/7P8AAAAAAAAA3jzs/+z/7P/s/wAAAAAAAADePOz/7P/s/+z/AAAAAABA
JXR/AIB/WkJ34ITu+aY987k7fzupR7YNm1Z5fic13rdr2o0N74/p1zXet1tm
d+Zhnt2krsH+rjnmDZY6hBUp8VXYKKmT9faGSO1vb5DUo9HQsI2fDZC6WucM
HbSme5NNf14rY3cViRkuXdhl54W7JYZJ21jnHq5S48fT9PgxfZxN5wvbuvbI
2q6L1HQuk9DH8/M/bn/yuDK9n9a5RBut4X7nBN9z/bJePyT09clfOsfhdQ4A
AAAA4A3H/g/gVcP+z/7P/s/+z/4PAAAAAMDfx/4P4FXD/s/+z/7P/s/+DwAA
AADA38f+D+BVw/7P/s/+z/7P/g8AAAAAgHpZ3//yfTHw6jPtfqYm+O0bdtHn
3q/6J88bCd0JE7rnJ/S+V8Oua9rzTW/ftHubav99u0iNO7mphvMF1w8jt3R5
e4LUvn9PkrrOStIiY/6RUo+Rh2r4lvhZmntM3gcPvp0hXbhsbCqH5eOk9nuG
R0pf1sPf9PFx6tSm3NHfxmgLTcl4YKirNPrIsiEtm/wodcrSKOmQsf2l0dbj
cYTUqantA9tbat/Lf5Im9PdrPEcwPM6ffw6ln0fGx5X1/g6UJvj+35d1j/Bz
X6ck4Hnvuc+XvC4CAAAAALyi2P+B/w72f/Z/9n/2f/Z/9n8AAAAAwH8H+z/w
38H+z/7P/s/+z/7P/g8AAAAA+O9g/wf+O9j/2f/Z/9n/2f/Z/wEAAAAA4PtZ
4N/33L2rhtbE9Hlqejumvd10n6mJ4e2Y71E1vJ+Ge1GNv67h92X6dU27q/H9
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
plKFpgRJTfcslwv51WNw1UCp6Txo+InTBVf00V6p4Hq93whfqf1+b39p4PiS
jj93CZJOcF/X5MHMEKnpn19Yw3ZxrbfUfq/vUemeL5e3rNXWT2p6XNm/zvhJ
i4Q8/nXLcR+pWxanpcVaBUortbPd1B4k9Z7js2X/tWBpaODX6eq+GyFdNfPK
DO884VLTfcGtNjYvNLr9CemRImOLpZ2vjUqadNrFTtpr52wXAYdJ04Vm+vZJ
QIQ07OKqNoOco6Rv3Xg04cbwcGmay6sPfl8oWFr6fMoinbb7SNdUKlPb//4+
6QXr/Gqp1PRyxtVjzO+ftZzu+GxN+7+r9XqqhzT3mLwPHnw7StrGOpcYIzW+
HjOdX7yse40BAACA/wL2f7yO2P/Z/9n/2f/Z/9n/2f/Z/9n/2f/Z/wEAAIDn
Y//H64j9n/2f/Z/9n/2f/Z/9n/2f/Z/9n/0fAAAAeD72f7yO2P/Z/9n/2f/Z
/9n/2f/Z/9n/2f/Z/wEAAIC/hvt88XeYHj+m+3Nf1j28Cd35TTUx3Jdn+sdn
WfdD/ur4bCdZ9+ltkfrl/7TDjMqHpLmPfxf2bu4A6aJJBfcEtQ2Rmu5FjS3c
q4vXLF/pnVRlBzWfcEx62LoX8bi0wpr1mU+sDJLmXet1It/6aOmlNM0bVUsS
Ix3WZrTDqHdOS1NEzHM8+PlZ6aTPtxfclO+StFqSXn2+dzor3Tyt/f6kW6Ok
22fdW91tcoz0QMkTd8fePSWdfmRX1JrhIdJv9i3YOaKdvzStNaT7Snvah25p
Y/sFl9JlW47Pf7TUT2q6b7RL902dHAtqvZefafxxiuNS2/jUZ91BqXVMld1D
arqPMvcHBfIkq7ZS2qTvz8mGXtsorTCjzqH17d2kYyY7Dc/ZabE0RY21OwsP
XimNtvabEVLT52OJQlMyHhg6yVE679uRJ1fPl3bOme1k769Way+kmtx26q9S
57f96k15e4m08/AMT58pVkgLWPe+LpHes85/lklv+HVpXD/rNGmTtFMLjzmy
RZp0eu12W8Ztl5ZN3LF1kN9qaQnb7difbJXad7tlUvt/r7WfT26UHrYed7ul
bt+sduzWVJtjT9FqqfPukkbH2m4u3y4t8WDxqKi02vExSxPPL31Qev/AjGB/
12PSKSfrlct3wk96vHn/XXdSBkpN56rZ7ReaS+3Pi37S0jtr/py2uJf0hHVB
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
VrMG/ECp6f5ilySdPH1WBUhNXy+Sd5lwoJWD1un8pqrFPw6U3n63x+jlCwOk
nuPH5Tt4w1d6J1XZQc0nHJNWjy3cq4vXYantVDRHM63pnG5Q3S97jkl5VFpo
89jN2XsGSveP8yieLkmIdFrgW+M7rw+U/mwdXGqffjFvcmB/sHTFtplTN0zx
lrY/vrnlnYHu0omLa7/tVy9A+rXt2CxLoDT1qA22l2ZS/7C5Ed7to6SXp3fI
/2RisDS2/ZqlHUttlqa1Xm8ulBrvC16cJ7ZM3sla4+tnwz5v/DmZl/TzMwAA
AACQUOz/7P/s/+z/7P/s/+z/7P/s/+z/7P/s/wAAAADePOz/7P/s/+z/7P/s
/+z/7P/s/+z/7P/s/wAAAADePOz/7P/s/+z/7P/s/+z/7P/s/+z/7P/s/wAA
AHi+hN7TxL1OeBHG7y8S+Pgx7famvd10b5rhPtOE/racrJ3bxfHZtrd2651S
54v5Gq2e5S9d4jJk39UbQdLUv/3e6+NGAdLjzfvvupMyUPpVWGa/P9b4Sw/X
LF34burjUtu/9OOPodLMP/fx7HswQpqjaG8fj15e0s/uZd+Y9dco6fSevdbU
+PGytFL3PVnO7zknLbpgQusjuWOl/vXvJrnqc0o6f0euzv0eB0m938lYsa+j
nzSLda+mtsi0qG2lHvtL51j3hQZIj3U40MWtrJ8040duv3lvPCB1tR6nc6Sm
3dvV2tt6SKOPLBvSsslkqX1PXSY9bO0966U3vu05uMXtZVprF1wqrZ441YC5
X7lJ/fZX+GlBrlXSMdYuuEJqul+4RKEpGQ8MnSQ1/br2exp3STsPz/D0I+gu
Ne2rBe6cWnvBeZk0d70s6y9ucZOuiSzfJyJ4s9R+v+taqVPNdbk/auwmDWuf
bNz8Heul9vshtfeeftbX27RS6mb9+kulpn3YxbrvepbUw3pcLJC6WXv5TKm7
dS/lUmnZ6Bvdy/Vyk7oVXXi76ZJtUtPHx77rz5U6Lw3uPyf2V+mKn0LvNEux
UZr2qMORids3SU3355rOcez3Tm+TXrHOYzdITecapvuvTV+/3IYk7R3uMltq
Ou8zfdzaZGmUdMjYWdLcV3ME35q0RNqmVlvnSY7rpM6nl8xb0kzrYN1fvUla
dt63I0+u3iNtb90Tu0Vqf77ZLC3Rp9TOmj+7SW9UcL3eb8R6aVnrnNNdmnR6
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
z3dLqw8tOavXoqPSrgHWjaHSkl9by5rUOvb7w0+6pJl1AifNl+L7FG1WaH8/
3e9k0qRB0iEfDvcrOSxAms+3/PG9qY5prc8/H6lpXy0xvuWTwh4+0hQ/ur/1
eSlfaYX63lH15/tIczQt1T3LI63p47C5j+0C+uNS0/mIaSe3P653SO33/a6Q
NrHuq18otT/PLZC6WTvrPKnDuY2nSzeZKw2zzm83S9dY99BukHarleLbJu4b
paZ7ok33dBfaPHZz9p4HpB5VvquXqI63tN6oOy6d2/pIvTMXPBXb5JDUyfZl
ZtI6qel89l5okRJfhW2V+rX8YsOK+7ukY4pUXZn/iy3Smtb/DsdNmja4xvc1
znpIJ1nD8iFp+847hj9qdFRquo+4hdfNEY93BkvfzWW7MNpP+l6WDEOnFw2Q
us09OyDlHX/p8tXDblb6IVBqHZtN95fOsHbl41LT80AFd0/3rw8clU4etiTl
xdN+0sDxJR1/7hIkXbno08qjaoVI7ffAB0mXuAzZd/WGNjzv2Tk5LgdIU7vU
ndvAI1Dqb3+DUt9qMW0HbwmTOt58fPtSy2jp9zsnpv9jXKTU9PVol3WP/XHp
nVRlBzWfsEua0G8joo8sG9KyyY+Oz9b48xLG/f959wgn4PsRAACA/xpeF+FF
sP+z/7P/s/+z/7P/s/+z/7P/s/+z/7P/JxD7PwAAwP8Yr4vwItj/2f/Z/1+Z
/X9on/ebP2obGN+4/d+aLTKGxDdu/5+/dG/WmtvD4hu3/9v35hPxjdv/7X/v
VER84/Z/+64TEd//6v5/r2qvbQ8KhMc3bv9fFNWqttfXMfGN2/8bW4PPmfjG
7S1Jh15LP67KyfjG7f8rk3+cc3CvE/F92ft/0mulZleYERrfuP1/epZbPeZ3
i4lv3P7/Q+D2RmG7Y+Ibt/+3T/tZVecvYuIbt/9vaF5odPv3YuIbt3v3+rhR
vU3ZYuIbt/83zxW6a+ShM/GN2/9P1p+fc0u1yPjG7f83M20v/c2x0PjG7X43
J2VoNbJMeHzj9n/vkT06zlwZHt+4/f/bybdqTeh7Or5x+//i2m/71ZtyOr5x
+/+jxq4V12YMj2/c/n81YnPSNJXD4xu3/ycZW86jyncR8WX/Z/9n/2f/Z/9n
/wcAAPif4HURXgT7P/s/+/8rs//z8/+vxs//r9nhNcyx32n5+f9n9/+4feXZ
/T9u798YMsJt1Mgz//rP/388If+dU2uj5ef/n93/4/b+Z/f/uL3/2f0/bud+
dv+P2/uf3f/j9v5n9/+4vT/XvhZl5iY/Iz//XzBv10q3D0fLz/+vaG0bvE/L
z/9niqjc7Odtp+Xn/5/d/+P2/mf3/7i9v9iB41Wydj8tP/+/PGnngkdGnObn
/9n/2f/Z/9n/n8H+DwAA8D/G6yK8CNPratMOb3p9buBhXSg5wPHZ5rbuBR0u
Nb2dSaXeHvZ+YnfHZ2u6J85alSuGSus1Kx2QLjRY6pKkk6fPqgDpmu6/X8k/
0lvaud/jjA8a+EuzpPC9OrN4pNT+6x+SrrDu39svzTijWb/G92OkdUdO/H5C
14vSWp9Munlh6mWp7VbQ91wuSA/5hycKXnpCavp4XszXaPWsutqNgz6zTXdS
09+nYb+3cJ80offWpbXuXVzi+Gzt96DOkZp2LfveP0pawno8TpWa7vkNK3a/
4vikO6QlrP14j9T+bb+n1PT3nFhz7gU/6ZST9crlO6HNsTnml3q/+0jn/lQi
YsrE49LfLu8f51HcXzo687mmDx/6SVO+23h/yzleUo86u57sGrBNetg2M2Va
K7U/3jdKJ1RsUDy86EFpykrtUrvUPSa134voKXVdc2vOgWQ7pRHWn4+31Ovr
rmW+zBMofRIQ0dF3SIA0/eqGx1ZU1yaxzoX8pfv/SLbtQH0/aZ+vXWdMqXlY
mraey7Q8FddI7fuoh/SHO0dq/fKhv9T0fGW6l9x07rnzse0H5IOka9paF9dK
G9//OLLFCH+p6Z7QWSV+XNt4xnGp6Xxq1ze2Z3B/qenjb/p7ikznj/a9TWsd
Q84IkM6xdmKt6d7z2oWrVC7a2Uda77dy97JvPCy1/ennaKY13at74emz/b2t
u6T256F10ujZ2270v7hS6pf/0w4zKi+Xmu4j9rD2xZ+ls5LuS50o5a9S+/Pu
VmmOPUWrpc67S2o/190qtd//vFE7onuieb47pKb70B1OXU/hOOsXqVPJhlfd
HadKO89cmS7m4EZpyk+ztN384V6t4R7he9b+ukZq2ledHU/MX7p3hXTSo0ef
vFtzv9R+T3WwNOWkh7PKl9Ta72MPlJZtXmNm80h/qel58rb1v9vxl86+1mZv
sJef1P6/Z9OaPo/Kb71/YEawv7R9hfuxy44FSK3jv7cDpS4fRm7p8raPNKTm
iSp7R/tLL+xt7r+oSJB0X7YNm1Z5+kvvjDrsduSdIGmFNeszn1ipjYptMjPx
3XDpgsLFY09W0FbI/47Towwh0pAezp82OxcpDVg8eYL7ujCp6byggO1lh/NW
qennHKKt54nR0oXWOc/PUtPj3Pj9iOnni/7S90F8vwwAAF5jvJ7Bi2D/Z/9n
/2f/Z/9n/2f/Z/9n/2f/Z/9n/2f/5/tlAADweuH1DF4E+z/7P/v/K7P/m/6e
8/xfZPo8olxMfOP2/4LzPLtmKhUT37j9v9OJqXeyDD8d37j9v2pd299kcjq+
cft/s6WDpn7TMia+cfv/ucqJVgzdHxHff2v/z1/r4NmeLYLiG7f/n61ds2H5
a6Hx/av7v+1veTlyKCS+cfv/gfrOTx/aZ+Ibt/9HzxyT6HLSM/GN27UuJKm6
OfRiTHzj9v+2W8Zly/RVTHzj9ue8BfIkq5YtIr4ve/+3//0TEfGN2/8zdp0d
5uASE9+45yu3y0OThQXGxDdu/++91m1g8PAz8Y3b/635NUdsfOP2/zKnfurd
euCZ+Mbt/z+tLr1rw+iY+Mbt/1k+sS1fp+Mbt/+PGjCwXLbCp+Mbt//vzjuz
4/j/Y++u46La1sePG6jYiHhULOxuxXYrdnd3t8fARsUO7A7swsAExQbpnmKG
ZmbPDNjdgT/2nvOs3+u1nu+6qMfjufec9fzz/vK93nOPMDMwn73YzwcDEfp/
i5FtFx04LxKh/7M+/6w9BY+jDo0+VE0kQv//etI+ZP5rAxH6/36ffrP9bYxE
6P8fd2sdF71NIEL/X+Za78vURfFE3v95/+f9n/d/3v95/+fDhw8fPnz48Pkp
w3+e4fMtw/s/7/+8///X9H/Wfc6h99P9H3o/3f+h99P9H3o/3f+h99P9H3r/
sSYFFmVtK/7jzv8XvbF32Mn2enT+n+7/0LHo/g+9n+7/0Jvp/vyrzv+7V8ny
psdAEZ3/p/s/9H66/0Pvp/s/9H66/2d2/p/u/9D76f4PvZ/u/9D76f4PvZ/u
/6zPP2tPAfR+uv9D76f7PznvT/V/6P01jfOdviaJ6Pz/DN3JivMdRN7/ef/n
/Z/3f97/ef/nw4cPHz58+PDhwyfzYXX7//jnv+Pn2+/d8zsn9eHVOcORrnuy
D7WrPAfJet9aQ8ofpUORtXM8rb+vuRZZXOV/ZNUC7A51rg0TL6iRoQ7OGw6v
1CAT73pdjbsSjWT1/4X5Xm+dPzAFqVOZf5tnZ0bK6yzvRyGbRgwufM8+COn2
3qp36IIHyI2T7KJq+zxBur07NODZchPy2Opkm+KOccheKXEez6ZqkBNsrZpZ
1cFm/I8PCqisQNrKod4XadkzeQHLGNb+XFaH2SL/vT2RzL7EuN7UU+5qPsgK
xxbVmrTCH2kn76kORd4alMtz/skApMuQTSXbNvZB1pl8P//WUf7IWs7SZmgF
clzJHlJaQP6+Nt/+c62wDw9d1Ny4qUKOu9a3QKijBtlM7lhqJOu6WKS+1HbV
USXS+vmXTc9XhCI/f1bYzCrhh7T0jFBkCXcprCqQ8mWOaiqk/OUsrEC+dlmc
vUBKELLjsFsndU4KpLRFt9RdFbK+Q4cJufomENUvqhdfuUkp7K51zeeYhxo5
O26GfY0CGmSa3DOUSNbe2IDDDkubd7yB3CA/3m8jWd1sq9z/VMiV/aUrcwnE
8vLvJaiEZw2+Os5obyKWyh8iXSEUbKTLgb3MxFHvzuTaXUwnLN4RMsCkMhEt
r2NawffMlBrvZ6cQR7r0THY+HyOkRL3voLuURFx6OOlDn8dqIf6AENiyXyJx
we8V5t3crBJSx547Pr5+IhH2iT+wz5ueWDGRuP7xswuDRqqEiqN9m/qdMRLd
JnSOWxSmFrLmX+jeycZEbHP7tvuGnRrBWl74biTC6+HaNW9iRjdLIlaVH1hq
Qbo6Vih7MhH2np/OWa/04llq5LJPGyptNmMLvHk7q15/FZK13zZiZmxeh97X
kF3l77d3kL76ufPzVItEOp66Wm+vLhzpPmJGs+Y5ApEhgQEjxrkFIC2fl0Dk
55erxlx95o/0qJRkP9YYgNSf79bleSssa0+3/PS2USCz1Vq/Pc98FbL2s42m
6e+USNZ9z1bKj697yIHyC9dNpE14ltDN1/2RzxWTBvQpFoDs3GfmhxJF/ZHW
Hzs2P3fhKnKgzfbqa0NPIFl91UPe5+yJtJG/X51GNp4wskn4Gx+kc0LTgvpP
t5HLcx0NSU8PQ3aruqjHgoUapLSNfVuSCrlZXsSNZb1+svbq7lk33px8BFsk
Z44PxtYq5J02p4Z1G6VAsl4n5+61Lzu8hhLp3HLK63L1sc139Qi+MFaBZN1n
rOUGK/vXjdXICqW1A9yeaJCWx4sa2aRXFulbPTJi6wrrXP6xSCd1qcfX4rH6
fhMLT2qYjAy7VCvjJ+94JOvn7cYHpqxKOnsHKz++PJCsn/dY54h85esqy5BZ
Pkjnkvpiv/d9DR8+fPjw4cOHDx8+/w3D+z/v/7z/8/7P+/8v6f/Q+2n/1/s/
9H5a6P10/4feT/d/6P10/4fev2WqVNpN5GPo/YfSc3fxvGkkH0PvLzXeM/eo
/EbyMfT+Y6FjPjh/FsnH0PtpoffT/R96P93/4fWP7v/Q+18Ptrad7WokH0Pv
p+X9n/d/3v95/+f9n/d/Pnz48OHDhw8fPnx+2vD+z/s/7/9/Wf9/+XWgudEa
NRH6/4N1PVdtnqsl/mj/nzemYEyXuWoi9P95973OVs0nEqH/b7vl5DRmtkiE
/r971pH9ceNEIvT/fktm+4wsbyRC/7dd3y4mTW8kQv//EiQFPSMR+n+xi90v
PrQ3EqH/1yzYxNBvYgLxR/t/9OHgvVZ+WiL0/4Vh6mNv18YTof+nyx0xgQj9
/7r1sZofYuOI0P/jH8f1yNMwhgj932rYgrLPUg1E6P87TnV4UqiikZjZ+f+z
gXOrxew1EqH/F9/fZ8jeCCMR+lWH934R+lIJxJ/d/9Pl+23EE6H/V61p/2Dt
I5GY2fl/6P200PtpoffT/l3n/6H300Lvp2W9Hn7v+X/vug2S/JYYidD/HeQb
IhmJ0P+nl7f18y6RSOT9n/d/3v95/+f9n/d/Pnz48OHDhw8fPnzI8P7P+z/v
//8z5/8Pvhp0rOjeOHT+X7e1WvnoZkno/D/d/6H30/0fej/d/6H30/0fej/d
/6H30/0fej/d/3/V+f9pLu/eN68s/mXn/+n+D72f7v/Q+ztVvjQ4cIOIzv/T
/R96Fd3/off32T49/+WZ4l92/v9ClkWDq5YT0fl/uv9D759176yikkr86f0f
ej8t9H5a6P200PtpMzv//2f7P/R+2szO/9P9H3o/3f+h96d57Frj/lzk/Z/3
f97/ef/n/Z/3fz58+PDhw4cPHz58/v/8UP//P/486+dkeY/WEOx3TrFGdxa5
HLwi0LLuO+E5YNeBz4IWqd5QV9g4SYO8seJL/xJt1EjW+7imzQ7vc56iQL6P
NCzfeC4UyXqfFRQvXSAwIjPeFPYaFJ2G7HreodIAGyOStZ9Xvae94fPyR8hs
5eMfOffTI88s29DhUKIGOVpew6lCSrVn/xwFsu0B28MnKvgjbZaNKJfz3Hak
q5QpDyxHsnq7j7Rude015Ooa7U9XdgpEsjqGq/x4nII8fHJd/iynbiBZ+4hX
3XSs6ZddiWwtf4EUSNafZ93H49jg0lJaRVp6bSSyTrSYtma1ArlY7qMJxNKW
YCuo5CBmIppWDjjS7XiMkCqtaSxsJuaX9/NqhSXNjGWGBScToesGRhfMX/aa
EukZlFDhwhYF8rVHi6NjJ0UjWft5s8yQHpHRSNbnjdlt5H3RSmTAyLBV08cH
I1nXZfYUyHfrViMVMp90W5jHCmTuTfWOr2ljJPaR94SqhMMLxjpHVzQTpa29
e3y1gnQqXJsb6xApBVsV8rdjmsJH8kQjs8n7pf2RIfJ1Sy9k+opWidkPhSLf
ji/lJe5VIXMLe4rfGoO9rRml3WeTTJSepUW7aIQPbn478iaZiNLVKZvaWsE1
3qV21GIz0Wmg/72dM3RCzqi1B/pVTCV2la/zxgp9ii9InpRuJqbF3JQ+FUIX
+cY/ZqI2aeedfI10gtD/Q8Yrspl4R94rrRPWt28q3hhtJvar07LK7011wtca
FffWWWYmCl8K7xo8TyfsuPxux6kOZuJE6+sbO1rphIcfPuYsecdMLLL77sy6
LzL+fM3ed0IvpRInpU/Tb4iNE3qoA3K69jET9Z2kbww6Ib+8NzWJCHuQSz8p
GfNyC3al/O0qEvm4ueuzeSujkazuGiL3sBtI1nU3y+tuMHKwfEEnBJm4dPjt
vKoI5OHWm+vnXh6JLJZYoEfrE/7I5j4BPp39byIdCm4L2vjsDrKj/Hsy/sgC
WaWNuaHIWa5u4vFsUUjW65Vrjlh150JKJOv1cGfjbONHaBRI0/R3vcqNUCIt
+5YjkK0KO5tX3QpHnpsn7TUNRkq/HaLZGIS07KH1Q1r2sp5E+hjTuyp2nkK2
kruvB1L6KWLHoMtIk/x7OF7IgXM25lj69DJSL+9X34d0rbhCUXf5ZaTl5zJf
JOvnk44Vlk9p5BGOnFZz2PSZHZRIabv72T3YIvLPNWrkTnmPtArJuo7wsaRL
/kEbVEhh6iDpWy6Sdb++Eav3u9WJx25dfizfA4MCybp+ekd+Hdci0+QnuA7Z
t/3BefuWJiCrN/uw9NxLrPxyOSAOyfo+aJYPzMQiWfdFbCXvZ16BzOIo7Rt3
QbpK64pLrUUy3+/8x/dN/LoAHz58+PDhw4cPn795eP/n/Z/3/39N/4feTwu9
n+7/0PtpWee6ef//z/0fej8t9H7a//X+D71/07KWtgUfGcnH0Pvp/g+9n+7/
0Pvp/g+9n+7/0Pvp/g+9n+7/0Pvp/g+9n+7/0Pvp/g+9n+7/0Pvp/g+9n+7/
0Ptpef/n/Z/3f97/ef/n/Z8PHz58+PDhw4cPn+8e3v95/+f9H2m9Z3GvNr8r
iND/vwxwbeFpF0eE/m9+0GtR29B4IvR8176zhv/2wkCE/l9uw1XTmA4iEf48
3L+Dvo/HpSHV1owtIRKh//t3lEqZgQj9//3OfE7B1iIxs/P/0PtpWf2fdf7f
SQ7OIhF619VC6/Tx+UUi9P+4bE0PNVwYR4SeZu7etV+zpzoi9P8R459v6jQp
jgj9n3X/c+cG0o32E4nQ/y3dNIGYWf9vKeXmYhoi9P+zDcueG2UQidD/x095
MMutmUj80f7fKuhYj+lhJiJ0j+d2fZuuixGJP7v/y7dr2aklQv9PMFT1cLY1
EqH/m7pJxUckZnb+H3o/LfR+Wuj9tND7aaH300Lvp4XeTwu9nxZ6Py30flro
/bTQ+2lZ5/+fHT/t83mjkQj93/eJ9EgwEKH/WzpuHPFn9//mnzodObkuhgj9
P3/KrvK5CmmJ0P+7Tw+rsa5WLBH6v+X1KZbI+z/v/7z/8/7P+z8fPnz48OHD
hw8fPj9xeP/n/Z/3/+8+/1/LP7JdsWkGdP6f7vnQ++n+z/rzrPt4Q++n+z/0
frr/Q++n+39m5/+/tf9D73/W4KvjjPYmdP6f7v/Q++n+D/3Mfc+ZuYmHDN98
/n+ElOV3G9D5f/rzBr1/8qUDneekin/Z+X+6/0Pv/7P9HzoH3f+h9/9V/R96
/8ge1du1ralH5//p/g+9n+7/0Ptpef//z/0/s/P/dP+H3k/3/191/t+96rhn
VXuk8PP/vP/z/s/7P+///+f7Jt7/+fDhw4cPHz58+PyiYe6nkn5ubft/+H0/
r/rK/z1ngdZhbblPn6asRrL+OcXkvbtXBVpxk7TQTYWMeLtY/JIWg2T9+d3b
L23bF6lAdlg84didK0pknV1SSQ9Hsu67MsZo51nGLxHpHXnwy/GeRqRUn4oe
f4BsMsvGMLLYI2S9hHfr3h1KQ3oPe72oWG4TcpX8fiUWefP+uzq2ExVI1h49
eR2vTShy5JbUxo9zXESyuv0M6W3Y9p3I+Vv3Tuz/1BOplx9Hx5GWfbzeSEuP
v4N8LneaC0jTvmvP5z8IRbq61vsydZEKObT64+Fv9NjGQ7rsHpKoRObd16H9
u6EqpHqu8tmoCgrk/knSV0KF9JP30SmRIWnSZr5opO3ZfhEeHeOJl12aLqm4
QkE6ON3DbXe+cVmcPZU4NtIr4xEUK0hfhVJNDUTV0a2bfM7HCju7j/ZeXzwG
eVAIbNlvhxqZc9Im/+FZlMgq8lrHKKRl/7MCyXp8wh5jWtbXpc6GYV+r+0Yh
HeJWL1zU5DrSJqbL3C5mXyTrPjynzi5/0XpBAhFeT3q1kTYrm4iilNHPxggr
ApfFu9ROJbavFVnslTpWKJjxrL+ZnkK8cLldWKMmWqGJ9oTv4vZqpEPvohce
eCuQY5t/NJ2MuIecIV9nO4q0XFf0R7L2JrP2pVqta+LbbibWu3dbzfJUJZJ1
7v166eyLK5ROJg56nlbryECNcHDTiFAHZxNxse/at02HxQi3ur3Mk3ujmejT
8vyCvJt1Qrr08tokldii1N1tre/HCvKa4d9SibqB0v9A7B89PoW4tETj8nP7
xwjZrXY8mJCQQDweM3+/qYjqj32hCUR4vF18W9tz2lsT8ciWqlI6E0pH5Euu
W9VMXCz/Po1WmDDqYGB0QTOx4Picz/bs0AryX6+InuhgVFZuNE4r9JE+fVuV
yOALY22atlcgQ7o2qP6uQCTSzu1MtJ/OFymvkT5wD7lydK83Td6HITXnT9ap
EhKNPPJ1ers1lxXIoqmDPn9WYO06VkwbVygaK/dUf+Rz+frGBWSIdLnw9CXk
SPnhdRk5NOjFyvSb3sjn0rruQgFIxS6Xxx13+iH18h7y60j5MpvdLaTifQfd
pZi7SI18TiEAybpOUSG6WeTd/BHIAOmvUSQSuaSDdEEEG7Go/PWExQFIy+dp
G3LLnuxD7SrvxMo/H3kip3aznjLQ5x6S1eHDThkH1LOORFoeX3eRHm6614Ot
LyN7yk/YE8iR8s8jq5CWv4c38nnGN+3DwaFI1vedLp0qdR35KAYJ+71pWdcL
YD88bR2zU6Mr4RqkfLlruwrJen0ekfWtV8ZLMvLYm/J7wlerkXMvLJyxbmYM
0iDv39YgbeTvZzpk933rw1N8YpEFe548NK2HCtmoXKGhN1snIYtUWfhwyWFs
g0tZ9X2zhyId5Ouox5Cs9ymtqm2z81/qKtCyzrFYzj11wX7v+at/6vDrI3z4
8OHDhw8fPj93eP/n/Z/3/39N/4feT8s6Dw+9n+7/0PtDv47ZmVIylff/b+z/
8Pph9STq0OhDIvkYej/d/6H30/0fej/tP7X/Q+93THGbPWKRkXwMvX9Dpc1m
9Qsj+Rh6P93/offT/R96P93/offT/R96v0PzayPuzDCRj6H315V/3UkkH8Pj
63OCb8YzVCQfQ++n+z/0frr/Q++n+z/0flre/3n/5/2f93/e/3n//58c3v/5
8OHDhw8fPnx+7vD+z/v/v7j/fw4KDBgxLpwI/V/5aW6QcENLhP5/aLpXRJPs
RiL0/wJtpTtAGYnQ/6H30d1v/KeWL9JfiUTo/6EPsrf30hmI0P9rGuc7fU0S
idD/W998dSr2lEiE/t/bY9Lo7L4GYmbn/1n7cKH307LO/5+R/rG9TUTo/7Wj
Fj/x3GwkQv83jhYvXG4nEqH/v350b71v7Tgi9P9JQXsOBTUQidD/Ty291/vR
U5EIj89tt5ycxswWidD/Weexv7f/pxVrnbtqYxUR+j/rPvys8//Q+2mh99Oy
zv+7FJ9e695EI/FX9f8LWxSx7vEiEfr/qHb63WuzGonQ/8WXjWpVSheJ0Jdu
DmjhE+AjEn/0/D/0flro/bTQ+2mh99P+rPP/0PtpoffTQu+nZZ3/X9dz1ea5
m0Qi9P/KydINduKJP9r/7fOmJ1a0UxOh/0t3zdq6Qk+E/l8kvu3gjdcMROj/
dc5LG8ZFIvT/KWU7RmStJRKh/09SebZ27B5H5P2f93/e/3n/5/3/Hza8//Ph
w4cPHz58+Pzc4f2f9/9/cf//0fP/dP+H3k/3f9a5X+j9dP+H3k/3f+j9dP+H
3k/3f+j9dP/P7Pz/t/Z/6P200Pvp/g+9n+7/0Pvp/g+9v1r+3x8fWWhA5//p
/g+PR7r/Q++n+z/r6/Krzv/Tfm//h97vk6tl/TKiCZ3//9X9H3o/3f+h99P9
H3oS3f+h99P9n3Xfe+j9tH91/4feTwu9n5bV/X5W/4fe/7yMlVj6vQmd/6f7
/686/0/3f+j9dP+H3k/3f+j9dP/n5/95/+f9n/d/3v//4cP7Px8+fPjw4cOH
z38eZs9nOF/a/zYA+x9/Lv32n8dcGxcLOv91nEB7WN47twZZ0t2n32x/X2TO
jx2bn7ugRc7PU+1AwOQYZKX0akOOu6iRckZYj90UVcCjUlIYcsnVFp2W1g1B
Lli1MihVo0Ve83yV5U6KAZn7xkun5EgjUs6CvdOQNrNKbLU+/wQ5ZczEGyu+
pCI/yPuE45CsPrZDnWvDxAtqJOt99A6543ojFS+k0LEV6St36GVIy39+BDny
srTA9iwyRO4QnkjW+yzLPt4zyET7sUY7z7vIcnLHDUVedJc2ximRrD2tX1Xx
46OXYGvsSL5WP12JLPDobODcaknE87e2zHs1Vi3Ms5vT2XWXCvn4o/ROG9ui
0Jnnyigl0tIz4okdh906qXNSCH3tk2PbvIknvpHP1ysF+d9qjon42bbuyAMj
Y4S9xotFWx1PJc6eXH37gttxgrxmtZieWFq+fqdl7stmdQ/W4421r5a1b5r1
z7cOaPF87wcFsqO9tCg8Cuk+Ykaz5jkCkdLVg8nV/ZGND0xZlXQ2Cjkj+4SA
qDMq5NxXYzMeMiZiTTmHa4SdBz4L/T+YiVOS7xlPTIgVFnnN7hveJpXomO9S
vi2fYwUHee93ChH2HrL2P8q/nhCmQF7eti+yZ0gAUlG50bhdbXcjs7R9KDa8
fRXp7lYnftvmSCTr88/6eoVUu9tk6EUs7Emmfdd+1rVPVZTIXilxHs+mJhJf
XLwzeOoplTDmrPQZMRPh+8ibnrfHXuubSpS2G08sHSfsjZU2SeuJcj1voRPi
Tq2f9dFVidTPKWzT82Q0cmGY+tjbtfHEEvL3NQXzdcD73Kacpvsm4pnPqTP8
2muFsbvaFrWONhPlNZWFY//YM5xCtI4/IAS2jBHS2mb1WHpPhbR0eqxlf3II
cs/pQmKgbSCyVl0p2EchrcIHnQ9uFY2tlDshW1Ns79AFgwIqK5Cwn5z2ab+C
0v8U8njWJk2bHQ5DsvbMbhCPZzvYwBtp+Xv7IN2fV/Na53UDyerMep89789O
9UN+3ui27m7YVaRDoHQF5zzS5smcG9WKXUB2zXj1s21+ERlw2GFp8443kPLa
ZntfpJX8+yr+yLH1LjR6dDgQmSxfrwhFtlp+fWrj/EHIjB+mMr7jeiGLyddz
DiNZ+4Lnn6jtH9nOB9nx7pqtrVbcQTav2++Jj3AF2TNeH+C57yxyi/xz3xlk
lpRn1hkPeuThMvZO08tfRraaXt7Wz/sm0rI3+wzSekSbjG9xV5A2UrWeGIqM
lCr9USWStV84Sqsy/zZPgyy1bZrHtd1qpKLuctveMzTIYOnXJN2wd+5IV/qU
SOnZYf+7Gsl6/YytUadT7G8KJOvnq9ry/l41Ur78vE2DrGS5cIm0XDcQkR+k
bw+/JSAt1zNvIFnvgzw8u6a+Ge8p0LL2C3/3+z7W+zWWfPjw4cOHDx8+fP4Z
w/s/7/+8///X93/ofLQ/q/9D77catqDss1QD+Rh6/+DjLtvHDBPJx9D76f4P
vZ/u/9D7f591rsuyTybe/7+x/0Pvp/s/9H66/0Pvp/s/9H5a3v8tQu+PlZ7O
xY3kY/i+Qfd/6P10/4feH/p7gaJTx5p/uP9D76eF5/21DcbcX+YZycfQ++n+
D72f7v/Q+2l5/+f9n/d/3v95/+f9n/d/Pnz48OHDhw+ff+Dw/s/7P+//39z/
X+wbnrf1aC0R+v81OciIROj/uTfVO76mjZEI/V+6u8kjKyMR3p/OlR+QIjGz
8//7pYe7jZEI/V9bPbx7ehkjEfp/uuOM9o/PicQfPf8PvZ8Wej8t6/y/VHdt
JhiJ0P9Z9z9vly3/QvdOsUR4vFUaYLO9+loDEfp/oUOtqjWpbSRC/2ftWZDu
atLTSSRCf15x07GmX/Y44o/2f88i0h0NDETo/8Uudr/40N5IpPs/LfR+Wuj9
tKzz/0tNwYnrTovEX9X/azjXv9l1YywR+j/r88/6evn7f5x86YBIhP4/fsqD
WW7NRCL0/4RemqpZB4vEzM7/s76PQO+nZZ3/77p85Josq0Ui6Vd5pTsrGYg/
ev4fej8t9H5a1vl/jaJEOf9KRiL0f3WafkrI6ERiZv2/RvYKQmp3DRH6/7kb
QcuFeQYi9P+yRy418d5pIEL/N8xLsrLaYSBC/8/4OywcF2cgQv9/vzOfU7C1
SIT+321lNRev2YlE3v95/+f9n/d/3v95/+fDhw8fPnz48PlXDe//vP/z/v/T
zv/T/R96P93/4f0o3f+h99P9n3XuF3o/3f+h99P9H3o/3f+h99NC76f93v4P
vZ8Wej/d/1n324fHV+9idqbNuQzo/D/d/6H30/2f9c+H3kz35x89/2/4khZz
0yEJnf+n+39m5///bP/P7Pw/q/8/jjo0+lA18S87/9++1ymriVUN6Pw//fln
fb2g99P9H3o/3f+h99P9H3o/7ff2f+j9tJmd/6f7P/T+aS7v3jevLKLz/7Tf
2/+h948t8fCJeawJnf+n+//PPv9P93/o/XT/h95P93/o/XT/h95P939+/p/3
f97/ef/n/f+P4f2fDx8+fPjw4cPn3zlyF+kpIFn7pOT/fCRD/M9xlTv9BCTr
uoC+ofTz7AakZf+kL5LV51nvX2CfJ639rTG9BzdQIcdm9z2ds14UcsTq/W51
4lXIgcuOnnqaKx75NVgKU3qktJU0T1oa8uUt9ecE3wdIF+39duOPYu+2zTew
8kAz8jdb+/19hsQh5S1mH9RIS+dQIbvL4cgfadlfdwI5smh/qyXrPJCs/X1b
vnxpmLfrZeSeGKVryQO3ka7yXkHswLN7em097oEMkRcjeiFZ77t9oie+HNjy
NlIxzOmSx8cIpHSKVjddgex3aMWFsm5K5NEZS/yePE8kWvqwWtgZeiv53Ipk
YsP98oZPYVf+U35iKzNx2p2iaXfeagU5oxQ3E637vZ+Y5qEVrkw8Xv589WRi
36brYqqN1zDPD+d7YFDca24kDpyzMcfSpyqh89G8K9PeGokx8vlfjZDxIC2a
WCCN6HFN2oAdL5TIeiXjLbWBqFN3LtQrb7xQvkrZHB2Kq5DCi/RXD4cpkG9n
1evf+0ookrVnefGZKqcKFlMiW26wsn/dWI3cKj++VMhR459v6jRJibS7Nnl6
sdGhyNdlpVeWICRrLzZr36ul6ycSI4fMv/U6n1qYeqr3ges3zMSiL6cfnPpQ
Jzw2fb0U9nsqsdi00OBNfeOEPsUXJE9KNxOlqw+RM2OFws1t2r19l0K8nP9N
xqdUKyx4Hdptb0UlknV/Fcse7Cgk6zrs+yNlTY7lLiEt/TIIyfo6FpT3JCuQ
PR9U6H92jxJZS/69AgWymHX0k921I5CW612xRHheL5TDlJHYwKHDhFx91UJq
G3fPE+FmYt7q2TJecmMF5z3elVY21BPXZev5deUJrdBY/3xak1kKpHNn113b
uoYgtdLLXCkF0vastCg7ngj7uA8WznE4PbeR6CL/3oCKef//cdf6Fgh11CBZ
nzfW/ZoadM2Vc3jyTaTl8+iLZH19jywMnX66ZDyxtbwoWiGM8l5fvEgnkZi9
QMqu8rmUwmB5j24S8dNureOit2qyr5h2wMd6iUNXYtNXtErMfigUabkudx7p
mvHJrrv8MvJcYjPn+JgA5OQFIbkvOIUjnROaFtR/ikTabAva+Kx0NNJJ/r4U
jgyT9w/7IVcmGKp6OF9Gvs/f2GXIpnPILEU+9e3V/QKSte9YIa0Bdsey9p5H
5EuuW7XmDaSl3/sitUk77+RrFIyUflg7UiMAeWtQLs/5J7E75D2395CWjn4D
OTB+TcqcwoeRDrs8zqU9ckP6yv+9fcjGi6RwegXZ8encMhVfBiJHyj8/3kM6
yNfJryKzSN9e8/shWXuf5W8TBYKRrP3slr+3L9JF7sHhSOlUQvWmGmS4vOcZ
y9rPnvHgKiQGqpDFBkyaP6ZgDHL942cXBo1UIcdKx1z6hyPblvOZu+KGEmk5
R6ND1qhtSmoep0Guk39RLx452HaYQ/NrKUirOn3X3hmXiGwaMbjwPXst0vL6
4YWsI52yaLgL6Sr/3L0K2Up+wV+BZHV+1vmrv/ttKh8+fPjw4cOHD5+fNLz/
8/7P+/8v7//Q+2mh99NC76f7P/R+uv9D718XnuKz572RfMz6PQLo/XT/h95P
93/o/XT/h97fZY+vtnp4Ku//39j/ofe3Hzrg3JcuRvIx9H66/0Pvp/s/9H66
/0Pvb+ItXVky8f5PyXpeQ++n+z/0frr/Q++n/Vn9H3o/LfR+uv+z7v//39b/
offTQu+nhd5Py/s/7/+8//P+z/s/7/98+PDhw4cPHz58/o/h/Z/3f97/v7n/
s84JN58jKJ5+NhCh/+dJT6xo5yYSf/T8P/R+Wuj9tN97/h96Py30flro/bSs
8/+z7p1VVFKJROj/B+X7H8QTM+v/yk9zg4QbWiL0/4PSp7WXSISuuNS51JAv
o4xE6P9Va9o/WPtIJEL/99uRNymiVgIR+v+DdT1XbZ6rJUL/HyRIN6yIIUL/
v11u9/gNHwxE6P919+r2z1GIxMzO/0Pvp4XeTwu9n5Z1/t+9SpY3PQaKROj/
l9/tONXhSRzxZ/f/4W/0tsZqMUTo/6yvY5p8AyKRCP3f+ljND7FbRSL0/3n3
vc5WzScSoWNbvpx6Ymbn/6H300Lvp2Wd/3eRw7yBCP1/X58heyMexRCh/0t3
N+qlMRAzO/8PvZ+Wdf8f2/XtMp7KRiL0f9bn7Wf1f9bXl3X+n9X/Wef/5afn
JpEI/f9ale7V9J0SiL+q/xeZIt15REeE/m+5n1MsEfr/hHnpdp8ynscg7/+8
//P+z/s/7/98+PDhw4cPHz58fsrw/s/7P+//P+38P93/offT/R96/7LoiDWN
hxi/+fz/t/Z/6P20rPuH/6z+D72fFno/3f+h9389aR8y/7UB9f/S4dIN/vXo
/H/xIp3WGwQ9Ov9Pd0Xo/XT/h95P93/o/VtGbS9SZaGIzv9XSPSelLu0Hp3/
vz7tQK7nX5LR+X+6/0Pvp/s/9H7an9X/offTQu+n+z/r/uq/6vw//XWE3k/3
f+j9dP+Hbk13bOj9dP+H57EmcMrCmlaGH+7/mZ3/p/s/9P4Py+am9biUgs7/
0/0fer90l/Tfcok/3P+h99P9n/V5+9nn/+mvL/R+176zhv/2woD6P33/H+j9
wxaufuDra0Tn/+n+z8//8/7P+z/v/7z/8/7Phw8fPnz48OHzjxpWt2cNa98T
q/Mz9v+6yvsARyP1OeccGxe1DqkYm2P9wRuHkK89WhwdO+ku8o3L4oy3/lrk
phZ9a8fVjEGO8Tt0c+VoJXLtFW/n64GRyOHy/thwZKvzC/Ju3h2FdK3cLdD8
eyKy0ibXuKINTUjLuV6svKWx6yPkJ5/Ums2HP0QO6ida71lsQG7s47XEanYc
spm8v06NbF45T6svhYOQPvL+4UtI1sPnsHx+fYdAayPvkduO7Nhn5ocSRa8g
NXJXDkCy9qDFOklXGryQlusPgchtry6v7eGAZXUA/fluXZ638kLGhn4dszMl
Alnq3YTl528pkB9LuuQftEGFHO7+KX5ImRRi+jT9hthBMcKEUQcDowuaiQXH
53y2Z4dW6FJqvGfuUWaipYfomPch925uWjngiJl4uqS0qE8nfK1RcW+dZWai
8KXwrsHzdIL8tvO3VKJuoLT4OVboaj1loI9tKjHuyiG7yftiBXlt6tY0YuQa
aSNrgvBOJy3g0yJZ90caO/x3bevqUUhX13pfpi66h5Rvc9QtCpl3X4f274aq
kJZz0tgiOXN8MLbGquX90krkQDl0RyGn/r546KvfsJZz80qkVFNtaicT1Rvq
ChsnaQSnsn1cTvubiBkvJkO7fo4RJnU9lvGMMhNt5fP77K/jcWm9ZTEzEfrz
1ZJN1s6ooyfmzzvg3rD9WqFeq5djngZokBkPvvxlrymRpS0XcJCwH5iWtSfU
w033erD1PWSDtHw1JlyPQh7I+O5j46tAPo33sirYVom0PF5USNa+SFaPnT7h
87FHsSIR/r4PCrwdMi2fmWjr511Cs1ErFOsmXbFKIV4vnX1xhdJaofazjabp
75TIxPdPXyzoHoC08yzjN9QxAtlZfr1UI6sVK7Oj0QEjEfazS1+FLaVTib3f
NHlvfzlWkLbNlimoQlaQ98dGIee2avhA6xCOZO2TZV0XuPchxzX/PgrkngL5
bt1qFE+E6yOvHg7bktrYRKy8YNXKoFSNkG/L5z3N6sYgS96p2aFAuQik9TKf
XC3rRyP1naRPYDDyovx8vYR8rpg0oE+xAKR09XNfpAKZJ3FCgwU1opFVHA53
FRKikJZ+r0Q6yEFShfxcun22/AsjkBdDThQfs+QG0qb3jB1lW5xDdpyT+vDq
nPNIy3W8i8i+8nV1H2TJQfWnFf1yB2m5XnQb+d5/V4zS9RYyn3uhZmc7Y1nX
FyznMu4g28r9MhAp/a1LDg7BrtduHlnrJtJy3fIIkvVzUSv587dEoLV09IvI
16tDLobm8UKy9qfr+xws7d0hANlVvqAciGR9Hlx8175tOgyrkS5L295APm/u
+mzeygtIy3UMb+TzhmPrdm6hRAYlVLiwRRGLbHtl1jPFJB1yiOVCKLJFoTPP
lVFKJKvzP31uJx2FQMrrz/tpkLCPnfb4+Pp29QJ1SMv121ik5fc5tcgsbVbd
HxJkQHa90TAkqGo80vrGS6fkSH9kK/nruRN5+OS6/FlOrUfWqbbNzn/pFqSr
/P5vEfJPvivlw4cPHz58+PDh81cN7/+8//P+/1/f/6H300Lvp/s/9H66/7Pu
Qw69n+7/0Inpbgy9n+7/0Pvp/g+9n/f/7+v/0PtpoffT/R96P93/WV9H6P10
/4fen3qlfe16hc28/39j/4e/H93/offT/R96P+1f3f+h99P9H3r/f3v/Z+1H
gN5Py/s/7/+8//P+z/s/7/98+PDhw4cPHz7/6uH9n/f/f3H/95ADu4b4s/t/
18IlsnRvGEuE/v+sao/N8eVFIvR/6ZfFL+Q1EjM7/w+9nxZ6Py3rPiTQ+2mh
E9NC76eF3k8LvZ92yL66qafqmonQ/4vJ99OKJ/5o/3fUJISHDjQQof+P/9Ty
RforkQj9/3729l66ByIR+v/kSwc6z0kVidD/O1W+NDhwg0iE/j/ny4UsiwYb
iND/m65vWrFVFwMR+n+TM+aylW+JxMzO/0Pvp4XeT8v6OrLuP8M6/7+gu53r
x8omIvR/p9+OaQofEYnQ/xcfTvrQ53EC8Uf7f0M5cKmI0P9rTixdPGm2gQj9
v1af8gFuFUUi9H/pLkrrJ4hE6P+HpntFNMluJEL/j5CDkoEI/b+l+UGvRW0N
RLr/00Lvp2Wd/39fcbRvUz+RCP0/6oxtB9/HaiL0/4dWZ89f0uuI0P9zxEo3
1DIS6f5PC72fVr4MFCkSof97jJBu1GYg/mj/n5b1QLT9bQUR+n/r6gerjntm
IGZ2/p/V/8fN3WtfdriJCP0/7UBqSs4oPRH6v3H6u17lRsQRf3b/f+cXoS+1
PZ4I/X9MRekObgYi9P/Jjm3K9nExEKH/t5vZO2uPfSIR+r/rpw2VNpsTiLz/
8/7P+z/v/7z/8+HDhw8fPnz4/MuH93/e///F/f/vPv9P93/o/XT/z+z8//9q
/4feT/d/1n6EHz3/T/d/6P10/4feT/d/6P10/4feT/d/6P10/4feT/d/6P10
/4feH/b6ypNOH42/rP9D76fN7Pw/3f9Z5+F/9vl/uv9D76f7P/R+uv9D76f7
P/R+uv9D72f1f9b5f1ro/bduu2/YqTGh8/90/4feXzOu5s42l5PQ+X+p2tqr
9ej8/5/t/9D76f4Pvf/P9v/Mzv/T/Z+1HyGz8/90/4feT/f/X3X+v8b72bt7
1hDR+X+6/0Pvp/s/9H66/0Pvt+RKkfd/3v95/+f9n/d/Pnz48OHDhw+ff8sw
9ucyu/1/3Of7f+z/lZ2BtOw3W4hk/Wvq5Z6xQ6CtF7i7acRgf+Q8uzkZPzGr
kH478iZF1FIjHx66qLlxU/XNVnmd4nm/ZxByrby/Kwy54en14/m7JyLLH1tU
a9IKI3JzlUEZ7+jMyBJt1KUeX3uIbJ0+f0uD6Y+RlvcxBuRtea+dBnlQyh1r
I5GPl0ql6BLSsh9sDpL5eDttulVDPCbQOsvXeS4je8qdyQfJ2uOskPczeyF3
dB/tvb64N7JGsw9Lz70MxxZfuanQDgVymXxuUo2cJi+uVSHLeUrvSH2RQ4Ne
rEy/GYicrPJs7dhdiRxa/fHwN3oVsoxRWbnRuGTiXa+rcVcOaYTS8mJEM3Fx
M2OZYcFaYV+fIXsjHpmJ8L7yY06pcKUSG17Kqu+bPU540vdM/QHXzER7+Tyy
Trg3PMvWG/PNxMCRUmHSCUW79NW+emMmTm8yy8YwMlZQfpobJNxIJRrlfbtx
worAZfEutUXiyaH3x8/dG8/cxw17bmkDDjssbd4xDJlNfnz5I1k9wSnYunNH
Pyzr/jCwT5WW9frzSH7eKJF32pwa1m2UAtm16qIeCxYmEh9/HJH1rZdKSOqw
zqVdLTPRsoZUK8gZpYyeWFzlf2TVAq1gdWhvwZlXk4nH5Otrmj+u1yUTLd1Y
I6w8IV0ZMhEtHSZGMN5/7DpZZSbKl2GLxwpRTScG1j+hJzbrIN0xSie0SpPK
sBrJ+jruGOg5un077OCXl8r3ax+FNMn7IQOQWRa+qdVxdgQyUl9qu+qoEhnY
19uY3lWBnGm8GZzWRInUnJdKdzRy5eheGa9QYci+9smxbd7EE988urfet7ZS
sDKueHlytpnYaZKyY4ehOuFLf+mVXU/ct7RE4/JztUKItO79ohKZuO705OAv
ocjBo96dybU7BMl63D6wz5ueWDGRCHswX72RFrymEitmvOi9qB4nNOmVRfqW
iBzb/KPpZIQKKT2KNaWVSNb+Vsse+2Ak6/42sPeX3v8b4ygtTjUTH9n49iz7
USt0kD/fKcT7Ta9+9N8VI1RZta+SY5YIpPxjir0C6d6v4ibXuGCkVNHdO/ki
D7feXD/38kik78H+69cOViBZ95uCvcS0rD3FsD+c1vHU1Xp7deFIy3WbO0jL
/tvLSMt17zNIy/PgBrLphJFNwt+EIGe5uonHs0UhL94ZPPVU70gka5/s2q2t
VpSecA950d28MN9rPySrb8sPm27+yP7y8/kekvVzKes+XVXkJ8Id5OG8K9Pe
hp9CWs7FLEeOlNffbkNank+HkSEOzhsOr/RCWvaT+yNZe64t31eCkJbv52HI
fPL/EYo8J/36klsYsmmzw/ucp/giNYWP5Cnz5BZyYM6OSyIOhCBZr+cOE+el
233SIE8fadR2dTctkvV97a1hXpKVlQbJ2lP8aOe4yl83xyCjetUs2MSA7dKp
UteRj7CHusTrAzzjkYV0RaZ8VWFnOstXXpHNhxXZUDAsHGk5j3Mcafm5ewuy
lfw83oOVn09zkH/Je1s+fPjw4cOHDx8+eHj/5/2f9///2f4PvZ8Wej/d/6H3
0/0fej/d/6H30/0fej/d/6H30/0fej/d/6H3y/nINo33f0ro/bTQ+2mh99NC
76eF3m+5b4yRfAy9n+7/0Pvp/g+9P105Z+qbNWbe/ymh9w8+7rJ9zDCRfAy9
n+7/0Ptp/+r+D73/RIXClS6+EcnH0Pv/2/s/9H66/0Pvp/s/9H5a3v95/+f9
n/d/3v95/+fDhw8fPnz48PlHDe//vP//C/q/tfS2uWgUEfp/xgeb4u7oiND/
N3Q4lLhjUDwR+r++qoez7dkk4o/2/4x/2JblxzRE6P87i76cfnCqSIT+X6Dt
1i9fGhqJmZ3/h95Py/q9cuj9tND7aaH300Lvp4XeT8s6/z9Dum3FeiPxR/u/
YfnGc3uvqonQ/wd2ihxfZaxIhP6fZVuZ2ZVPikTo/6z7w1tuH2AgQkfdL93e
wsZIhNeffk9LNX0yWSRC/5fuZlT1rYGY2fl/Vv//Wef/offTQu+nZZ3/z1Ju
zot9w41E6CR190qfSZEIX8dX8v0qEomZ9f9eV4rn2SuqidD/pbtg9RP1ROj/
QaXP7H68SyRC/78X++ZutscGIvT/Yg4f6s4bLRKhFxWJbzt44zUDEfp/1jW/
h29doSdmdv4fej8t6/y/v//HyZcOiMTM+n/+lF3lcxXSEqH/sx63rPP/0Ptp
P8v/fiYi9P9tXff4aqsbiT/a/90ynrVuS1KI0P9Z97eH3k8LvZ+Wdf7/TLSf
bkugngj931u+j10c8Uf7f51oMW3N6lgi6f+L228Pfmn4//7R/1n7Jtb1XLV5
7iaRCP3f7WyDW5fWiETo/yWKFl66s2Y88e/u/19GhT+c2EpLhP6/9+nIuzFB
sUTo/5b7vcUSof8fqDruWdUeOiLv/7z/8/7P+z8fPnz48OHDhw8fanj/5/3/
X9D/Mzv/X31x8em17unR+f+3TaU3QCI6/+8gv4Ez/unz/0+FC8k5JiWj8/90
/4feT/f/zM7//7f3f+j9tND7Wf2f7sbQ+7f2N07bNkCPzv+3viRtck5C5//p
/g+9n+7/rPvDQzelOyq83tD9H3o/3f+h99P9H3q/tnp49/QyRtT/6fv//Oj5
f9rv7f/Q+2mhi9D9n/V1hN5/Jn7m0kr3xT99/p/u/9D76f4PvZ/u/9CH6P4P
vZ/u/9D76f6f2fl/Wuj9NZ9Webgjixmd/2f1f+2WwCpv2urR+f9p+S/PXK9N
Qef/6cdtZuf/aaH30/0fev+f7f/Q++n+z7q//ff2/8zO/9P9H3p/3ulrTh1W
Gf70+f+Q9PR9OSoZ8Pl/qv+z9k1A76f7P/R+uv9D779dbvf4DR8Mf3v/h95f
u+Pskm+z6dH5f5cCd1bXaG9A5/+l32qraW/g5/95/+f9n/d/Pnz48OHDhw8f
Pt86rP7/QXpfMhbL6vysP+94+7flAVOxjH3BesW95m6HLiBZ92donTRx7+yc
WuSK/tJiTTXyXftZ1z5VUSIvlHXr9XCdAtlKWj+5JQppK++7i0Caitja7++T
gFyes0VUBetUpLBxkl1U7fvIu9Lb2gMPkAdGxjT87TO2w+IJx+5cMSCThj0I
nzFbibTsv72NzJLyzFrYsxe5x8qvQNZ8J5Az5Ped25DPpdtEbHJHVvNa52X/
uz+StVeX1RksvfYS8lb6ANcWngFI1v1VYL8rbWN5MZwS+eXlqjFXn6mRlq6M
dcx3Kd+WzyHICvJ1Hn8k6/pLTpN8wxVkwZ4nD03rgS02YNL8MQWTiD5VulfT
d1Iz79tfvYAmddHMVOLuuzPrvhgQJ8gP99KpRNj7uXa8OfmIOpXYS158GC90
tZ4y0Mc2lQh7fvPYtZgjKFKJ/cLbdJ9fJF6QnvUlsojEILkXxZP9qLSwz5PW
8ri4h5Qvw2wLQ7q0qxVZ7JUaucpRuoKgQrJ+74B1n6iAZzdyW1dRI2GfJ611
QIvnez9g68vdJYEIe4S/yHuek4gHpTWDO9R/9NdEYlw58/6Sj1TC034Fa9U9
j7Xs8U4gJmRreqjhQqXweV71pjtWxRNhT+6mZS1tCz4yEoedbL+2aBeNYJb/
xVKJebp43qy+OE4IqjpYWH5dT6xZcW+dZZ46YdK0KxOEqhpkZXnBqQLJev4m
m6TNzaHIobdO6py2hCBZ/QeeH7SW1yesbZ1PR1cnK5AjpXW360KQuY9Lr2g6
Yu9HTzuPWB0uvIkZ3WznQxOxmrT2u7OW+fsUrD2VQxo2ynhlUSBdpcsG/QOR
rOvXrMfD+GWd7l11TSVael2ckKvf+4lpHsnEU5WS7McaNWRPNa20jblTiQik
ZX+pL9JLvhAcidxc6nS9l7cSiLAHuaJq8q1uL0Wi5fe3VIKTfP3PTPTPUWJQ
/Wk6ISzFZ8/7s3qi/HTfphPuG6QfPKKROd2ye38YHoG07CUOR7J+L+n8mLPC
1EGRyNxlnpSMeRlL7Gs4duDY4Cjm74+wHreLz1Q5VbCYEgn7qGkbZxs/QqMI
Rz6WL/BdR7L2NZvk67rXkaz7/FhVyp3xEItGSi9Oz4OikNrc/YeN8YtGsvaG
s2S9Dmc8iHqVG6FEWtXpu/bOuAjk4yMLQ6efxjb3CfDp7B+O9Gl5fkHezcFI
1s9FPccuXRqZDWu3bES5nOew73XShaGTSFd5H+8JZMcDtodPVDiGfD+rXv/e
V04jWXuNWy2/PrVx/iBkx2HSC68CuSmqgEelpDCk/ON+Gax0F7p8jYKRXeV9
yFHIjvI+8ytIyx5aN2Rb6dtJT1+kl+7BmZEuCmSxxAI9Wp9QI6VXM3efGKRn
xqO39BkdknW+AvaQ0+6udc3nmIcaWfn3pro8N3VIf/n1Jh758pb6c4JvHLLz
RzfpSBTyoGLptaNt4pCNtSd8F7f3R2758qVh3q5HkSPl1/UtSOb7U9b7Rz58
+PDhw4cPHz4/Nrz/8/7P+/8/rv+zuhDrvv3Q++n+D72f7v/Q++n+D72f7v/Q
++n+D73fP27wjUQxlfd/Suj9tND7aaH307L6P/RdWuj9tfqUD3CrKJKPoffT
/R96P93/ofe/9Z2Q2sbd/K/t/9D7GzzQOpQ4pScfQ++n+z9rn8Jf3f9Zjwfo
/XT/h95P+1f3f+j9tND76f4PvZ/u/9D7af+u/k96PyX0flre/3n/5/2f93/e
//nw4cOHDx8+fPh80/D+z/v/P6j/36nZoUC5khoi9H/W/dXHf2r5Iv2VSIT+
n/FmqPilKyIR+n9y5eSlw28bidD/x+i+5rl4Kon4o/3f8riLJUL/H314c4D/
R5EI/X9if+lGMiIxs/P/rPv2QO+nhd5PC72fFno/LfR+Wtb5/+kTPh97FCsS
f7T/N8iTVjSxgI4I/b90r8teBe8aidD/j4WO+eD8WSRC/2fdrx7uD0XfJ8rp
5PveawYZidD/a7yfvbtnDZEI3WmsTdP2PZ1E4s8+/z9A/j+MxB89/w+9nxZ6
Py3r/L+d+XXW8vFGIvT/V1KG/k0kQv+3fP3jifD8jT4cvNfKT0uE/m/5dKcQ
of+z7ud/y8lpzOzJRiI8X+ZYj/SwWWwkQv+fFCTdiUYkQv+fPnHUwcDoFGJm
5/+h99Oyzv+nO85o//icSPzR/q/uX+nVwivJxMzO/0Pvp2Wd/29yxly28i2R
mFn/31AipUXLaCUR+v9Gt3V3w34zEDM7/w+9nxZ6Py3r/H/c+OglvT0MROj/
xlfuVbK80RGh/y/USK8kOiL0f7gfGX1fsi7Sf1zCQPzR8/+sx+3BFdJ3EJEI
/b+Eu3RDsljir+r/rPv8j/Y7dHPl6Dgi9P9zN4KWC/MMROj/MRdnVEz0NhCh
/z+OOjT6UDWRCJ2f9f9nvQ5Ldwu0myMSof+Pbt9u2+j3OiL0f8v9n2KJ0P+X
rJc+4zoi7/+8//P+z/s/Hz58+PDhw4fP3z68//P+/w/q/5md/6f7P/R+uv9D
76f7P/R+uv9D77fsmTWi/j9tZodep6z0qP/3quVc/2bXJHT+P1cVdfTVygZ0
/p/u/9D76f6f2fn//5b+n9n5f1b/dzlYOMfhdMM3n//vXDLrldqT9ej8P93/
offT/Z91v3rWngjo/XT/h85Edyfo/XT/h97fqfKlwYEbRHT+v3bU4ieem43o
/H/E3fzuhZoZ0fl/uv9ndv6f9nv7P/R+Wuj9dP+H3k/3f9bz90fP/9P9H54f
dEeF3k/3f+j9dP+H3k/3/599/v/P9n/o/XT/h69/ZG2fUgeXi5n2f+j9V/zW
ZfxPmtD5/2/t/5md/6f7P/T+9xVH+zb1E3+4/2d2/p/u/9D7yxYaerN1kh6d
/5+W9UC0/W09Ov9P93/o/XT/h97vVWllwxpDDd98/p9+3ELvp/v/333+n77P
P/R++TbpOwzo/D/d/6H30/2f7v30eX/6/896HYbeT/d/6P2jmtZ5/jJZj87/
J2gXZPyopOfn/3n/5/2f938+fPjw4cOHD59fN6yez1Tq9G2Rln1io5GWrt8X
KVXSMwEzkVmuTZ5ebPQC5Pw81Q4ETPZG9lhZzcVrtgY53jP3qPx5dUhpCd6H
c0ok7I2k/fxZYTOrhBJ5PuRE8TFLwpDy2+rqamTezbsPjmqqR9b+2GKDlb0J
mW//uVbKPmlI6apEn4NPkazOP/fmZtsP6xORrH1qln5/GtlqenlbP+/9SMvX
bSvSsnfxFNLy/uwMss5I6d/4JPL+10thvxc4hWRd96kTLaatWe2LXHvF2/l6
YCRy470POa75q5Gs+34sqbhCUXe5CpnxYCxSvxqWdb8d1l7pt+NLeYl7VUiX
xx13bk2LRFrWNAYhWX9f1j9fmDqoVP4QJbJmjqf19zVPJkbJ+5E1Qk5/afGp
nug5YNeBz4JWWN++qXhjtJnYr07LKhlvLYVA+UB9KjFcXsgYL/Q5HTU06Woq
MfWN9C8UJ8jrUcukEd2fS4UjXjDOd/qatF4kjvOfdLFxzwRmx7O8L1cgYa8v
bfd968NTfEKQ4qaj3XMrVMi25XzmrrihRPY7JIU07EnvyINfjiuQrD/Pur9E
jR3J1+qnY+XLQxsVyGy11m/PM1+F1AU3/N3wAsu6fxHrPhiJsW3ebEuKJ0I/
1HSZ28W8xUSEfak1P8RurVY+jbhv56I13W/GC78/kYJhKrHMEl23Vq3ihKsl
m6ydUUdPzJ93wL1h+7WCnM9KqpCOWdwnOxiVyMfNXZ/NWxmNtDzuQpFV72hG
afcpkMfDpU27icR2cgdTC24TOsctCsOy7sPD2v+edfvKaVkP6IhtQ1UtP58P
F3xytaxfRjQRL1xuF9aoiVYY2HdxgTur9cSeC1Oi3nfQCXsK5Lt1q5EKeX1j
RyvddAUyUe73fsiSNWdH+c4KQmqmrnY6+T6e6Nxyyuty9ZWCOiE8dGAnMzFN
XiSsEz7JYT6ZuH/EjGbNc8QIt5LPrejfXI30Kp5nr9glEmkTIz2gfJFW4YPO
B7eKRuZ783ZWvf7xRHmt+haF0EF3KabMVRMR9mb2d66S98Q7M/Gxm/3CNmNj
ha4bbWrv8tATGz/OYXPaTSdsaNG3dlzNJKL0T+k3US3kSZzQYEGNaCTrPjBn
5OvqkchecsdNIML+8bwLGvVwfGMk9t8pl3jBb/Ync95gE1Gq/4Wya//4/a4Y
ZP1q2+z8lyqQN6oVK7OjUSTSRrqcMTEU6To3rcelHt7IfPK5j4vIAPl6cjAy
3e5T317do5EZD7pdj+oqkKzXVdbrM+v744ywGutq2UQhez6o0P/sHiWSdT00
44sjPcORrNfVgvLjV4Ek+50p7UPmvw7tFoq07LX2Qzbf1SP4wlhf5EX559Yb
2JqHXw06dg1p2Tt9G6kv3LFi2rhLSMt1g53IGc8Ukwb02YPMIn8fvoK0/Jx7
B+krL7q/ixw4Z2OOpU8vI2NPrZ/10dUP6SFfhwxAWs6DeCGfy8/Xc9gpvy8e
+uok0kH+BdNzSMUw6Q5jt5AD5b9gFLKtdAqibTxySsjoHQvLaZAfS7rkH7RB
hcxeIGVX+VxK5JEi0Tsuv9Mg6yW8W/fukA45+X7+raO2xyAtr3MpyIX5Xm+d
PxDLOo9h2fe7Cmm5DuCK9F0V3CW6zkak5bzYECwfPnz48OHDh8+/bXj/5/2f
93/e/xn9H3o/LfR+x8Gp7svMJvIx9H66/0Pvp/s/9H66/0Pvp/s/9H5bG+kT
mcb7/39J/2edH4beT/d/6P10/4feT/d/6P20f1f/h95P+7P6P/T+S/roYU6X
9ORj6P10/4fev/bReu+lk8y/rP9D76eF3k/3f+j9tH91/4fef7XQOn18fpF8
DL2f7v/Q++n+D73fpUJp7QA3M/kYev9b72stzy8w/vT+D72fFno/3f+h99Py
/s/7P+//vP/z/s/7Px8+fPjw4cPnXzq8//P+/y/o/xWs51qP9Iglwvv9kwWL
KYefMhKh/7Pu+13Gb6ije04jEfr/hS2KWPd4kQj9n3W/fd/3h289GGokQv+3
9JtE4o/2f9bfN8FQ1cPZ1kiEf/5SU3DiutMi8UfP/0Pvp4XeTwu9nxZ6Py3r
/D/s76T3eFr6Sjwxs/6/ZpG+/quyWiL0f/m2KjWNROj/y4V5uQOPikToS3nS
EyvauYlE6Pn1cy8vla2YSIROxfrzrPtLz5VfAEUi9P95973OVs0nEqH/j2qn
3702q5EI/b+L7dUczi2NROj/rP0FrPtgs87/Q++nhd5PC72flnX+/+KjpTli
1SIR+v/CWpNWFL4mEqH/a7smtLu7Jo4I/T/+kXPGQ1VPhP7vLGUjW5GY2fl/
+fYyZ4xE6P+s+/AvbxA8qrarnpjZ+X/o/bSs8/9nG5Y9N8ogEn+0/z8JkG6g
pyFmdv4fej8t6/z/nQMvNp8fYyRC/2/S7PA+5ymxROj/afKNWVRE6P9lj1xq
4r3TQMzs/D/0flro/bTfe/5fvh3VFgMR+j/c/4W+D0yY9K9bxkDM7Pw/9H5a
Vv9/FNcjT8NuJiL0/wUZf7mxOUQi9P/b8n2zYok/u/9b9srHEKH/S7W56F4D
Efp/8Ka+xRckG4jQ/1mvq6zXZ6f9Hc++cDQQ4fvjp5Hjn2/qZCBC/7c+Jl2p
FInQ/+G+V/T9rxaor/ePvS0SyXUAxuuq5XEsEqH/O0TOjM3rEE/k/Z/3f97/
ef/nw4cPHz58+PD54eH9n/f/f0H/h/f39Pt96P10/2fd9xt6P93/offT/Z91
v33o/XT/hx5P93no/UvlG58bUP9vPvd4WMirZHT+n/77sv750Pvp/g+9P2iv
tMDBhM7/0/7V/R96Py30frr/k96fLez1lSeGP33+n+7/0JPovgT9nu750KXo
TsX686z7S0Pvp/s/9H66/0Pvp/s/9H66/7P2F7Dugw29n/Zn9f/Mzv/T/R96
P93/offvb/Gp05GTBnT+n+7/0Pvp/g+9P9ti6SC4EZ3/p/s/6z780Pvp/p/Z
+X9a6P200Pv/bP+H3t/t1e/ZJwQko/P/+yJ7htiNEDPt/5md/6f7P/T+CK9h
rxcVM6Dz/x06DB1w7ksCOv9P93/o/bTf2/+h99NC76eF3k/3f9Z94KH30/0/
s/P/39r/offT/R96P93/f9X5/3IbpUXOKej8P93/offT/Z/1usp6fWZ9f4Te
T/d/6P10/2ftv4DeT/d/1usq9H66/5Nz/4vbbw9+aeD9n/d/3v95/+fDhw8f
Pnz48Pn/I3f6ZgLyP/75b+/8TBn7eS37fkdiGf8cmydzMt5iHkKy9tmx9vH5
yR1aiSz1bsLy87cUSNifSXsudXXZXVnvIRUTNg4fWykM+VV6e2BnQB4MjC6Y
v2waslnvcaYFpx4gl0hv9x7cRzqPWPTIuC8NmScol7lbWjzS8vOvJ3KLvD9t
H9Ly8/VO5OFJN++/q7McqW8o7ddyR9rIX+fDyItLrGbHzdiHzHK0rMmx3FZk
gPNIvfm2HzJfkaO/Fw9WI+X1twdikKz73kyTF7xiWff5UVyt/KB2TjVy6/Jj
+R4YFMhqTWq7vbdSIVn3LZm7177s8BpKJHOfo7wwNwzJul+H5X2/Anm3ydCL
Wxuqkaz7xgzqJ1rvWaxEWvZ5JhI7vPeL0JdSC0ufzVtZJsJEFOR9f1rhSbTV
sAUZzwOwRBt1qcfX4oVuKwKXxbukEeNP951wfnqCUF7uRGnENbezlJvzIp7Z
mT1bO3ZXflQiWc9fSy+8i6zzQtqEG46ckX1CQNQZFbJL/aDPDU4qka45YtWd
C2FXD8zZcUlEJFK+LLc3DPnao8XRsZOikazrm6yvF2uPOav7tZLWT+6OQl55
0umjm18isc/dWuesP6uErzWkBb5movCl8K7B83TC/EEBlbd0TiXW7d/7SvE8
cYK8bnmfmQh7D+vIfxE98euYnSkla8UKl7dJ5VmD3C+/PqmQDVe1bp0+X4F0
PHW13l5dONKh4Lagjc+ikEXl/Y0JxGuer7LcSVEyX2fky4p9FMgK1R59+Jgz
Ahl0QdrsHEuMyCb9IkCkoDtZcb7DehPx6XO7vk3XxQi1hqunlO2oJ36Wz9dr
/+h/SmRixrPTzjMa6epa78vURfeQE1cUvjZ5egiymXwdI46YaLkwJjSzaff2
nc5EvOrfp+eDClph8Y6QASaVnrj/45xR7fQ6YWj1x8Pf6FVIh95FLzzwViBj
Q6VHQAQy5Xy3Ls9bJRIt//4qQb7MU8ZE9Dnm0Sebl0bodSf0Uq0cqURjmWHB
/ZfGCi3kyxgm4s0Fl0+PKKoVasuPPxPxUMOFW/dO1AoJQ1cqd7noiQPcnvQ9
U18nBDs4bzi8MpE48eXAlqXuqoTJ3aynDPSJJ+Yt86RkzEuFMFHea51IzC3s
KX5rjEqQs2YZI/HxxxFZ33qphPp29QJ3NzURT8q/j6IRVm1JWNt2hpnYJcB1
zvJ+OuFD88p5Wn1RIw8ev1us63UFEvZm07KuE3XMlj/jO/1FZPO6/Z74CP5I
1vkK1uuY1bomvu1mqpCDFc3r3UjDwj52WtZ9dWzP9ovw6KhCss51wNeB9svL
VWOuPlMj1z9+dmHQSBWStZd2vuPDZiXeRCJZz98GaflqTLgehbRcV7yBtFxH
OoJl9G19J2kx7jVkloVvanWcfQuZ8Vy63NTeF+kuvx5fRrLOmVjOAU1CjpR7
8ypkz9yK3ttyb0dWGSSF4itIn2jpmXkb+fGI9HOoH9Lyn0cipe/mvfKGIRW7
pBMbfkjrEW1+O6bxR9Y40zLXiDZXkRHSr4H0DkZu2ZN9qF3lGCTrerpBfn3U
IHtOly54KZCsc1a93zR5b385Fsn6Pmi5zpmItFxv1CNhnzkt6+2s69ZWK0pP
2CbQWt539sTy4cOHDx8+fPj8rw/v/7z/8/7P+//f1P+h99NC76f7P/R+uv9D
76f7P/R+3v//u/o/9P7cm+odX9PGSD6G3k/3f+j9dP+H3k/3f+j90rN/a6L5
b+//0Ptpf1b/h95PC72f7v/Q+4e/0dsaq5l/Wf+H3k8LvZ/u/9D7Patr0094
m396/4feTwu9n+7/0Pvp/g+9n+7/0Pvp/g+9P690nHWEmXwMvX/HqQ5PClU0
ko+h90uP5ictRfIx9H5TN+k3JkTyMXRluv9D76f7P/R+3v95/+f9n/d/3v95
/+fDhw8fPnz4/EOH93/e//9B/d9vYpeWc4+riND/p7S5fdt9QxIR+n/7AuVK
5huTQoT+z7qv/u5s74p3K20kQv9n3ec/JPcFp/0djUTo/x7PpmrmOYpE6P+v
wy5v/xosEqH/s+5bbrn/SjwR+n9f++TYNm/iiT/a/93l+xLFE6H/C106Veo6
0kiE/s+6b3y+QRt691gpEjM7/w+9nxZ6Py30flro/bSwX5beM+vYwzHjUyUS
M+v/lvuGKInQ/89Vm2kVcUdPhP4vZxR7IxH6f46OSyIO7BGJ0P8d6ubyqdJd
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
7eEmLPi/xW9FBWWlEQv+vyC/V5qoCkZsXPP/Iv9XTz9O/dKCBf9XNT5buBEL
/j/ukiojBmxc8//g/bSi+X/9pJGvF5cxY7/X//Mak1daMCUAC/5/5fbdGu0T
mLDU/2nB+2nB/an/i86bEM3/g/fTgvfTgvfTgvfTgvfTiu634P204P204P20
4P204P20ovn/QxuuHq5dx4QF/1+t7VcXgo1v/988q33DMUsCsOD/RW9fzuLg
a8CC/2eas7FMh2tGbFzz/72nL7rv7GzGgv+fmRG4oOUKMxb8X/R+QPR6LTqf
Atyf+j+4P/X/fO3PXUh/3YwF/xedI9OtufeQ4oNMWPD/a+vq38tR34gF/y82
sEiV7XtDsNL/pf9L/5f+L5dccskll1xy/YOX9H/p/39D///e+X/q/6L99kX7
n4v26wbvp/4P3k/9H7yf+r/ofAHwfur/4P0T8vb83N/TxOb/Yz/k56352MTm
/+l+yKJzAcD7XR1PX309LpLN/2coHJMgu5uRzf9T/wfvp/4P3k/9P675///W
/8H7acH7qf+D90dWUIXb8D8//2+JfZbNuTCKzf8v7aleIIlg8//U/8H7aePL
/8H7aUXnfYD3U/8H76f+D95P/R+8Xz2tIltyE/N/0f4/1P9x3p/4P3g/9f+4
5v9pwftpwfv/W/+Pa/7/v/X/uPb/of4P3u9W6eCjOlaj9H9S8H5a8H7q/+D9
U7r1LXOxo/Gnz/9T/wfvp/4P3l8oecZ0i86a2fw/9X/wfur/ovcDotdr0fkU
8b3/D/V/8H7q/+D91P/l/L/0f+n/0v/lkksuueSSS67/oSXwebHzC87/fa96
fyfeb1wif15TKeX8vInusM5/Xn+av2MQa6H9M8oOX+DPKvreuuvzhV+uZPVm
tX1OdWO1XQbQsz7tdz3wls7CWkY7BpVXV2F+pg5jef2L7+g7ttYjVtscsIXV
QTtP8gbrGe380rWsd7S/30lWm6ttZXXWDmLbxqpTWWz4AdYMeQY3S7/4EGs3
zb0Osk7VHMWBNY3mGbdYS1wL6B+0TccK5+vSTnR0y9t4px9r/yHPVjUfrmfV
a+et8YrON3yVfUGJ7JfdWZOox30u44VzWWk/5JmZtvsKP9akSTbcHxruzxqu
naOoZ53fb3GCRal4t6RL4+RUzY/VvkOjgPkxetbCldWTTd1Zc1W7NmPmLhdW
g3YStjurY4r9Zd6H6FlDDy8b/2Eubwf3ad1di+lYRXPvU2P/r2taxGDhfNih
I9uMGlzxLjb9zCF1XUPDlO0+9jefdL6LnVyvyv0gu3AlRdhOxa1uIKvtHEId
a6qIoZWnlfZl9chWItrS7Tar7fxD3oKhi6bPqOHO+s7bOH/lCV7R/UrV6BJl
PFinjlF3OLnJ+kjzgOustvPMnVlt199450++2/ZsWzdW2/c3/Flt/h2JfaNd
IAhQ6t1Sd3qxYJ3LZUwclDJIuV7oU78hz2Kw1x7cKHKrc5jy7vjItS9ax2DL
f9y3KCpDqNJW/RpFRyvW9nMOVo7kUS8IRmNt1y8Clc1lLznsP+LPutEGWaxN
tfNFQ7G6jm8TP/bxVVTly2Q2YbP3v1Akfy0/Jcvm6+MqPI/G2g87UOhUqSCl
vLVBtfOeAaz1Upao7rHGh7XPuZ4lFw/yZD33Vv1mRygWHi+ifeDz177U99pY
AxZ+PuX+UIHLn3Vn7Kt/BmcdawJ1G5y0N1ib9XY6FNzAmVX0uLb9HiKx9673
1O8tHaCUCy2zseE5K3Zn5yKr5oYGKx3KTqx0pZUVa/161mNMumDlfq7UXyKK
RGDhvFTR/PbTyl+rjm1iweZNe0cfmjBQaZimW7Fuk6zYO9qBvsG4XxLdN2m7
S9Lc3StZsZNLBm49Hh4kPM/izsKUI6+es2D1tgvSyovp59P1eG7BFt5aft7J
rkFK06HJO60fbcV6a+d4BisTM6sbnlmxJT3uqyfRKtoxw11isMc2P9rkUSBU
SWJe8OLQBCs29rWuWdNewUph7XpFNNbNOqZXq0+Byg3t+1161jvq5ZsHvqzn
lrS127jjNuuzZJP2D/Y5ylrdq0fmm7kusj75VOLN0X1erIXdnuVPYvJhtc1T
hGJDSpdXjwBWwnJse9LveiR2+oPZeyLf+yvjNV+PxKqn63qc8xfOgcD5xrQX
gu8f6zeTF877pdUu5x0NYP2infcbjt2pubefcl87lz4Su0T7np+/crDJkuwt
O0Vhbe8DA/DcYNqBN3ZfWThAzzoosfPRZBV9WEV/L9F597bzcs+zHnj7eMWc
iVdZR7ZOMaKbw01Wm7PeYd2XeuHdN563WdV3Qetf8fYpsPdsDXs31k6al99k
bXZ98dp6C66xLpl1rPjh9A6sJ6aovnuJVde7wdkjH3aw2s4bd2K1XW+8ybrG
J92RopGXWW2vk66sds28EpZd5sKqvcxt5p2mvf77sYreN9reL5xjved+aHbv
bjdYtywdYo3a68+aOF30pkLJ9aza5ZwNQaxrVzmc6vYxmFU0P6CN96yIZK3Z
pF2DVKtMrLbn9dusos+nBt3N2st3n1ZohfNscskll1xyySWXXL/bkv4v/V/6
v/T/v4n/g/ffU5Xrvglvg/dT/wfvp/4P3i/9/9f4P3h/z/zBTn/eNuNt8H7q
/+D91P/B+6n/g2dT/wfvX3gwKHLjNct3+z94Py14Py14P218+b/o8SLaB170
8/lV/g/er+5KFhBuxtvg/dT/wfup/4P3Hyysiq4Jb4vmt8H7qf+D91P/F52b
AN5P/V90ngV4P/V/8H7q/+D91P/B+6n/g/dT/wfvp/4P3t+gQMeZR10sfzv/
B++nBe/fub9HvvE3zXgbvJ/2Z/n/LPVrDrkseBu8//QaXciOMBPeBu8/cEF9
wjDjbfB+Wun/0v+l/0v/l0suueSSSy655BIu6f/S/39j/7edaxiIBf9fqrlO
GBb8X/0W8PZmZiz4vzYOmsWMBf9f03991uLTTVjw/wra96HDseD/+cbfPK4r
GoYF/+9xOcK0al8QFvzfNLXB18hlQVhw2vO9Vs+rmykYC/6vbgZwOrUZC/4/
QINBMxb837ucQ95d801Y8H9t+5oWJix8jjtepcCJ/kYTFvw/67y+BZOdCMfG
t//n1P7v4Vjw/1baH8yEBf9PmTlk+uBQIzau+X/wflrwflrwftpBuR88tg6y
YMH/U49efHiPnxEL/j8kT9t713uGYv9X/X+vBpwBWPB/dff3Vi3M2Ljm/8H7
acH7acH7acGzaUXz/9ouKFvNWPD/Yy3yJDxfzoSNa/5f5P+i+f+3e5zu9ypl
wYL/nxlbJMJ+uBEL/v8217kcB3cZsHHN/4v2gRHN/08ZmD6w5WQzNr79X/S4
Fs3/g/fTgvfTiub/Ree3gvfTgvfTivZNAu+nFe1nBd5PC95PC95PC95PC95P
C95PK5r/r3/l5eGQwyYs+L9tf7JQbHz7f7Dm9yFY8P8jfVUQNmLje/5/5aYa
Q/vVMGPB/08nmNGjREETFvy/Zq41+88nNmHByef5ei2u3tOMBf8H96f+H1/z
/1HaBoBmLPh/Rm2jJxMW/L+6ut1hByMW/D9LsqTvzfXDsNL/pf9L/5f+L5dc
cskll1xy/QOW9H/p/7+x/8c1/z9R3fY5k4nN/1P/B++n/g/eT/3/Z83/L20c
eNcwwsDm/6n/g/dT/wfvp/4Pn9uo/4P3U/8H77/StY6Dq4OJ+f+wK/fels9k
YP7femrWsEY9Iv/j+X+nc48sX8+a2Pw/9X9wQeqEon3v48v/wfup/4P3U/+X
8/////n/hDlKNoquGMXm/6n/g/fT/mj/B++nBe+n/g/eT/0fvL9T4pyr6zoa
mf/T/X/A+y8PeNy3R7iFzf9T/wfvp/4P3k/9X/R4Efl/XPP/P8r/RX9O8H7a
b/V/8H5a6f//3v/B+2nB+6n/g/d3ODJ8QGJn40+f/6f+D95vO57AyOb/aeOa
/6f+D95P/R9cnPo/eD/1f9H+P+D9tOD9tHHN/1P/B++n/g/eT/1fzv9L/5f+
z5f0f7nkkksuueSS62+/RP4vOs9oUsyDi5P6sM7VPHUAq+h6gUF7n7iW1fZ5
/Sbrq4SFwh5ODGQVnY9mO59Wxyo6r9N1xbLYj5LXWas/Sprh6PJg1pcaBJpY
Czav8Cn5vHus13uMPNxh533WsemyjxzkbWEtl/RJpW21g1gzaH+PNax2HbKf
vm/Pa/vccIzVudn7orcvL2TN8HjS5ZI5drNG9L7vOXbCWdY1+ScUO3TsKqvt
OoYra3XDs1E1xjuznrlzMOfA2ZdZ7cz6YtUG32JdOm7jompvdKwn+htbOIzw
Z13QpXZHjyje0wWWt3+wVMeaQBu4u8VqGf22fcG+N1j7rImJvWs4s6qnjO26
fJ3Vsu3Ss6n3HVnzlJng4zz+FmstdfwvUM/6vnaxVPU++7Mm1BxOzyo6VzdH
RLq29Q/6s1a2U3ec4BWdE1dcg8QrrO+ajL/0sfgN1h2a591mTRFzzli5mxer
aC6xhv1Gd6coC/Zc2tdvxlcMUjaU6XDN/WwMdviXUYYVIaHK0Wd6n/Zl7mLX
LxyVcKdvmJL++sOidnsM2Gttnb46TQ9Wssd0//RJp2Pt+qFiRK+FetZT2v3X
g7WRermonTOrs+bZl1nrjS6U6Yb9FVbXPXZzaje7zCq6X4m8wnbdwJE1JHLj
tTTVLrGK/pxNtKfdO6wif3utPX9HYjf4J18x7LS/oh2XmdqCve3m2nfw8gBl
485PSpf3VuyIqJvmg0NDlFQqA2WPwXY+vqX92gMhyp9rwpc0GmvFtnSdO2l+
52ClaGSuQeYsVuyK3l9LOe8KUkZm/5yvSSIrNqd23mWQUjdclT4L9mr35Cen
HgpQFo8tH/v/asa2XVhy5oUJAcrQ/rvcfNNbseAYtvnjQFbR/Ud7dM/1YhU9
LkyZmxW5OzgUa3M5X8VPO3jagrUs7Lq39YFAZWtIgrHH5hmwAfNj1urrBCvq
rjZp7+hZc2fPPGdjGT/WQ55lnhR/4Mq6paYKuZdZL2jnu3qwHj6uXrkPxzad
NXT/tfN6RT3du4u3FbtM87cQpcg9j9TTqt3FLp/Qd8ZDc5iS+N3spu9uWLBN
1t9+cf9doPD3uOThMvs5w63YdtOjfd41DVbSa0AUg9W4eWmI8iJVypXeR63Y
Qo7hszbcCVYebhxc7OvqSOzyoS1CZ3j4K4e1O1oEtql2Lqe/su6lKuOR2Ira
98z88dxxev54rmynFl6pasXCuedDn79s2PCOFZvOdsCtYq9e9u4Ygz3+Qt2Z
KFTRz82zM287K9Z0INGuylljf++fM2/qMSUaq/0UzgYq6dSn0S5+rDm+LKgX
kdiX9YJ6fPjG26w2B3ViPaJd977MWm/q6OszjXdYtW18jutYy5jVL9iZsNuH
qxes/RRtW6dHFuzRvdUaLWodpDhu7X2oyZJobPcRDbq53AwUvk9wfXo5ZYri
vCLPjIi9V3S1+LHOyV290OQugaxJtPNUI7EH2qkX5vyV7do52FFYuF4QmjDw
QM8FFuyLQxNOnpkRqHhGO2x5d9yCDRpQa+MDr0Dleo1eZ9ZW8WcVzb082jvd
ffRRL1bRnEMG7XnuFqvturonK5zPTKs9vHPoWXUOzyPNL71YRdfftXGFYTpW
r0TqK70360jt3OabrKLXzfKbjpy4+/AKq7P2fuES6x27iSv2LDzAGlL2Q50V
SY6xit63210r0zRdwROs9fzzProU5sB6RJufusoqeh/rfOFi6PndrqzPnPw/
hTs7sto+VzmzFtbmrc6zit7nD9HOT/ZhPapdsAhmFfn//teFtngu8metfLt/
ubnNIlm32BddWKV0BGuzORW2jN/ryeqgPZ8dZv3mz93afNwghVUuueSSSy65
5JLrRy/p/9L/pf9L//+b+L9oLhG8n/o/eD/1f/B+6v/g/UqX997G+Vbp/z/I
/8H7S+bIv6HaTjPeBu+n/g/eT/0fvJ/6P3g/9X/wfur/4P3U/8GJqRuD91P/
B+//2f4P3q+NuW404m3wfur/4P3uY9QXHOsv93/w/iSPfXYP2G3C2+j9xP/B
+6n/g/dT/xf9HsH7qf+D91P/B++n/g/eX2SAc80bx8x4G7yfFrz/fYahI+6P
N+Nt8H7q/+D91P/B+6n/g/dT/wfvp/4P3u+7MfuL0bssfzv/B++n/g/eT/0f
vD/NoNofLIcsP8z/1VNnTlczM/+30/bdsuBt8P5zQQvPLPrTjLdF5wWA91P/
B++X/i/9X/q/9H+55JJLLrnkkksutqT/S///jf1f/XZ/vncBWPD/e7vPBFy+
EoYF/0+75tOWWhUiseD/Js29IrG/q/8/du1kb/4SgAX/327JminX9nAs+H+E
V9mOhVzNWPB/g7bhigkL/h+8fZJu2VATFvx/5I59sZ+UzFjw/w0qB+eMxMa3
/9vO9QzEgv+b7i5etCbcgI1r/h+8nxa8nxa8n1Y0/z+igPqFehMW/P9S8TYl
Dc3Dsf+r/m9+uaN4gtfRWPB/OHeTnr8pmv8H76cF76cF76cF76cF76cF76cF
J6YF76cV7WPgXXOYW6WDFiz4//LjlZ3OLjZh4f7TJ3quyyWrAQv+L3pciOb/
wftpRfP/cyy3I5YeNWHj2//Ttok45tjfgI1r/h+8nxa8nxa8n1b0ewTvpwXv
pwXvp42v+X/wflrwflrwflrwflrwflrR/P/dI5sW73hmwoL/jyjTe/S4pqHY
+PZ/w5bHH10/RmPB/8+q213lNmGp/9OC99OK5v/3dneccu+CGQvvExocetdh
cXczFvy/f+yrYtbmJiz4P7g/9X9wf+r/3zr/D95PC95Pq7RsXrRVPzMW/F//
h1PrF6mMWPD/8KBpCaKfGrDg/6JzjmzXOwOx4P/bfexvPol93oWC/8f+Q2kL
XArFgv9HhDR8vS4yDAv+fydVljqTlBAs+L/o/B3p/9L/pf/LJZdccskll1xy
/R9L+r/0/9/Y/+Oa/y98d3DG3fVMbP6/arQqQuZ/3Pz/7KU5zrQ5Y2Lz/9T/
wfup/4P3U/8H76f+D94//dq1hIvHmH/Y/P/q5M3Nt6ZEs/l/6pxxzf//t/4f
1/w/9X/wWuq3/2v+D95P/R+8n/o/eD/tP8X/RfP/1P9F9x/wfur/oscFeD+t
yP/jmv//Uf4P3k/9H7yf9u/i/+D9tOD9C9S7Ryczm/+n/VX+D95PC95P/R+8
31qmdp/pi4w/bP6f+j94/3/r/+D9tPC+gPo/eD/1f/B+6v/fuv8PeD+t6LyA
b/V/8H7q/+D91P/B+6n/g/f3ejUjR8rKBjb/f3u1Y+aOgVFs/n/W7GEpHFca
2Px/pthnkQ7XjGz+f9cC9Z2Yic3/b9ixufHMREY2/z+wSJXte9cYpf9L/5f+
L5dccskll1xyyaUuzd1rKaya97dknVs9x61TXwezJqh6Ndt815G8l/4YnWPA
cNa52vWB0ay28zOdWStdabUyQ7kg1uDbVcYYn/uxulYIf7v0rS9rrjtTX7m3
dmd9F6weDHeRtXCKySn6HdGxdtTOBzOx1tQ+PsWwOtcqerBxocesIv9/Xirn
wlUZA1gTaK6zglewbOekbVFoRef/GrTz95ayiv79rklzd6806pJCazv3+Abr
2BrjMxj7ObA2S5Q29hPCHlbbz/sMq6oNHc67s1b5s379L1N1rCO0c+T8WA2V
XhbwCeIdvWvkg+A/3ViTaJ/jz7KeWbfNu92dC6xFv5TseWCmC2vxV9En77W7
xfpO8zwn1kHeF3q/muHAKvo51291yq5oVx2r6POR7c/lzyrap2VBuLHEkYl+
rKJ9hKoHHXSe1cSFtfamtrdPDzrDartO5cxqOyfQm3VdZIcahcN1rOdvLO1Z
pZoFa5u3DVC0cUFdDLazZ8M2U7OGKeqntuwvYrB16vyxunj3MOVZyQtLL+S6
i7V7X2HKgGNhSuST/Y2uFYzGznJe8qZm70Clwe0ULZrd0LMuSzd476tr3qx7
Di1Nm+CwB+ugYZcXfO7iyZqkfKcl1wZ7sW7bOGNxmyserLVvquJ8hzVC3e7m
5HVW2/neR1lzxD66s38+xSq6HtEvrXowtyeryMFW1OlULrRMJLZM+hrGzsP8
le7KfMeR1a1Y7VFqDVKqTF+7dViXGCycZzp5wWV9xbsWbOljdZP3bRgk3A88
QJe7oEtRM/Zuo4RH5tz0w3N56fm8MQ13nDzoacWmLpXoeqM0IcL94UslLqzE
tDFg32qvL0HKk87py1Y45ccK50jTehw2d62YwptV++s/4f2jasMCHWcascXt
9rRSwn2UtRGP67awmLEDeh00rqwT8Nf1WN7yvuqVBR2r6Lqb6Lq57VxfZ9bY
F89MFfp5s/ZL+OZCh0YR2K9+YUN8Z/spnZYW6vemsRV73z5D4ZgEwcqT0937
rTtjxapalC8oWOm5rULM4QpWLPz8bQxqxSbJ9ar6ersQ4f0tRb4lBT9+NGPb
R4ceeToyQDmpbaQUjW19IHDqdkugUqh4gaRNc/qxvkusbmjkyyr6voPtnNhw
rO37HHolR6mjoWn+tGDHvVevwAT+df66FRu+XhXZYCVsZjmfWY+t2FfqZbm2
IcrJUkFfDtpbsds/TOrf2ADnBkdjPbSB7UDhdZ8M626tfJrPl1W7DLDbnVU7
JjP/ZdZBFU9Xe7jHnvVeu2wtnoa7s4r226mwVb2ibcJqv5as4se1Wz+PP0cP
icYO1v67sC9XJDau65Xay20G3ror1HsY78BLndK5V43AJllaw7nxOD8lkfp0
0SoSC25ZqerhixW3RmNt/9lA5Ubi9oPmzLH+q8dGlH43IViZmDlDu0O7rVg4
D9p2XT0aq40JZA5SuuSKCmn42o8VzlWmFf3eW2fOnaBNFR3rJ8eWxbN19mU9
pjm0N6t6taXjLh/WddpciTer8vzLywe9daxJiqYMT1TTl/XkrfDCp9foWA+V
L34nf3o/1iXquMUDD9YDY2ffePzsAqvtfurIapujuc6aoNvcOieznGXVaXMi
u1mF81TvVD/ewCp6fBk67spn39SV1Xa91I21W7Jms7123mF9q81x6Fl39B1b
q3ZSN9axiYe6+hw7x+qsnSu+l/WEdv3zJuulky8TXIvWs464M2DD9IIBrH9W
XdvFPMqP1b300rIZdoWzhha0bs/z0MQqOrda9Lmpnva5eaNCK/6crv7eGims
cskll1xyySWXXN+6pP9L/5f+L/3/H+r/4P3U/8H7qf+D91P/B++n/g/eTyv9
//v8H7z/jf2luqemmfE2+Cv1WPB+6v/g/dT/RfuBg/dT/wcXpE4I3k/9X7Q/
PHgz7Y/2f/B+WvD+393/wfsNm5ckfJjEjLfB+6n/g/dT/4efN/V/8H7q/6L7
G3g/9X/w/kUJFqXSX7J8t/+Lvu8A3t+++nXD5KkmvA3eT/0fvJ/6P3g/9X/w
fur/4P2NZyY6anGy/O38H7yf+r/ocQ3ev07lzY0WvP2t31eKy//nTMzb83N/
M94G7ze9qFa26BcT3gbvr1CiTK77S8x4G7y/ecX+iXqetvzL///yfur/4P3U
/8H7v9S3ezLP1yL9X/q/9H/p/3LJJZdccskl1z95Sf+X/v839P9w9evcu4Ow
4P8bz/daPa9uGBb833OGuiNDBPaf4v91+jWasfOUHxZ+ztrX8vOEYcH/tzt0
nuCSwYwF/9d2CVhgxoL/i/ZpN6X8PKVUzQjsz/L/SiXXZXGZE4IF/y+x0/WP
rJVMWOr/tOD9tOD9tOD9tKL5/wQaRJiw4P8H7b13fT4QggX/P5PQ0ClxzmDs
P8X/te0Ydhiw4P+ifbBF8//gr7Tg/bTg/bSi/UDA+2nBBWnB+2lF+8OI5v+7
aoBgxoL/a9vG+Rmx4P8dcmSxrE5uxIL/X1tX/16O+kbsf+r/tM2a9up64rMZ
C/7/bmOa2LuwCRvf/r+8fNi61XmN2Ljm/8H7acH7aUXXX8D7aUX3N/B+WtH8
v7oJTVE/Exb8v8+YoPqldhmx3zv/D95PC95PC95PC95PK5r/f+x4IG2bCBMW
/H/olC9ZPnYKxca3/2+9qW5oZsCC/4v22wfvpxU9rr91/h/OKafnlS/6s5Tx
VGszFvwf3J/6f7zN/4P/k4L304rm/5fXWlazSD0zFvz/iPaEZsSC/1v8VlRQ
Vhqx8HtP5qAegGPEgv9H5ykbcmebEQv+76FuT5bfiAX/L+vi3TjHKCMW/L/R
G/WRbMSC/389pL6zN2LB/wfc2H1l4YBQLPh/Gm3/qjCs9H/p/9L/5ZJLLrnk
kkuuf+SS/i/9/2/o/3HN/394dmV0okSm//n5/7mdxvfJ9tzI5v+p/4P3U/8X
zT2C9xfIk2Zg8FfTT5//b36iS4X9BY1s/v9n+z94/65Vfd3tJlrY/D/1f/D+
ROMnTq5Xxcjm/1NsmdW+4RjDf+z//WuWf/YiyvDb+j94P/V/8H7q/+D9tH83
/xfN/9P5c/B+6v/g/dT/wfup/4P3f6v/i+b/qf+D9/8o/wfvp/4P3k/7u/l/
XPP/1P/B+6n/g/cnUW/uNrH5f9of7f/g/bTg/dT/wX2pA8f3/D/1f9F++9/q
/+D9tKLvwYH3U///1v1/wPtpRfuWg/fTfqv/g/fTgvdT/wfvp/4v+r2D91P/
B++n/g/eT/0fvJ/6P3g/9X/wfur/4P3GKZFJkmwwsvn/ixmXGsLSmqT/S/+X
/i+XXHLJJZdccv1eS/B+75v/eZH/a+c1tWN11t53TGQVnhes/f+NZZ2q+cRV
VrM2TxzAeiZ7vQNl+/izPqo99+mUhb6sWU7mv9Grqhfr7CILdBXm32Qt/3Hf
oqgM7qzdO5tSbJllZN10LU217P0trEkn1h3xqqCZVeOznI9YPbQNSAyswt+j
4HrKHu38scWs9Yb2q+H5egmr7XzIE6yi99u26wYOrKpO59npzTpT+/17spZu
3KjMsHzurIYq6vUiJ1bR+WUFQxdNn1HDnTXFPIfkdSv5sqYPbDm5pVXHeuFx
8w/Lb7iy2s4rO8PaTDun0YU1X87ICc1ze7HeM6qi4cva5PritfUW+LB6pYmq
UKKMB2urKmue31vvyZqib8Ns+wNcWLXj0Dbzivbx+NpV/XypZ30zJO8F01Y/
1kG1P1gOefHCOZC0osejnfZ7c2TVttkZ48Jas9aebRNH6FhF53rna3/uQvrr
ZiycA36g5oRJ4TXvYrXjkx+EKRvKdLjmfjYGC+cCf3puNzziXQy2+uLUVc8N
CVOeuHayN38xYGf2XJWnUfUQpUT3sMXRk/xZRdcrRed7Ng/Jpnt/Qs867ZV7
661FeG3nSPuylt4QdanSFz3rIA0gfViXnLef6Oh2lTXE/evAjdEneA8vG/9h
7g3WgdqcpZ41Zeyzn9NAP9Y8ae/oQxNGYp2iTizoUttfKbl+2tXuya3Yje7q
/yVIUU+nTLnSinWoe2pa6tXByp5pgyb6FrFi525a12qLcxCe00nP64RzPen5
nhUPLG6Y+qUFe+BhyIP0PYMUdXeo0bsMWOVz5k09pgQr96731O8tHcA6TJuH
1rPCOZa0sQ/izHtT+bLarht7s8Zo1yvCsIuzaQdRK0M+1n3+5aUJm3pb0yZv
e/kpHtlKRFu6RWP/uJd2bf/1gUoPXe2Kl+/6scI54bT9jmSY5Vndh3XhgPav
a7y7zGr777ixBrUKb3x9sZ61nnpZOqMFq1222hKgVO0Rs2Oe1YI92XXTzk9K
kOIf7unerbkVe7dH/7fHkgcrOQ8lTlzuqRU7/qlueNeOIYp6Wm4XbysWzhEW
neMwvk6yD81qG7B/tnp+MN35IEV7GVjvx2q77uHL2qd1/3ZrFB9WOO+U9qR2
fT4UC46qXXbNZMbC8/NRa4FiTqms2PWj054btyxISfxudtN3NyxYOAc5w7Fn
ep/2Vqz6U9ucI1hRXz3zmwzYDMZ+Oa58CVZW5z1a8YWTP6to37l66sNysw9r
nh3qhWhn1nva9ZxLrAmmvy7bbIIXa2l1PGKDjtXPmm1KlkkmrO08U72SZ1zv
s2/KWbHT/lx4KyYgSNGOu01pxWbJM7hZ+sVByu2tSW6kS2jAlkv6pNK22kGK
+iq/wyESC68vou8brnt5bklbu0gsnO9s8/tI7ITQsblKpwtQ1Gej4yUM2Ew3
7HMHrAxSljxcZj9nuBUL51OfeVPu5Kg3FuzeNSWuBfQPUjyjHba8O27Bwvm/
/WLvdfkKW7EJGz0wVbkapBzWzkOOwjabkOdNoiUBik47/tmXVfuvbNOxil7X
RO/H4NxmWv/J+qf9C/OK9ntUv72x+aiedZEG1N6son//syqDKrSoo2f9w097
JLIa1B/vyBusU7X3v8dZRe/ThmlvID1ZT0TUmhgW6MqaY5T77VWdHFnbaXNV
u1jXbEncK0uxjaw6bdBoLavtfY0Da0Tv+55jJ9xgFc3PuPmmT1vgkp618ln1
i4/urK20P+811n4z20VNPGXPWlx7n7Wf1b5Do4D5MXpWH+fxmx5W0LGmOXN4
Y8F9t1iLjQ6MKO9qYl2T6f2yXtuMrGO115kjrMLPd4K5O+Hna7nkkksuueSS
639nSf+X/i/9X/q/9P9/6//gMdT/wfup/4P3U/8H76f+D96fr5c6QW2V/v9f
+j94/7Wdz1efGmjG2+D91P/B+6n/g/dT/wfvp/4P3k/9H7yf+j94P+2v8n/w
flrwfur/4P20v5v/g/dT/wfvp/4P3k/9H7yf+j94P/V/0fc4wPv3qb+O/Naf
5v+ifdTh+Zj6P3g/9X/wfur/4P3U/8H77+1qGWZwtf7t/B+8n/o/eD/1f/B+
6v/g/W/LZxqmM1vwtuj1Bbw/a+fdC04XMONt8P73GYaOuD/ejLfB+3Nu79hz
q5cZb4P330/3pueoNFa8Dd5P/R+8n/o/eD/1f/B+6v/g/bTS/6X/S/+X/i+X
XHLJJZdccv2CJf1f+v9P9P/Rw/rvcvP1xYL/a9sSbQjB/mr/N2uf70OxP8v/
bYwYjAX/76h+/F8eigX/t+1PEIqNb//X/vpr/bHwuXLN589VUrcKw4L/9+0R
/ii0rQkL/i+aL1V32Sm5LgIL/q9t+5I7Ahvf/r9N268lDAv+P2TE/fHLa5mw
1P9pwftpwftpwftpRfP/r3qkyDRhrhkL/t8y08XYpwQzFvz/4t6oPm1umbDg
JEeTVcw3a3w4Fvzf9r3zMCz4v6eqjvtCseD/K26+T3rJJRwb3/7fan6/xQkW
+WHB/zOmf3jcbbIJC/5vaa3KrAkb1/w/eD8teD8teD8teD8teD8teD+taP5f
3b07INyMBf/P8se2kARjTVjw/13q00J7Exb8v2jXDOtLLTFiwf/bXR10qVM6
Izau+X/wflrR/P/KTTViXyHMWPD/fsYWDiP8w7Df6/8bC+7LVnl1ABb83zMg
xfMBS01Y6v+04P204P204P204P20onMcRPP/6mkzmdKbseD/a/V1Nl+4YcSC
/zvMqzRgaGcjFvw/05yNZTpcM2Ljmv8XXZ8F76cF76cF76cVzf8Xuzpm6Kf9
Ziz4v+jcmfjy/9gn49i3YAYs+P+bmr2zrkhvwlL/pwXvpwXvp/3d5v/B+2nB
+2nB+2nB+2lF8/8bSj92eXrZiAX/n7gy6ZwnmUxY8H/R69rdHPVTlqhuwsL7
sbM9Sy4elNuEBf9317YrMmLB52GfR7rfY+NxHRK23WbCgv/Pc81j2FfdiAX/
F/371VOUvROFY6X/S/+X/i+XXHLJJZdccv2SJf1f+r+c///bzP+HDvGd3eGI
kc3/q6rbcYiR+f/6s+oBAoYfNv9P9/EG76f+L5ovBe/XVLWU+afP/39uOWJ7
nY9GNv//s/0fvJ8WvJ/6P3g/9X9wEeok4P0LtxWtmmCHic3/a9t3dzOx+f9N
i3c8K3nByOb/J09NVXJn7OfVnz3/T/0fvJ/6P3g/7a/2f9H8/9fSRbaWn2dl
8//U/8H7qf+D91P/B++n/g/eT/0fvH9/jXQzEjYyxen/4P02h7ew+X/q//E9
//9a+wtEsfn/393/wftpwfup/4P3U/8H76f+D95P/V+0j/qP9n/wflrwfur/
onNn4nv+n/o/eP+P8n/wflrR64vovCHwflrwflrwftof7f9xzf9T/wfvp/4v
el2D91/U/8H7qf+Dx1OfF533BN5P/R+8n/q/6N8v5/+l/0v/l0suueSSSy65
fov1rf4v/PcIzhV6r7bTf1xnzZunsK6plHJ+3kQOrIXzBXVd/jiAtUAzr4Rl
l/mzjl0WtLpfWU9W23mVvqwjo26aDw69w2r7PHeL1eavUaxny6of9B6xHvFa
dy+R8T7rQO18znDWqQfLuXg3vsNqO+dzGavh61mPMek282rvr/ey1tPeF69i
NWjnBJ5lnat5zDHWFC1PXik1y5EVzp+kbVnp1qfKh/Ss48xXbt+twbtSmz/2
Zz1TZs/L7vtvs4ocKUEbFcBdWGc+arZx7V1v1soNnLrtO+fDOkzzJ3vWPZfz
D5vy5QKrxlu7dKy2eUc/VjgXkfbziz8HXnzqzxqeqObuKtP1rLbrTrxhZT/U
WZHEg3VskQj74SmvsapT6q10bqx2E1fsWZjFi1W0f4vIFYuql9My8WbLlGt7
x57urCe054lLrBHa85Arq2h/m0YFHSYvuKxnPTZvRdPdERHYFh3VEzL9lYY7
Th70LBODtR33F6IcSepdaP+MGOyaUwOPKyNDlVPawX93saquL70QphRvOL36
hfJ3sTZuCVNOawfCGrBf79W8+MElSNmluNXtvMGfNcvyY743gnWsvrW8r6fd
oWdN3+7Q7lFt/VhFLpHpeGevI838WBsd7t26fzsd650r084d7Xub1XbO4WVW
29/bg3X4qPNDlRIBrEFXH9wocisSO2W174R9CQIUj1fnHzf/YMb6q8dJDg9Q
tKseyy3YkQ2vXt2xIlBJqB4TnsGC1f7XGwOU4kcmxv4VLVjbvG2gMiuJKmsW
bO0Tp7OFHw0Q7ovurJ2fGY21OUPgX57Bq22vMVLP2mCQek/1YR05Zlavl9l4
4Txn2uwa6+tYbdfDw7Ht7hfucnyLXllQcuaFCZ3M2KYaTPsrXuNCUtt1iMbC
z1O0L5NoPyLbuaA3WTX93neDVfT3fXWkzr5Bw31ZlxjC0j5oYsba5nD9hfu0
q09CyYrFYL3WLkiR3CVEsR0vbcDC+ba2840jsLZzJ/2U6o+SZji6PBobot1P
A5Vt6vh3Gl5dx7eJH/v4sorOwWzk7lf30ylP1rLqy152d1bnoFKebb74skZr
59WHYecmDfFvkVGvaM8GfS3Y5aYDiXZVDlRUrc1/0YL1aa+esB2oaJfrMlqx
qxxOdfu4OUjRGPaBFfvGdnCysl07tzOQ1VJq/PBbW3xZ4Txn2k7Xy8b+jzdZ
Rb53S3vj4cEquu6v6J58KvHGiL3WUH2C0ylf6ts9medrwcK5tzXs1SuLFuy5
tOoF7H/tv0P34UmvXQ+Jxp4+19ijWo0g4fOb7dzdaCycpxx4Szcx+Ucr9kF5
9YpBiKLo1TtSDPa6BtphSonzhS/XmxqDXZcyc8j0waHK1SPqwL4V6/Qqjf+8
ecHK9RytHHXeFqzG8xmCFPsTq5JZ7lmwxz7FjL3RJAivC9Lrg09aus6dND8S
C9d9tiwdYo3aG46t3rPl5p4ReqXMsvWppvoFsN52c+07eDlv452Z9hws7M8q
en6wS68eNOzDuiVdGienan6soscp/Hlpe5V61Oe1wY9VtP9hKu39sjvrkRum
eqOuXWIVzb3YvlfpyrpmX5uUug43WUvHPoo7DzvP2uzJ5PxFXtizFtQOOHZm
1WnvL86yztW8eQar6P1A1RnqP+DC+mhzuTznZ/myivYzFO3LJLpeIPrcZ3N3
B9bBl7Qr9aydmuyasm2OJ6vonPTRZW8Oa1k3hjXpxjYD7JeFsoo+jttp1ysW
KLSGZJP2D/ZZyppgqvp+uSuvXHLJJZdccsn1z1vS/6X/S/+X/i/9/9/6P3i/
xmLtzXgbvJ/6P3g/9X/wfur/4P3U/8H7o/dVPzq3mFX6Pyl4GC14Py34NPV/
8H7q/+D91P/B+6n/i/ZFB++n/d38H7yfFryfFn5+tL+b/4P3U/8X7dMO3k/9
H5zmZKmgLwftrXgbvF+7G+cy423w/lYrM5TbdMTy2/o/eD8teD/1f/B+6v/g
/dT/wfv/rv4P3k/9H7yf+j94P/V/0T784P22/ZEseBuez3KrU/Nu5n9d3/zL
+xvPTHTU4mTB2+D91P/B+6n/g/dT/wfvp/4P3k/9H7yf+r/o+0Gicx9Efi79
X/q/9H/p/3LJJZdccsklVzws6f/S/3+A/xeal6yOT+z7ayj4v/3JlwmuRYdi
wf+TNpvttXOLCQv+n8PufYUpA0xY8P9Hz7J0qrk0Evt38/8UmoeFYcH/zzyc
kzTE34QF/3/seCBtmwgTFvw/qljUnD5XzVjw/1oVOj92UMKx4P8Osfei3A3D
sd/r/6lSrvQ+ejIAC/4/VjvXIRgL/u+i7Y8SjgX/H3lnwIbpBSOw4P9/nlV/
AOHY+PZ/0f7285UpKd32mbBxzf+D99OC99OC99OC99OK5v/L+cx6fHK1GQv+
/2CCurOACQv+31R9+ltvwoL/D+vyJG/NxyYs+L9nAvfVjpnDseD/47T9JCKw
8e3/tusfwVjw/yzWVwkLhZmxcc3/x+X/tOD9tOD9tOD9tKJ9UUTz/5tntW84
ZokFC/7vu2xoi9AZJiz4/9im7Q8nGWbEgv/XXFazSL2WRix4eP+a5Z+9iDJg
wf9HaC+IJmxc8/8i/xfN/4vOZYgv/xf9fXdsOTY5YrcRS/2fVrRPC3g/bXzN
/588MyNwQUsLFvy/U+Kcq+s6GrHgiuHtA0ok7GHCgv8nXL9wVMKdwVjw/5HZ
thQemdqABf9Xd7/J7mbExjX/D95PC95PC95PC95PW7aPf+xd0IIF/9eOzz5u
xMa3/2dKUiv2oWDAgv9rDLrOiKX+TwveTwveTyvahye+5v/B+2nB+2nB+2nB
+2nB+2nB+2lF54N/6/z/5JeDOl4va8GC/zdaqx5AZMGC/yeapX4SMGPB/0XP
D8XOXb8+ZJ4RC/5/vEqBE/2NJiz4v+hx+ilc3enShIU/fzrtD2jGgv+Lzj+S
/i/9X/q/XHLJJZdccsn1Q5b0f+n/v2D+P/XoxYf3+BnZ/D/1f/B+6v//9Pl/
6v/g/dT/wfup/4P3e5dzyLtrvonN/6fpvqJD24Wm/3r+/49qR3KXmRDF5v9j
P7RMPuBhYPP/dP928P4hH+s+//LS9NPn/+n+9uD91P/B+2l/tP/HNf9P/R+8
n/o/eD/1f/B+6v/g/dqxtCNNbP7/nrq98X3TD5v/d3Vo4ZJ7hoHN/1P/F83H
/mr/F83/r9H+gxY2/0/9H7yf+j94P/V/8G/q4eD91P/B+6n/f+/8P/0+hehc
hvie/6d/X/C8H+X/IrcB76eNa/6f+j84InVF8H7q/+D9Zw2+vRucNbD5f+r/
4P3U/8H77SokdyjexvTT/B+8n/o/eP+P8n/wfur/4P0/2//B+2lF328C76f9
u/h/XPP/1M/B+6n/g/dT/wfvp/4ven4A76f+D95P/V/0OBX9+cH7qf+Lzj+S
/i/9X/q/XHLJJZdccsn1U5fo/cC/Pf/3/6jgvCG7TUdO3H24nDWDeizfhous
HbXPc36s+18X2uK5yJ9VdB5lnwJ7z9awd2Pt0KOyX8ZgXpEbDHYZfqZ6u3DW
dl8XHgyKtLLm1z5PPGHd4J98xbDTZt77Q8PXv7rEKvp13XM/NLt3t70KrYM2
Z88rOud3rvOSNzV7H2R9pp2HfJpV9L4dziek9dfOAdOz3j49KEPNJjrW/kOe
rWo+XM9q0q4/8F6YrW7I4cFqu55znTWH5k+8nzYHxX7UcGG1M+uLVRt8i9U1
ae7ulUZdYp2aZVKLuZtusg7O01Y90pNVdD7m4ePzn9ef5s+qHevpHsi6JM32
E/X0/qzW++1nNHL3Y+11Zm2V2M9ErLbrJB6sIQ3Uk95cWVuFGVxPbvNkhfP3
aMs/7xpa0OrJenm1evCZB2sK1zrPtr53ZrWdq3aR9Z56TOC666y28998WJNZ
7j2a+4cfq80PwrFw/uP59tGhR55asIeaLMneslOQ4lY51d3sETFYT+385bC/
vhdxF2u7PhKh+O65vTXJjRhslKXb5kRvQ5XZ6dVv0MRga2kHl4Yond97G+ev
NGC1McrOwcqrRXfOuKcKYBXtE1Xv7vkm5SryOg1UnwH1rC9tF+5YRedjdhvR
oJvLTTdW0ed6k3qs9W5fVtH1heP9jS0cRoRj4brhZb/NxpiCFuzFZu+L3r4c
oPR5bchkLmnFflq5fOl1jyCl2jj1RMkobLB2fw5QVtTpVC60TCS2jOYh/or6
t9g4NhprUo+1Ph6oVAx/u/Tt7mBW2zyrP6tonx/l+ZeXD3rrWI902Ol4eZQ3
6wZ1/NvXg1W77NTdm3Xag9l7It+HY3PZfsHK8loqqJuxNof3UxJo53lGYfdm
9d1w7m2Asly9POHhz+qYYn+Z9yF6VofQ87uz/OHBahl04sCQShdYS7ZdHVao
xS1W0b5wtnMgQ7Fw7m2X4VMHpg80Yx9PulwyR/4ARb2o9SGjAVuo7rxO4/sE
KSOuZb977U0UNs2aT1tqVQhUtGNzm/uzHgicut2S1Y9VdJ1adF6kzuF5pPml
F+u1awkXj/HUs9ruv7dY32m8zit6/RW5+gDNI8OwidNFbyqUXK/YnVAfcGbs
vI8riq62+itttIOqLVj19PodDoFK7Y/N9x5aasU6bu0d+1QZrMTeSXNdvWPA
7ku98O4bz+C/ntd1rA6+w150q+vNKtqPzvbzuMhaXnu/6cl60nYBl7X311LO
u7qYsB/2FrBULajH67L0+myXicVTH3xrxT5anmt6w0EhSq5spxZeqWrFTvQt
MmqsKUhJtdXUMu8QK7Zj4KqPleoHC8+nWKhdqInBNtcukIQoHXNOixr+xYq9
G3jFzntciPCcmgfvPyTLc82Kzbr5+rgKz4MV/3BP927NrVg4/9p5/SHTi2ox
/6pHthLRlhDl0r6G3YtfvYs9da9dthZPwxX1qminoTHYXbo5sf9IqFK8usea
fOms2LWZ+/xZdW2Qcl87nzkau3Tx68ABtQKVQ55lnhR/EMAquu4mcuAOi17F
vvT6sE6t+qBW7tferKL9GDM06fnibKFIrO37Uv5Kt0nqwcV+rHB+Ne3EuiNe
FaykZ/33z/OXWW1u7cg6dUzhKVdWn2PNUP7jvkVRZ1ht17tOs9quJ+xgbaU9
0dmzJhu+yqVPghus7UZ7lF5adg/rnuFX7r0tv45V9OfXtk9Mf5N1Ybgx9pWY
d+38/WnuG3Ws2svPthBW2znGgazP1KfLjK6se7T7xU1W0fngon3bmicJHt2u
WhhrlVJv0+2cbGUNUZ/Ws+lYbZ/PdvNq17tOs9quw4xgFfqA6Hzh+JonlEsu
ueSSSy65fv6S/i/9X/q/9H/p/1pFvg3eT/0fvJ/6P3g/9X/wfur/4P3U/8H7
/1wTvqTRWOv/rP+Lzg0B76f+D95P/R+837PtwFx/vjTjbfD+N/aX6p6aZsbb
4P3q1H6a7Za/nf+D99OC91P/B++n/d38H7yfFryf+j94/zjvnlOdXlnwNnj/
4MlbcxXoY/mf9X/wflrwfur/4P3U/8H7qf+D99P+bv4P3k/9X/T9LPB+6v/g
/dT/wfup/4vOpwDvp/4P3k/9X3RODXg/9X/wfub/f3k/9X/wfur/4P3U/8H7
qf+D9xd+kdWx8kDLb+v/4P200v+l/0v/l/4vl1xyySWXXH/LJf1f+v9/4P/z
K9/uX26uDgv+v1ZfZ/OFG0Ys+H/zYmd7uK0wYcEfGi5q3WXPPSMW/H9N//VZ
i083YcH/GzQYOOGPUuHY39X/tzt0nuCSwR8L/u/a4o+qDQuEY8H/DckrLZjS
yoQF/6+0MKJJ4flmLPj/8ouWgU2PWbDg/wcuDDtQ6JQZC/7foZDr8iIlzVjw
f6eoEwu61A7Hfq//L9q+vHzYumAs+H/ipTWcG48Lw4L/vyt6+3IWh2Dsz/L/
pNrn0VAs+P+APatdXT6YsHHN/4P304L304L304L304L304rm/8PGzSl6z8OM
Bf8XnRORoOCk59v6mLHg/7nXjTpyaXM4Fvy/U82lgSWHRGC/1/8/jlA3JvHH
gv9vUfnrpBEL/p8okcer84+N2Ljm/8H7acH7aeNr/v+9tjGXFQv+X3qCKrxm
LPi/aJ//r4dy3Zn6yogF/z8XfP9Yv5khWHChP1dPXvXHNAMW/L9l8mR9onIb
sXHN/4P304rm/4sMcK5545gZC/6fs9q1GTN3hWO/1/9V/dv4IAAL/i86F0Y0
/w/eT/ut8/9O2guOGQv+X2Fr8PZJOhMW/P9Q+hz6PofNWPD/26s65ZwWZcSC
/2/YsbnxzERGLPh/vsd5Al+sCcfG5f89t1WIORz754WC/4tef9Vn69V5jdi4
5v/B+2nB+2nB+2lF8//qq3+7Bibs9/r/tUKf+g155oMF/3/YsXGNWc4GLPj/
xYxLDWFpTVjq/7Tg/bTg/bTg/bTg/bSi/anA+2nB+2lF+9SB99OC99Oi/5OC
99OC99OC99OK5v8rZanotrmmBQv+D+dt03O3dxRP8LptNxMW/D/2xh+RvY1Y
8P/PV7Lm9WhgxIL/i85jEs3/q6h8s7YZC/4/N/ZZJdtzIxb8P2DkogaH3oVh
pf9L/5f+L5dccskll1xy/ZIl/V/6fzzM/1P/B2+g/gDeT/0fvJ/6P3h/++rX
DZOnmn5b/49r/n+dBkkmNv9P/R+8n/o/eD/1f/B+6v/g/dT/wftXaeBt+q/n
/7Vtek8Y2Pz/2Z4lFw/KbWLz/ydKjkvidc3w0+f/z3sGpHg+wMjm/6n/g2f7
WbNNyTLJ9Mv9P675f+r/onMiwPup/4P31+nXaMbOUyY2/689PWY1/9fz/zaf
jGTz/9T/wfup/4vODflW/wfvp/3e+X/q/+D91P9F+/yD91P/BwdKuWD+p+d2
Rjb/T/0fvJ/6P3j/qDStp5yJNsXp/+D95R3nb+lV38Lm/6n//6z5f+r/4P2Z
5mws0+GaMU7/B++nBe+nBe+n/g/eT/0fvJ/6P3g/9X/wfur/4P3X0+7IWOu4
6T+e/79yp1XlUm+j2Pw/ff0F76f+D97f335ZzqzNTfHu/+D9FSpH3ph93Mrm
/0X+r+5+nTOr8b+e/6f+D94v/f/X+D94Py14P/V/8H7q/+D91P/B+6n/g/dT
/xedxwTeX71mrT3bJprZ/D/1f/B+6v/g/du8293J0tck/V/6v/R/ueSSSy65
5JLr1yzReb7/1vtr8Qr8v9vxLe3XHjjCWvNdrnM5DvqwivZPuFhR+8DN6vrR
9/iU+h6sZ6o93JPV15W1z5qY6o+S6lirjW3y6ERJI2uLvuqE8wPWgM/1rrw8
fI91fMchzSfOM7Da5vlcWEW/lj27b1VOdXezQttPHX/138eaYV7fgslOrGct
329nv8Aqh1ibJUo7fUfzM6yic/RcNwXq5+bxZrXv0ChgfoyeVbTPTwntfCp/
1tCC1u15HvqxFto/o+zwBf6sebpXGpX9sw9rDj+XvX9Ou8h6QWWCjZdYbZ97
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
/F+0v71o/j/2RS/bJ0czFvxfVfTM3iYseOCZsUUi7IcbseD/SwbPtdyOMGLB
/x/57B6wu6QJC/7/tIS6kZEJC/6/VNs/KRwL/p/mtSrUYdjv9f87Ja/X6HUm
FAv+f/ne2/KZhoVgwf9Fj1PR/L/ItcD7aUXz/7DvGN1/7HHYhSTpG4Vi4/L/
P1PpL60w67Hg//k8D5u7VjRg45r/B++nBe+nBe+nFe0XBN5PK9qHB7yfFryf
FryfFryfVrRfE3g/LXg/LXg/LXg/rWj+v/EjdYdACxb8H/b5ovt9zXPNY9hX
3YgF/xftwy96vH/r/H+OUkdD0/xpwYL/P3Y8kLZNhAkL/l+gmVfCssvCsdL/
pf9L/5dLLrnkkksuuX7Jkv4v/f8b5v8zblgzf38aI5v/p/4v2ucfvJ/6P3g/
9X/w/hdfu1mrLTb/tv4f1/w/9X/Rvtbg+tT/45r/p/4P3k/9H7yf+j94f16V
BzuZ/nHz/3ujXZrtqR/N5v+p/4P3z35/s0L4W+Mv93/wflrwfur/ov3Jwfup
/4P3q7vtZnpvYvP/rT5fPlPwmfk/nv/flVJ9oESy+X/qiuD91P/B+6n/f+/8
f6IlAW4jplvZ/D/1f/B+6v/g/dT/wfup/4P3U/8H7z9x+Vbsr8DI5v+ndOtb
5mJHI5v/p/4P3j+sy5O8NR+b/uP5f1rwfkf1aW29lc3/U/8H7/9R/g/ef197
ojSw+X/q/6L97cH7q3usyZeujIXN/1P/B/+jHgjeT/0fvJ/6P3g/9X/wfur/
4P2vPM6t/3rb9NPn/7Wn02xGNv9PH6dxzf//p/4f1/w/9X94PT+cZFgJ94VG
5v/92qpgZmDz/5bYd3MZjoaz+X/q/+D9M9NdW1S6iVH6/0/2f/B+WvB+6v+i
8z7A+6n/i/bhFz3ewftp45r/p/4P3k/9H7y/fuynhJDDJun/0v+l/8sll1xy
ySWXXD92faPbi68L/N/VaZ+/17IW1nzLnXXdS1UcAllF3+fN1GHshgJ1vFht
n7OdWV0rqAcy+rKGavPHRtYEAUr/o5PusgZm3psq/+NHrG6+6dMWuGRkTRBz
zli52w5ewTpzslXM6yE7FVrhz1uwyrttjn1Hfl6hfaR+DdzHkXXY5qMZTW7n
WLUf9847rLGf5c7VzKVjFf2c+2kOHYH96hc2xHe231/uZsDOMFR6WcAnCM+T
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
ZydLeMVswXrv9L9w83Go9PlFvJzqasX2V9m7cLgy0a/3dJeXFmxx8fM5TBmo
Xn4dbcGqd6tr1yZUcUvecci8edb/6fHRFd5ODlc6qbcJamPFWr+c9R6fKVy6
L0C2j0DdEpsvlw2rPhtW2h8h/fXte9rjsOqnUdo6hCrr1MvVG2KxVayNa573
CVE+ibmGWOyeK4VHTPscovwm/l5jsepPz72OIUqrA+kXx782Y0PjDaO9BoUo
DT0Pth/nbcG6Vs6aPCxtmLKrquMu60wLdnq6crvdR8HnO2OxW9oNurAyb6jy
8aMuy6T8gayw35u2h/gv+LBahpx0GFbVidXutdtYM+Q8MD7v7VusmUNbT21t
1bHCvmvaUUGn1HcarDF97/lMmMxbpsi+hJfG/qz268y3WNO4qxMmrqxJzqvP
ZG6s9tfjB1ldxXWD3axFxFzJLlbDkJQr91xZx+q+r8i8ei2usNrfD+lYr844
d6x/7jDWc282H2n+yI3VsuPS0+n3LrPG+YuF7KznindttmeaN2u+tuoG83DW
qIz3m/nsMrP2T99oUKYJgaw9xHUwR9YsYq/vb6wNxeuauazSvcDa0Y52tKMd
7Wjn+zma/2v+/w39H7yf+j94v+b//7v/g/fTgvdT/wfvp/4P3k/9H7yfVvP/
/9v/wfvXPbu7aefPZnwMHkN9Bryf+j94P/V/8H7q/+D91P/B++dmLr4gVX2b
5v//Mv8H76cF76fV/F/z/2/p/+D91P/B+6n/g/dT/wfvrzbe+CyoquWr+z94
Py14P/V/8H7q/+D91P/B+6n/g/dT/wfvp/4P3k/9X/b8At5P/R+8n/o/eD/z
//94P/V/8Hjq87J9AbJ9BOD91P9lvz54f9BT9QMWFnwM3v9mn8u9PuUt+Bi8
/7S4z6EFH4P3f1Q/xVjQgo/B+6n/g/dT/wfvp/4P3k+r+b/m/5r/a0c72tGO
drSjne/iaP6v+f9/4f8rJm5ZWvN1BBb8v33bK9W9PI1Y8P8ZwZe7RVwzYan/
04L303bJdKdGSJQZC/6vfhh35XATFvzf/j4mAvu1/T+V//LdXUuGYcH/c4r7
XkRgwf9rNlnatts+Axb8/13KS7c6dzBiwf/fiQ9Qm7CJzf+D99OC99OC99PK
5v99b2TclbWuGQv+31R8fjoK+7X9f3becZVujgjGgv+HV6jSMiJXBBb8/3CV
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
4H5qR/6l8vvAZxd+HIc9l1H9YE7Yf/YYx2Bhr/fF/bH92nmasCdsS4tuTRqk
RCZVn6At2OeHJ59ynBWq7JsxZEpASSt2/taNbba7hikXTq5NZblrwR7/aJvg
1ixMWTZB3cBtxrZfXG620+QQpUYv264FVgv2VPetuz8qYUqqBlULm8ZYse0K
VzlwrV240u+VIZu5nBX7UVywCFPE5c5VFuyYX65d27U6VFnhE+e8/a0Z26XO
itByw0IU9adNobcWbBGzekUiTHnV4dqQS11sWPscS6QSsaFc8YC6VizsLz5V
PuzzoQtW7M73vw5saghXKkdW3PLLOSsW9s4XXzi65tH8Vqy43HgyTKlxv27+
V7ut2JPCpcOV6jPVxa82bMJvutW7aKSy+3Q6z9RWK3ameOKPUKqKBeJx2ODU
q0ecCQ5VxPhLVgMWrmvoxb+rAds5dO2Hqo3Cpfsadhe60HxzBSt2lqHqi6L+
Ycr8/sVSncxuwIrt6QPDlOQp1FfMUViHUPWCXJDy9HlswlNBAOsE9e1BFn9W
2f3l7HMu7qwNxQXuE6yy9wuyeRXZ60+XwZ16VQvilb3Ol92nzn6dMIA1bFyH
mr1svqz7HEOuXA26zWofO/BkzaK+7Mhzg1X2Putpxlqze6/dxdpQ7EnexHpX
XFdxYE2SU31+2MsacefL4C1xvqxPu6sTM7wG8fpxBavs32uP4tGg6+ZgVtn9
Ql8v33hoztsY1mRi/s7Map+fcmN9K/6eTrLK3u8PENcN5rO6Cj+YwvqnbEQ7
2tGOdrSjnX/r0fxf8/9/kf+D91P/B++n/g/e33x46i6bxll/WP8H76cF76f+
D95P/R+8n/o/eH+1LzUmNHtowcfg/bSa/9sL3v80hyowJnwM3k/9H7yf+j94
P/V/8H7q/+D91P/B+8OLzt/f+KX1u/V/8H5azf81/9f8/5/r/+D91P/B+6n/
g/dT/5fdBx68v/aFLXdcYi34GLxffAxtgxkfg/dT/wfvp/4P3k/9H7yf+j94
P/V/8H7q/+D91P/B+6n/g/dT/wfvp/4P3k/9H7yf+j94P/V/8H7q/+D91P/B
+6n/g/dT/wfvp/4P3k/9H7y/ZcKzZe8zFnws22sA3p/uN1PrgsOs+Fi2rwG8
n/o/eD8teD+t5v+a/2v+r/m/drSjHe1oRzt/6mj+r/n/d+D/z3JerjbYNxwL
/v/S+9ymL7dNWHhfcLB2pllJm5iw1P9pwftpZfP/gj0zm7Hg/x3jIo8+GRON
/Vb+b9j+6IP7h3As+P/lMbUy5kptwoL/C45oZcLC+y9Vs7O9M2ETm/8H76cF
76cF76f9vfP/E8IPl5xexIQF/98Y06l2iagILPj/I/cuF8yfQ7Dg/5N+7tbp
fN4gLPh/4VLds2wqb8CC/xccdirtwIxmLPh/lhK2JLk9jFjw/7nvbv4U9caI
Bf93E/e5icSC/+dxbOd4P18wFvw//4S3FwvUNmATm/8H76cF76cF76cF76cF
76eVzf/vaHHiWY07Ziz4/5e26ufvo7CJ+X+RS+qNcEKx4P++4sbMRiz4/4nq
RU8ONJqwic3/T+iUtP2OlWYs+P+QVZvHTzppxoL/H9dPnFfqrgkL/l/7uLVo
aRcTFvzffv+hSCz4v8ONPG0u60Kx38r/b6jjyjlDsOD/puc1K5X6bMKC/8vu
I111cXSzEgvNWPD/YR8aPPv8woQF/6+2U5WsaOz36v+HLvjt+eQQgQX/H2Bs
5Tw6WI8F/+/6uGCdR6NMWPB/+/NhBBb83+Csbk6PxGr+//82x1OHY84fQ7Hg
/9mfKGdiUxqx1P9pwftpwftpZfeB+b3z/+D9tOD9tOD9tOD9tOD9tOD9tOD9
tOD9tOD9tOD9tOD9tOD9tOD9tOD9tOD9tOD9tOD9tOD9tOD9tF9r/l92vybw
ftrfO/9f4EEnQ4ODRiz4/4cBw56ubWnEgv/L9st8Lf+X7auSvf6sP6DJrN2n
TVjwf9nrfNmemshkdfZWnxmJBf/3GXprpGOtCKzm/5r/a0c72tGOdrSjHXI0
/9f8/zvwf/D+ssVGNXrhZWDz//R9AXj/n/V/8H5a8H7q/+D9Eep6iLxm5v9V
Tgc99Sxk+ubz/9T/4f0Wff8F3k/9H7y/bkr1jrKmr+7/4P204P2ub/e53Otj
ZvP/1P9lew3A+9u+GJ98uHssm/8PGjBxX424KDb/T/0fvJ/6P3g/9X/wfur/
4P0bAutvc3Izsvn/6bEjP481RLP5f+r/4P20f5f/g/fTgvdT/wfvr9KgzPg6
4Sbm/+J26SuMbP5/nrVC+OB9cWz+n/o/eD/1f/D+c2GLHZcuMbP5f+r/4P3U
/8H7qf+D91P/B+/fWf9Dy/2HjWz+P8XjqjvqbY37bub/qf/L7iMN3k/9H7yf
+j94v7f4BjV/t/6f2Py/IXXVRdPamNj8P/V/8H4x/pzJqM3//875/18Lub6p
ezOOzf9/a/8H76cF76fV/P/f4f/g/bSyvQbg/bS/1//B+x1fV0546rWw+f+f
flM3UJnY/D/1f/B+6v9/9/w/ff0J3k/9X/Y6X7anBrx/1/bjU6P3GrX5f83/
Nf/Xjna0ox3taOe/PdPV18vdFVap5/9O55d5vmTPr2z/bIch8+b5JbvFelvs
/wxh9VO19kAg68o5x8scyezFGqKuaRvpxCr7vK3dY6ysYo3girus6tbU7cON
rGmeflr7dNEdVtk/l91B1yu0WcQ+5H2sdu90ZJXtS913eEXGJEeusFYZsHtA
aPWLrG1almoz4IEH68ulXo530rmzytw75Fn5vIvXurG+aTbp0ocygayy+zC0
8vcp1mBBNFZdvpbwQl8pdiBXtXWrbVhxm4C1kUqqlmbPaevisWJMeVOUYu01
8M3x1HHYpRWaHSvdOFS5vKZFivBxOlbZfTOCpwY+GVhCx5ohffebfXd6svap
XjPD2QyurBNWhq0bUMmHVfZ56stpDlZ8F8E73r6olPXq3TdVso3Qsa6u36Vy
ZMUYbMXMtY1dRwQruVt3CXvxyoodV3tSFuOACGWZeGNrw7bbsdInzjlC8e2V
/Wa+XDYs7ONrJ7zeho1ecWzU7U+RSmbjgDxXP8dhz5xr6l2zdphSOnZev2vp
g1hH5PCv7FzQnzVTUnUj3R1WXd/GZ4++92UdW7HvuInNA1kXRRnLHp0SxOpV
7kbtPo6BrIUm3TyhKxXEmzdmcsv8vqyyz7nD/SbofSd6BITXNDy1YlWMvdwt
QtlcsdP1O2dtWPUqw+qISCXJ0Xk3Oz2wYRu+8Lq7p7VeWVOgSa08njYs7AXO
8KVRkccL4rE91G2I06OUqOHVZlTYa8O+Fh+siFS2rxhmjd0fzNq5SchC24ZA
VvV3O/3FgzVN17cj4o96siartHJTuulBrNERv7zaGKPHih/neQKVexfUKzVx
2BXLXoUOqhuqVBfz6CGs7k+upE1TJphVrHteoWPdXmXBqe5b/Vhl9y9yrPlg
X84Ad9YuNyqdTPPxJqv9+s9l1qOlYvINMTuxTldvc/H4FOtr47SYFCncWWWO
KvMi2NNLm63KhwNLY3Wssu+jxeq6xIJerPb9lhdYZfsoc4i9f5dZZc9T08V1
vHOsBd4MX3jaxZVV9vNE9vWQZIK6QTaAVf3q3brMl9XpUcv3q9zcWWXXf+2f
J3FjfSueD3nt1x+uscqum4xQ1zlvusAq+3dxyqve+eQa6/RDlW/5NXVmPSlc
/CYr7NGl3ddoXdW0C/1YxeWYVmasuj19Y9pgZeetlPl7VrVip5YL/e1EVJgS
WmNWwitOK/ZBFtcORd+HKe4tU9YbWc6G9aoREuVzJwLv50Lv67IjQv0XtWAn
d/H5pd30UOWUWDBuwe5I4ZbwFBOqqMurf463YO3XO8KU4QP3eARktmLV7enb
N4cpbdU17b2s2ChxvSZcyZpvZ+fev1mwg8O/pHM8EqrEHah1bH5pK/bL3ToX
398KUy6rly03WbHnlrcvsmVXON6/ht7HJtvKpqHxBjN26KUume7UCFEGiUW3
ZmxKMYcerIjLoN5mrP11XYjiNvmDNf1tC1bdBp01eZhS4rn6gU4LFn4ON314
stzEFBasj9hDHfKf6+IWrP37N0zpvEe9cY4Fa4tTJ85DlaKlXdKNLWbFiquS
l8OU+qNfFqsaaMHCvtQp2bN0OLzXii3nfS95M6dw5cHIQ8uPprRic0/L8Wur
+WFKazEIYMWGxWy5nqFmuPTXiWmuXpizYu2eHKaUc1rhlG98FNZ7ybhh244F
Sj9n1G1exLk6+XSsjYdEDEm50p81rn6DgBXJdKwP98+8M+6YL2u0+Pq6xLp9
pPrK7wCrbM5H9v3rK+bvdawlCoV1X/UoGgvPs2kdj2wpdiAWC/u4Yc88rXrV
uOOuEFbZ3JcpuzpgwDtd3DjKj9X+/s+dVfa87Cr+gVbyiutR01h14tdzYM0g
3rc5stqvY7uxhpw+XKWMVwCr/fr/DVbZdRyHN49Wz5vix/p49Pg5fV6Esaq/
S+HMQaz292dG1rTV7k4s1cjA+lT8/R1jzSNe/55mlb0vnq+uXd+9UKFNIv7+
BvBqRzva0Y52tPMjH83/Nf//F/k/eH/XuZOdBxQ342Pwfur/4P3U/8H7aX80
/wfvpwXvp/4P3k/9H7yf+j94P/V/8H7aH83/ZfedBu+n/g/eT/0fvJ/6P3g/
9X/wfur/4P3fi/+D99OCM9Fq/q/5v+b//xz/9/r8eUfKUkZ8DN5P/R+8n/o/
eD/1f/B+6v+y+7qD91P/B++n/g/eT/0fvJ/6P3g/9X/wfur/4P3U/8H7qf/L
7mMP3k/9H7yf+j94P/V/8H7q//Bzl/o/eD/1f/B+6v/g/dT/wfup/4P3U/8H
p6duD95P/R+8n/q/7NcB76f+D95PK9sz8m/1f9nzLHg/reb/mv9r/q8d7WhH
O9rRzlc+mv9r/v9f+H9EhiVtnh3yx4KrpOysLtALwf5R/29Z+mwvj9VBWPD/
KJUje5mw4P+y+zDL5v/B+2nB+2ll8//1flV0jz8aseD/fcs/7PfKoMd+bf/f
PjnV1vN9wrHg/7L7qbqce2j5ctaEBf/fNmn/zsihJiz4/7Vi24atfmfEJjb/
D95PC95PC95PC95PK5v/n1yw96eBPiYs+P+s85l6PWtjxILXOVTqFzy6qAEL
/h/iMXpmxRRGLPh/Lg8VhExYcMuiBTIMDv9iwoL/37r1ftTZ3SYs+P84cdsj
Exb8/8iUbCe6+hqw4P+y+9zK7jsB3k8L3k8L3k8L3k8L3k8L3k9bQb3d0lYz
FvxfvVvPyO5R2MT8v8mycx1mxsViwf8HNjVsW57UjP2j8//qXXe2l7Bgwf8b
H37baVlPMxZcouYNw9Tp6UxY8F67i0dgv1f/71043GXJ7WAs+D/sT6V7VC+q
axcymrDg/ylbzPXdvd2EBf+f2C/Xs7QOeuy/xf/tt42LwMLPk8wd1E3oeix8
PfRXb7sxMhKr+f//W/t+3CAs+L+1Yr1+M5caseCH4P4y/6cF76cF76cF76eV
3dcFvJ8WvJ8WvJ8WvJ8WvJ8WvJ8WvJ8WvJ9Wdh8b8H5a8H5a8H5a8H5a2XVY
8H5a8H5a8H5a8H5a8H5acHpa8H5a8H5a2a8D3k/7e+f/049T73BkxIL/T2je
MeElghEL/q+M6Vkwo1ck9lv5v+z7t5nx48IooxH7R+f/pw3OHNp6qhkL/r9A
7EuwYMH/i62+aBnc3IQF/2/cePDkUeWjsJr/a/6vHe1oRzva0c4PezT/1/z/
HzD/T/1fdh/mxOb//1v/B+8/2OR6sW3DLGz+n/q/7L7Z4P13xNtD4182/0/9
H7yf+j94P/V/8H7q/4nN//9V/g/e75y6QdXCJgub/6f+Dz5H/R+8n/o/eD/1
f3BK6v/g/dT/wfup/4P3U/9H7yf+L7vP7T/F/8H7qf+D96/osGTd1LUm5v+m
6Y2/xKyMZfP/1P/B+6n/g/fvWaRKrInN/9O5U/B+6v/gENT/wXep//9b5v+p
/4P3U/8H76f+D94/0nP7Xs9qpn+N/2vz/992/p/6oez+P5r/a/7/T/R/8P6m
E9XFMyY2/0/3jID3U/8H76f+/3fP/9PvX/B+6v+y51nw/mrjjc+CqlrY/D/1
f/B+6v/g/dT/tfl/zf81/9eOdrSjHe1o5z/n//R/7vPyyvb6Sq4XvFP/70NY
i1yv2DxTsZOsX4L0wwLmBrGqrwpbW3WsJdZZg5+Vv8Nq92YP1jbZ8ydpV92V
VX1XstkrnPVcnkN70nS9y5rZ8KGgMbWZ9WKLd6VuX3Fntf/5drFW2T16ScyJ
Paz2fa0HWGX/fdl1DdnryTKDS1bfud+VVeY26na/vG39WcUWsx061k4PHrfq
v9SHtZa4McxFVvvrdDdW3dvm4WdDA1hl85nhuXTvTgaaseo0cuc8Ico9AZM2
bHbhSJFKryvRprUHbFj13VHuK5HKljsusScXxWLBD9Wluz8tDGK1/+/gTfji
Wv/sbjAr7G2jHeLn1PflLC9W2ev2gsKxdKywh432+i9H+rYdqGNtJPY881YU
/BqNFbcVyBCsvFulbvC1YKtebbMmS+UwZeraUTO80sZjK7ju6bZyuV7Rv1nx
Zm/3eOyrjTGdapeIUkbXPJq/4mQbNlc29QYIkcrZYfpK7+sbsMn3/pZ54sUw
5ZPK3D1jsLC/LNODEx5Ty8VgT7usn/ZiSLBSrrIlpl5kNNYnyZ11l7MHK002
3X5+720M1iq8MUTp+s7PuHCNAdvaff6vC7uGK5+eLxl88Ukwq+zz+zIPtDtW
FNa+Hy1QSXiTXShTRQv2jHDjEGX/kJGF54ZbsYvG7DrwqniEsu/l9d3P1tmw
4m305khl0MUn2Z8o8diUWY6tCn+pVya1UCdybdgS1WocufhzpNL5mH+fmIs2
rO3VsIJOpkjlpSGbuVzGeGyZoU/Ktl+nV3p0mZPp+lIDtsPMOP+Eb0np19uA
2R1ip5z2YM1xqrBbnxq+rNZ7HWc1uRPE+nPD54Mfu0djg7KG5xz9JUhJdSvi
1Y1kBizsx2wYf75Z5Z+DWR1zN1QvEbHK7us1RfifB+uQEVcWfep2lfXoqTYJ
f4XXWMuIn4uurCnUNdwrL7O+3V/UUqPYWVb7PsCTrC1KLEz4FrrKKttLC3uM
aWXv9/c43MjT5rKO9UB69QrrbdaP4vvjPKt9v+IZ1mpnkxq6JL/MGhJvGO01
yJ31rvi81m1W+/WlC6xpxLzpYdYqW4+ejH9wlXXcnjH3w5d4sHrnKhtn6XGb
df2nT9XTt7nJar9u78oq+7qCfeC0pwefUMb09GNN4dPz9O2GAayy7y+7C7qw
yvb/zu69tkCTWs6sWcT11cus9v3h3qw3xSJ3HWsecSFbj8Xr7N3y/xJc0IKt
3TGJeolfORCSfX+6wlas+inFTOfDpPfzP5Mr6liX4TbsHt28Swd+iVSOqeu8
01mxm8ZlPDdxZZiSf2mPVC3mWrBTz8ycsGJiqHL/3ftUBa5bsTm33Zj407Nw
6T6CxYdUQbZg7XMjoYqDepkkjxW7IlmHLwn/Hel95i+Uvlc5VWcb9sRz9XeK
VHJf/dx9fn0rdnze29nfPwlT9t/L9Lr3WAt24dT49mfbhyo5BaBGYS90Ui/Q
Bir5c2eft6WiHgvzAPY96lHYJsWc1VscKWmrtx2TpFYM9liqnwvNmRSstJhc
4HWy5dHY+CZJj867GaScWa+L2KU3YXeLPddBSg7ry6TF9WbsyLHnhytlQ5So
PosDt862YN/0CUpVelyo8n6qp3JlrRVbY0M389iN4UrdLE1fvwm3YC/e6tzh
XokwZb1YcGzB2p93QqX7C2T7FMx3H84fFWTFim/HvBFK6bYe1vF9DFjw0ucC
8vVY+8scnZLljetw2y++rF3EXlkfVu/G9+bUNQewvlifvd+SGoGsecR1DE/W
aPH+zIk1jXv9p7+9c2Qt9KhA6PP1t1irNXbpceCcP+vdEt1ObO8YibX/PA9Q
9ve8PO2ukxmrTst4xwYrq1SuP27Bds+yqfzyO6HS12+y/dTbM2VwcakZxCr7
HG5M33s+EyYHssre1+wTz2OXWGsZno6tPcmRVTaXZb+udZjVIP4dHHjF+56z
rNHJ6uytPtONtY1YGO0h6QXWxWKe5RyrbM947bBDrnOaBbOKH7+PfFntn8OM
Z5Vd13sqvm8OsyaJqFClZcRS1obidfMiVvv72gWsUq/Qjna0ox3taOdHOJr/
a/7/L/J/2XwmeD/1f/B+6v/g/dT/ZfcP/9H8H7yfFryf+j94P/V/8H7q/+D9
1P/B+42f4kOvFrHiY/D+yv5zHp1aZ8bH8H7x0mpz2k/TzPgYvN/j9JecA9qb
8TF4f9CAiftqxJnxMXg/7dfyf/B+WvB+6v/g/dT/wfup/4P3U/8H76f+D95P
/R+8n/o/eD/tX+3/4P20svetmv9r/q/5//fv/7LP2YH3U/8H76f+L7ufP3g/
9X/wfur/4P3U/8H7qf/L9hGA91P/B++n/i+7zzx4P/V/8H7q/+D91P/B+2ll
+4DA+xcq09J6HDDhY/D+Cz9Vi3Gba8bH4P0huvzFbpUy42Pwfur/4P3U/8H7
qf+D91P/B++n/g/eT/1ftr9Atk8BvJ/6P3h/d0tQwittKz4G76f9t/o/eL/D
MeePa1YZ8TF4P/V/8H7q//B6jVbzf83/Nf/Xjna0ox3taOcPHs3/Nf////VF
3Km7HXIFYcH/1U/17v0tDgv+Lz4238OIhdfJKx4+OdNzgB77R/2/Yy31xhtB
WPD/zRUe3XpyxYhNbP4fvJ8WvJ8WvJ9WNv+vKsquVGYs+P+IbuoNikxY8H/7
+84YLPj/tk1nN+7wi8CC/2fb8mr2nIT3o1Dw/6rlNua4NS8CC/4vVLa4CQv+
L26/3MqEBY9VlaXsayMW/H9+l0n9cj0zYhOb/wfvpwXvpwXvpwXvp/3e5v9j
xQ2IzFjwf9n9e/eIG9oYsInN/4P304L304L304L304L304L304L308rm/2Vf
b0939EvfaFAsFvz/UN7Bc/MFG7Dgk52Ku68qWc6M/aPz/0mK/fpsRz8zFvy/
Vp26+3ZMMWPB/2V7Pf4p/j/x0ocyG87osOD/+170PJj7NyMW/L/2cRU+TVjw
f/VvKbufCQv+/1k8D+uxmv//Nf4fdja08MWTYVjw/5rCmSKw4P/258lI7N/t
/+f7rFvQIFs4Fvy/Ufk9ZYc+MWITm/8H76cF76eV3c8HvJ8WvJ8WvJ8WvJ9W
dj8i8H5a8H5a2X1mwPtpwftpwftp/675f/B+WvB+WvB+WvB+WvB+WvB+Wtn9
i2T3UwLvp/298/8lxqS/OzvMgAX/T3jSejjykAEL/u8RkDlj0UuRWPD/zuK+
cXrs1/b/JwLyg7Hg/48atLKUn2TEJjb/D95PC95PK3v9tsInznn7WzMW/P9E
9aInBxpNWPB/uP8mvQ9n/dUp8r2sFYXV/F/zf+1oRzva0Y52/vVH83/N/3/H
/D/1f3hdTP3/W83/U/+X3a/7a/m/7P7h4P3U/8H7qf+D9ye86M/18bKZzf9/
GKAukjSy+f9Jt7L4JLkT91/P/1P/B3+lHgveT/0fvJ/6P3h/sz7dT35qbf5m
/g/eTwveTyubHwPvpwXvp01s/p/6v+z+veD91P8Tm///3v0fvH/5g5UX5o20
svl/+vUG3k/9HzyS+j94P/V/8P6Wl1JF1mpqZvP/NXrZdi2wWtj8P/V/8H7q
///2+X/q/+D91P/B+6n/a/P/33b+P/+EtxcL1Daw+f/WqVP1i81v/O7n/1c0
DU34lzKw+X/q/+D9tJr/f13/x3n/7vWd3Z1NbP6f7gP6VvP//1T/T2z+v6z4
g5rY/D/1f/B+6v/g/dnmbanY6brxm8//t1cv+3SOYfP/1P8Tm///b/1f9vlN
8H7q/+D91P9le7i0+X/N/zX/1452tKMd7fxw5/90e5n3//n9vwbxgnkFa5UA
U/yypa6s6ha8wnWDWO175/xYDQmvCk+McWNdfv7ClMse11g3qC+XN4Sx3hQL
2iysl1r2K7r/7D1W+35dA6u6HTFd/BFW2T9Lh3Eq/O5TaOcLVz7AKtur6756
ZQmPpzdY1a1he678L63V9EHzKrdZZZ/T759e3bwVyNpb7K3Vscp+nc1xBSpF
eHmzTm9Y/V5YkaussusIJ8RewSDegcZWzqOjsLC/8sLJtaksdy3Y4x9tE9ya
hSmHS04vsvJhPHb148sOGdtFK+tStzR7TovH9jvXu9yyIVFK0FPPQse3GbBN
zk96ohsZrtjX6wazNn/r5msoyJunkbpYTce6R7ww9mPN5zX95Z22d1grNG1S
cUQhXu90Oer/quhYA7fOfthiSyCrm3i9zLu5x6lBzZoGsT4W11WisesOqBPt
CX//ulJBo1ys2K1NcqcJeBSu/GZWpdWGnTyq/KYZ1yIV+/8sG7arymA59Uqr
Mrm67l0Ujw198SpjrdlRyoG4Wy32NYrHLh7U8VXtt3ql6o56W9vfjsceDm+c
8K0Rrbh4talW/o0Ne7naYN/2g/VKc9PAORcibNiA4Wv6DSmlV25FqneCsmE9
BejrlZvifgEGLFwftLtODPbujd6B+yuESL8Ok7+dm/AlYME2E58/CFUGl9qx
ZdYyGza12A8eqUyboS4wjcdWFj4ZpQRUKZhn+ox4bGwKsbhR6X3IuKZ+l3is
uExUMEpJI2DNhm2fU9x4QWn3Ynzy4e42LOxldqgz+deoOvHYFXkc2zne1ysu
bZ+nS7vGiM0z9s7ttV0iFcHpo3Ws6lfXhng/1qqHHta33gtkhf20tH0PN1ue
u3UIq2yvpezrPNMrdZNxEGvD7FOsS1x8WGU/P12WqBdGr7E2HFc8m9uFq6xt
lKg9DjecWWW/jn2P6EXWiErv669OcYU1g/Dsi6xZxAWvW6whY5Y2Pvw2iFXw
3MYQVtjnTHv9etJl433cWCeUjL4wMu1p1iRi76Ub6+aZxboYD/qxqndlS/jJ
wgp7s2kXpj7g9fmzN+vLo/UPDBl5g/VpvflPpi0+w+osrts7sUpdRfwcusJ6
rnjXZnumebP21C+L+zW7jrWNbkvu5+P8WWWeP1U8T/qwdilRdumXIjrWpwNL
6PbdvsPqJfaUnmV1F/PHvHb3cmWV3Q9Ndl8U+/UlPbZZsowzd7XUKRcL1F4+
oYoFezK67hR9aIiy+3Q6z9RWK3amWGwZodzO0f9+ldFWbIDvslq9W4crIeqY
yHoLVqzP3RoqvQ853G+O3neubcKTUpNeVizs7V2yPmp5kwlWLFwvrvalxoRm
Dy3YY/trNlnaNkyxejVavGigBZtOzNGHKr3OVKj7bp4Fq/5wfjAlVFn/cXvd
n7pasf13fdD3LhyuNNmgXmCyYG97uPcfuipEuVSmXTlDyyhsd/tiWmWxAHM9
1v56VacM3XYsq8lDj001cu2tfkkCcR84baUp6pV+3irPukcWs/qwyj4fmqr/
L7kOhkRh4TojzBnQeQPZPgXZXoCb/ZJsuDLdivUYoG7iDVcanz36vsBsK1bc
tmlsuLJdDG5YsROniO8kJeeA9uWbNrFiRw9WL/SGKcvFfuMYbFnxDRysFBvV
6IXXXX9W2f7ZWsmG9Q/R+fCK7ycdq+znpKH6tVwL3V1Y54ufQ8dZe6iXS7c5
s7qKxcXerE7ielEkFn6ePP/Sw1pzmRlb/OCsSiMXBSsX6lkWd99vxR4rsHHs
0UvhyspmdUxXBlmxXas0KDO+Trjycqjz5TQHrdjSCf9huqtwnScOGzao7pb7
vqFKQfWX2xbMql6Fz/8Lr/tPUW9WvAlgLV6maMrmeYNY7Xvjb7Lar+ueY/US
i6cvsQ7I3S3F3BXLWZMcs7hUMC1iPZmtuevDVVdYd4n9zDdZvYpMWb1vsTtr
L129n6/E32SVzX3JroOULPfg3ftU0axh4zrU7GXzZS00PFuKuikMrPbrLUbW
5XOOlzmS2Zm1yocDS2OzHGMdIJ4n57MWEfNcK1jte4An8GpHO9rRjna08yMc
zf81//8B/B+cNWWLub67t5vwMXg/9X/wfur/4P3U/8H7ky0P8Rg90/rD+j94
Py14P/V/8H7q/+D91P/B+6n/g/dT/wfvp/4P3k/9H7yf+j94P/V/8H5Vvf2O
WfExeL9Q5ygzPpZ9HYL3U/8H76f+D95P/R+8n/o/eD/1f/B+6v/g/dT/wfup
/4P302r+r/m/5v+a//9e/wfvXyQ+wGfEx+D91P/B+6n/g/dT/wfvp/4vuw+5
bO8MeD/1f/B+6v/g/dT/wfup/4P3U/8H76f+D95P/R+8f9WJai5nl5nwMXg/
LXg/7dfyf9nnQ2WfM5J93lC2T0G2FwC8n/o/eD/1f/B+6v/g/dT/wftp/63+
Dz8/7B+XMOJj8H7q/+D91P/B+6n/g/fTgvfTav6v+b/m/9rRjna0ox3tJHI0
//8h/X/rsl1PyzkFYsGv/Lyv/XKkbygW/F92n97MTnXnrZxjwoL/C/b0MWLB
/4uJ19F67B/1/7QOG1+cWx6OBf+/KG40YsImNv8P3k8L3k8L3k8rm/93cBrh
UPy0GQv+v6jcbKfJXcxY8P+H/nsH7S1nwoL/2+9jFIEF/x+7sXuLEWPCsOD/
rzpcG3KpSxgW/N9DgKoRC/7vNaOne+n1Jiy4aKOrL45EHDFhwf+P6yfOK3XX
hE1s/h+8nxa8nxa8nxa8nxa8nxa8nxa8nxa8nxa8n/Zrzf+D99OC99OC99OC
99OC99OC99OC99OC99PK5v8/tR69s/4HIxb8f564sYMRC/7/bn7WR79eMWHB
//eOc/KtndyMBf9fu6BBtswPzFjw/2wr1RuNmLHg/7Kvc/UuTLuemrDg/0lq
hTb0PBiO/V79P/eV3xL+6Dos+L97wrNM7mh/LPj/3U07f259IBgL/u89pN/4
sEZmLPh/id+qLDjVPRb7rfz/+OgKbydvi8CCa9XNevxpoH8kFvz/kbhvViT2
e/X/2gLQwrHg/5fTHKz4LiISC/4/+UCSEGWgEQv+fz/FidNnDeFY8P+d/hdu
Pu4ajgX/l83r/tX+f+HUiyTX4yKx4P9wPxR6XxTZ/D94Py14Py14Py14P63s
PiSy+86B99PK7hcH3k8L3k8L3k8L3k8L3k/7teb/L2ZdYdBnNGHB/6fddTpR
NoMJC/5/stzEFL7XDdg/Ov8P3k8ru5+S7L5A4P204P204P204P20svn/e+LG
eEYs+P+nqzkLejc2YsH/Z1X2n/PoVDgW/N9+Pxs99lv5v7g9Vk8DNrH5f/B+
WvB+WvB+Wpn/y+b/x73pWKz/BjMW/F+9i1GW4WYs+H/g+6y+Q28ZsZr/a/6v
He1oRzva0c6//mj+/0P6f2Lz/xXeRWwoVzyOzf9T/wfvp/4P3k/9/2vP/1dL
eJT/iIHN/1P/T2z+/8/6f2Lz/9T/wfup/4P3U/8H709dJjjgYmnjn57/p/4P
DkpdFLyf+j94P/X/xOb//23+L9sPAt5PC193tP90/09s/p/6P3g/9X/wfur/
4P3U/8H7qf+D91P/l32dg/dT//9R5/+p/4P33zQfGr49k0Wb//+L5/9X54+r
3yDAyOb/qf/L9mWA98+ZOyLN5TWG72b+n+5Dkd0XHbyfVvP/P+b/4P204P0J
P+w6nc9rYvP/5kGmM+eamtj8P/V/8H7q/+D91P/B+6esSTnvcTbTfz3//737
P3j/y15psk2eb2bz/9T/wfup/3+v8//U/xOb//9a/k/v/wPeL27/f8LC5v+p
/4P3U//X5v81/9f8Xzva0Y52tPPDHdn+X/F8OIBX5v/i/96BtaF4Hp7Aat9r
d4EV9onRbtt0duMOPx2rWO+3zYvVvv/QhbWxcBcfVrtbGFmLvPtp2qDj91mt
MzO83DD9LmvIafUdSwCr7K9/3+EVGZMc2aHQ2l9HO7I6C6e8wtrixrINDRdd
Z9WFBVlzTXNi9Rbv491YR+Twr+xc0J91uzr2udWPdUpUncyGD7xd96qf3A9k
FeuaculYg5+Vz7t4bSDrx21hNWa9vsUqe93b6Y4KezrWB/NSRgS3CmQ9/6jl
+1Vu0djONyqdTPMxSNHPVgevrNiXu8okedU+QkmWvPKTNRYbtumx0o1zNtAr
CW/adq95b8Neijy/N8covVKmlvf6QpmM2GeNZgRf7hahdBbvb+Kw8L5efGy/
TRDrrPYzZoYUCmTd12hd1bQL/Vh1wq29WauJfbyerF7CCdx549UNiwGsW873
WbegQRBrfvF+KwrrMrhTr2pBgcr9ufti3nW2YHOoa8EKhCp9l6jvzK3Y96dq
LD1cN0JRldenpw17tF79UevKRCrLh1lj9wfbsB0nbC5av4BeGTenz4tcheKx
BfcsbFX6rF4xv1D/4eKxqVYlv/CuX/R/5m7jsXZ/0yu7y6oLbeOxs8T1yijp
3odVbpvTx/jasN1KvZh5PpNeWVNA3TBqw/aO7hhSNqleKXYgV7V1q21YdXtc
7rWRSpfNwalXj4jHqu+CsjaLUuqnet+i3sl47JUz115N9ItSuj1ZWO32wHjs
owWqbEVJ/1wl73qnn1EzHrtqcv9ZD8x6ZXPFTtfvnLVhR34ea1gdEalk8lYn
h23YvjWTJh36PlKpMVS9chOPPTX29cPSS/RKnho9Fxw4YsNOyDx7WAP3SCXu
dNvWTxtGY8Ht1W/6dycDWe/lS/85umQ0dqWYDw1Saot94LFY/W51wXOIItY2
dw5lndJg9MtiVQNZ+6231XqYUsc65bJHwaa7g1gLVJzs7zrJk9X+ftqJ9a2A
tMus1dqoC1qvssr2nuex9fz4UefIWka8zz7JOkEsND/KWkvsgT/NuudK4RHT
Pruzyn5uq9u/0zoEsWbYlbXuiVa+rPbf35l1feHJpQ8fv8ZaRvxA82dVtz6W
rxPCWkzAo451dsdfxi/P4MPqO/TWSMdaOtYkoQ69F43xZbX/HL3G2kFvcD+1
4wSr7N/dXfjibdaPl1uXydU1gFVcdinvz+ocMOJ5jwZ+rLKvZ/tcgx+rfR+1
Dyvsmaf92WNbHd9et1hl+5rt11uus7b51Xb/4q/+rNE3nC5Gng9gzXaiq+/R
Fnrsudl15pZcpFO6jZw+OHOoGSt+28IhitfitGOunbNgA+0XBpSN6mXULRbs
0J/VDeqhSuylqp8Df7VgP2b7Sd3AqYifQqss2DG/XLu2a3Wo0u+VIZu5nBX7
cc2qFTe8wxTn1A2qFjZZsGfONfWuWTsM96DTfegDOqxXCpWwYpM2uW+qfi1M
qS9+PFmwgglzhykL+hdLdTK7BatOV3TcFaI4vq6c8KPXgt2/Xgi6ok6/FBxm
xcK+Y/v1umjskHrvLYd9g5Snz2NbPJ4awGq/nskru2/b9V+O9G07UMdqf771
ZW0mXp/6sw5QPxYXrMcmFdcBA5WOQ+bN80sWhX1afchPreoHKv7HVQg1Y+17
bEOUZbMMVV8UtWHb7VjpE+ccodRUP8bV3oY9oz4t5YhUHnU5XrX7JSs2X9tC
PkfM/3NfP3p/v6DRRVv4JrVh7a//I5SYznsKXWgejZ0r5nOC/uO13qzX77uV
9OzKK9t/rV6kCpzvy2r/erzIat9Pe4RVXJ7MeY61i3j9e5O1+pJGjT4n/Pmg
x8X+ej+lca6DIdn3m7Ae4jpg4H8+P2zFRoo5onBlafoa54bpbdg2V6p7eZaV
f45Sts+67k9dHzkrwazqVdMVyXSssvtZJTyZb33wk471YyH1iqMvq30fsivr
gLYDE76j97DqxHyBG2u1+AwVhl++zvo0XH1DtJVV5t4pqnRZfn2oC2tY4PwC
uwvqWL3sF4pZpZ/7uFlv1d7CV1hHLsp+adS4CFbZ/E+3fLERv7ziLfhm+MLT
LgZWsc7+Tgyr49wUkyMn7GCV7Vm2v59eyWrfAzyR9VvSi3a0ox3taEc7f9vR
/F/z/x/Y/8H706792WHZL2Z8DN5P/R+8n/o/eD/1f/D+HgHhNQ1PrfhYNtf3
T/d/8H5a8H7q/+D91P/B+6n/g/dT/wfvp/4P3k/9H1ycOjl4P/V/2d4H8H7q
/+D91P/B+6n/g/dT/wfvp/4P3k/9X/bnAu+n/g/eT/0fvJ/6P3g/9X/wfur/
svv2y/wfvJ8WvJ9W83/N/zX///f5P3g/LXg/9X/wfur/4P3U/8H7qf+D91P/
B++n/g/eT/0fvJ/6P3g/9X/wfur/4P3U/8H7qf+D91P/B++n/d78H7yfFry/
R0u/YWWGmPAxeD/1f/B+6v/g/dT/wfup/8v2+4D3U/8H76f9p/s/eD8teD/1
f/B+6v/g/dT/ZX/Pmv9r/q/5v3a0ox3taEc7X/lo/v9D+r/4+O6OICz4/6zz
mXo9a2PEgv8vnTmrdt7yRiz4fwPrvY6zmhix4P/pPkeXzLHKhAVH8hU3xjFi
wf+rFmk+PHWXKGxi/l/RPL3xl5ggLPh/2uwRM4dGGrHg/10fF6zzaJQJm9j8
P3g/LXg/LXg/7e+d/y9bMd+95Q9MWPD/gmHdVz3qYsKC/9vvjxWB/aP+b98X
GIIF/7d//0Viwf/LL7+T091iwiY2/w/eTwveTwveTwveTwveTwveTwsuTgve
Tyu77xN4Py14Py14Py14Py14Py14P63szwXeTwveTwveTwveTwveTyub/1+8
o1SNJLtM2D86/69qXMbxFiz4/w6/Dl45+puw4P/rpq4dNcPLiAUvDY43jPYa
FI39t/v/6fTlk91oEoIF/7/gt+eTQ4co7Lfy/4R/vIf7Zxqx4P8dz6s39DNj
wf+fLf58NWdBExb8v1C4eqekcCz4f4XNqvRGYr+V/9v3jIZiwf/F7e12GLHg
/+J2eB2MWPD/doMurMyb04gF/5d9PTfe2eLEsxpGLPj/xkFvMyebGI79Vv6f
UnhbJBb8v3s/9Y4YRmxi8//g/bTg/bTg/bTg/bTg/bTg/bTg/bTg/bTg/bTg
/bTg/bTg/bTg/bSy+f8CDzoZGhw0YsH/7XuhjFjwf9neFkX3+GPZ10Ys+H/R
rH2uNooxYMH/fy40Z1LnYUbsH53/B++nBe+nBe+nBe+nld3fD7yfVjb/n/5F
hblzRxiw4P+Zj60Kf9nLgAX/zyNeOOmx38r/7XMwwdjE5v/B+2nB+2nB+2ll
8/+5r37uPr++FQv+/8lTfYFqxoL/t2+r/oJGLPg/3MeK3s+q0pM1lnFvIrGa
/2v+rx3taEc72tHOv/5o/v9D+j94v8Pese2D+kez+X/q/+D91P/B+6n/gxtR
/wfvp/4P3t+y9NleHqtN//X8/+qsm9cvPBjN5v+p/4P3U/8H76f9Wv4P3k8L
3t/rTIW67+ZZ2Pw/9X/wfur/4P1enz/vSFnKyPxffTdQoL2B+X/PK+ods2PZ
/P/BG3naXNbFsPn/TkdHDkruamTz/9T/wfvrD2gya/dpk+b/P7j/Jzb/T/0f
vP9QieylHF+Z2Px/m09XHIs9NbP5f+r/4P3U/8FHqZdq8//fx/w/9X/wfur/
4P3U/8H7byR7OPLQcsN3M/9fbI16Q/84Nv9P/R+8n/o/eD/1f9nXM3g/9X/w
/hleac803mn45vP/531C0jwbZGTz/9T/wfsvj6mVMVdqk+b/f9L/E5v/p/4P
3k/9X7a3Bbyf+j94P/V/8H7q/+D9htRVF01rY2Lz/7Tfm/+D96tbOHalMrP5
f+r/4P3U///u+f8RLm2fp0sbw+b/vXuevt2wsPGr+7/s7xm8n/o/eD/1f/B+
6v/a/L/m/5r/a0c72tGOdn64I9vnK3H73+v8st+2odhLOUuhHZAxffebfX1Y
f62mDoCHsApeyeHLmidNwKNtlV1Y+4h9s66sMr9SP1W8srKVdYrKZDviWXt3
P/mp9egoVunfm+zk/NClY7t5Cu383msLNKl1lHWxugayoDNrkUhV5i+zHl+w
uvneaHdW2R7AxrfTtGrhFsgqu8/PkRMLnzWaEYVtPmf4wevnA5W34nVrLHbb
sawmj2yhSvJMcVuLpw5kle13lt3Pp4fYy+fB2qLEwtE1j/rw9nU5HN5Yxzox
ckK+CpmisfZ5wyBFsNFOC9ZU9uiUbCdCldif15Z+GWfFfkpjO2esFqE4JjV0
SZ43HrtfvM7US+9jXz5TiG3WRBt2242JPz3rHqlsvDc8atPLOGxV4fNhSr2T
Z3JFHYvGRie8O+puCVIudFIvVAWyRiWrs7f6TF7Z30OlfS96Hsx9h3VX/wl1
66X0YE1yT12Y6Ml690H+CW8v+rLCPj+612/fy+u7n62zYcWX5+ZIJY14w2vD
wl7ajUEHNqx1tmGHtMi8LJctUrl+vmNc5NF4rEu6sSoJSu//P3xMu7FDf47H
2rlar3hUSxefO9qG9ckQ+1PZinrl2NNA/44V47GbFo9NujtArzy0fDnrPd6G
hb23uVt3CXvxyoodV3tSFuOACEXcvmBlPDao/jYntxVRSvvYKadzTo3HxvU/
71piYJRiGdz8+Op68dg0o3s4Z3usV8Q/wxYb9vOihtHJ90YqpXr8uiblPBt2
TWcn9R2SciDuVot9jeKxsB/558KmMRX72rCHjGvqd6kcqahfZV2G27B7xOK/
SMW+LtqGhb3MCT+E8kyfEY+FvcPZ578vXeGCDav+dEj4F1J2F7rQfHMFK1bc
psE/TJkoFjtasMUbLOgyqR/85wbsojG7DrwqHqHszxmw+dybENZTjWq0C3wf
yGr/nIyOVfe2efjZ0ABeyft3mf/nCbq1f8mMi6y60jWHbm1yiXXE3YwbBm66
wOp86kWS63FnWcuIfZLnWZ+qvJ7HiVV2nb3aWfUH1WXWFD4q8Nxg7TG6cY9b
Nz1Y7ddnbrJOEF/vzqxr/TMdLRXjzfpTq/pZjz8NZIV9sLSyeQDZz7c3zSZd
+lAmkFV235JR4t/Bg/Wom6nh2OuXWL3PVkr5uKo3q2yewe49/qwzN/w2ottj
P1b7v0MAa9vs+ZO0q65jlX09r8w0dP/L636ssI+UdoifU9+Xs7xYE/7R8g0x
O7E+1julyNzEjRX21dOOGa/esM2ftULexWuzbtaxer+eY/oUH4Md7TVo88xi
IcqBCXPdHj2NxjZuPHjyqPLBSqkZSxZ72qKxnq1G1filaLCi/rTOlNuCVbdo
5zoYohwW8xAW7CqTQ7I91UKVprOTHbO4WLDitmiPQ5UJpm5+GX+xYIuMmPY5
x4cQJWjAxH014sxY65CTDsOqhigOPhUfl7kfjW26O9u+QyWClV9q5fE8/SUG
C9e59BPnlbrrbca+XOrleCddiDJHZa98Fqz9dUGIsnr/vUyve1uxvWy7Flgr
hCu9PNUrZTHYD2KOIlgZUShvzOSWPqziWWOCN6vMRe3XFf1ZvRvfm1PXHMBq
v/7pwzppvvo37s8q1n/micTWeZvvXJ5D/srB2plmJW1iwia8GFAvlCov7vdd
b6tlwZYW//4hSue8M2JHfrZi40OvFvGbGKGEF52/v/FLK/ax7c7huX0jlBO6
UkGjXKxY9a53AY/Cla0ZjyR851uxY6/njr/+Oky53bDwimWvYrBizWmVEOn9
jjzFImxvVnG7vzOerFmGpXqyffNFXrHX9BjrZvE65Qqr/fXCHVZd5zfJH/kH
sHZTX04kvO6Aws/P5G/nNn/rZsE226TeaCtUmXJwqH/eHjZs2fubk1QsGakc
txYt7ZLOiIW5mjmuy1/X6RvK2k84uj9rFvVy0og7rLLPva6O6NnVlMaL9bW4
TnuHdX3VtAsLJvNiXV6h2bHSjS+w6lb/pKwZ6cCaxUedSDjPav8cjhNrmtan
rpafc5k1i+ORLcUObGWVPe/br/94ssJ+b1r71/Vt1hLi9ddF1plDI+98GezB
K27wGcwqu26VYoV6p8og1kyv1H8JE6s6LXXyuQ+r7O21a4t3pW5fWaywiu+z
mazzxc/foax/Ul+0ox3taEc72vl7jub/mv//Bf4P3k8L3l8heQnF1s7y3fo/
eP/d5M2cwu+Z8DF4P/V/8H7q/+D91P9l97EH76f+D97/TtxQ3oKPwftp/yn+
D95P/R+8n/o/eD/1f/B+6v/g/dT/Zff/B++n/g/eT/0fvJ/6P3g/9X/wfur/
4P3U/8H7qf+D91P/B++n/g/eT/0fvJ/6P3g/9X/wfur/4P3U/8H7qf+D91P/
B++n/g/eTwveT6v5v+b/mv//OP4P3k8L3k8L3n+rc4d7JbqZ8TF4P/V/8H7q
/+D91P/B+6n/g/dT/wfvTzanRKGw7mZ8LPucC3g/9X/wfur/4P3U/8H7af8p
/g/eTwveT/0fvJ/6P3g/9X/wfur/4P3U/8H7qf+D99P+0/0ffl5GqR9j7GXC
x+D91P/B+6n/y/Zqaf6v+b/m/9rRjna0ox3tfOWj+f8P6f/VxhufBSW874SC
/690rZw1eZgRC/6fZKN6QwYTFvxfdp//3zv/P1C9fUFLExb8/6FYrGfCgv+f
e7P5SPNHkVjw/1UXVRENwYL/T0x4V7LhjAEL/p+i74yiT2xGbGLz/+D9tOD9
tOD9tLL72ID30/7e+f+r3es7uzubsOD/fpWdC+5ZaMKC/x9VP2aeRo9NzP8r
9QseXbRFCBb8XwlU3xjGYsH/e5VV5ciApf5PC95PC95PC95PC95PK7v/D3g/
LXg/LXg/LXg/LXg/LXg/LXg/LXg/LXg/LXg/LXg/LXg/LXg/LXg/LXg/LXg/
LXg/rcz/ZfP/VS4v3N6nkQUL/l+jfY1XD26asOD/68X9tPRYzf//Gv+fPmN8
iWlXA7Dg/6pa5KoWjgX/F3dFu2bCgv+X3a3KiAkL/l/h7eRtHSqYsOD/sp/z
svnVr+X/TZed6zAzLgwL/r9QmZbW44AJC/5fUUCrEQv+f31jo7t5Ghmx4P9F
95+tfWGLEQv+n8q5TLtyBiMW/H9zhUe3nlwxYuHrOdmkKVMbVjdiwf8nma/e
jq8dif3a/n+m6KqO91dEYMH/66ysU7JhayMW/P91nb45V2c2Yb/2/D94Py14
Py14Py14Py14P+3vnf8H76cF76fFeX9ayfz/+18HNjVsM2DB/zO2iz5+eaAB
C/5f+OLJtaksBiz4/6mcU8/MnGDEgv9nm7elYqfrRiz4v/rsme+aAQv+PzvT
9aUVmhmxic3/g/fTgvfTgvfTgvfT4rw/KXg/rWz+X7bv4FZkryvRpjDs1/b/
JeLGYDos+L99biAMC/7fJXnedQ0uG7GJzf+D99OC99PK5v/3rO1/p8gUCxb8
33lB1UHDuxqx4P8jxI2ewrDg/81NA+dciAjDgv8fzuc1/eWdUKzm/5r/a/6v
He1oRzva+dcfzf9/SP8H79+8+6PS7V0Mm/+n/g/eT/1fdp//Pzr/T/0fvJ/6
v+x+/uD998XcdSyb/6f+Dw5EXSix+f9v7f/g/bTg/eq0+pmaZjb/T/0fvJ/6
v+zvAbx/TK7tJcakN7D5/zWrH192yBjL5v+p/yc2/6/5v+b//43/0/v/4Lz/
kJGF54Zb2fw/9X/wfur/2vz/9zH/n9xU6K3vbAOb/6f+D95P/R+8n/q/7Oeb
bH71a8//B+mHBcztZGDz/9T/wfup/4P3U/8H76f+D95P/R++fqn/g/dT//9W
8/+pywQHXCxtZPP/1P/B+6n//9H5f9q/y//B+2nB+2m/lv+D9/edufSeq6uZ
zf9T/wfvp/4P3k/9H7yf+j94P/V/8H7q/+D91P8Tm///XvwfvH9TTfUvwMzm
/6n//93z/wPal2/apKKBzf9T/09s/v+/9f/E5v+p/4P3U/8H7xdrKQobtPl/
zf//16P5v3a0ox3taOeHODJ/FnssW/PK9v+KPVpN/pdKriNIHHvA7A6xU05f
YLXP8QSyyj7nrr6rWDHRg9Vxo7rh0Yl116oq+o3r/FgPviq+3WepmXX7Xs9q
6eLjWdU3E1kmRbEaxCKkM6yyfxbp6wrJ9ZSn+2feGXfsJGuKLeoGwMusCW/6
1z+7e4u1YfYp1iUuPqywL5FWtifxyt03VbKNiMA6iQWZfoou5c3JH6xmrPG0
ulAtRFGne8YWs2IXisW3YUqa0zH7xjlZsB2+LD4UFhOqJLzpzL/LOQY7u2kl
vzwvgnFvJ23Ce/Xs+9MFsNbr7B3beY8/axvdltzPx/E2iFfvSBOFjXPe/vbE
mEClQ69qQVnDY7BiHXHWEKXt9Jz6Jr2s2KhNL3MvKhuuDC61Y8usZTZs6qef
1j5dFKm0H5xvyYv0NmysfcGqItY1po3HVnDd023lcv1/PN2GvdF0Yqek7fXS
++SLt+X5DNjdem91ZaSy2r5gmfXF+uz9ltQIZIU9z7QNT89Iv24b74SS0RdG
puXtKPZmR2It5SeN9NweoKhbKbMcM2Mz5DwwPu/tYGWM+MKLx+a9W/yZ43W9
9P7/svvbL92pfoPHY9uIvZxRSp0TrQokPR+PvfCu364P+ihFvH3dEI/1W1ar
d+ttUcpP6nrInPHYg0lr16m7T6+U+OQxwHuJDbt8d9eSa+dHKrsaqIuObdjp
RVQBjVSWrI9a3mSCFdvaff6vC7uGK973RzRc62/DirV72fTS++XKft+UYh2a
Dduqv/iTK5XEIjYbdtevupXDW0Uqgqu6xmOnNqx+L6xIlNKqTK6uexfFY0Nf
vMpYa3aUItY5Z4vHHu5zd9jU3/TKIo8FCW/dbdhm4ts0QlkmAN+GhX2LLQXj
2rBBBR9e0ufRK+r25Pz3rdjXb8QHhZSfHZb9kv6FAZsi38tam4pEKOrdMlY9
CmHtME5dVKpjld1PzOHNo9XzpvixegmXusEqe/+rbsVc4XSF1f65mnOssuuz
L8X3nxvrgNzdUsxd4czaIa2u08a051llnj8mZFqN+3WvslZRt51Wv8iaZOar
Si0mu7BmEM9Lrqy6vo3PHn3vwgr75Gnt/3861rA2UU1vLAtkXbqh4aJCw/XY
0oNLVt+5X4f7n2m/CIAPYvUqd6N2H8dAVsdd6uZOXkPLzhPf5b/NKnMP+58v
kLVGkl2jiph5WzuPDs5WT8cqu54uu59bpSnqFWId65ZayYb1D+EVl4uy88Le
eFr79SIPXrEf+xyrq9hfeoW1x/62DqHTfVjD0nbrO9gtgFX2fAT//rSNh6gb
av1ZZX/equU25rg1j7f5WzdfQ8EobLzKwD0ClTjxuiYaC3vMN0zv0b/ixSgs
XLfaL15XRmFhjmLH4wE3Qj11rNWXNGr0eTrv9etJl433icTCfudU4nJFFBau
p28cl/HcxJWx2J8bPh/82D1EGXv00rZNZ4NYZfdLdBeLtf1YOz14nPBU48Na
a+IJ29KinqxO5s8JL7Vus7Y5XaRU9yy3WJcKT/VgrdC0ScURhe6wDhWDJXos
7HXNXFkdNDJj+yd97dSpSYjyqMvxqt0vWbGw57fd3Ru9A/dbsPbXoaGK+imN
zUms2B3z8tcqPjVMsYkbGVqxYnxpZ5jSSexbjsM+Pzz5lOOsUNzvTeuuMmgB
P1bnBuoLrdusu8TT/yXWj+J6zi1WV8PU6enK+bEmqbRyU7rpeuz+L+OaLjun
w/kSOmci2zchLvvlsGJX9/1S3nVPmJLwXJ5L986A/TJ4i7rqXBFro8uGsBZw
Mv3W6bU/q2xOzP48xgv7qGkziMXZvqwPxf5wd9aXRf3DgqwXWe1e7sgqe95P
IeabzrLa9wY7stqfx9xZ7XutnVhl78ddl6iDYadY7e/zXFnLtV+nL97Kk9V9
9coSHk9vsNpf7+9hvdvMZ1dVR19W+/v1UNbleRzbOd73ZhUf02gbyapuFz92
IJrVVV0bv9eJteHwAbV9Xi1nnT9NdY7hvOJ5bBBrknfq33cXXu1oRzva0Y52
voej+b/m/3+B/4P3izGSXEZ8DN5P/R+8n/o/eD/1f/D+Qh3POWW+Yf5m/g/e
Twve38O99PpW/mZ8DN5P/R+8n/o/eD/1f/B+6v/g/dT/ZffJB++n/bv8H7yf
Fryf+j94P/V/2f3/Zfe3B++n/g/eT/0fvJ/6P3g/9X9wd+rw4P3U/8H7qf+D
91P/l90vV/b7gvdT/wfvp/4P3k/9H7yf+j94P/V/8H7q/+D91P/B+6n/g/dT
/wfvH1R3y33fUKvm/z+4/8u8V/N/zf//Cv8H76cF7987Tt3kY8bHsr0Vsj1K
v9f/wftpZft0wPtntMsx/31py7/e/8H7zYNMZ841NeFj8H7q/+D91P/B+6n/
g/dT/wfvp/4P3k/7vfk/eD+t7HOmsn0T4P3U/8H7aTX/1/xf83/taEc72tGO
dr7y0fz/h/T/AaHVc328HIwF/69SdfptBycDFvxfvJ0raMKC/zczflwYZTRi
E5v/B++nBe+nBe+nlc3/q/+aOfqbsOD/CW8WN5VfbsSC/1e65dc0z1gjFvx/
8oEkIcpAI/aPzv+D99OC99OC99OC99OC99PK7pMjm/8/vPnakXr1TVjw/8jX
qiSbsOD/s85n6vWsjREL3pLwpiTL8NFGLPi/S82NV2OaG7GJzf+D99OC99PK
7v8ju78NeD8teD8teD8teD8tuDsteD8teD8teD+t7PPyst8XvJ8WvJ8WvJ8W
vJ8WvJ8WvJ8WvJ8WvJ8WvJ9WNv8/sb56BwQLFvx/+dD5ltvRRiz4//R1AQnf
6tFYzf+/rf+LH1s7grDg/8NG35u0qq4JC/7vE5Lm2aAVJmxi8/9tPl1xLPbU
jAX/N2xbnvRBCjMW/P/Wrfejzu42Yf+o/xc0pq66aFoIFvzf/uc0YcH/Z4oL
cSYs+P+SdIGXVpuNWPD/FI/89w7aa8KC/8v2uUy763SibAYTFvz/uHq5s7IJ
C/6/On9c/QYBRix4uP0+WBHYr+3/Gb40KvJ4QTgW/D/UUX3mMGLB/2XPRy/i
Tt3tkMuEha+HCc07HkkxwogF/5f9eWf8ov4XTNhvNf9/6pB6438TFvz//dOr
45IlM2G/9vz/tmRv8rYtZMaC/8v2JQWOcmn7PJ0RC/6f1mHji3PLw7Hg/x9t
E9yahYVgwf/r7tsxZfT6UCz4/9Il5RNeKgZjwf8PNrlebNuwECz4/3FlTM+C
GQ3YxOb/wftpwftpwftpwftpwftpZfP/Kn577TBiwf9vvkt56VbnCOwf9X/7
fZ2CseD/68TAhRGb2Pw/eD+t7H5T4P20svn/HOJlnBkL/j9ueYadJxtGYsH/
s1zYN2PIlHAs+P/WPN1HTh8cjgX/3+NwI0+byxFYzf81/9f8Xzva0Y52tPOv
P5r//5D+D95/I3nHIfPmxbD5f+r/4P3U/xOb/6f9Wv4P3k8L3k/9H7yf+j94
P/V/8H7q/+D9AaqSzjKx+X/a783/wftP71RFwsLm/6n/g/dT/wdfod4C3k/9
H7yf+n9i8/+a/2v+/3/5f2Lz/9T/wfup/8v2iWj+/33M/1P/B++n/g++S70X
vJ/6P3g/9X/w/j/r/+D9szMXX5Cqfiyb/6f+D95P/R+8n/o/eD/1f9k+F/B+
6v/g/dT/wb+ph3+r+f+LWytdcj5oYPP/1P9lz0eyrwfwfur/sj8veD/1f/D+
zptUQDf91/P/dG+FbI8SeD/1f/B+6v/g/WJ9q5eRzf/TgvfTgvdT/5ftSwLv
p/7/tef/7fPzMWz+P5k6zlAhls3/U/8H76f9u/wfvD8yaahD70UWNv9P/R+8
P+vm9QsPZjD+ZfP/1P/B+6ucDnrqWcj0p+f/acH7Bxis1zZEW9n8P/V/8P7h
4gW1kc3/Oz+LMb/YZWDz/7OKX46as/n/Y+8uo+M6soUNm5mZmZnZKZntmJnZ
MTMzM2PMzCwzypYtWRazmgRuPG1mxq9P9ex9v7Xr1nWSySST5NSfd2nGK6JW
w3Oqa5u1/f+a/2v+ry1taUtb2vrnLpn/yzxf9rgm+/d8rtQwoZn46/g9QleX
fO16pRYu1Gei+swwQmgp7l4BQrOV8HwTeNZH6I5h1+6/q3RbaJZ6mZq8facX
2nfHJ1PPgk6hIxt5ee1Y6RAKc2VpZT/+fpYfXa/k1zPa++qY2gyHhbrnNR0Q
6nYsT6HV+OtCb6GXqw0MbjswUCjM6aW18usVYUJl+8rmX42o4kxnxzbhg06j
2Z0rp73ejHNgA3OUvmfv5npdtU494UfBTrpjuul6SsZuzT6+au8DBeuzp9Cc
es1N7EjykKL7ZyjYtacGHmcjjWxzsZFp789MwNZ8285r0KVo5n8w98DZeWKx
fOxepwj2rl7JNB5fYrFbMqS7fr1mpPT7qnxnc53gHrHYCD7fM4K1P5c7zVar
DQvz+AbxwVgOLOe3rAbWcou3rmyQgtVH/Zi5fVoTU7UgqLuChfm/rfggVwXr
erKabfg2A4u/bTs4ZIuCVV+V+x80smbW/rMuGBRsGJ9rZmJTu6sHFCnYyl06
uL5iI1v7eUvdyp0dWPftXC99v4D66ibHlDgs+EASdXxzq3is+3pZFPP9ofPG
qJR2bACffxrN5jybsrBgsB3L5l8ZWSu9jn1Mke9G+WYKtjr3SSMrukqFGSd2
iVeiIpNemFjpc8WuekxVsOvdA6CZdWrDb/HLFWxyfv3LyNakbGHzm+LE9jmr
niwTy6K7lHg1/ZyCvd8ux4/PYo3Sc/Ld+1OdWLdTxbIVtzamjQ9WsPw/l8HE
jOkWtXpxUMG+vB71OdbbyBrtUIVHwaqvstaGG9hCT3XHo4JtkUw/ul1NE/Nf
cyVrxxgFy/8cC5rYhZIPKqboqGCPv9zukzyvUToPomCzISk7bVCwcypvGb93
u5Htb6vegSjYxQ0Pve+wxMi69i1/seNRBfusf7HwPXeN7MIlFRyc2ONZmnk/
XmGSzh3YvTBbvp+aO7FzTqhfaCxbwgd4OrFt17ICxVa5/s4+TfZjVxWsbdul
51MfGNm1+GbLZjZRsBf7dJ/88puB8R97hSihsrmlpWa0nTY9WqzsnDQDHyR4
Wqj7/vusUPf1pWtC3XMyrwptzvcT+whNdfVlw4QQsYWe5It5ufacUNn19H7j
k1e+Mt9f6OJuKZrPDg4RKpvT7V23xMEmRUOEyhw4V/eqo3J+OSVUNhdYNv/U
7Rlx2JmBUfvfLo1kccEVOhb1tWE/8Pv1KMbfrpXVgoX52s/442e00PC8RXxK
lA0XeuhCyK4vB8SuLX0jur8uUOigpN5HU1QJFXrS/QcuVHb+xv4eBcbfPh4u
tEd4vSpXnZFC+ZfVLkqoffS79kX6RggdfKVA0lnFQoWqV8kLPgkWqqrXxpoh
QmVzkGW3w5V8Xq5Y9xxsP6HmSVkztTsUJlR2Hkgny/6d+3uIlfneWl/1gk+I
0Ezr/VY9KxAmFOYn08r+vUfq0rUC14YKjbOu3tcmdbjQTE9UYAwT2o1vVAgV
Onff4acpTSFCP+4tbK9RJEJo9hTJP9gaRAqVnbsVzOfbBwo9kepzlsr9QoSq
pxWebhgk9Lz6NKmll9CZfJ/RNaHeba9/uz79ktB2g+bMCUniI7Re5c5PLjOx
C67VKH/L9TwC2jxPzRszZrpuFxkCakTH2rD8WJ9y0ezIx3wz03e3Y9duSdor
W8mYf72fx451X9eLYT+nP3zL6uHAwpzfEx7qAY0O7Bb+/FTH0r5W3wniwHZd
oZ40pGd9+POve1i+C6R7DFt67sLEK3dChJoqfKy/Mlmg0EKz9a09PAKEwpxk
2kqOhjXPBcVhwy+qTySimGX+qhNbL9qwSY7ar5ezRrHNs9o3GrPUjh29a+RD
/aIYliX5nq+pWzqwg0+m7p8+rZ71965z69gIM3ZgB/6GWen8ZZjfS5uNv44M
ECr7e08TN6TatHJhQksV2tOKxYYKtVb3yjHfN1horrgMbRsc9BHqnrt7VGil
yuoFk1NC+/Hrcp5CXx+pv2/QsJtCzfZum5O8uyJUNi/4Ovd7L6H1fm579/Qg
T6Fz+fvl1gt9z+8nzgh1Py8OEOqbPK/rEf2u0C3JbmVInO6g0CN8n8hVoeru
iDxjon5xl43btLjm23ChmfXZR3yLNAl1Xze+J7SQ69VGhiI7hMpev3vnPnPu
mO84RuvelzdWrLa0pS1taUtb/w1L83/N//8N/5ftKwPvp/4P3k/9H7yf+j94
P/V/8H7q/+D9M4/6nKhe2I4fg/eraJ5orBU/Bu+nlX1f4P3+01RAt+LH4P3U
/8H7qf+D91P/B++n/g/eT/0fvJ/6P3g/9X/wfur/4P3U/2XvF5DtDwTvr1y6
fJ4HS234MXg/9X/wfur/4P3U/8H7qf+D91P/B++n/g/eT/0fvJ/6v+ycfPB+
6v/g/dT/wfup/4P3U/8H76f+D95P/R+8n/q/bB4EeD/1f/B+6v/g/dT/wfup
/8vmDoD3U/8H76f+D95P/R+8X/P/f5b/g/fTgvfTgvfTav6v+b/m//8c/wfv
f8Fh1YIfg/dT/wfvp/4P3k/9H7yf+j94P/V/8H7q/+D9tP9p/wfvV39L25vb
8GPwfur/4P3U/8H7qf+D99Nq/q/5v+b/2tKWtrSlLW39QUvz/7+1/7vfHx6J
Bf+/7t+qWtl3Oiz4/w+OB+1nNLZgwf+3WFvmH3zSgv3e/n/wflrwflrwflrw
flrwfto/a/8/eD8teD8teD8teD8teD8teD8teD8teD8teD/t77X/H7yfFryf
FryfFryfFryfFryfFryfFryfVnZODng/LXg/LXg/LXg/LXg/LXg/LXg/rew8
KPB+WvB+WvB+WvB+Wtm5Q+D9tOD9tOD9tOD9tN7v91x/0MuGBf9/sPTR8gtz
LFjw/9ePbi/3rmjE/lP93+3KBiz4f8dipRd/K2TA/t7+f7BYVtcjdCQW/D/J
LPXkJhv2e/v/Zf4v2/+vzxH+4USEDQv+35wfWGHBgv+nsN9/PHe4CQv+X6rR
9FrnK+mx4P+1Kq54n6yDBQv+fzHzMrMpvRUL/i87f/sMH3xtxYL/r/q59pB+
tW1Y8P866nFYo2xY8H/13jrbJCsW/P8KB2cLFvy/8wSfTEGJLFjwf69Gh3u3
7m/A/t7+PzLnlwJNk8Rgwf/bPSjW5fgWIxb8H84BoeeBnC+xsHq5XhYseOD+
G+fa3zOaseD/Cwqqom3Bgv/bI1dWZqssWPD8FJdLtSljtmDB/2X/nh9bNMyC
Bf9XT28qE2jBgv8fOHr586oVFiz4/6QvpxPN6GHBgv8nynmnRfJ6Fiz4Pz9m
pYsVC/4//MzOHycpViz4v2zuxoYz6oGZZiz4Pz8uM78FC/7PtW2wHvtb/X8X
v04chgX/X+r663nYNAoL/t9LPcatTDz2e/v/wftpwftpwftpwftpwftpwftp
Zfv/G25vfvxFDQsW/D+EP8HWYcH/neqfX3YzFvx/ZoYbi8s1tWC/t/8fvJ8W
vJ8WvJ9Wtv//1cPea5Vadiz4f8aYlpNbOgxY8P8Hy9otWjNZhwX/T11QfeAz
YOHvfXC+tq5fqREL/j+Bnw9qxIL/tw9QN/gYsJr/a/7/vy3N/7WlLW1pS1t/
yaX5/9/a/7+3/1+dOta1j1nY/0/9/7fu//+j/R+8n/Z7+/+PVy98or/FKuz/
51wUYhX2/9P+Xf0fvJ/2e/v/aTX/1/z/j/R/8H7q/+D91P/B+8ukH/N473TL
P9b/wfvn+eYz76tl+cP3/yfrqJ5IHyfs/6f+D96/K6u6wdQm+D89/we8P2fL
TrpXbxzC/n/q/+D91P/B+6umnp8/SS6rsP/f9/KPPnlnmIX9/9T/wfup/8vO
3wbvp/4P3k/9H7yf+j94P/V/8H7q/+D91P//7P3/hrSFOuQ8bRH2/1P/B/+j
/g/eT/0fvJ/6P/g99Xzwfur/sn8P3k/9H7yf+j94P/V/8H7q/+D91P/B+6n/
g/dT/5fN3QDvp/4P3k/9/4/a/+/M8LbnqHTxwv5/6v/g/bT/bf4P3t/3pxUb
x4y3C/v/qf+D9+e8urX3oaZmYf8/9X/wfur/v3X/v8z/Zfv/13VtPnRkG4ew
/5/6P3j/5XlVBwzpbBH2/xdTj5EvYBb2/9O/d/B+Pv5jrUXY/z+8RqPCHWda
tP3/mv9r/q8tbWlLW9r6+y+Z/0vmzLrbT6zkv9OO+/cmocHm/Bsi990SCvNU
aWHOFe0edcxtvttC09VUJzjeFOp2mjChu0+P8bbEWoUGv51l/eJ0CA1Mk63+
JBYuVPZj7sdfBy9itGZ+neSAULfnXRXasOHACcPL+gj1VPm7u5dQ14vaHZ28
fYS+Pru0baFNwULVqyFZhoYL3aSO4TsSi4W5hGmn1Wxb440N28U9OJDd39XS
ZPZ1YDNZ+uW69lXPavRQdsxz2LEnu/688zPTscPLx3+cm9mBXX35VLdPm3Us
07HnEaHtHdj+746l3JxLLz0PPHfhPuXad3diJzgWXd9eMpadcD0bzz1awW7N
o/4DIys7e/bQVFccWPccZz0bnSRJ4OtzDmy+IyHvrHF6Ftwj6+08ORSsvttz
Z4W9BqbeSte9dGDHbixcP18PAyvpXzDjej8Hdg2HI4P0nPPpjQMif/isYKuV
65V6yigTy7LpzcxZSRXsoJDzvV/PMLC2CRNPZZ/sxN7re867WP9YFjD9xo3E
S5zYqC1NLZ/nx0p/Po8mdq70QyknNseqib6T7pik5897u569Z9/nxN7yDlJH
q0nPk6/xk3oAkhN7ctTbxyUXmVgOdUxprvvYUW0j+6Y7FCf9+vv19HCea+rE
Ju7xY5X+SWKZJdWWWe0bObFJ3YN7WfkPhnVlijqx2zbNWNLmmolxhV7vxOL8
X8k59vUnHwj0f6Vgr67J8mF5LxOrfLrmoz3ZnViY/5tOZeQABdttHocY6fwC
2bwGPiY2jxNb6EPlKQOOmVgFe3w9Y7QTu3PEovjjBeKk/x0fY4+rcVYF69dl
juFsHRPjd7vrFGyie89SsS1GVqDXgF4HLQ7szJ6r8zWuZWBJlkbfGTHdgeVT
oofp2aj16gt6BQvz17baPHN6HFCwrjurDdO8jOwYB0AFu3HQ7WQX+xhZjtij
nYacUrDq9Eb/CKP06/eq9c71q1Kw17JdDhv60sCOfVbG3mqagP0xNKjID/Oi
2Z5tE0esXRUl9PFHdeJjpNA67/OczXUwVOjHKnG9Fkb4CX1cb+6zKQtvCk1W
qdPSGz9dF+p20DtC3e4VJFR2vVs2F/gAvz0GCn2YJ+3XuOLRQoe+7PZD/puR
Qt8Ozn/eulUszMulbaxuC28XLvTzqhXLbgb6Ca3D5+z5C1Wngv6cOFJoruuq
HJmwV1Y1d90zhbPsnXcvOF3Yhh3RWj0wLZJVmNu89/VD97Ch7ctnrG2JYXP2
xH/o+DhKaJnaKthHCuVj13uEC+13JNOsoFqhQnM1UIE3XCjMn6e1r1V3EgQL
LckH0cZiYR7x3Tu+fX9aES3UvR8hRqhsfnHcnD5eaSODhcrOdWk1SXl4cVKo
0GT8+mqA0NeL/T0D0pwX6p5HvV9opU/7FidkuiI0UeOH1upefkINAerE0GCh
s5upF85ChOYaODtPVKlgobK/O7efhQhNFtT91F2PMKGy6yPqo8Hoo8Fi+f1E
mNByuq8HL4SECm3OH1iDhG6pNM/1lCpE6Hn9A9ddbbhQ2blP5XIvXJ15Y7hQ
mMNMK5uT7r6+HSA0+kVZ13/xjNDn3DtPC5XNHz//pMXHFbd8hSZ6UOfiRx8/
ob6dLti+tjJg+dtfM4SwSlfmb+nVwI7dmz1s49l30czDTz0Bz471rpg5qS61
jrnH3NqxdfgTQh0LLT5qrLWLAxv/dH/jG0X0LKTO0DtVD9qxplx8kjM7O1iV
ejt2/9jZt548j5bOEbjJP38CFuYUB/L582FCZe9XCk9+e8Inhw1rOdW65XOP
6H/NV3ZgYU6x7Dz/3otqrOtic2A/nqyx+FBdA1Ovqh15ZsammLT/p9DcBum8
6X07fujXeEaI0PCSNV3PGO8KrXdZvdIaJFSd2r0sSbhQ2flsssepntVrpjuT
TuxQ9fjH0f5C3c/HLwttmiS96xWyt9CpY4pNubbmttBUz7+sfr4gQKjseYLs
upg/nyd/RuiRk62UN4O9hMquU0jZoOn4S59K3WK0E/nriSChsnm7nnF1J5pi
Dggdm3SIb+ix20JdD976hmsNQn0rx75b9i5MqLGIY3u+R5FC3Y/zNqEr+PXn
GKGyn8Nc/vgwgtEmyv6pU/s2c8Ty/7+nWG1pS1va0pa2/sil+b/m/7/A/8H7
acH7qf+D91P/B++n/g/eT/0fvJ/6v+w8cPBs6tvg/dT/wfup/4P3U/8H76f+
D95P/R+8n/q/7Jxz8H7q/+D91P/B+6n/g5dTP5f9fMD7qf/Lzp8H76f+LztP
Hryf+j94P/V/2dcP3k/9H7yf+j94P/V/8H7q/7Jz7MH7qf+D91P/B++n/i+b
XyCb1wDeT/0fvJ/6v+y/A15O/Ry8n/o/eD/1f/B+6v/g/dT/wfup/4P3U/8H
76f+L/v6wfup/4P3L8o+r2+RFHbN//9m/g/eTwveT/0fvJ/2r+L/4P20mv9r
/q/5/y/3f/D+9Q3uu/4ULfgxeD/1f/B+6v/g/dT/wfup/4P3U/8H76f+L5sj
AN5PK/N/2fuVwPup/4P3U/+X7ecH76f+D95Pq/m/5v+a/2v+ry1taUtb2vqT
l+b/f2v/H6KoE0WjsOD/+Xt+6R/00IwF//cqsnnwyg8W7Pf2/4P304L304L3
04L304L308rOAwHPpgXvpwXvpwXvpwXvpwXvpwXvp5WdcwLeTwveTwveTwte
Tiv7+YD308rOnwHvp5WdJwPeTwveTyv7+sH7acH7acH7acH7aWXn2ID304L3
04L308rOL5Kd1wTeTwveTyv774CX04L304L304L304L304L304L304L308q+
fvB+Wtn+f88ZMQtarrRhwf91ZYPafC1ow4L/zzpW6nDGXEbsH+X/O0v/9Kx0
Wz32t/q/+mi4fpQZC/4fc61QyDiDDQv+v/FwsyeZi9uw4P+xltJHJmaxYcH/
zZuXJn6UzIYF/z8QM3W7PbsJ+z3/r9h8Qr63ScxY8P+LexP6tPGzYr+3/x+8
n1a2/3/319QtT16zYcH/Xwee3fDtrhWL/j+r6Ya7Ly3/03/5/5Ru6kBsCxb8
/zE/0MWKBf8v0VV9ImTBgv9v7fB218vXZuz39v83XvflS/W0diz4Pz/OaIUd
C/5/if/ArVjw/66h4+un+GjGgv/LznVPPmy1T59ERuyf7f+t+Lk7Biz4f8EO
OU8/uGDAgv8/7tsj9rFRjwX/l/3dhWVMX/hSZgsW/L/w3jO1L2yyYMH/M9S2
dB6a1YIF/4/VTXPdxZqx4P+6VrFNbi4xYsH/J/EnKkYs+H+yp1W31ftZjwX/
Xzx9Ru3cZS1Y8P86edbuP5fUigX/l8194NsSMlqx4P8Xf1afAJqx4P9Vy6zP
5jPHgP29/d+QblGrF677XSj4f+3iHi1blIjGgv8zdczukwTs9/b/g/fTgvfT
gvfTgvfTgvfTgvfTys4Rku3/zzJnU/kONyzY7+3/B++nBe+nlZ3nD95PK9v/
P61NtrkfS9qx4P9nZtaZXXyBAQv+3/z2xbmhQ2Kw4P+zl6uPyHos+H/b1ler
+/tZsOD/cC4bPZ+Nb+95YsHC4xR/WIk0YsH/sz1XT+KKwWr+r/m/5v/a0pa2
tKWtv9zS/P9v7f/f2/9P/R+8n/o/eP/0CsNcz3itmv9r/q/5v+b//7X+/739
/9T/wfup//9d9v9T/wfvp/4P3k/9H7yf+j94P/V/cBTqKuD9N4p+7jf4eYKw
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
+zMvRptgaPRmfXyk0Pf86b6fUHPvB0FjJ+wV2pzf35wS+mjTTyW/rYkRWmio
+sw8Wqj7upyfUNm+o7TbmjV918sqNAV/n9stoe1cr/K2zdku1GN00Sy3LoiV
Ocl/Bne0pS1taUtb2pIszf81//8F/g/eT/t7+z8/djTEih+D949acnhPZAs7
fgzeT/0fvJ/6P3g/9X/Z+e3g/dT/wfup/4P3U/+XnU8O3k/9H7yf+j94P/V/
8H7q/+D91P/B+6n/y+YjwOtL+noTvJ/6P3g/9X/wfur/4P3U/8H7qf+D91P/
B++n/i+bawDeT/0fvJ/6P3g/9X/wfur/4P3U/2Xn7YP3U/8H76f+D95P/R+8
n/o/eD/1f/B+6v/g/dT/Zef8g/dT/5fNrQDvp/4P3k/9H7yf+j94P/V/8H7q
/+D9tJr//3f6P3g/LXg/9X/wfur/4P0f8ubMOmeT40/3f/B+WvD+ROsLTih5
yIofg/e3+nLVs8hzm+D/E06q72ixaf6v+b/m//+H/4P3U/8H76f+D95P/R+8
n/o/eD/1f/B+6v/g/dT/wfup/8uej4H3U/8H76f+D95P/R+8n/o/ej/xf/B+
Ws3/Nf/X/F/zf21pS1va0tZ/6dL8/2/t/22jfFPM7RiDRf+XnGPcvtZN8+Sp
Vuz39v9PGZgxpuVkGxb8/xWHVSsWHCmYHxhiwYL/g/tT/5ft/wfvpwXvpwXv
p5Wd3wLeTwveTwveTys7nwS8nxa8nxa8nxa8nxa8nxa8n1Z2PhK8vqQF76cF
76cF76cF76cF76cF76cF76eVnWsE3k8L3k8L3k8L3k8L3k8rO28HvJ8WvJ8W
vJ8WvJ8WvJ8WvJ8WvJ9Wds4PeD+t7Nwq8H5a8H5a8H5a8H5a8H5a2f7/kTv2
vSm6xYYF/3fd2DcvTWzDgv+vmb8/3QOLAfs9/+fH62SLwoL/f9hb2F6jiBEL
/u9+n7oJC/7P2XdjLBb8X3bu97W7ztrtE1mx4P/7AwZ+mPjZigX/l91vxwVX
6FjU14YF/29w7dVhw2ErFvyfH3cTaMGC/werv/5cFiz4f6B6bEpBC/Z7+//B
+2nB+2ll+/8b8oN3rFjwf3PKqgumtLJiwf8HbrqXr4LBjAX/33vPp/meBvew
4P/q1dQKt83Y33v/P7g/9f8C7c+ez3jThgX/v7TSlvrLFBsW/H9dRP3N529Z
sOD/5+rOWT7rmBkL/p+wN+rUoUpm7N/d/93eGoMF/3dfX9djwf/z7rjceYKP
AQv+v8AjLunurXos+H+mC3umDZqox/5W/+8ybKrrmVgUFvxfdn/17GrqVKWi
9Fjwf9l8hzTcw0zYP8r/3U8LorHg/8f4CXFmLPh/papT7x44b8ZS/6cF76cF
76cF76cF76cF76cF76cF76eVPR8D76cF76cF76cF76cF76eV7f9vWLjjzKM+
diz4v/ucNgMW/L+eeuzVshgs+H/+d0Pmn7puwIL/97k31+eSw4wF/1+ZVz3x
x4IF/x9eo5HrK7Fgwf8vZl5mNqW3YsH/q/MDyqxY8P+ySwOy+9qtWPB/f/4E
0oIF/381qOPNCifMWPD/wvwTGbDg/+ppfGkLmbDwuuz1o9vLvSsasZr/a/6v
LW1pS1va0tZvXpr//639H7z/dGJzp6S574n7/4n/g/dT/wfvT+ljeHMziV3Y
/0/9H9yIOhJ4P/X/7+3/p9X8X/N/zf81//+1/g/er97qe9yxC/v/qf+D91P/
l533/r39/9P4zTtO2P9ffqj6jVqE/f87SiV607abVdj//7XG2KaPT1iF/f/U
/8H7qf+D91P/l91vg/dT/wfvp/4P3k/9H7yf+j94P/V/8P6x+kPFpxay/uL9
/7Tf2/9P/R+8n/o/eD/1f/B+6v/g/dT/cb//9ubHX9Sw/Mf2/1P/B++n/g/e
T/0fvJ/6P3i/zP/pHIG/uv//Xfb/0/sr8P7DE7Mc7xxsFvb/0/kO/637/6n/
g/dr/v+f9X/w/orG8psanXUI+/+p/4P3p0uoXLp8Houw/38Hn7t9T9j/f2N9
g/u5GliE/f/U/8H7qf+D91P/B++n/g/eT/3/t+7/p/6P+/2fPM/WqY5F3P9P
Xpdp+/81/9eWtrSlLW1pS7pkni9b/+ec3/+lksevQkuLfPo0YrHQ+wGHZvfu
dktoFf78Ikqo7P3mS9d5LCgw5LZQT/+DuQfOviq0Y+Po+cq6CKHu1502oTf5
6yq7UPecOl+hsh+ne37vRkY7lz+/OynU7bXXhc7lc+q8hDbemWXPwWLnhIbr
Ih05ppwXKpsbJTtHQnbuQdqC6gvzcKE7fYdnr1omUmiPl2eKdm4aKnTqwYo+
IU38hcpeP75KO1o9+Udorq7qBrd47OVSbcqYW0Sxx5m82xX+mICF+U1+B84P
PVBUwYY8rlK94XWD9Jz5ThujUq4c6sSqz0ozN41la1K2sPlNcWL7nFVPtIll
O/nrFid2Br8OFctOr6seNTnCieXjhXPGsRvn2t8zHnFir6cZVcT12oP5GNWT
ZBQszDmNUmaMezrCiVXG3mqqaxXLnoQl6z2tsBPrulGpR+lIz0VXpz0P9VCw
7jmbBja1u2/JtT8q2MpdOpzLncbITCqTdXViXU/mO9QuFsuuddt3dtdpJ/Zi
Jz4pjY15ok56U7AFZ+tbe3gY2YNl7Ratmaxgs/L7DSNrfvvi3NAhDmwEn++m
Z7kPJU1a8ZkDq06Z7drRwApXGXk2SRMndn7Kff5fv5rYRHW8XDcFW5rPRTWy
Pa9v7HyxRsHO49BjZHxc6XEFO/p8cO2kQUY21zSzYugsB7ZhN5/bm8bKzwGe
tXvqt2lvFGxt61XXTUg+jyDGL3xiyk8O7MNK6oRSg/TrGX73y9Y9ZZ3YbPyO
0iSdmzDj/IROQY0UbI10Z9Kt/WyQzk2o2eRRs0qbHVjP8uqFDT1bH7lv3erL
CnZQ84xLcijyn5tvi+T1hpVRsP7q2LwAg/T3LptrcLdgxvV+q5zYUKtzyeK1
sew4H5jpxP7cY0rXj1XiGGeXzk7sZH7dM1Z6jvHaz1vqVu7swPbd8cnUs6Ce
3ZrwyZH2rh2r7rLLnFTH1o9Of3bc8gQszCt8xefrRggNPGzrWiVViNCHx+9M
LhMTIDRzUKKANVeihPq6N+QKlfnDOz5/L0Koe26tCQtz6tWpndvt8dgn3Amj
WbZJP879eb0dO1QdH70thoUWHzXW2sWBhbmWJV+rFwoSsDB/tsbbdl6DLsVh
9Xerj7G8iGSbN5xZvy0kXFIDdmxguWUVMoWyKyNrpc+R0op1X68Px7nFdH5x
syEpO20Y7cDybZQd9GykypTtzFjXD3+r67bEQnpOvf46XZRQJ3+eEiG0xmH1
CkqQ0IXqONj8/kIbF7k8ecFVI9ZfvQzzMIzl8mzj+TCPDeuebxjJfEKPZWnm
bcfe9Si4bMmbGGbjB27ZscnnPM2yvEkMW5Ju+wmPiFhsyQQO7sx1o69Q+ZRY
2XzD7fbsWfJsjxKqKmuOzmFC3dcbA4TKzjWKPqVe0Q8TWsim3uP7CZW5t53v
ywgQ6p4PLLYXnw/pLzR6ZWW2apivUI/56i3totDrAzv0qBZ5Rqin69bazv+8
UNnz3l58jqi3UNn8bvf1MS+hvco+7vPGfFao7OuUzSf9YWWyPK9r+QhN1EZ9
4i2WP71b7yvU7eg3hJ7g8zzPCz1SIj7PIJtY2fz0cD7HPlDotk0zlrS5Jlbd
jdLSYcD2ad2/3VoWitfV6PU11w8vi62MA+ueS65jT3w7XbB9tWPzlp8Q6j1e
x8aMP9Fy3ic7tgB/vaNj4/gdiB1b9Id5ncb30Unfp1Ojh7JjnsOOdb+/Vse2
8XnGDuxE9e64lYElsy14eWiCA9tiWETzZr30zN5tc5J3uR3YVJ3fD3Ue0bEy
RcPqhtx0YDc+GBK74bVeOp9oZrECuq4rHNhaj5NnOrrC9e/Vy6ibzNg7/QIX
jR6sZ+my7xuT+26U0BQrkl740CdY6B4+V9lX6IkpDbbZPO8Kld3/DM0WWvFy
/lChlVb2/lbWW6zs9WbWEp5vAs+KlZ3/E/HzzMfNN0UI3ZIh3fXrNSOFXuig
vvCMELog1lL6yMRIoRWfrbKPfhch9EiHnVeujgoRutP1qjyTd7jQHXxgu5fQ
RN3m1j+Z7YxQ+6ATBwZXPS/Ug78+WCq0n+XHyyOizgo9zP+Oo4WqV9O6ZvIR
6n9t2tmjfS+J5fOK9wpN53l4U5F9fkL5mPncMULHFo+7MCx1qFDZv/czqa/8
bULDL6oHakYJzcSfOJ0W2py/Lt8v1OPnIyecj2YI/Y9YkLa0pS1taeufszT/
1/z/H+D/4P204BmHdqs7Ouz4MXg/9X/ZOfPg/dT/wfup/4P3U/8H76f+D95P
/R+8n/o/eD/1f/B+6v+yc9HB+6n/g/dT/wfvp/4P3k/9H7yf+j+4L3Vg8H7q
/+D91P/B+6n/g/dT/wfvp/4Pbk0dG7yf+r/sHGDwfur/snkE4P3U/2VfD3g/
9X/Z3ATwfur/srkJ4P3U/8H7qf/Lvk7wfur/st+7bK4BeD/1f/B+6v/g/dT/
ZecYg/dT/wfvpwXvp/2r+D94Py14v/ucEBt+DN5P/R+8n/o/eH/jdV++VE9r
x4/B+2ll/g/eTwveT/0fvJ/6P3g/9X/wfvXdMN2rOv4w/wfvpwXvp/4P3k/9
H7yf+j94/4T8PV136VbB/7vyA6Rsmv9r/v+P8n/wflrZ+2vA+6n/g/dT/wfv
p/4P3k/9X/Y+HfB+6v/g/dT/wfup/4P3U/8H76f+L5tPBN5P/R+8n1bzf83/
Nf/X/F9b2tKWtrT1Jy/N/zX///+6dmQjL68d0Vjwfzg/gp4jITv32OG1Lu7J
D1Ys+P9XPgA2Fgv+v4pvCDVgwf/z8v9gDBb8P6Vv/edbPxiw4P+uF6+Z9dlt
2N+6/x+8n1Z2zgx4Py14Py14Py14Py14Py14Py14Py14P63sXBTwflrwflrw
flrwflrwflpwX1rwflrwflrwflrwflrwflpwa1rwflrZOQDg/bSy84jA+2ll
Xw94P63s3CTwflrZuUng/bTg/bSyrxO8n1b2e5edawTeTwveTwveTys7xwC8
n1bm/7L9/8a3xb7c6WfFgv93yJXNvialBQv+rypOSB0zFvz//obtVVrus2HB
/xseUm9hNiz4v+z84dj20aUT97Bif+v+f/B+WvB+2l+7/59vvy9nxX5v/z94
Py14Py14P61s/3/TXl1PfGlpw4L/d9yg/sKtWPD/8gb/bcOumbHg/+7z3O9h
v7f/H7yfFryfFryfVrb/H9yf+j9cF6fXx0+qHLPBhgX/V0858t9mwYK/6dbe
KfWmsRkL/g/nGdFzjQK53xixv9X/Iz5N9mNXdVjw//fHR6572VqH1fz/r+n/
2+urB8BHYMH/Oy298VO+tmYs+L9f1o/Pukw0Y7+3/x+8nxa8nxa8nxa8nxa8
nxa8nxa8nxa8nxa8nxa8nxa8n1Z2PiF4P61s/7/C/4ENC/5ve6WeXKfHgv9X
ujJ/S68G0djv+X/vtOpJSUYs3P/MUMcrt7Jgwf9HuP76V0+yYMH/P2QaMuLB
eBsWXm8Oa/DK//4uGxb8X3b+v/80dYOMFQv+f7x64RP9LVYs+P+1rvUv+162
YsH/C+dLN1D/zYoF/39ffIB3nVtWLPj/Wf2DY/1mGrCa/2v+ry1taUtb2tIW
Ls3/Nf//Ffv/qf/Lzj0G76f+D97vPv7d+ov3/0+vGDrrycl7wv7/qtPK7V7d
1yLs/6f+D95/vWHDgROG24T9/7Sa/2v+r/m/5v+/1v/B+6e1yTb3Y0m7sP+f
+j94P/V/8H7q/+D91P/B+6n/g/dT/wfvp/4P3n+n6sHH9R2WX7z//5f6P3g/
7e+9///f9X/wflrwfur/4P3U/8H7qf+D91P/B+/vcGTYgKTelt/d/8H7ab93
/g/1f/B+6v/gbdT/wfup/8vmGoD3Zzc17rHqkuU/tv+/7BMf11+KWfP/v6j/
f2//P/V/8H7q/9/b/6/5/6/z/+/t/6f+/3vv/6f3P+D91P/B+6n/w+tL6v/g
/dT/Zef/g/dT/wfvp/4P3k/9H7yf+j94P/V/8P7UC+Z/flHIovm/5v/a0pa2
tKUtbf3Pkrm9bH1QfXoQo53L5xMOEOr+740VumfYtfvvKs0Xuku5lyJ0aYjQ
AuNvHw8vESl0dWgG10uBQKGt+D7FO0Jlr5vmZlYfiA1CX6+b2q1veUUof5m/
XCf01/74C915XjCZdTWjfT++SpcO544KdT9fPie0En9ecFxo9FT1lflVoUv5
QQJiZ/Zcna9xrctCN/In1IFCs6njfjOHCX36ufTbo/uChSYae2zeymZhYhs/
tFb38hNar3LnJ5fZObE/t717epC30G71OgYmdAwV+oIPDosUysc7lhf7/tK8
qgOGxGO3LBvsSNgbxU54qAeQOLBbio1Me3+mjsUOqTat3G4F+5b/vowsS6Z2
h3aPcmJ/8hnmWatdLLtw6YdT09I6scezNPN+vMLEXE/Wh8W9V7Aw1/VAnQmT
Yus4scv478vE2iZMPJV9shN7r+8572L95XMH+Kff7sT6uWGLGdWxZ5nuY/n4
6E1xTH22nKOaE+v++zKxS1mems4nc2JP8etoJqZif7sxTixnoY6xzKvWO9e3
qmBhrvHeQcMKztY7sAv4QFWDdI6AJ59L7cTuPbQsfaLDJtbm1ZikQ3wVLMy3
rZv3zc5VHxXsJT6g1yT9enplX5kxcLuC/cDnVBrZu7q3Mw5O4cRWyNtmwZ15
Jjb1gXrikBNbefKX04lmmJjuTEzBiycULD/eKNTIBpZQxUHBpnz+ZfXzBUb2
Wj1GIL0TW0o9FmqNiX1MoU4iV7DVz6jfuJE5ol6Uzb1QwaZpefJa2VlG1rBc
0mJMUbC+n8KOT2lgYusHvM+YZJwTO3Do1QVfusQyZ4W93TrNUrAZEqv3KEbW
9F2vyBQlFWzwugWpUvoY2Mmyuq8HLziwME+w6Cp1gJ4Tu8QrUZFJL0zSeQRn
+EBeBbt/cUKm3DWMzH/NlawdYxRs+O16K3YXNLFXb9LXmtlTwRZfo37nRnZZ
3RbYSsF6HvmYb2Z6+dwB69SG3+KXK9jk/IWckeVs2Un36o0DC/OIZb/HN+o2
9U4Kll9+LGBk/czqFU8H9pt78Csbxn/gCdg01VuPTFQrhnnm9DhQoU+UUNk5
AENHnRvCSsdhU7Mtua8PjGT8YeliLLbyj/wKLXvFrz/HYTd2OzmgaZPIfzlK
HNbDqU5Sj2J+W5PdypDYjg3l14WjWb5xvc+8rejATlu00E+J1rE7V057vRnn
wAbmKH3P3k3PFh7UxW+6Ycc2fzq5YPGXMezhB/WW7MBm33xzXOUXeunvN8UP
VQtaRzqwbQpW2ufVRs+C7l3e8v64HasbUHfTw+AY9q1c8a2V5jmwMHcyy6Y3
M2clVbAwV5ofp/bMjj3UdKl6E2DFXma/Um2gHaui+oC6MWzilgslFlY3Y5cl
affN9T2yFHzAbjz28PH5LxpMi2KT+PMgE9Y9HzacffFTL3zYsHX541oUO7V9
7twqX+zYnabAQX3G6Jj62Tc9tGPLuO4civ6oY65f3sbDzRzYoamurGqeTM+u
e+1YuSnajr1SIOmsYgV0LGNF9YmBDds38dvzrpsWK1PRHl/PGIfll5WyRrEr
zvU1ao2zYc/xC6tRbHvfsXXrJY/Hwtfv3j8dLhTmcNLebxq0o6pnsFD/VtXK
vssQIrRaq5Qp+iQECX3ev1j4nrsBQmHeMi3MraWVnUek6mDpsWFCa407riwu
7Cf0vO1rq/BNl4S653yeFDr0fvp1/TdcEDqWX8e+LLTaogYNvk71Ftqj/7tj
KTf7C3XPmQ8Qmurqy4YJIT5CZa4el6TO7urTbwmVzfcstn9GhWELzgmVzfN1
z3G9JPTA2Nm3njw/L9T9fNBHqPpomaFIsNDorHvTFHwiNv/gk6n7p7dhp40p
NuXamkhWZsM0r+4pHdhNAdcTTizQSecQtajSP0nP03asehrk6agY1nNbZeVw
ZQf2HZ9nqmOeixeVtZxyYPd4Rl+9FqlnP6V4tmVjDgc2LXdLHSt0SR0868DC
6xTXi6SdnYsr2FYsdteBmwY2dfTNmZYtDmzFuc17Xz+kl861yaRu62nvwPKb
Ty699OuUzS9YoTL6rgRsOX6/Es021UoyuG90uNBku7dmHHfRT+gg/bc0nofv
CJX9HvN1rzoq55dQoanmXU75Q9UwoYOSeh9NUSVU6EWfju0eFEvAdnF/oeyo
+vSiuxn7wq/Asc2PdSydOn57ewLWfd0qmqXmv7cE7DG+oSSaeak3x3xmLFwn
Gr1r5EP9ohiheWremDFzV5RQ9/v0IoW6XjzlmO8bLHR+vyWJFqeJEKprFdvk
5pJbQoulmpyq3xFPodX489ArQhMdtV8vZ10g1Mw//0qh7tedgUKrllmfzWdO
uNBqvN5Cx/LH131Cl5ZrerRkw4NC3fc3EUJl17kS3XuWim0JEOp+HIsXqu62
SDPAKlT2eFGL32/tF+rBv7+5Qn/1vk1taUtb2tKWtv7/pfm/5v+a/wsF7y+n
Pi3/2YYfg/dT/wfvp/4P3k/9H7yf+j94P/V/8H7q/+D91P9lcwfA+6n/g/dT
/wfvp/4P3k/9H7yf+j/4OvV28H7q/7I5AuD91P/B+6n/g/dT/5d9PeD91P/B
+6n/g/dT/wcnpm4M3k/9H7yf+j94P/V/8H7q/+D91P/B+6n/g/dT/wfvp/4P
3k/9H7yf+r9sHgF4P/V/8H7q/+DB1IfB+6n/y+YOgPdT/wfvp/4v+z2C91P/
B++n/g/eT/tr/R+8nxa8f1rUlS4GLyt+DN5/zDRuTon7VvwYvF/9LW3rY8OP
wfup/4P3U/8H76f+D95P/R+8n/q/7PcL3k/9H7yf+j94P/V/8H7q/+D91P/B
+6n/g/cfUN+GlsuBH4P304L3P5ygCoMVPwYvp/4P3k/9H7yf+j94P/V/8H7q
/+D91P/B+++c+pa9X1sbfgzeT/0fvl5azf81//8r+j94P/V/8H7q/7I5ROD9
1P/B+6n/g6NTVwfvp/4Pr0uo/4P3U/8H76f+L5trA95P/V/2dcrevwDeT/tX
8X/w/rTTarat8caGH4P3G9apExIc+DF4/8V8tZeOrWTHj8H7q6nvZqtqx49l
cyI0/9f8X/N/bWlLW9rS1n98af6v+f8v8P8yu9RBtXos+P+wyJMNarQxYsH/
+cubHAbsH+X/K4Ibnxv/zIAF/zcsVk88sWHB/59cOZC+TZwV+739/+D9tOD9
tOD9tOD9tOD9tOD9tOD9tLJzh8D7acH7acH7acH7acH7acHXacH7aWXnCIH3
04L304L308q+HvB+WvB+WvB+WnBiWvB+WvB+WvB+WvB+WvB+WvB+WvB+WvB+
WvB+WvB+Wtl5ROD9tOD9tODBtOD9tLJzh8D7acH7aWW/R/B+WvB+Wtn+/1p1
6u7ZNtGGBf+XnQP8n97/D95PC95PC95PC95PC95PK/v9gvfTgvfTgvfTgvfT
gvfToveT/l77/2V+Dt5PC95PC95PC95PC95PK9v/D95PK9v/78zVIHXpWlYs
+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
2+nvCpWdzyO7DpIow72fi6bcKzQZ7xmhMNeXdmqNh3XzvgkRyi9LBRqwMN+z
8+wJl/sVtWEf7ubAzfr+tGLjmPF27NdR5pWG7jHsa4NCT+eF2bH1Sqbx+JJV
xxqv+/Klelo7FuabB7UdmGfRKxtW33DtlqS9ohk/VnGNHcv/XDbEsKv8js6O
vTD0QNFTZXUsKjYooFsLB9bJL/DoWe80cUOqTbNjP/D3rcawGj2UHfMcdizM
C5bNqZmaMMz1LdqxlVzPcmOq61jZ2bOHprriwG7Z7VctjVPPZm30d91lmLGw
HyAp//1ECJWd68VvjjvuCvWIH7p1Qgo/oWZT+odNg4KF8m+/XJjQnnxudrjQ
7s/VR8Booe7rOfew4z6oO4NiGD8eKu09LMxV13k9vFXcLx47ZU3YhH2JotnJ
yOd+BY7dw7bm+9BipHOi1SnnBTNGCp3d7P2tYHOIUJhvTOt60n/6wYVwoVGT
I9SXFELV3S/dfvAS6r5uf0Ho867GIo7t14WG87noB4TKHKBbpg1llwbcEXp9
zJDP+x8ZhMr2oalXVTZ2PyvU/F7dn7hRaKUwq3PJYm+h55Mea3EphVGo+/lF
gNAaM966XipECV3P34dpE6rey+VPYhBarMyjDx9TXBfqdpS5Yv9Pt9GuC2hL
W9rSlra+szT/1/xf8/9f7P/g/ScLleiaaYMNPwbvp/4P3k/9H1ycOjl4P/V/
8FTqq+D91P/B+6n/g/dT/wfvp/4vm1MA3k/9X/Z9gfdT/wfvp/4P3k/9XzZP
QXYOPPgc9Trwfur/4P3U/8H7qf+D91P/B++n/g/eT/0fvJ/6P3g/9X/wfur/
4P3U/8H7qf+D91P/l53HLju3X3b7BO+n/g/eT/0fvJ/6P3g/9X/wfur/srkG
4P3U/8H7qf+D91P/l80pAO+n/g/eT/0fvJ/6P3g/9X/wfur/4P3U/8H7qf/L
fj7g7tThwfup/4P3U/8H76f+D95P/V/2ecH7qf+D91P/l83pAO+n/g/eT/0f
vJ/6v+z+BLyf+j94P/V/8H7q/+D91P/B+6n/g/dT/5fNTQDvp/4P3k/9H7yf
+j94P/V/8H7q/+D9tOD9tOD9tJr/a/7/7/g/eP/1muuvxTez4Mfg/dT/wfup
/4P3U/8H76f+D95P/R+8n/o/eD/1f/B+6v/g/dT/wfup/8vm1ID3U/8H76f+
L3s/4F/d/8H7c7nuJdMtsuPH4P204P204P20mv9r/q/5v7a0pS1taetPW5r/
a/7/D/B/t/PqsOD/u1J1fj/UacaC/7+t0zv7yoxW7Pf2/4P304L304KL04L3
04Kn0oL304L304L304L308rOKQLvp5V9X+D9tOD9tOD9tLLzlGTnwIDP0YL3
08re/wveTwveTwveTwveTwveTwveTwveTwveTwveTwveTys7j0V2bo/s9gne
TwveTwveTwveTwveTys71wi8nxa8nxa8n1Z2ThF4Py14Py14Py14Py14Py14
Py14P63s5wPuTgveTwveTwveTwveTyv7vOD9tOD9tLJzusD7acH7acH7aWX3
J+D9tOD9tOD9tOD9tOD9tOD9tLJzk8D7acH7acH7acH7acH7aX+v/f+DP/3g
ekZoxYL/v1WPKelqwYL/57yqQrQZC/7vdbie65HPjAX/X1AwOF1CZQsWnF/2
v3csVnrxt0IGLPh/yy3eurJBOuxv9f+8ic+5foQxWPB/Yzr1FqDDgv/XVo8R
G2HAgv8b1aeVmQxY8P9LWZ6azifTY8H/C6iXF1vqseD/6q75tQV02D/b/5tZ
+8+6YNBhwf+/XMueP7ChBfu9/f/g/bS4358UvJ8WvJ8WvJ8WvJ8WvJ8WvJ8W
vJ8WvJ9Wdk4deD8teD+tbP9//wvLc2dvYcWC//PjbloZsOD/V9Rjp1zfNxT8
P5F6zJd/NBb8PzxvEZ8SZQ1Y8P+Bxatv37vWggX/zxBQIzo2yIIF/19ZQn1i
Y8P+Ufv/4dwfev6Pegpf1hArFvyfeWydfbG+BQv+z58GbbNgwf/nza3yZeQM
E1bzf83/taUtbWlLW9rCpfm/5v9/Q/8/sHtU28i+ccL+//5Nm6wf8P6esP+f
+j94P/V/8H5azf81/9f8X/N/zf81/9f8X/T/33v/P/V/8H7q/+D91P/B+6n/
U++n+/3p/w7e36N0keENXpmF/f/qraNrc/N/bP//zvztWl+tbhb2/wer4y1y
WYT9//l7fukf9NAs7P9fuWdhtnw/mYX9/zeTPB52cKlZ2P/vfj/XvT/d/8H7
Oy298VO+tmZh/z/1f/B+Ws3/f5v/g/efLKv7evCCQ9j/T/3/997/n+ug+szd
LOz/p/4P3k/9H7yf+v/39v/zP+uhdmH/f963SZZG37EJ+/8Xq6fsX7IL+/+p
/4P3U/8H76f+D95P/R+8f6z+UPGphaya/2v+ry1taUtb2vonLsnjgnRuL3+c
bCxWfXjL2lOsZM6v96K7LcMqrRLbZFyHxG0DhcK8OFq3AwUIzcT/f2+hN9Rt
GJ0DhbbhgxoThL7eUSrRm7b3hVZa2ftbWe8Eob/65y95XVNL5fs8h4S6PfuY
2JXLi915flpoia9leh6Y6SN0T0uT2fdkoNChfCDgDaGZ+AtST6Gy6xeJsn/q
1L7NGqGZ+ADBc0LPc9e/KtQ795lzx3zPCDUMSr5819XTQmuZn4+qPd5TqPlU
65bPPc4Lbcd/zzeEyl63xllXq6PChJbsrl6gicX6l7lZu5dnBPvAB7FZsVUP
Pq7veBDBis4fUfNIXgd2yeE9kS1O6KTnisvOgc8QuD30wm0F27tm4sQ/fTSy
m0U/9xv8XMG6b+cmpv6rp52d2Mke1R/oCsUyzuXbnViY/3uu15p5P2RxYg/1
uj948lYTe8pOJyQfpmDzFy1VOHkzI1NuvNXdre7Epi98KfMys4nVn3wg0P+V
gr26JsuH5b1MrCJ/ge7E7ua3QxMLUb+8jAo2NkPbBgc3GBh/m3xaBcvfjr7S
IJ0LIDuvfgwf2KpgC87Wt/bwMLJbrs9WobKC9Zk7aX5nvUH69bj+z27PnQq2
sarGjU2sYLMhKTttULBzKm8Zv3e7keVZl+pU/B4FO+mO6eb5i0amYlWKkgoW
5+uqf/Y5FKz6WSrsNbCyGaKVGeMULB+X2tXIrnAQdmLP7Do9xtsSy0YWOekX
W8yJzX2/6AvPGyY2efXwaf6pndhy3ru6LF9qkn6dK25tTBsfrGC7lHg1/VwG
E/uYQp2kqGBhHrHs6zS9W/Zud1cnFuY4P1jWbtGayQo266Xho3MNMLL0PV60
Kj3Die3Z9cSXliNiGVf9I07s9TSj1O+QFa4y8mySJk7s/JT7/L9+NbEjyUOK
7p+hYNeeGnicjTRK52LIzp+Xfb/qrSv3QgUL85d7XFXvKRSse86mkV2Lb7Zs
ZhMFe7FP98kvvxnYtIDRR/Otd2CrqpfFtur/tb9WwbqdzcAK9BrQ66DFgXVf
jzawhCqrS76+58B+SaWctVQzsKujdqZ8/kXBnuP3tybp7Vl2PyCby9A+YFp3
35L3se45g3FMVYflj53YlU/5gHWW6Mic2x0eKViPV/73d7U0sUL87sOBhbmW
6lTTtdUUrHrvlifBIJ3X0Hds3XrJNynYrws84pLuNrJqaZw54zI4sUcubd5w
Zr1J+vOR3a/K7h9kc0y8jqgXFBzY66/TRc2bp2dhm3K+HL3Ljr0X+r6Z/kwM
68wHjtuxjzb9VPLbmhi2aG3s0sZjHdiWvvwOS3oud+Vq6qRaB3ZfWvXgIz3L
ePNRiUJ77Ng+hfeeqX0hhrW5f7NnxF47Vp2Gu+NyDDM9NrZNU92BfTNzVtIM
93RM/Wvqnt+BTfGxeb0Tp3VszrMpCwsG27H82KD0OrajqucOx3Q7dmqaMjt9
h8ewBxne9hyVzoF179/QMc+3FU+OemvH7nU/QLLE6dUnlnZsIy+vHSs3wXWz
OCzMb+3Fv794LFxHM+Xa9rTfzXjs9Iez98R/iGIRP8983HxThNBc/IYUJvTp
59Jvj+4LFip7fuueSx8g1D2v1V/oSn49P1Co28tDhOpGt6vZQwkWyu/meoQK
vVomV8GNNUOEjoyeUuNh3SChy2cdK3U4o7/Q1aEZjpSIDxSqXi0pXV7sTO+l
b+v0viPUzC+knhZaij+eHxV6YkqDbTbPu0I/l1p32v9ggNCg6FQvBiyzYt1z
TiNYlQNLGqV9ZcceeGR4mLGnjvXhc4Ud2M+rViy7GaiTzg2BOa903qtS63Hy
TEdtWPVqa+67UWxv9ytT7p+3YRd0qdcxMCGKjauv/kXZsa47k64rnkRLHy9U
dR4x3YFtzAd163EuL53Pu+KifWCzY3ZsV+6uMdJ/vyj7vL5FUpixcH05Jd9P
FCU0jl/WDRbqvv7sL7Re/pvrG9wXKzu3qlDG9X6rnoUKXZKDb5QSyrk8f5TQ
XF2HTR2YMUYo/zZPRAndzt06Uujc5OoVvgihsnN7ZK9zO/DHUbG/9u+34rNV
9tHvIoS653KHCHXPSb4h1HP9tpB2/ueFuq+b3RDqX2jiyj0LDwhNVEN9XjBS
qPvx8K5Q2b6X02ebBNasrRM6qVoh1zPwaKHe/HH7mNB+fJ/dXKHup6fhQmWf
V3ZOmuuXsHPEonihppzVXy/2Nwvt8Ojpj30XBwn1bFCjTcTHvUITTVIeXpzU
Ryz3mJZitaUtbWlLW//Mpfm/5v+a///b/g/eTwveT/0fvJ/6v+xccdk58OD9
1P/BpahTgfdT/wfvp/4PzkfdD7yf+j94P/V/8H7q/+D91P/Bz6ingfdT/5fN
BZCdVw/eT/0fvJ/6v+zrAR+lXgreT/0fHJ26Ong/9X/wfur/4OjU1cH7qf+D
91P/B++n/i/7OsH7qf+Df1MPl32d4P3U/8H7qf+D91P/B++n/g/eT/0fvJ/6
v2wuhuz8edn3C95P/R+8n/o/eD/1f/Ab6jng/dT/wfup/4P3U/8Hz6a+Lbs9
y+4HZHMZwPup/4P3U/8H76f+D95P/R+8n/q/bF4DeD/1f/B+6v+yn4/sflV2
/yCbYwLeT/0fvJ/6P3g/9X/wfur/snO5wfup/4P3U/8H76f+D95P/R+8n/o/
eD/1f/B+6v/g/dT/wfup/4P3U/8H78/PD+aw4cey99GA99Nq/v/39n/wfur/
4P3U/8H7qf/L5oaA91P/B++n/g/eT/0fvJ/6v+zxAryf+j/4PfV88H7q/7J/
L3t/meb/mv9r/q/5v7a0pS1taeu/dGn+r/n/P9j/q04rt3t13wgs+P8OdZxo
23tY8P/Q3QN2lwm0YL+3/x+8nxa8n1Z2rojsHBjwflpwKVrwflrwflpwPlrw
flrwflrwflrwflrwM1rwflrZuUCy82rA+2nB+2llXw/4KC14Py04Oi3u9ycF
76cFR6cF76cF76cF76eVfZ3g/bTg37SyrxO8nxa8nxa8nxa8nxa8nxa8n1Z2
Lpbs/BnZ9wveTwveTwveTwt+QwveTwveTwveTwueTSu7PcvuB2TnMoH304L3
04L304L304L308rOawLvpwXvp5X9fGT3q7L7B9k5ZuD9tOD9tOD9tOD9tLJz
OcD7acH7acH7acH7acH7acH7acH7acH7acH7acH7aX+v/f/+KrettWLB/x3l
6/WZvtiCBf/fro6xfmrGgv+Hz7m0r1F3Mxae37Z5NSbpEF8dFvx/sHq6xcN7
WPD/RmlflZs924wF/3fdyW1LXsKCBf/P/uOz2NzfzFjw//MlFlYv18uCBT/M
UNvSeWhWCxb8UD2sbtZGMxb8f+H2FZVM6+9hwf8P8wG2eiz4/x1+wU2H/b39
nx/rszMGC/6/e+q3aW8qmLHU/2nB+2nB+2ll54aB99OC99OC99OC99PKHi/A
+2nB72nB+2ll/162/98WX88YfdqGBf8P9R7/86PKBiz4v3sOvQ4L/v/1+vSc
B2rrsOD/cF4VPbeq5NmbNwfPs2DB//fXzjAjcWMrFvx/QZmZrs9ow4L/P1Iv
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
PodXNXdmUMcDr4vt1ak5OxVu2vZ2iDbKuO1Vz0Ut0arZoYyJQrWN5vuOe9Rq
5hzeYK3MNONkNl/RmG9mttzzboi6/75XRTG/mtd9HXNbdPTLaw1X5vETTfbq
9ZCSrfxFU9Zu//xAriDRk1M+tspcI0C0c+JqXZMN8hONNeZV0bpDb4pW7ph2
bvLrN0Tb9K3e5uKFy6K5zftX10RV53oV/9kYsHtDdMmDXuE/vrwqWj0g6+Nj
Yd6ihY3L72wnRBOY+xdkjSnVafIdEXXfxzsp+vLRhdlexQ6IqvYB7oj5qep/
9qqod3SFprEe3hY17wKvihStfzHz2B2d7KK9s2W8M/Tb3aLuues7RVX76FT7
QwInuxb5VbkqOmlSyY/9xvqLuu9HRYouSt1pWtlFwaKq50MP8/PnQ0Xd+y67
yFpzga1lLWtZy1r/97L83/J/y///x/4P7+eF93P/h69wb1Gdv606HxveL/z/
V+/n/q861x3ez/0f3s/9X3VOPryf+z/8jHsavJ/7P9yaOza8n/s/vJ/7P7yf
+z+8n/s/vJ/7P7yf+z+8n/s/vJ/7P7yZ+zO8n/v/bz3HW/V1g/dz/4f3c/+H
93P/h/dz/1d9f+H93P9V58bD+7n/w/u5/6vmC8DducOrvv6quQbwfu7/8H7u
/6o/F97P/R/ez/1fNacD3s/9XzXXQDWHAt7P/V81JwLez/0f3s/9X/X1VJ2f
r3o+gfdz/4f3c/9XPb/B+7n/q87/Vz2e4f3c/+H93P/h/dz/4f3c/+H93P/h
/dz/Vefqw/u5/8P7uf+rXo/g/dz/4f0q/09q/Dg+ddCv4f3c/+H93P/h/dz/
4ancV+H93P/h/dz/4f3c/+H93P/h/Sf9l0e5vnHSr+H9vPB+Xsv//1j/h/eX
bVz21aMLdvo1vJ/7P7yf+z+8n/u/6vEJ7+f+D+/n/g/v5/4P7+f+D+/n/g/v
5/6vmjsD7+f+D+/n/g/v57X83/J/y/8t/7eWtaxlLWv9xZbl/5b//y/8/3zv
+lVHbPGn/ln93/05ThsV/l/F4OV9dir8v+uGBTGPPDv1S/v/4f288BVe1fkb
qvMx4P285P+sqnNd4P288H5e1Tk58H5e+BkvvJ8Xbs0L7+eF9/PC+3nh/bzw
fl54Py+8nxfezwtv5oX38/7WczxUXzd4Py+8nxfezwvv51V9f+H9vKpzY+D9
vPB+XtX5QnB3XtXXX3WuEbyfF97Pq/pz4f288H5e1Tld8H5e1blGqnOo4P28
qnOi4P288H5e1ddTdX6O6vkE3s8L7+dVPb/B+3lV5/+oHs/wfl54Py+8nxfe
zwvv54X386rO1YH388L7eVWvR/B+Xng/L9xf5f+88H5eeD8vPJUX3s8L7+eF
9/PC+3n/Xfv/vzsyO2Pab+1U+P+I/u0mf70pkgr/N/5v5kWRVPh/1ZZLAr6e
G0mF//eY5LwaMSuKCv/3M29MRVHh/7Wbbo/bu0AUFf6vOud/Vq2g6Mi+kVT4
/9FlRY8d3xxJhf8P/7g/1th2UVT4f4Fvvq/2wjuSCv93n3dio37J/91zwX2o
8P/Mg94ezVIhkvql/f/wfl54Py+8n1f1+IT388L7eeH9vPB+Xng/L7yfV3Xu
HLyfF97Pq9r///7ZqQGxY9up8P8Zryt2TDs3hAr/d9+3CKLC/0OTTGvw89Zg
Kvw/W+3YScesiaLC/80vUxs7Ff4fvWPZjDXP7FT4fx+/unU6tHZS4f9Vnq18
l6KXgwr/T3640sTZ4+1Uug9gHsgWQoX/f4zIk2bOrhCq5f+W/1v+by1rWcta
1vrTLsv/Lf//B+3/fxfv2MXmTaLE/n/u//B+7v/w/oPBUz2nT3NY/m/5v+X/
lv9b/m/5/z/K/1Xn//zV/f9L+/9jLc4+NN82u9j/b3yqbV83h9j/z/0f3s/9
H97P/R/ez/0f3s/9H97P/R/ez/1fdc4/vJ/7P7yf+z+8n/s/vJ/7P7z/uPHj
0DJK+H9V04fviP3/PyXcsvjFQZvY/8/9H97Pa/n/v+b/8P5Ya29nOuPtFPv/
uf/D+4el2t3y5o7I//X+f+7/8H7u//B+7v/wfu7/8H7u//B+7v/W/n/L/y3/
t5a1rGUta/1llur5XzUvRvXfvzPmAHcXjby2bULHNotE3W7tLVqwQrE5b+P6
iw6ZNMe+JfYt0Q3ZM1UfkOuCaITp6MdET6U5frv3c5todNCpHD6D74sa78qW
DgoRVX053XOSh2i8zypP+mnk1PWi9zMl/hSR57Coex7RSdHuvY13oqdE495o
u++qxznRmYs8pmTrdUF0R947mbo7LokGpt6YKPuTm6KXzHnCt0WTmO8jfEVX
Pe1yLuiK7Nka2zs2/E725toVu0ZE3BYtXOndxD3Pb4gmMOeJXRRtY85r8hQ1
xyRn8hJNM2fX7fMhvqJ5p/iWmJzKX9RzjT4myUs/0TPG280Ud6nGtOD09QM1
89ucPZKa0f/ixmmjg7W1pYz/n5HU0PK1HtUpHqK9/6VvuhW5I6lLrxlyEKxt
N78/gaIlPZ53e3pJtsURx6cGvneoL6d7e15LFKh1z/zwid7dSU0Qtla7XDVI
u3PBsbXXChf1F3MuXqg23ZznF01tYIznXRWu7Q4PHh3rXjR1WbuRrd+XjNDO
T9g9b+MDF/XihhwTK9cNU54/rzoP/JXBTC1cVPP2YLZQzbi7UijKRf02bsiA
JuXCtBprjEGLLuqVcHOwnPKc29adixxtvtNF/em73L4brsb8/uagNhf1W2eh
IX2u2JTnnLv3pbmo7uvTUK2JeWHuokZpCS5VeRaq3d5wdWXc8y7qXWeb5bHf
hGpndhiDAnUq5oFOMg8A0Kl4/hmWOkWTbet1asHrD+LUPhyinF+QetL7fIWP
uKi9Np891PReqHZgsAFKLurmmKudjGVDtXHmYEGdWv5xvBQ754Qoz1EvPKto
inXh0dQVR4yBdBGapzEWN2M0deO2WUljbVef997a6T+3hKZTn/YdOL7Di2Ct
0pz1Mc/sLuqxEwk2F3ln09atTD746DIXdVzw/Vo9N4VqEcbHeZpEU98ZY0jT
hSu/L6rfx3h1yxzLRe2Zv/vsYsNt2s+rOsVc+buo34ROHzO2QqgWXXRjmxbj
XdRkXxkTHUOVj89AE8Zd1PtN0tX7KTxUOQdEde59xm1x4hT7SacOMUHWpm3d
lfVNr8kuasyLabNro0O12HGMyX8uaq2d+aqnrRqmaX7N38R54qKeM+eThmlt
boeUi3ymU3+uNjrgRCubZt72TuOitolfd8LNteq5G6pz9VVff9WcDtW/68Gs
JtMWjHBRMT965qPZRyb20alNxpiTdbW6F45OutVLp/rlK9djWc0QbVsm71Ev
r+nUuba2Le0JbNpPpT+XHVTbSc1q7u8O0vYlLhT7XE0ndd3J7L1HfgrUfCr2
vlxqq5MalsF8JdSG5k+89c0TJzXfy3t77zeJub5vXbd3v0Y6tZsb4rWoj8Y7
Ep0aZ73xhQrWtq3v39i/s5NqvCtaVzpIM+7WtS2lU93j3NXzAoxTRvYucFDX
xbwqtFwSoC3IurNkzHOaKF5PeB+a719k8fXgNccxtggQXTGrp353o+xBc85k
oGg883N3QaL3NpXfOSmfTv18v+LR9xeDtZjv2Zb2U5zU59uG7vUcG6SeR6CY
/zLcfKJzUgsElj7wVWSgVrRTQN+cdZ3U1Z0HVaocL0gzx4WmdlINPWy6JlDL
ZN7nuUOFN4419wuEU80/voi/5l3wXIUOnqFUX3NM9G1tfB7jjUoY1fjp2Hfa
V5tadlErR/8wau4EIxJ02eGrjVpwe+imWBHU9N8dzpO9kr/2uaGxMSOc6n5f
7a/VNN6uNfEVLR/5rH+FIbL7c85p+nCW7BLzPvB1UfecdlnV+UK+5s/rVdF1
W85laHDCRjWmNS+K9tEyTzeeoZzUEfvHDJo1OEibXbui/WRXndqyeNX8AyuG
aCeeV7/r86NONcfMrglRzltpnnH03T6fdKr7OsKmXegUa9HJUTrVeBc0oGeI
5h6X66SWH7zbNT1nsGbcHWh9TKdmapjtxnZHiNbFBHOd+lXNh/YyZ4K1xsZ2
k+Y6NfLb5oPfZVbPLapnMG5GFzXwo8epF9vVr79viqfq7etwUovFe1pqVeVg
zXh3sbxiJBXzvi/fTp405zE/UdU5V5hrzXt9u6N1yQQ+osZVW5uqsmfPfjVj
4A0/UffbBdlZg5dOL/faV/R8xgOHdl3yE32/Maez7Dey5WP37Bzoe0P0WZnu
JepVOS9q3gZOe1A08OdCGafOPyDqflwfE61YacOqYX29RBcatyN3nRGN3Gds
eDgs6r5u8xQt36tLhRuvjot6mV+PA6IZzLHKXqK5N48t2mfKIdFJ5v6yFaKX
zMfLAdEWuQtM/5zDS9RjZMLLmx46RKcZTyuZnohuqG9cyFwXde/T2Sna5X7S
Rd/9OE30/rn2fhsLB4quvfR92lIF/UXdz4teoqWvfldsUt07ojvjl8w2fohD
FM/fvJFvDXeZKqr0CnMuei+N9/fBJmtZy1rWstafZln+b/m/5f//a/+H9/PC
+3nh/bzwft7f6v/wmLDBE/Pev+6gX8P7uf/D+7n/w/u5/8P7uf/D+7n/q86f
V50HDu/n/g/v5/4PT+W+qjrnFt7P/R/ez/1fdc45vJ/7P1yZOzO8n/s/vJ/7
P55vuP/D+7n/q+YXwPu5/8P7uf/D+7n/q85Rh/dz/4f3c/9XnfcOb+D+AO/n
/g8n5m4M7+f+r/q+qH4feD/3f3g/9394P/d/1eMT3s/9XzUHRHXuPbyf+z9c
nDs5vJ/7P7yf+z+8n/s/vJ/7v2ruhupcfdXXXzWnQ/Xvgvdz/4f3c/+H93P/
h/dz/4f3c/+HZ3P/h/dz/4f3c/+H93P/h/dz/4f3c/+H93P/V80LgPf/3fwf
3s8L7+dVfR5BNf8F3s/9H97P/R/ez/1fdd44vJ8X3s8L7+dVeRG8nxfez/tX
8X94Py+8n/s/vJ/7P7yf+79q3gq8n/s/vJ/7P7yf+z+8n/s/vJ/7P7yf+7/q
cQvv5/6vev2F93P/h/fzWv5v+b/l/5b/W8ta1rKWtf6ky/L/f6T/HzpvTPoL
pML/6x3vG5Cqso0K/z9vnt8TSoX/u8/jCaPC/38xB0uGUeH/2YZc2O2bN4wK
/6893hDJUOp/yv+Hm9+fMCr8/8VA44AjOxX+f+zDvDmzztmp/6n9/+7vk5MK
/x/dKM2k9/mc1C/t/4f388L7eeH9vPB+Xng/r+r8GdV5IPB+Xng/LzyVV/U5
d3g/L7yfV3XOCbyfF67MC+/nhffzqp5/4P28qvOL4P288H5eeD+v6hwVeD8v
vJ9Xdd4LvIEX3s8LJ+aF9/Oqvi+q3wfezwvv54X386oen/B+XtU5YKpzb+D9
vHBxXng/L7yfF97PC+/nVZ27pTpXR/X1V53Tpfp3wft54f288H5eeD8vvJ9X
5dvwfl54Py+8nxfezwvv54X386rOC4L38+Y7Y/yAO6jwf9xX5veX3dzpoML/
VZ+PGGMCnYMK/y889JbXkGUOKvz/xMj7h3cXcFLh/47+i1vX7e2k/l7+zwvv
54X388L7ef8q+/9jx77+8tCTKCr8f9y61PE2fIqiwv/LnYscMSqRnQr/n7Zg
xPzvR0dS4f8enjVi1ZgWSYX/J/lcLcfTmNdDFP6/w5wrf4/6pf3/8H5eeD8v
vJ9Xdd4avJ8X3s8L7+eF9/PC+3nh/byqxy28n1f1+gvv51Xt/68e82489UY7
Ff4/d8/Ko3MmhFDh/8YprC3zBFPh/80ypHEu+DqKCv9v1NU4QCuKCv8/l3RN
ykq77VT4/+mDj52fD9ip8P/c0T1SrvewU+H/1YyvxnY7Ff7fzrdyyZPRYVTL
/y3/t/zfWtaylrWs9Zdblv//I/x/ylbjRPEIsf8/9bMtO49/uCP2/7ccejHF
jVhRYv//Ir8qyw+fjxL7/3v2fTBkTiW72P9v7HZ9mt8u9v9rvk8/FHgdJfb/
B7Q8/3bD6aj/+P7/h0ONd+Z2sf+f+z+8n/s/vH/+D1VTJX/kEPv/+6X/mK12
bF3s//e5fibmK6CL/f8Ffxx9pu3Xutj/z/0f3s/9X7U/0/J/y/8t/7f83/J/
y///J/7/pf3/3P/h/dz/VZ+PgPdz/4f3c///o/f//17+/6X9/09ObEnaKMIu
9v8vKfzk4k8no8T+/58KNF4Qlssu9v8PKWkc3G4X+/8fd3oVmcphF/v/3Qxu
F/v/uf/D+7n/w/u5/8P7uf/D+7n/q+YLwPu5/39p/7/l//8e/4f3G//6tll1
sf+f+79qzgW8v6fxbuLhPbH/n/s/vJ/7P7yf+z+8n/s/vJ/7v7X/3/J/y/+t
ZS1rWctaf9tlvs430USV83+N15Oaom7nnizaJKFvs8UJD4km+OH411VL3Rbt
aQ7AuiU6td+aTa9yeYt2j+MV85J4VtT9vsBXdMHeT549hjtFp/oti7lE0EVL
F1yc5uJEL1HVl3OS6euLNd4N5tzO5aJths+LuVQ9KDrJvPzbK6ry7Qjz+3BJ
9G2cJ7fWd70t2rymOZFIdPvuyQbtiPYv0nHA4Dp+olXnxs30snyAqGrOmnGK
RqMyvqL1S135UHqbn6hq7tWGtLeXHHxzSdT9/vqA6BLzQuGIaMSsnd9f/XhN
1P0+2lf04Jsl2+s88RPdOSfkZbsE/qIFD886nGlggKjqc8cZPk3xiIhzWzQ4
YauO3c7LVu9u6x5v9i3RvW5gFO2fpOFIz3t2aib3YGMtW4euHbZG6VT3/Tib
ZlwtXR/oombof+3q/BahmrnNsp+Lah6T0TBUq+BlgGE01T3HOUx5LvrdkvPz
vbynUz8mcB2MKm3TjuR7UCx+cxcV82dV54o3SNC3zfFULirmhMZcZKQ+9r2L
uma47+xe9UKV8w5UcwFGPTBOVommlhhhDDQM05Ia4xtTuqjmWMvlNq1ckMeV
zY1dVJrzq5gjoJpToJovUGbMopW9W7mou5Y/XnY9Z6iWyjgOqH80tcfFPp7l
m4RrE41jf566qFVXZIz5zodpxnS5jFNd1ETmfLdQ5dyBfauNiWVO6tqw68bI
bC2v+cTlos5rfnhC3KGh2tvd/RY9b+iiuuephWqJ0lQZrvm6qC1v1DCEW6sy
Yst17xcu6skFqd7N7hCmnINs3mZrESzao+T+co82BInazhg3mGSnlincIeFI
nVon2TdZknRTn/O85sTJ/mu/vk8dnU7TSk9Vzzvo+cO3F45OclGTmIMzQ3/d
7+iiut3DppnHW+3TqRs8A0+e8g9R/j6qc55Dck7aWP2lTn3qMm7A25Tn5McZ
GjooU2EX1Xg0FvWxaZV/+Tbmn6JTT6w07nCGaGfKvzlyrKqLivvpqnOzI0Lu
vj/u0qlvm81o27e6TRs14Ny4qBU6Nebit+PpbSHaHg/jICKduiJ3v8T3xwVr
BXMZA0N1qnu+YYiW+atDxb6/r1NHbi120aeWTSs0YULvBCd0Kh4/Ty4Zn5By
UjMXMcA5WGtkXsg7qXeGfpt5zfEgrfTAqJ/9Szmpu8yB5YGaMZ122Q4nFY8r
1f9+8dauVHW8nNSrHtlnzXgVpA2uYgiak2oev/UkUJsxqPjcjp8d1MZTC447
PDRQW2WLNWjXD07q0BbGD1KQlv75gHX9HoaIPn2WpkXFWUGiMV+spIu+CxCt
cebMmrlLA0Xx9+KNeTFf+PP9AFHfo8YTuewRn3UftzSRrRC81Wt8bdkbsa4t
OJFaVnW+h3ufrr/o+SWJ79wsGiBqTNPtvV/WmOK7W3NSc17MW6jJy0AtZFue
UTlmO6n4en4w3q5ldVKNKZXrPQO1Wo/3FBwc10m9YQ7YDfx1/7STus3YNvEw
UNO9q02d8p2TmqhMw36xygcpPw84slvyoPojHFR8H7cc7r0l1z4HdWaS1TE/
UgHatLTGSUROar1bN76p+kOgtvuyccfIQV1usPuOAM14d7Ryg4O6eFSbmFfK
AM0+tfXGhlvuUKe0Mgb9BmiZF/ffcWx5ONX9dsNPG/1wwoY778KpeB+S37x/
EkH13pqx24RMAVqqvJ6vrh8Mp+J9VxJzjmsYFe9zOrcLfxza2E793HpSlb1p
/LT2q0q4tpfQqZjnq3r+2WI8fWTQqbNiN/k8dWuwNnGiT+wfp+rUqpu698k+
IUTr02DzoAnndWqqyilqvX4Tony93jC6+7DbeXTqpGWLG6zwCtZi3tSseLvb
SQ3uWmnpw5tByjlBZR9WyvxqrU7dYzpeiPbaq5erxhqdWiTPyuI/7A3R3o+4
op2cr1PNj4UsDtGq52w+budFJ/WyPrBDgw9B2q6WN3fUbeakLjXfPwdpLY1x
zPMiqfUvmTfytdEDc488tcBftLv5fuSGqPmy2tZH9LG5T+q2qOpcoAvv4h27
2NxXdEXMv7r1Mh/R/NNW5S0b66bokjHftIja7CPqfv64IHrfnKN+THSUuW9u
t+gg8/78Ctk8EUf6JNwnetycN35Y1Hj1WdL2oKh7TvhuWWM7066DoqPM74+s
ah+a6s91z0W/JGqrbkwIPizqvq5dK/rWvFG5U9Q7x7C5G6YeFq341vjk1F1R
k9E7PhatZv6g20Q9yme4su/zcNEu5nzg1aJJsj/JEvTcSxTXPbwLP34sk7jB
BdEhndL9nHCLv+jKJenmDbukixq7sDJPt4n2Ni5zBuwQVe3D/E9Sk7WsZS1r
WetPtCz/t/zf8v9/jP/jOpv7P7yf+z+8n/s/vJ/7P97ncv9XnYsO7+f+D+/n
/q86Vxzez/0f3s/9XzXvQDUXAN7P/R/ez/0f3s/9XzVHQDWnQDVfAH7APQHe
z/0f3s/9H97P/V81dwDez/0f3s/9H97P/R/ez/0f3q/yf+63/6r/c4+F93P/
V53zDO/n/q+adwCn524P7+f+D+/n/q/6fVTnPMP7uf+rzsmH93P/h/dz/4f3
c/9XnZsN7+f+D2/j/gbv5/4P7+f+D+/n/q96/MD7uf/D+7n/w/u5/6seV6r/
Hd7P/R+Ozv0f3s/9H96v8v9+25utPXFSF/7Pvdry///e/+H9vKr7KfB+7v/w
fu7/8H7u//B+7v+qzwPi+8b9H97P/R/ez/0f3s/9H97P/R/ev7GtcTKTg34N
76/SpebYtfvs9Gu87+CF9/Oq3nep3ufA+7n/w/u5/6uef+D93P/h/dz/4f3c
/1Wv1/B+7v/wfu7/qjlB8H7u//B+7v/wfu7/8H7u//B+7v/wfl7L/y3/t/zf
8n9rWcta1rLWn3RZ/v+39v8OnovKBIwIpcL/TfaZb6fC/0tNjaide7KDCv9P
d/nbeJX72Knwf/fn+COo8P+kg5quaeEVTv1/7wOEUuH/u7+Lqne8bzj1P+X/
jcwDfoKp8P9VfU7df1M8jAr/r7BLz5nvtJ2K69Ay5gEIdir8f3iCLjtSjHdQ
4f+qc0f1IpU7jZkeRYX/B3kaVwJRVPj/oDpNt8ftHUWF/x9NOSsyLKmdyv2f
F97PC+/nhffzqt73qs5Fgffzwvt5VeeKwPt54f28qvOOVOcCwft54f288H5e
1TlCqnOKVOcLwQ944f288H5eeD+v6twheD8vvJ8X3s8L7+eF9/P+3vv/4f28
qnMe4P28qvOO4PS88H5eeD+v6vdRnfMA7+dVnZMD7+eF9/OqztNTnZsB7+eF
t/HC+3nh/bzwfl7V4wfezwvv54X386oeV6rC+3lVrg7v54X388L9uf+r9qur
9o1/ldR4Q+ikwv9Vn1PoElQm3YcTDir83zvh/uqr6zqo8P+Khmr2d1Dh/+My
Dih6obeDCv+/vO9z2i6NHVT4v+p873nLKvTqUsFBhf97vd1w+kEHBxX+XzBD
9iXl1jqo/1v/54X388L7eeH9vPB+XtV9HHg/L7yfF97PC+/n/bPt/4f388L7
eVXPP/B+Xng/L7yfV/V6De/nhffzqs4JhPfzwvt54f288H5eeD+vav9/1p57
E36X1EGF/1dYb9wBiaTC/8uZ56DYqPD/1VWMG85RVPi/ai5AtULrCvT4KYoK
/zdO58tYKIoK/385qPd36y6HUC3/t/zf8n9rWcta1rLW335Z/v+38v8ioUWW
1jh4R+z/7zQwOOYtcZTY/8/9H97P/R/ez/0f3j9xWNb2H79ziP3/ZRuXffXo
gl3s/49/PH+jgpFRYv9/POP46BX2P83+/4/1+8ZcekSJ/f/c/+H93P/h/dz/
VeeOwvu5/8P7uf/D+7n/4zrY8n/L/y3/t/zf8v9/lv9/6fwf1f5/7v/wfu7/
qs8pwPu5/8P7uf/D+7n/w/u5/8P7uf+rzveG93P/h/dz/4f3q/yfn/9j+f//
u/+fF97P+6/u/+fvu760/9/y/9/X/7+0/5/7P7yf+z+8v/7X8TvdzRwl9v9z
/1fNBYD3c/+H93P/t/b/W/5v+b+1rGUta1nrH7dUc37NtpdVrBwLjBMkVmq8
m9ZU7VJzrI+o8Snnm+0CRDHHiXeH6akXRJ+1Dv1GX31atJsjzd7s5yNEE135
Wm8Y/VD0kKFVg8JEVf/eyDJn0k2+tEbjdd/f+FG0ze4VTRdt2SHqdfho6KH1
h0Vt1z53W3pvj+gz0/9OiM7M4NnI8+F10bfnb0Zm/dFf1Dg95VawbI9jLZJd
KxsoWiXlrmd+t/xEB7ovJEVV5/yo5me9SDxgxvYN/qIvTTi6KRq/z/yLnWKd
F10zp3jY4gVnREtHJync68RZUfd15HnRVOePZA6cd0V0WZDfpCxrfUTT1M0T
3SPlbVFjKG6HqX6imI/H+2hiPFtAPT/Rw8OMG2o+ou65o9dEPc+267e9mY/o
6BrGDQI7tZR5P8tXS2POgdap5nE5A2zari7jmtwd5qJi3mivn1/UqOGtU5NN
P2D8VbWvMhSsea+ki1o9IOvjY2HqOQKbGw+4XniWizq9+ra3zWaEajlL9jsY
u1Y01T0HUH3evmoeQcns9n5FOrqoW6PmVWlRTP33X5/w5PPqd3XqhKNVvp1Y
wqZlzNmpcNO20dSh+rTTq/OFK8+9Px+nafeJE/X/6q6+hd8ODVGeQz5tYfjM
moN0Kq6jY/4f00cki6buOLb8xwOLw7Stu4zJji4q5p/Wy5+u5fop0dSgF6+S
lh8Xrt1sl/pCpnQuakibZ9FFN9q0uSW0eX3SuKiY33raZD4n1bwNmy1Yi7X2
dqYz3k5qtTu9Vw6NH6wVShboGjvYRV1+bnCJn1uHajXWGBPAXVTMvVW5xMeR
hSoumeYv6p676y2azbjcWnhR1NCn5uvOirrndZ8X9TCv/7xFey7fmdJ+2V/0
ffwsZ4vUcVHLHDAO/AnVAlvlfTHmkIuKeb6ZFiXYd2eDizr8cti5mKd6bYV5
MJJOHbQkZ5Us7Wzayx7HTyTYrFPzDawYkuhUiGb8NGVY5aKanLEzVNtmPuB1
KubV+qYYknlRAhcV14n1jNs8GV1UzH8sUfrO+Qm7deqmxMaE3hCtjv278Uds
LurtXvM6dc8bpl1/2Ntj/i0X1RxjmCpM+Tg/PnlFh2oNXFTPHe+zjEsaqjnu
P570vb9ONW+LZbQpz7tWzRlZGL3WdS++i/rdkHglTky2aS7zAahTzTG0SWza
yE9pfmnR1EUtuuFF283pQzXzdu9CnXrE8amB79IQLZ939uSLr+hU42501tg2
bXbtivaTXXUq5oeO23lxT5mcTmq5103OdD8WqN09VuqT33AnFXNmcz9Pe6J0
NyfVuCnQtVKQlmZ4vUnLFjupvY0v/6og5VxO1Tk8PbI0Nk40ElWde7NqYuby
uUYEixaZ/WOiUf6Bop2/en24WU1Z88s4L0DU7U/+oh0KGRNpZVVzlhe/MN4Y
BIm690EEitrnb2qU0Ndf1D2HUzZDtYQFyl/3FT19d8+UVpUDRI3puN++d1AD
zCfYQOX3UTVvxbjr3baUTsUc56iPxmRZnYp50J+q5Xj6w20ntXK+RB4fUwcr
z7F/PuZQsnY/O6m5jafh1sHa3LzGG3gHta3xctEmUMvX0BBhJ3W+8WpaJEhL
FW/Dp4T1darJvolDft0X7qQ+Wtoj3+cFQdqmwNQbE2XXqcbpdskOBSuf9+I6
pjzfNlSnftvHr26dDiFaW3OAtU4138XqwdrnwsYLik7VPqZe1m5kiPJ5IOZJ
Z2+1si4qPNB8253FRfXftGj+8X02TWtl/IN06tnGpz+fHqOeb9It76qlY2e4
qF8/+zj/2RT164Xq9zkw2IBcF3Xz9LspMpZVz9lRzSkouWVGjcQvnNQtj2wP
k7cPVs7BUT0Pq74+d55urnn2m3vU8V4zX1fsGKQVDv609YjPLdEI49Xw0G3R
LIftK5u9viVaeVnjq/u7+4qa44YT3RZVXUdc2pBjYuW610W3DJpw/smzS6Ke
5rzxw6KRqY03/AdE3XOAd4u6/76eou7ryD2iXQ62Lzij+27Rw+br0jFRr2nG
IN29orHGvCpad+hp0T0RlYaFBR0WzVDu7Nhx6w6JRvpeqDxn/X7RJYc6LPih
6gXRSOMYq37nRWea8353iKoc3rwrV91L9HCcXd8eix8qGhhzdZzxgEN05nTj
jXakqPv+xi7RWGlj3h40WiD6Nubddfv5e0RHeJR5EJwjXFT1+DQvr/ZdFq1j
bmdxiJrHiz2JFPWt5HMu6Zrzol7m89N2UaULvTW8p5Amai1rWcta1vp7LMv/
Lf+3/P8f4//wfu7/8H7u//B+7v/wcu7n8H7u/6o5AvB+7v/wfu7/qvP2VfMI
4P3c/1V/f3g/9394P/d/1bn38H7u/6pzyOH93P/h/dz/4f3c/+H93P/h/dz/
4f3c/+H93P/h/dz/4f3c/+H9fzf/h/dz/4ffcM+B93P/h/dz/4d7cQeD93P/
h/dz/4f3c/+H93P/h/dz/4f3c/+H93P/Vz3O4f3c/+H93P9V512r5ozA+7n/
w/m4+8H7uf/D+7n/w/u5/8P7uf/D+7n/w/u5/8P7uf/DiS3//2v4P7yf+7/q
+6iatwLv5/4P7+f+D+/n/q86xx7ez/0f3s/9H97P/R/ez/0f3s/9H97P/V/1
vAfv5/4P7+f+D+/n/q96HoD3c/+HZ3Pfhvdz/1fNN4H3c/9XvV6ofh94P/d/
1Zwd1ZwCeD/3f9UcHNXzsOrrA+/ntfzf8n/L/y3/t5a1rGUta/3By/L/v4X/
b6k4dHh4xRAq/N9495UquYMK/2/inabzw+IOKvw/1exaQdGRDir8/1PZQbUf
77FT4f/Lh2xcHdrDToX/q875d39eNowK/zc+NF+wZwT1z+r/hTJOnZ9yiY0K
/+9jXDY2CqXC/48Zxxx9G06F/69IluT06XJhVPh/vX058rZOEU6F/5+8/6Z4
qt42Kvx/p/N0YXvqSCr8P8ndEgWKZIqicv/nhffzwvt54eW88H5e1TlC8H5e
eD+v6rwd1XlE8H5e1d8f3s8L7+dVnXtD/s+qOodE9Tl6eD8vvJ8X3s8L7+eF
9/PC+3nh/bzwfl54P+/fxf954Te88H5eeD8v3IsX3s8L7+dVfU4c3s8L7+eF
9/PC+3lVj3N4Py+8n1d13oXq8/Xwfl44Hy+8nxfezwvv54X388L7eeH9vPB+
Xjgxr/Fq4OtwUuH/qnP4F5+uXr3bUDsV/q869944hWZJLJ0K/x/xonvzc0Wd
VPh/8mLLduyJdlDh/55jg6bUn+ugwv/NtymZHFT4f7Kaiz5+LOOgwv/3md84
JxX+n3/HsFS7Wzqp8H9zvPJjBxX+7ze836sZRRxU+H+JlSGrh/vaqfD/x7fW
d11f0E6F/59da5wI5KBy/+dVfR9V563B+3nh/bzwfl7VOTbwfl54Py+8nxfe
zwvv54X386qe9+D9vPB+Xng/r+p5QHUeCDybF97PqzrfDN7Pq3q9UP0+8H5e
1Tl7qnOK4P28qnPwVM/Dqq+Pav//Q8eqY89GRVHh/607eZ8afTCKCv83TnVL
PyWKCv+f8O5CifA3UVT4f8yb5h8LzYyiwldDjWNSU9iolv9b/m/5v+X/1rKW
taz1j12W//8t/B/eP7m0ccJhpNj/z/0f3s/9H97P/R/ez/0f3s/9X3XOP7y/
4+dCXuta2cX+/3al/VOGpHX8af3/j97/P2/OrHPX00WJ/f/c/+H9lv9b/m/5
v+X/lv//Pf3/S/v/uf/D+7n/q869p/3+zP/h/dz/4f3c/+H93P/h/dz/4f3c
/+H93P/h/dz/4f3c/+H93P/h/dz/4f3c/+H9lv9b/m/5v03s/183v/O1HMOc
Yv8/9394P/d/eD/3f3g/9394Kvd/XDcYU8puPIy0/N/yf8v/Lf+3lrWsZa2/
/1I9n6vm/74zrpNayJr/75Nkaz60lzmzTbTl+in7c87xE1U5jznOJ81NUZXr
xrwpLJD+5DXRXJvHFu0zxSFa/Nnzu3WfukTd15GXRFVfTrfTb9F4Pc397otk
TVc+IFp+rHFj5ZBo7qo/tBjS6aho5RItnxzXLorOPHRk2InLPqKltj6uoj/w
Ez1a0rzAFV3qfoMqen3agJ7Ld/qJbsieqfqAXP6imPfL+6b2kGO/5Jd139+4
Kfpy3Pg4ye5dEfXtWP3AjvenZY23odlPivY2xuD9eET0kvGx+v7HRHOb969O
iMa90XbfVY9zou6v9xlR8+PtT06LjrsesPn1zAuil75PW6rg4kuibZbHfpOx
4VnR+yaAXxVN62r74YOvjdpv4PgOL9LdojmIfB5iURP8XVTMya0U89XLVN1F
PeYerKg8h9y4uurt4aJWjPlTbryyaa+9erlqrNGp8F7V+eTfmjeYXFR/8w8K
09xj8HSqMW36xxw27X7GbXHiFIumpgxJ2/ezf5iW/ooxKDKaOrBYvm55yoRr
X1ctld3eL4qK+bwPzLlt96jwN+P/Lo25bkRnj9+Vf3tym2aOo8seSc3of3Hj
tNHBWmNDV+7coZrj3TIEal2aLNSy5dapX5nPk8HKuQO2NcaA3Wjqswjzilc5
d8DLHKwcTT3vZU6Y1NKF72zRa5+L2q9t1qTefqHK85CdDaNjHkl2akLNGBjs
r72OGnknbtxA0ab3Qnf81E+2RdTmtZvb3RKtXdQnw4sAb1HV9WncZMaBTwdE
bdtnD3k/Sba3ecNin2iCzjViLrkOibrvv3mKpugZ/6cVS46K1lybasPW3BdF
zWnI1RzUwH7GHS1/LaJZhdzhTaKp7+pW3rM/Xbh2MbTdyQi7i3ql1UTbwYph
WoIT8+rGDXFRG6fVX36VK0y7bB4E5aLeMG/whWmXjLHsBV1U77KB4Teu2TTj
WSvjVBcV853nmANPXVTz+IlkYcpzrZ/ub9tlsadOdd8OClHO4yhX61Gd4st1
qmcRA9bV53gb0yB7t3JRMR+zcbdM014kdlHv9vnUP3KuTTnPom+5HZmLDHVR
06XKtLp5+1DNeLeTOZaL6r5/ZNNmGWMRM7uozZs8yN1qt/o88Dz3ryceXS6a
Omdo57GPHGHK+Qs9RqzMlLOTk5pk4YcVlUoEaR0TRfQqPdpJfXfsh1JdewVp
RTsF9M1Z10ld3XlQpcrxgrRR5j/cSS1u3C0oE6xVOLL02um7TurBpK9eDykZ
rCUb1HRNC68AUdWcwSfDTxbMkD1QVHXODx7XvFW/Nn+gRCePiG58oHGQ6KEh
xjNjgKj7/Zqs+zat7Oo+p+6/Ke4vinnCvHk/FWy/ZZzsnJgXvbHXZRdk3Vny
+WnZ/uYNWX/RRvOHFxi03k80eseyGWue2anJjG9XK39t2/r+jf07O6lz7Fti
rysdpHzcqn6+HiR73b5/Ep3q3rcQrHlcMU7Yc1K9iqWME5wwWMuUbt/UU2V1
6rDbefoPsgdrMx/NPjKxj05tMuberbd1QrR7m8rvnJRPp36+X/Ho+4vBWqdX
kakcBXXqB3OjQrBWMNftSj7ndCrmdK8zblcsc1HHBd+v1XNTqHIugOrxjznW
fJ71iCkn/UpGO6mFdxmPxGDt2sBk6ft116mBk12L/KqEaDmOpZwVGaZTJ6U0
fgJsWrYOXTtsjdKp49rPz1KzvE3571XNQch203ii1qnjKzmyd7yqnuNQ9mGl
zK/W6lTM81U93yYybtOmd1FbmvuL1HNP5qdcsnDyZie1w5Wfp346FaRlGdzx
wOtiOnX0tKlXXIHBWvOMo2O+8jrV+Nv6DLYp//te3627fDu5Tk1uvm4Ga4d6
b8m1r9BdqvvzvoFaeOyK68uM8RP1jXnQHQi6LVq+ff3l7SP8RFM1M+6g3xSN
PyfOkXedZPuZA80vizYxNyIdEXVfN2wVzZ1gRIIuOzxFRxkvZ0/3iqrm8G7Y
NitprO0nRSfkmeJbYvIF0dfmXNxrohfML/gl0YrmgXZeoqr5v0nM63tPUeMu
zc7O20VV84Ld9/+virYJMz6Q4Snaxfy6ThN1jwk/INrXu+uSMd8Eila0DTxS
ovQdUePUxmTfRIji/QJv3eaD32VOf0g0R678OePV2Sl6PuOBQ7su+YnifRmv
6t91ydxgdke04OFZhzMNdIjuyLI45iXoqmgT8333PtH/3osqaaLWspa1rGWt
v9ay/N/yf8v//zH+D+/nhfdz/4f3c/+H93P/V51DDu/n/g/v5/6vOp8c3s/9
H97P/R/ez/0f3s/9H95fLsgQERf9WrX/Ft7PC+/nhffzwvu5/6vmDsD7uf8r
5w786v3c/+H93P9V5yHD+y3//23+r3JReD/3f3g/9394P/d/eD/3f1xHcv+H
93P/h/dz/1edaw3v5/6vmscBj+Q+qTrHG97P/R/ez/1fNc8C1+vc/+Gm3FHh
/dz/VeeBw/u5/6vmL8D7uf/D+7n/w/u5/8M7uX/C+y3//2v4P7yf+z+8n/u/
6nGr+vmC93P/h/dz/4f3c/+H93P/h/dz/4d/cw+H93P/h/dz/1fNBVA9/uH9
3P/h/dz/4f3c/+H93P/h/dz/Vf9e1RwEeD/3f9UcB3g/93/V8y28n/u/6vUd
3s/9H37PPR/ez/1f9d/D+7n/w/t5Lf+3/N/yf8v/rWUta1nLWv/mZfn/38L/
P165fKlzjwAq/N/9ftNGhf+/My9k7FT4/6mr0RWaxrJT4f+76mX56lAxOxX+
b0xZbLzKToX/f25onCsQToX/JzW9IZxq+f/v4/+lzLmw96hf2v8P7+eF9/PC
+3lV55DA+3lV572ozieB9/PC+3nh/bzwft4/av8/vJ9Xde4QvJ9Xee7Qr97P
C+/nVZ2HAO/ntfz/f+f/vPB+Xng/L7yfV3VdCe/nhffzqs61gPfzqs7jgkfy
qs7xgPfzwvt5VedZqa7f4aa88H5e1Xkg8H5e1flL8H5eeD8vvJ8X3skL7+ft
ZYKfgwr/X9lxW+2Z6R1U+H+rPqO6JQ9yUOH/qnP+VZ9zMaa7J0vvpML/N5og
7aTC/09ELy5bfrCDCv9//rmNXm6Gg0r3Ab5OmWz6AQcV/l/EMar65zt2Kvy/
onGbuL+DCv8futc4ichBhf/n6epV8fwuBxX+n+/MwF4fNjuo8H/zZTibgwr/
n26+UNip3P954f28qset6ucL3s8L7+eF9/PC+3nh/bzwb154Py+8n1d1LpDq
8Q/v54X388L7eeH9vPB+XtW/V3UOEryfV3WOE7yfV/V8C+/nVb2+w/t54fe8
8H5e1X8P7+dV7f/3KXY867rJdir8f0nhJxd/OhlFhf+bx7gcslPh/87q5Q7d
CIykwv8dL9bkj/UqhPpn9f8EK8Y3rTHQlwr/z36+Q9k18QOo8P/wXqVHF14f
TIX/exiXWykDqZb/W/5v+b+1rGUta/0Dl+X/fwv//9L+/+qr6+7+uWyU2P/P
/R/ez/0f3s/9H97P/R/e7z7u2C72/5dtXPbVowt2y///Tf6/1HSGcLH/n/s/
vL/i7Ip5POpHWf7PCu/nhffnfp72ROluTrH/39CRVj662P/fL/3HbLVj62L/
f0g633d7/ByW/1v+b/m/5f//Mf+H93P/h/dz/4f3c/9XnfOPxzX3f3g/9394
P/d/eD/3f3g/9394P/d/eD/3f3g/9394P/d/eD/3f3g/9394P/f/L+3/t/zf
8v9/ov9/af8/9394P/d/eD/3f3g/9394f86UHU5VuxP5p/V/a/+/5f+W/1vL
WtaylrX+beu3zvlV3C/wNUF+iaj7+umiqDnGaX2gaKjpNH6iKYy3Z72viXZJ
3yruhFnHRdv2NSalBYk2jfVwvWfgQ9F6nXJuPFBBF91QzZjkt1d0SaOuR2Zn
PCK6xry+PCg6yIS+FaI5zPcXe0RVc3lUjr3jvN2j/9mrovfMeUp+ol2j6h3v
G+Avqpozu/HzgFozDvr+j3v27FczBt7wE1Xd3/k0xSMizvprorai76vMjXtS
dNTWYhd9ah0XdXvbIVHVvKq652Ys8phyVrSFeZ3kLepVKe/WWrl8RNua7099
RT+cqJ8/Xcvbou55rddF17TMM39S6FXRCGPMWQHZwpXeTdzz/IZovX058rZO
EU7F9/HKyrjnk33lpBpT8dKNDNQKJQt0jR3somJOqzE1LP1zF7VKle8X5G8b
phlT/1qMd1HNY2UGhmoZyrb9YdN2F3VQ8nE9q14K1bx+3GZ/Xs71X72ersA9
p00zppVlfqhTX78JKVz8W5sWVNa44aVTH6XwapLzfbDW9Oy1A0XjuajG1XKr
iTY6r4ef27PSFmvQrh8iqbiuD76z9GyScveoI/aPGTRrcJDmHm8pa/41GgaI
fvYP63l7gr+ocTdh9UZf0evVH8Rc4t8Wdc8/vEOFL63dZ0wi16ljYt37KYFm
07ZUHDo8vGI0dZY5KDNMW1KkWcxXxkV1s2iolipFk23r+0dTe1zs41m+Sbh2
LteHLj2fuahnzeuyMOXchEQr7fWz9tSpzYPm/1KqWog2pZUxSTdAdKo5t81b
1DdfuR7Lah6TNeeSHRCt+3RE9jzPj4h+yL9ov/fWE6LuuaAHRevGThpzpeop
6m3etzwgWnxYqVMN5nmKdlnoKv843v+n5vPoJtG6uSf3LbfjlCjmiPIaU0N3
a05qzot5CzV5Gaj5HLnwtGVyFzU8WeNqW3+0aW8qGVfy0dSimRtNufxDzPcr
TZXhmq+L2vJGjUaj0oYpH1cPZjWZtmCEi2pM+87QNVSr/aaDf/x8LurNRVMS
fH3RpuUvf31htmQ6dVHqTtPKLgpW/v6qc/VV5/+r/nvVOdh36swaV6uoTnWP
VQ/WzGMuiriomDe9MHqt6158FxVzgZNXrN2keiIXtbP5vsKm7TlVaHzGAS6q
cXpP4aah2vqpabL0qBtNjXkSXn0xXrhW/FJJj+fdXNT1hYo571SOeV41B8zq
1Ep1jlR2Tg359XNETmrBxgvCctUL1swvR2snNWXt9s8P5ArS0gyvN2nZYicV
c2MxZ5fP230+5lCydj87qZjrqponWyCw9IGvIgNFMaeXd26d9RFL2vqLnqvQ
wXNRmQDR4aVz1On1daBoPdNRAkQxR5fXvJs5PlB0SnhUgR3D/EWTNzFP1BEN
/UZfneWR7AJjDHAzWdV5QTEPPuPGpajq67O7TM4930XZqSuSJTl9upy/9nWp
KSMb1HNQjT91ccIAbfHV5w/eLnVSe5TcX+7RhiDl46e1039uCU2nPu1r3PgP
Vv7cpT/1qfWkKjp1YMarqd//pD5/fuJEn9g/TtWpmCd7ZsfGcjWn61TMh61n
3G7M6KJizvjhmxXi3Gjrou6obLzhCNXWZjtSZ0lhnTo2spQx0ldLseuZ362m
OtVk7wwhWtQ8YwCxTjV0u00+m2a8+130XKdirvqotpfyLaznopZo1exQxkSh
ynPszbdrq3TqXv9nV7LtCtEq//Ltxm2zdOoJ84ZaiJb45aJRbTrr1NZznrTY
VSpEi7X2dqYz3k5qzEXNyqHxg7WYN1XJzk53Up/VvzRp+OQgLe+dTN0daXTq
3I6fC3mtC1Y+76n+/o77jyd9769TMVdd9by9I55Prs1jXdSFxstSv1Dl123o
8S65+m7TqXnTzNl1+3yIVjK7vV+Rji7qVvc3SDsweHbMM7yLivnFy3P3S3x/
3F0q5qS/MvcXRFCXmvNk/bW+DRP0bXNcdsnU/l+tvX1d1MvcuCTrvh9+TTTb
kyxBzxdeFH12OuBDuNcJUdX7lrjFW8w82+O06JI2e7vWrnVB9l6Wojbv66Lm
sZA+AaIR45d4x/ysi374YJyo6SeqOi+0dMHFaS5O9BRN4rl96Tebjoq+nO7t
eS3RYVEPYyz6wn2i7n1VV0UHrev3MGTaEdFYNuPyYLpoCvP+w0JR9/v6y6Lj
e20+e6jpPdGs6ybXy3cgTNS4usl41SGaY0JIQw+Pa6Lu+67HRG3d481ed/Kc
qHkMWtIIUfc+KW9R82nHx1fUff/HLpr5YIat6xIEiaqul/9olrKWtaxlLWv9
zsvyf8v/Lf//2/m/6vsI7+f+D+/n/g/v5/4P7+f+D+8X/v+r93P/h/dz/4f3
c/+H93P/V53br9rXB+/n/aP8X7W/FNffwlF/9X7u//B+7v/wfu7/8H7u/6q5
CfB+y/9/X/+H93P/h/dz/4f3c/+H93P/Vz2u4P3c/+H93P/h/dz/Vb+/6lx9
1fn/qv9edQ423Is7GLyf+z+8n/s/vJ/7P7yf+z+8n/s/vJ/7P7yf+z+8lvst
vJ/7P7yf+z+8n/s/vJ/X8v8/1v/h/dz/4f3c/+H93P9Vjx94P/d/1c8dvJ/7
v+rnDt7P/R/ez/0f3s/9H97P/R/ez/0f3s/9H97P/R/ez/0fbs0dW3WOPbyf
+z+8n/s/vJ/7P7yf+z+8n/s/vJ/7v+p5T/X3h/dz/1c9b8P7uf+rvm7wfu7/
8H7u//B+7v/w/nE7L+4pk9NJv4b381r+b/m/5f+W/1vLWtaylrW+sCz//1v4
f6kFc5+e2BJEhf9XjT5Uu1jJcCr83/25zwgq/F+1bzxWUeMD/mFUOL/qf3e/
Lw6n/tX83z0vLZgK//doYHxhbFT4v/v4m1Aq/L9j4mpdkw0Kpf6r/t9wVNqw
mu2CqPB/Q6GKXoikfmn/P7yfF97PC+/nhffzwvt5yf9Z4f288H5eeD+v6tye
37r//9uS38Vuv99Jhf//0jfditz9HFT4f+TymV89iuugwv9f3Nt7v0k6OxX+
n2ri0iLNzkZRv7T/H9ffvPB+Xng/L7yfF97Pqzo3Cd7Pa/n/7+P/vPB+Xng/
L7yfV/W4gvfzwvt54f28qt9fda6O6vwf1X+vOgcD7sUL7+eF9/PC+3nh/bzw
fl54Py+8nxdeywvv54X388L7eVX+H/OXzdy2lE6F/w9fcSTv1DJOKvzfOB2n
/lwHFf6fx//70w2f26nwba3+t3kbdHFQ4f+rjGMJrzmo8H/j1SplUwcV/n92
rXFHzEGF/9d6vKfg4LhOKvw/Z5Yk3UI+26nw/96tnmat+MROhf/fjHm2SVnJ
QYX/b594odmjp3Yq/F81LyBb04OHk59zUOH/qq8PvJ8X3s8L7+dVPX7g/byq
nzt4P6/q5w7ezwvv54X388L7eeH9vPB+Xng/L7yfF27NqzrHBt7PC+/nhffz
wvt54f288H5e1fOe6u8P7+dVPW/D+3lVXzd4Py+8nxfez/tb9/+nNQ+SdVDh
/9MWjJj//ehIKvzfd+KxTTXaRlLh/8apnhmnBlPh/z9t2Xn8Q8zzHAr/X5u1
ScOTZXyp/6r/7wobPDHvfX8q/L9Wz01tT4yMpML/u89ZMnDIHgcV/t+ov/GM
4KDC/zua74PCqJb/W/5v+b+1rGUta/0Dl+X/fwv//9L+/9vGqe1j7WL/f8r1
HgUrFHOI/f8tjcvi7+1i/3/xfcaFjl3s9+f/O7zfvIzebf/L+T+8v+/B2LUa
37kn9v8bVyEtkkWJ/f9zM9+rUvV2lNj/b75dXxUl/N8cp/B95P96/z/3f9X3
8Z/m/1/a/595epv4dSc4xf5/7v/wfu7/8H7u//B+7v/wfu7/X9r/b/m/5f9/
Bv//rfv/Lf//a/j/l/b/c/+H93P/h2dz34b3c/+H93P/h/dz/4f3c/+H93P/
h/dz/4f3c/+H93P/h/dz/1fNC4D3c///0v5/y/8t/7f8P1Ts/+eF9xeaeS3t
Jadd7P/n/g/v5/4P7+f+D+/P9UP8KrdyR/5p9v9z/4f3c/+H93P/t/b/W/5v
+b+1rGUta/2DlmrOr2qey3DXw6PDO8kq7gt4zZ2d+/Kz9aKq1ynV56+rdzde
EW+JuueVXRF1Xz9dEM2+pNzavtPuiH5KvazdyNYPRc3LoXR3Rd1zejeKuudM
nhedZL7eHhR9Zr7BXinqaUznHLRL1Nl9z5aepQ6LqubVjjIPALggumtvA9er
nj6ipaOTFO514paoai7n1I+tMtcI8BE1pgEuKSfrnkN7S3RZzfQJbj+5KvrM
nIN6WPS+OTBwu6jbyQ6K2sz93MdEY74JqZoNuiR6y2vIskclfEUxb5DX5IkW
ssW+N74RsmFrtctVWwaKtsp011bjlb/o3Js1jT9K9PHyYlkOjb8t6jIfFxHU
aWUXtXL099empf2h8zfxndR6t258U/WHwF/3M7momPuZ5/71xKPLRVMxv7Jo
nympj33vomL+r+bX/E2cJy7qOfO6KUxbU7VLzbFrXdRROWY//mm/eo5AuvCd
LXrtc1Exf/aMcRssSyQ1c5GhMd+aYM182GWNpK6amLl8rhHqOYCYb8k7I52r
bcy1j+hac7Cyv6jbj2VV5//0HvkpzS8t/ETXbTmXocEJX9EGBcY2Hj0mgvr4
vSF2/lpbbfKJfuV1qoEe/nqw9oNeOKTbhmhq9QG5Yp4Sw7Uq8d/Xrbwnmnpy
/5lXg33CtdPeDUoXeuOinijd7WbjbmHa3BLavD5pXFTjbsjNtTZtzvklie/c
dFExB3b8+lGfR79yUSvYT3Z90jlMq5wvkcfH1MGii18cnNk4x2XR8uZ1zHFR
lcM3Md3rkGib4fPiTXx6UNQ9X26XqGrunns++UFRlf/fP5IityvWMVHV33+q
6Y4HRWOZc56viB5pVjNwsstPds/8+M77TuquD65B52sHK8/hb925yNHmO13U
n77L7bvhaqgWdMV32Ne/6NSHxQ0psWmvzBubLmqhWjWL9M4Wqn0TOn3M2Aqy
qvm/qvmSqrmfS9d+0Fq906l9715wbO1l095lTp964lKdWjL8zaw360O0pMbL
bUoXFfMuVfMOVOeKq+aJrGrefuXNRzp1mHG8TgObVmaM8YBxUTGPOH+NMeUP
F4+mLixwNvC74DAtycDHG8dcc1Hb/LBp+9Ovw7Q4Ma/ymQq7qOaxHT427WJo
u5MRdhcVc5+PpXoadjhuNHWf99aM3SaEacMMtmvjohZ4uCRWkTyh2qHzs9qX
KeekbjcPDAnUHk7YcOddcyc1jTF2PkuQ9vVF26tzsZ3UhubzUKAW3mGq37Jx
Tqp5+2dAkFbhyNJrp+86qZgvrDpXsGl342SYANGDMe8Gm3gHiiZ/tPvyiIJB
ou55hgGinuk9thTtJNv8XNE9CT74i6Yq/sum6Xd9Rd3e5i+qOncI84R5Y75Y
j+su9RON3rFsxppndirm/M5PuWTh5M1OKuauquZfqB7/7s9/6tTt5j6QEC2X
cbsxs06dsX2D/7d7gpXn8JsvV01d1KIGX6UP1V72OH4iwWadmm9gxZBEp2J+
jg++WbK9jk7tneDEvLpxQ7RJYeOK3RqvU41dOEsHhWiGOi5K4KJGXtq7KvN0
m/Z0f9suiz11Kp5P/PvmrHvzKxdVH5Pk5aJRNu3+uvphkZd0aoqoLhlOfQrR
bhnjilvp1DtPN9c8+02IZltUMNftSjr15yvZYn6Eg7Wb7VJfyJTORcXccNX8
gmVJja+sTu1/Nn302dfBmjnGu6VO7bzml7D22UO0wT7tR51+6aTmqvpDiyGd
gpXzONqvKuHaXkKnurdFBGsRIXffH3fp1LfNZrTtW92mjb42YGeWxTq1VNnt
R0uuDNFizwy83HeMTjXfTfYJ0VoNy5946xud+nhOpjE1utu045NXdKjWwEX1
3PE+y7ikocq5MAV/HH2m7dc61Xg22DMlWHs/4op2cr5ONd+WLg7RytV6VKf4
cp2K+dT1sxoTkXWq+3OZIVqv79Zdvp1cp2JecMw31SdpDSc1h/kGK1AbMmyE
R5kHd6m4T6o6Z8x9W8JXtHDwp61HfG6Jdmi952P9vjdEn5mPoyui+c2NQBdF
TxvHau29JHrd/cIlaj4bZ/MTTWw8ez/3FfVcY/yE+Ilmcg+QFd3gGXjylP9V
0WEtjBfQI6IJzPHth0Td+zuOi0Z0fHBj0NADor7m8+J50T3mdfYB0VijjPuN
rUW71F43ctXEOaKqfSCqfTKqedyF2m8Z92O3O6Lx+8y/2CmWn6jq6xArbczT
aaNzomN6hF773C1I1HzbnzRY9Nnzu3Wfjjgn2vSrxqtm37gnWnlZ46v7u0eK
quY452iWfv+DIxtE/2jGspa1rGUta/3GZfm/5f+W///t/B/ev/lat3fDPtjp
1/B+7v/wfu7/8H7u//B+7v/wfu7/8H7u/6o5AvB+7v/wfl54P+9f3f/h/bzw
fu7/8H7u//B+7v/wfu7/8H7u//B+7v/wfsv//xj/h/dz/1ftw4f3c/+H93P/
h/fz/t7+D+/nhfdz/4d3cv9UzTtQnSuumicC7+f+D+/n/g/v5/4P7+f+D+/n
/g/v5/4P7+f+D+/n/g/v5/4P7+f+D+/n/g/v5/4P7+e1/P+/9394P/d/eD/3
f9X8C9XjH97P/R/ez/1fdQ4/vJ/7P7yf+z+8n/s/vJ/7P7yf+z+eP7j/w/u5
/8P7uf/D+7n/w/u5/8P7uf+r5hfA+7n/w/u5/8P7uf/D+7n/w/u5/8P7uf/D
+7n/w/u5/8P7uf/D+7n/q+bCwPu5/8P7uf/D+7n/w/u5/8P7uf/D+7n/q+ak
WP5v+b/l/5b/W8ta1rLWP25Z/m/5/z/Y/42rgT0fA6jw/6I/zXMOeBNKhf+f
iF5ctvxgBxX+P8Y8yMhBhf+P7JY8qP4IBxX+3+DjSc9vnjmo8P85lWZXzOPh
oML/ty05s71yFTsV/t8+Tb60z7ZEUb+0/x/ezwvv54X388L7eeH9vPB+XtU5
QvB+3t+6/3/UXeMdvJMK/+/lMiZ+Oqjw/80Vko39qqadCv83DgVZE2anwv+T
1Vz08WMZBxX+rzr/P833q2yxBtmp8P/9sca2K/CNnfql/f/wfl54Py+8nxfe
zwvv54X388L7eS3//8/6P6/qHH54Py+8n1fl/z+v6pS4WlcXFf6v2q9r/rjd
0Knw/4LmB9t16v/U/3nhnbyq845U54qozhOD9/PC+3nh/bzwfl54Py+8nxfe
zwvv54X388L7eeH9vPB+XpX/4zxBfq7gzMiwpA9rO6jw/xMj7x/eXcBJhf9H
5/rZ82w7JxX+PzxBlx0pxjuo8P/yFSttWDXMQYX/J5xfcsuMGg4q/L/PlRXr
r5S2U+H/7nO37VT4v2ruQBHHqOqf79ip8H/v0cZAVDuV+z8vvJ9Xdf6V6vEP
7+eF9/OqzuGB9/PC+3nh/bzwfl54P6/qfiK8nxfezwvv54X388L7eVXnF8H7
eeH9vPB+XtV5XPB+Xng/L7yfF97PC+/nhffzqs6Fg/fzwvt54f288H5eeD8v
vJ9Xtf9fNWfk4dBnZbqXsFPh/w8dq449GxVFhf8nbfdzzFu0ECr8330/KYgK
/3/ZLkGqoZMCqPB/85jXLIFU+P/lUlsfV9GjqPD/rMHGiVF2KvxfP7Mo4klV
OxX+f+zDvDmzztmp8P/R5o3fcKrl/5b/W/5vLWtZy1p/42X5v+X/v6P/J6sQ
1bJ36qg/rf9/af//1fktMo6+GyX2/3P/h/dz/4f3c/+H93P/h/dz//9X9//z
/tX9H97/5FKLI45PTrH/v8jT/A+XxNLF/n/u//B+7v/wfu7/8H7u//B+7v+q
8//h/dz/4f3c/+H9wYVuNPqU3WH5v+X/f6j/q87/4f6v2q8L7+f+D++3/P/v
6f+quULwfu7/8H7u//B+7v/wfu7/8H7u//B+7v/wfu7/8H7u/6q5A/B+7v9f
2v9v+b/l/5b///v9XzUnRTVnhLyf+T+8n/s/vL9czekNW22IFPv/y5sDBO79
j/f/Z+3QtcPWqDti/z/3f3g/9394P/d/eD/3f3h//yQNR3res1v+b/m/5f/W
spa1rPV3Xqo5v7/R/z2W7dgT/WisrOlPp0R/+GVu3gV6gKj286cXDzv6it51
GlJ8TVT1ummo6eI7/qLmuKyW0aJPn6VpUXGWLprDnON0SNSjfIYr+z5PEx2V
qODaS98fEfUyr9dXiQ4ynX6p6KiBuUeeWnBQ1PwY9ZPzoqo5toV3Vf26c42j
ooEGi6c6KZomS4+6yWccFXXPGT4m6jTeBj84IVp6WrVqn0Z5iTaIuepPVVk2
MLUBDqdFZy7ymJKt10FRjwb7cuRt7Sma4snwkwUz7Bf1MudIHxZ1//uuiPpE
Zv3Rf5OfaC1zDlKA6KLJm5M8iPIV3VY8v3f25P6iFfN41P82byTV/ecG/3rd
c4/a5PPUrcF3gn69br5HTWDeMAjSJp/0KxmdxEmtlaH/tavzA7WW73yiJs9z
Uh8t7ZHv84IgbWqZwh0SjtSpxi6jJN1CtAODZwcv6OKiYs7ap9Nj0m+p4KJW
yXpucbX7Ns3rx2325+Vc/9Vf5/auvnXkwtOYnyfU2G0VnCNcec6/MQ0yUcIo
KjxtZpLVezz8AkQLVig2521cf1HV+TnNrhkbLWV3u6bnXPaVv+irRxdmexXz
E23b0p5gxXhZ/UHTsTWv+YtGvH368+hGgaKqcydUz3vun28/Ud272tQp3zmp
ico07BerfJAWO06xn+Y5XdRaO/NVT1s1TMvaK1XcSnHvU8cONiY9RmjmuN/V
0dQr7gGfmjG1LV3paOr8W8l25L0TpsV9WmpV5WXR1LoTS6wYsjFcS5mn/i/P
TrmoXZ90bhf+OFTpVCcXpHo3u8N10ZfmfYyjoqr7m6q56o/NudYHRN3X2YdE
72dK/Ckiz2FRmzln/oCo6n5BAuN4pf1HRVuY3+eDot19Dnd8Ofa4aBvT7WT3
RFQaFhZ0SVR1Lorq3GnV98VQz0TRIaIXzfl7sioHU/mzytuPOIxnhhBR1X1D
1f3HXV3GNbk7zEVd0v1C3KOdQrUMZdv+sGm7i4r548ar0sLSLqpxNyjTXZv2
VNt/N14fFzVrrvw549VRzwUYe3hoixs1XNSySQ4kWfjBpsV88dJHJIumuue5
h2ntzQGX0dQ3T+ZOHJY1XKuU+dXaee9d1GMxr1Jpvg/TzNuIu13UAeaBRaHa
gNixr788pFOz7PB5Y48I0U7dMe4cuKhHO7Ud8fyzTUs0Nfr1jfQuaktzfr1N
M/9aq3Qq5pZiDjqfh35vU/mdk/Lp1M/3Kx59fzFYm7vxQbLX7XVqO9ca4ygy
LehUDp/BNgf1ofnzFag1PZQx0Uq7g+pI+HFkoYqBWtJAV8xTlIPavv7y9hFN
A7V0vu/2+M1xUvvVOHNmzdwgzbgrtCKZk2renl0cqK0zbqsvCRAdbB4cFSR6
I9a1BSdSB4hWivnXLQvyEzWP0dsTIKp6fjZOXUpywEk1kC1liPp1WfU5ms2N
B1wvPMtFnV5929tmM0K19gVndM/8UKe+dgOxNtQ4zuWJk5rvpTGAPlh7feRY
1X2jHdQiyY0NGwGacVck8Qsndcsj28Pk7YO1HMdSzooM06mTUhpvsGzai1dJ
y49r76LmWWCcJBiqdcu7aunYGS7q188+zn82JVTr9fOLGjW8dWqy6QcexTxF
ayVK3zk/YbdO3ZTYeKCGKM+N3zl85NZiF3XqovnH97X5JUS79G28yn0Kuqje
ZQPDb1yzaf0Xt67bu5+Lmsl71MtrDUO1bDeT3C1RQKfC90Y3SjPpfT4ntaTH
825PLwUqv7+5n6c9UbqbkzprxqugrpWClJ83NLetpHdSjXfn6TYHKucvzDeO
b0rqonY8vS2k+kKbZr7b8XFSjbuMq1IEa6nibfiUsL5ONU7RSZo4RDthjIP9
Uacad9+XrgnRDjW9F7rjJyd1W+2Z6eu3+K/9FnzfhWoOS8wPc/2sPXVq86D5
v5SqFqJ8/JQ1nyic1L2tl639oAVrDealKLZsh5NqO2PcsA9SzpswpqW33qhT
d2ZZ3H/HMfXcB9XjzaOr8R2KoLrHSvtrLXIXmP45h6/ojmZrT5zs7yPqfh9/
VdQ9H1s2/7RVecvGuimKP593WNW+L78p5Sf6/WjvhPur3xC1Xfvcbem9m6Kq
805rn5sRc8V1S3RCnbfnb0b6iCZJ3PpCx9VXRL2rP4j5kTonOnP8rvzbkx8X
HWRchhQ9JZqimTGZ+7RofvMBv0HUw/SJCaLeOYbN3TD1sGjD1JljNSrjK7pg
+brvKhaPFJ0e0GXwhrL3RI2bbKuH+4p2Sd8q7oRZx0WTmPdnvETjLm3U9cjs
a6K+FyrPWZ89TNR9P+S8aK7NY4v2mRIgeme9ORlaNMNm4wr8nGjpdB9O1M9/
VPSPZixrWcta1rLWb1yW/1v+b/n/7+7/h2oXK5nax06/hve73VunX8P7E+y7
s2HAYed//fpX74+5qH+id3fSr+H93P/h/dz/4QrcGeD93P/h/cL/f/V+7v/w
fu7/qnP+VedpW/7/3/s/vIH7A7yf+z+8n/s/vJ/7P7yf+z+8n/s/vN/y/z+X
/6vOnVadHw7vLzRhQu8EJ/S/nP/D+7n/w/u5/8P7uf/D+7n/q+YCwPu5/8P7
uf/D+7n/w/u5/8P7uf/D+7n/w/u5/8P7uf/D+7n/w/u5/8P7uf/D+7n/w/u5
/8P7uf/D+3nh/bzwft7/lP8/fFqv8/TVDvq16vkZ3s/9X/W6rPocDbyf+z+8
n/s/vJ/7P7yf+z+8n/s/vJb7Lbyf+z+8n/s/vJ/7P/yVe6zq3Hh4P/d/eD/3
f3g/9394P/d/eD/3f9X3F97P/V/1eUN4P/d/1fwFeD/3f3g/9394P/d/eD/3
f3g/93/V5y5Vc1jg/dz/VY8feD/3f3g/93/VvAl4P/d/1dwH1eNN5e2W/1v+
b/m/5f/Wspa1rPWXX5b/W/7/D/Z/t78HUeH/5sd0l9mp8P/YxuV3awcV/r/j
p36BI8vaqfB/uD/3/3/X/n94Py+8nxeuwAvv54X385L/s8L7eVXn/Kj2/285
3HtLrn0OKvz/5fWDP36+aqfC/1Xn5ydMbRvTIzSKCv8/uvFup0ZX7FT4fzvj
47sd7VT4f5K2c5s1nmqnwv+b5bo0J09BBxX+f2tXqjpejx1U+L/q3OnP2wyJ
iKLiea/CLj1nvtN2Kvd/Xng/L7yfF97PC+/nhffzwvt5Lf//c/g/L9yf+z/c
n/t/9QPGgQ86Ff6P+Zd8DibmzvL5s5izy+ftGqez9F2oU+H/mBfO54Zj7jif
Pw7v54X388L7eeH9vKpzgeD9vPB+Xng/L7yfl/b7s8L7eeH9vPB+Xng/L7yf
F97PC+/nhffzwvt5/13+X+zW+Cd7Fzio8P8MhXaGJpnmpML/L+/7nLZLYwcV
/j9hVgbPRp52Kvwf7q/yf154P6/qdVl17g28nxfezwvv54X388L7eeG1vPB+
Xng/L7yfF/7Kqzo3Bt7PC+/nhffzqs73gPfzqr6/8H5eeD8vvJ9Xdf4SvJ8X
3s8L7+eF9/PC+3nh/byqc9jg/byqxw+8nxfez6s6bwrez6s690n1eFPt/495
M5gyTnAUFf6fcMrkDz/niKLC/93zjIOo8P+yD407vEFU+L9xytDCy5FU+H8T
7zSdHxZ3UPH3MU5FS9PZToX/nzRvmERS4f/BOTJv7/0xkgr/xzmn/LzTOOb5
taFU+H9289wXG9Xyf8v/rWUta1nLWn+hZfm/5f//YP+H919/2Ntj/q27Yv8/
9394P/d/eD/3/y/t/+eF9/PC+3n/6v7/pf3/3P/h/dz/Vefnw/u5/8P7uf/D
+7n/w/u5/8P7uf/D+7n/q86dxvMc9394v+X/lv//O/3/S+f/qPb/c/+H93P/
h/dz/4f3c/+H93P/p/3+zP+/tP/f8n/L///v/f/c/+H93P/h/dz/4f3c/7+0
/9/yf8v/Lf//6/k/fJ17O7yf+z+8n/s/vH/50PjLDnW4J/b/L83Qus+obvfE
/n/u/6q/D7yf+z+8n/s/vJ/7v2reGby/ZLbxQ5r3jLL2/1v+b/m/taxlLWv9
lZZqzq9qKebpqOb8RuYr12NZzRmiK3amtF9OdVm0c+JqXZMN8hM9HPJgV5dx
vqINzEGul0U9TCfzEr35jTFI667oLXv0jOkLH4lO7ltuR+YiDtEN5vvB7aIZ
zLGgnqKexsfY6+8VTWHOxVop6p5XuVl0rn1L7HWlj4jG/CEp/g97dx3YxpU1
bDxpmJmZmRknzMzMzA0zMzfMcZiZHHbigO2YWTLEljQjhxkb+DRXPWe/95y9
b5q+3S3N/POsu2lDljTzmzv3jM1xg3X10Iy+ZVyPsSYVc1wPsTrnIZ9mlXl7
Ve9uGW5m389atPijDx8TH2WVzdmMqXQ189xb21j1ac47Lp1gjWuTudmziIus
NvHA9AXWnO8Gzz1+xY21S9q1JRZ73mbdcSnPkElfbrGGjmpTpZvmzeqc/xnI
OknMVeYdLnwiCpsy0+7R2e4GKX3arFZyF1Sx8cV8z1Dl/ZERP71sqWHF+MG0
Jun+6tny9SrZtqsdO05dcGVrkQjputk7AtQ1rM/j8pXqXQlX4nY0N8fcUrEw
L6+LX1iVmOcq9kXdKUEXO4UrLxf0P/8sgx1byDkYVxGn6Tks2DNibrVZGe+n
P3gdyppM2ZTtSv9A1qefir09tNubtbSYs+rPKsZqbuHttVqr+jgRL8x1pIU5
vbQwr5JW9uPXn+mxak5t3rhY/Uzdj1X2nHjOrhVGZvnsy+q8nxOFXTa4mWma
V5CSLvvW9t0327D9w74mP3kgRLkx88iKXQ80rLtL3lk1m5iVeFVD6tzZY8fW
yTDe8R0UoXisupihfYiGheuLnNNTdV3ezo4Vtw2zRyg7Nqf58fwGDTs9NK7h
oN0mRVegbPM1LMyVrlev/7hhJYJYi8Y0bf/jh8usSW/Ver75w0nWjMLbzrDK
7tsGLy+nrBh6lnX8xdu5Gm4/zSpzeP0u38Mal1llzn9WvA4usW5JeCN1/JS3
WWHuH63r5p77Gy2+wCq7Tpw86vr02E0qtszsJjoZST28XlCuxxfM4azit501
jFU2L6C414MEjc7yircpP96Ita+zzCvGu8N/1oXd9U2ssjmnMi+VOdWTDocr
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
8H5a8H5a8H5a8H5a2b4osvti4P204P20idrrn5Q2LPh/gvf6zh02LPg/zNml
83b13b9SdbVhwf9HLjrgEtjUhgX/B/eX+T8teD8teD8teD8teD8teD8teD+t
bN8q8H5a8H5a8H5a8H5a8H5amUPK9tsB76cF76eV7d8l268SvJ8WvJ8WvJ8W
vJ8WvJ8WvJ8WvJ8WvJ9W9v4A3k8rW/8/bP+T3ffdY7Dg/2dqzFo643AMFvx/
9ONdUz1HxWLB/02Os8d2B2OxcH6YpdLrhR4nY7Hg//W2NjnyonIsFvx/5oeb
5SLexWLB/2XzAqKPzutUs70FC/6v+Otn3rFY8P+Mw7aExxtjwYL/zys+/ey4
DlYs+P/Zdg2C52omrOH/hv8bh3EYh3EYx3/hMPzf8P9/gP+D97fqMiyq54MI
tv7/ofiB0Wz9f+rqjdrUSx7N1v9T/wfvp/4P3k/9H7yf9u/q/+D9tLJ1nuD9
1P/B+6n/g/dT/wfvH78i0ayn6S1s/f+qiSuHTfGIZev/qf+D31PPB++n/i/7
8eD91P/heo5e38n2iQXvp/4P3k9r+L/h/7/G/7+1/w/1f/B+6v+yeQHg/dT/
wfup/8vWOYP3U/8H76f+D95P/V+2/4/h/4b//xP8H7yf+j94P/V/8H7q/7/X
/j+G/xv+/1f0/2+t/6f+D95P/R+8n/q/7PwQvJ/6P3g/9X/wfur/snkB4P3U
/8H7qf+D91P/B++n/i+bm2D4v+H/xmEcxmEcxvE7HOLzsIHCK5nnK+sH/d8b
wDt1W9O0j/uwzr7b3K9srsWssv03ZOdRR5PqVyw+rM55rbdY85sWOk5dPVlP
lKzxYdZRC+v9Xq3uNBumsYrtKVYGsM6PiC12cPxp1qqD+1S798aVNa9w/SWs
s8V9kq2s8aa+Kd1k3FFW2RxhcVqZ4wJrEzGHdg/rOuGOp1kPirlYd1kX6+Pt
HnqxrtM5Kdtt1vc1iySv8/kMa15xYbWf9f2ufLbK+U+x6tOcs7W8xupasb93
6/5erGfFfRUfVrcdnZYu7ubPKk5ftgWwxhtzeM7yxn6sXXbp4nCPVUz9m+3N
mkR4ZDi2VYmGDUoN8VUEj26NwMLcQL/1+hW7DXvf933jsFMhSv1tOnhrWOfp
W7hS+WGNHG+2q1jnvDD5+tj+hfUzQg0Lc/eKnSl4qc5kDbvGORhXqaJv/9Ja
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
y6vMWPB/p2eFYcH/ra+2FY33JgwL/p8gtb4RiAkL/i/b/7/RjMF7rp0xYcH/
xx07OS1knhUL/u+4aN5UcIQVC/4vm/vQqEfno5+bW7Hf8v+rB/U/qBAs+L/g
hRKx2G+t/wfvpwXvpwXvpwXvp5XtGwCOSAveT2v4/x/r/7J9+2XrumXrwE8u
XFAi9riKBf8Xt41Kq1jw/y3tu2/2fqRiwf9h7imdf7quVLtrnqc0LPg/zDWn
883D8s3eVe+1igX/17Vv+H4VC/5f8LMuRBoW/B/cn/o/uL/M/2ll+26B99OC
99OC99OC99PK9oWTvU5l93dklX1egPfTgvfTyvYHA++nBe+nle1fB95PK9uf
B7yfFryfFryfFryfFryfFryfVrYvDcyXpXNmpx9yP1opnw0L/j9/X2jU+ms2
LPj/ig3VHJ/oViz4/4l407oVy2/Bgv/rr/4ntS1Y8H/vBmfGPvOPxf7Z/Z9W
dv4P3k8L3k8rm6cM3k8L3k8L3k8L3k8L3k8r2+8IvJ8WvJ8WvJ9Wtr+TbF8g
8H5a8H5a2Rxq8H5a2b5D4P204P204P204P20svX/b1rrG5HGYsH/m2/sHtk2
OBYL/i893/vO9f/vXK486FHChgX/n5C0z8G0M6xY8H+xrVVGKxb8/8nFvala
RVqw4P/Lc9yvVdsvFgv+XzyV/kBnLBb8v+nRTuX25I/Fgv9/balviBSBNfzf
8H/jMA7jMA7j+A2H4f+G/3+H/2caru9Yfv8P9/9vrf/XdzPt3CuGrf9n/g/r
/on/g/dT/wfvp/4P3k/9H7yf+j94f4UpJXeu7B3L1v/T/tX9X7Z/NXg/9X/w
fur/4P2PfXf221ncwtb/N7nR1nHFFMPW/+dL1+Ny3agYtv6/fO4ZY9sPimXr
/+n+/+D9QR1vvHe5EsvW/1P/B++n/i+b+wDeL/P/Gon0DdotbP1/rrArC+42
v8/W/9PrQfB+WsP/Df//Pdb/U/+XrQMH76f+D95P/R+8n/o/eD/1f/B+6v/g
/dT/wfup/4P3U/8H76f+/737/xj+b/j/f9P/wfup/4P3U/8H76f+D95P/R+8
n/o/eD/1f/B+mf8/qd3MVmJsrOH/hv//Lf3/W+v/qf+D91P/l53vgfdfW1M3
LmvdWLb+PyZJhXmTWljY+n/q/+D91P/B+6n/g/dT/wfvp/4P3k/9H7yf+r9s
nprh/4b/G4dxGIdxGMd3HDLPF97cnFcy53f2BO3h+QmjWGX+79b6ytcrUzey
vh2U66xlcyCreIw6Ba/TS+6y3lq+1PFRf5317okBaas38md1ziVTWad7Be15
u9jCGqczQZdTrC7i+n4Lq2xObh0xZ8mFdZOY67iP1enle1jni/snrqwZxf2E
i6yyn7ed55Sut4q4sTYW654DWGX7n0SH13+zJiqQNbeYq+nOejKyxnhzyF7W
HndezP9y+RxrvJC93eeN8GaVff887ZimdLnjvNuV27U7rovA1kqnD6wMUJ76
D+3cPmskdtXuVsn82wUqG8Q86igsuO5zcT1nxv40d0/KB7H+ypoux/o1amjG
VhBzo/x/uW42Yz+K+xoBin+im+N+Vq3YWOGTwdL1tKm9tvqeu6lhe1aJH3/g
R5OyfvsnpdMHFQvz4KLLryzy+r6K/ZxUOx1bMVwpvqPYwGfF7FjxX/cwK+Hb
zF4DetmxzyPFhLBf9k2IxcI80Ige8wM2TI/Bdl72pMPhCmGKvktBy70hrDAH
jNal7irHGbkPa3aPya89W3qyvrwS9CnCjbegmC/tzSoeD0ntw2oR86W9WVNW
ydL3bCE/1gJ7ppUeOi+IVfb9P+Rll9q5rvO6Fm1VPKZpEKvsvy97Hid55OCK
U0r6sd4alsnxrReJHVDzo22/d6ASb7tf9qseNizMs8vTeHCSDms17Kxym8bu
2mpSXmzplaJuPw3rvH9qUkLqlnB859ixjwrndWmhREj3tc5y5/jXTH3s2NFl
ivQvVClCWTQtpsKrfBq21Zal9+67hv/y/IYd67yPEyl1s5Tb0tU40sybdbGY
y3eO9ah4vznL+lhAykXW2WL+5znWpHNck9SucJ11hxjg6MP6Op9vaKB6hzWy
54N7Y8adYi2Zbf7KdOvcWMd4lVxSOq0v66eLzYtm7ujH6pyD7cZa9YdBvYP9
77HONk8v4ztDxdbr4n5z/RjurdBShXRo5RWXl5l4ZfMiZXM/l/zQ5uv8faGs
vbf9bO6eJ4z1pnOQIGvUuKY5trmGsOrqmbJKGGvkkkPD7n42saYooU/KDGcN
/lzn8qsDvOJ25BAT69ux5Tu1O8ObLkzceWd9sKTNglUTNWwG8fluUqqXff4y
uomGPZvgcNMLiU3S16Ns/3/L5Hpfo5ZqWHEbcqnpl+e4NKy4fZ3bpJS9Vb7O
y/4admeJMraomiZl0JymN8/P1rApxcBjk5Lya928T+fYsc775hHSfy7bhzxf
kSvJR+ZXsXPF4PlQxfHh5xM7V8VeE+eZYdL9xsV474watkviJjO9t/9rbjSd
Hx27olaHMiYVC/NSszTvEPrqjYqFuaKN3vUITFxEw3r/NC9pEvdw6VyePa1H
OV7JGhbmMt9I0HbArFnqv3p4eMn34xzf7/Hfnm3XIJg10PkNw/pqdYZeCyoH
sMr285HNixQ//UZe2XljWTGA1Zc17Tu3wVp9b9bxEdXTxPzsw1pVuNE1XrHu
4CCrh7ixe5bVtuXC88kPLrI634fusJZ44v7sUrIYbNmfdy+MTuuJc1XpfNWO
YpC3Dfto/cAiX1eFSM/H+tVY/9A7RMXqd3nX5g2XztmR7cMfODxfE+/4Glad
mvL1T5PDldcDXS8m3aNii4yuHpb8cpjyJWDCiDeLVGyNxvoOU2HS+TtHL5eY
kW2Uht2cXX8Dkc+Hkv16CneZsCLRLA27or2YeC/93JHN0ZDt26+vElmdW8O2
e1PtffbT4b88P6linesowpS7GXs/LDtcxfp5L6ravXmY8iD12+4jU6rY9DfO
5QheEao4TlI2vT9iw4Y6/+Kk74eyuUszCs3zLzfXjHWu3/dXbn5IdMG9fTj2
lr6MKKePknvszSP+hc1YuG/16KP+yjdjlztvtCk59NPEjRHYK/3bdasYGKBE
td+R+1zjSOxM8fMHKg3F4PhIrPqg7bQGnoHK50klqq9bwNtZH5vdJRIrxvmu
DVRuNRtWuX6+CCys3xPLR7JHYOH83/GHvbF7JK/Tj/1ZZfsOLQ/v2tGS1IN1
xOgZPV5lvsYa9/WU1+jUB1jdFugX1NtZV+t/Ddt5T4r1VgdYy+rT1SvdYa0a
83xktbFurLL//vTuK3M2qOrK6ibWlRxm1T/dsr4KYm29WsldcEUEa9JL+jem
Oyucp9PK7nOlFN5zktUt26kzh2+dYpU6lfj32iisxmEcxmEcxvHbDsP/Df//
B/s/eD8teP8BfVvipxb8WrauG7z/4LMRwZMqW/Br8H5a8H79qndHJwt+Dd5P
/V+2nha8n/o/eD/1f7i+pNeb4P3U/8H7qf+D92et3NVxJajh1+D9KRxXdV16
q4b//0n8H7yfFryf+j94P/V/8H7q/+D91P9l+1rDdQP1f/B+6v/g/TL/p/99
w/9/X/8Hd6E1/P+P9X/wfur/4P3U/2WvF9n+/+D91P/B+6n/g29R7wLvp/5P
vR++lv1z2T7k4P3U/8H7qf/L9hsH76f+D95P/R+8n/o/eD/1f/B+6v+yuTzg
/cz/f/F+WsP//zv+D95P/R+8n/o/eD/1f9n5GHg/9X/ZnB3ZPvzg69Tbwfup
/4P3U/8H76f+D95P/V/2XJjs1wPeT/0fPmeo/8vmaMj27Qfvp/4P3k/9H7yf
+j94P/V/8H7q/7L3Q9ncJfD+Z8VarzIXsODX4P20sudWwPtpwftpwftpwftp
Zf4P3k8re35fdv5v+L/h///jMPzfOIzDOIzj9z0M/zf8//+rc3uXACz4f8In
+oYrFixcx8n2P6+dpHf9zHsisb+3/8dsevLzrZ/DsOD/Yrul9FYsfP90NuVX
t+a0Yv+s6//B+2ll+yqA99OC99PC9SUteD8teD/t967/D3x+J/fhjTYs+L9s
/U9ZP4t90cJw7H/L/9uK7/dwLPi/Kl7fJiz4/8uvXdQqi6xY8Hld01tUtGLh
+3/dgcZP0hWyYsH/r9Sr13/cMCv2W/7vnPsYggX/d5yMb921Ohb7rfX/4P20
4P204P204P20svX5susI8H5a8H5aY/3/H+v/MG+Vzl19q7PdNhUL/i+2LWij
YsH/h11p+TJ5MhUL/i++XKFiwf/3lnH3aZhVxYL/r/60qUa5jioW/P/GuJ/V
FHdtWPD/VrpC7LJhwf+b59LlSMWC/7d6NTrB4FsaFvxfEwPYVSz4fzN9e5ps
Ghb8f0ik/gC7hgX/j9Bfrjs1LPh/XLb9CRKUsWOp/9OC99PKXi+y/X/A+2nB
+2nBt2hxvT8p9f5vVbYPCXg/LXg/rWy/EfB+WvB+WvB+WvB+WvB+Wtm+fOD9
tDL/T1Nmw8GjdisW/F//y6/a0IoF/ze91XeysmDB/2X7+Z/Xt9tKZcGC/1ca
UK5ZrXQWLPi/7Lzx7+L/tOD9tOD9tLLzMfB+Wtk+e7J9eMDXacH7acH7aWX7
74H308r2+5L9esD7aWWfO7J9tGT79oD304L304L304L304L308reD2X7Lv5V
1v/3elh2eMukVuzvvf7fcfKe7dQZCxb8f0zY/kKT81qw4P/ThGdHYA3/N/zf
OIzDOIzDOP6Xw/B/w///zfr/oXX1jXgj2Pp/eh0n2/8cvJP65++9/t+lf8JC
e2Ni2Pp/6v/g/dT/wfu/6NvPH7Ww9f+04P204P2031r/T/tX8X/wflrwflrw
fur/cL6fcdiW8HhjLL96/b+4nM8a86v9/8H79Snr3Y1h/i+2R00Wy9b/h0/T
X+gxbP1//k99Bj1fGcvW/1P/l33/g/dT/wfvl/k//e/L5nGA91P/B+8Xu+2W
sBr+b/j/b/J/2f4/1P/B+6n/g/dT/wfvp/4P3k/9H7yf+j94P/V/8H7q/+D9
1P/B+6n/g/dT/wfvp/4P3k/9H7yf+j94P/V/8H7D/w3//x/+L9n/h/o/eD/1
f/B+6v+y/fzB+6n/g/dT/5edNxr+b/i/4f/c/8H7acH7061b7biyiGXr/xX/
p5+KvY1l6//3r7t6oGYtC1v/X0sfg3Pcwtb/57nRo/K2xFa2/r9dgVvLChW3
svX/1P/B+/WpcenTWNn6/zXiBNfC1v/T83/wfur/4P3U/2VzBwz/N/zfOIzD
OIzjH30I1y+hfF+/476AbP6vuA/Qi1U2Jxfm+dDaRr1rm793AKvsPFzfheVh
jcusWTsPndw/TQirV+Zi921d7Kyd9HGfDyJZ44nr7KGsLuJzfhFr3mulGqfO
f5R127Ky5jWrrvI+1yctXWJ13mfYxTqmUOS5ocmuscboj6OOuMHqoTN6pmOs
Lpn81p1+d4v1ZJY6e0v3CmINu1tpdOyLQNaskalb190XxLrkx/ULq7z1Z/UP
DVQzTzrLWrVcxyeuyh5WmXfJ9vNp3yB4rvYTr9N7orBwXlQ4KvsAa0YVKy5P
d4QqGZ/vPeT6ScUOnaeLS7iS5fKXzrNrqdjR2e5m+PgsVLovq67inS+o2Owt
c987YA1TxvQ89bbMMRUrtmPwC1Ny9+jXY1+sinWe74UrrftnX/AqhYaNdg68
lP46dY3MY4nBwtzD2sNf568QEIPNedDnnSUyTDnns+Pz3jZBrNvFQvJA1sRD
V7r3ihfAul/8i/6sfVKl6Hyz5z3W7FWuTZu+w53VOYfqJmu8+8+SKps8WSc7
XvU53viwZu0/M3tQUW9Wt4Y/tovf2os1b5o1d1Y882WV3ZfUp6r91DeItWJe
fUMdXvHY+9NA1kOJ9QnFQaxj1uWrlbObB+vGtafWbPHxZ10uFo5FYEuui75Q
4UuAYv5xVuE4Lyv29UKPk57Jg5XG7fSdNzSsX2NL3xnn5N9vtv6NDy+vaccm
Hd7FNf1Ts7Jd306qtR0rbpdliFDGuqe9F8/Tji0k7stEKv0aNVzT770dm7Bs
h8XXBkYqG/XbsZnisKP1sds7I5WFW/U3TDu2hT7OdEuEdF/i9Ec6eh9sEsi6
N2TyVlumm6zO6+NTrFnF9+MZVtm84IqXW6xIW+YOq8y7epR43OtNzE3WeF1m
1zqW8QZrC/ELvs1qWz2i/tWr3qyRP1TfWWnqDdY6L768etjTjfXJrQ7nrF9s
2BxiXnCo1IffTJ+RIPX9UNZVYs5eOKu4jZ0hlPVY5w3bPym8svnmyucMG7pN
4v1wYU6FfoNDWEse1p9QC2WV7Qskvtu78iY160+Q8Y59pj9AFs4K84pp4zd4
aKl0NZRV5mkDfPSB9uGssn3FZfvnz1w643DRA3ZsTddbrs0c7xNzO4Z1eW7X
sA1aTc5kbmBWGi463WbqfQ3rdap0oqcVzIp27W3o3Up2bKp8YkCzMk6/vZTW
jhV/vRvMuH8c3UcuhxhMqWIn7dNv9Mjff1bk1F9pGlafklksvlkxv1vybmdn
OxbmJsues5DNBZDt/6+fTf30UsU634fDpc+JDH7xqn59DxWbeuGpR7MShStt
649enHKrDWvRly8cCZHO+XVPlKNrhZG8PxyyXSlpCWKVrauRnS9tedrnesgd
f9ZWKycUG7MzgFWfpt21TyBr8Wpllr1PyBvaIqLh9UUBrF/m1YlMsNOTNe5c
2oJavAusMeK+6C7W5zVnP5s0fydrSTHP/Ayrc/3RBdYG29O77CvozrpKHxuc
NhbrFjNxcvLiPsqUVhlnfyxiw+q7vjy9FawUL+BXw+e6il33YHDE2tdhir5K
usMMDZs6vj6p3qR07l3qfPtDGhbm9srmSjj+bsYn+VnFCpYdLp+Lkea6fofe
hu2Vb9epaudClPJ7F9VP8cqG3auP3e4eqoxc07nJkBEa1rnuwqQk12/3ZtGw
HcVc1HDpvKoiHnkcZ04qFt7/+x9RRnTNpWITf2xS8+iJUKX7lnLagXIq9l2Y
Pig6VJleMHdo52UqVv9bOLQsTLlTrJsy96IN6/12huWzPeSXdSj3sWL7rVEh
ivi2yBODzRbovmvBlFDp+b9sXhLsd0n3vZS93mXzuTosKdDnbUMV+0B8n4cp
vofTN3Z7bMWK28atgpU5vfMnPprBhq3bL/WYttuCle55wq4suGvFvo2dFJUw
YbD0fC994ZNvvE5HYE+/01eoBPxynmjCeg90H3qyqv8vc2hN2Mx7gjPsSu6n
WMV1uQnrXP/gp+irp9Yki8A+NZ9NmKbBv+4H0PsCF3MnmFEwdzS2q3ieIFj5
6fPnSilaBLI+3lgm55kZfqwVWyRJ3Cv6Hqt+8riu601WpzecZn0ungNfx1pT
rJs7yeovNpDby7raN/XBwlFbWFsoETv2XvdgdXq5G6v+p53nyRVW/571Th38
eJT11s9+RybV9WKdP/lUg4G17rOO7ZX5RbK9gayZEif6YK3LG+6pv8IjWWX3
X/xv1ly2M88l1v/dr/6NRxmHcRiHcRjH/34Y/m/4v+H/rOD9uduePpvmuhW/
hvN9ev4Pjk5dHbyf+r9sX1bwfur/4P3U/8H7qf+Df1APkf06wfud+/ao+DV4
/6gffvB6fUY1/P9v5v/g/bRw/UevB8H7qf/Lvt/A+6n/g/dT/wfvp/4P3k/9
H7yf+j94P/V/2b7Ehv//Nv8H76c1/P/P6f+yfcVl++eD91P/B++n/g/eT/0f
vJ/6P3g/9X/ZHBnwfur/svcf8H7q/+D91P9lz1nI5gLI9v8H76f+L3tOBPyP
eiB4v+H/fw3/B++n/g/eT/0fvJ/6P3g/9X/wfur/srkS4P3U/2VzMcD7qf+D
91P/B++n/g/eT/1fNq8K3u+p/4P3U/8H76f+D95P/R+8n/o/eD8teD+t7Pxf
Ni9JNvdK9nqXzecC76f+D95P/R+8n/o/eD8tnN/RgvfTgvfTgvfTgvfTgvfT
yuYCgPfTGv5v+L/h/8ZhHMZhHN9xGP5v+P+v8P+yF+du6lE3GAv+X7V6DZct
461Y8P/m6c8nGl/bigX/H7Ft95sCm6zY39v/na4ZjgX/h3186H4+YjziSgv2
W+v/4XyfFhydFryfVvZcNng/LXg/LXg/LfgHrezX+b3r/6vrTzGPtGLB/0+s
9g/fZrZgwf+t/SwnTje0YPE+gC3u8exhZiz4f9pzLlMGjA/D/tH+rwS0f5fg
SSgW/L/I6evXB82JxYL/j8vV/XPfexYs+P8kx5tK84lWLPj/1GvX4i8abcWC
/7vuOdj+h7OR2G/5v9ObQrDg//quC21KWrDfWv8vux4E76eVfb+B99OC99OC
99OC99OC99OC99PK9iUw/P/39X+YC0vnw5ofm1onr6Riwf9l6z+/6GNe/WxY
8P/K3bRtc1QbFvxfvIy3q1jw/68l9Y2GVCz4f0+xEZYNC/4/cd6lgPJ2Gxb8
XzYXoPfAZetGj7Vhwf8H5Hj4RB1gw4L/i+16nqlY8P+8gsVVLPh/nzb6A/gq
Fvwf5mjSeZrp1+t/shqW+j+tbP8c8H5a8H5a8H5a8H5a8H5a2T5y4P20svcf
8H5a8H5a2Zxl2b5Asv1/wPtpZXOiwf9owftpnfNdVCz4v646OaerWPD/2Lkr
jm4+b8WC/8vmIsnOl47tu1fqaVELFvx/4ZuQfjXWW7Dg//sKZih88o0F+0/x
f1rwflrwflrwflrwflrZvlLg/bSyfbHA+2nB+2nB+2nB+2ll+1XK7v+C99OC
99OC99OC99N+7/p/2fm/bL9E2b6Xste7bH9O8H5a8H5a8H7a7/X/P2r9v8z/
Zev/i5XK/mDxIwsW/L97xiKZnu+NxRr+b/i/cRiHcRiHccQz/N/w/+9a/7/K
vl27nziarf+n/g/eT/0fvP8/5f/g/T/r27E3jWXr/+n1LHg/9f9vrf//u/k/
eD/tt9b/U/8H76f+D95P/R+8X1zuZbX8adb/F757KaOrXwxb/y+2X+4aw9b/
U/8H76f+D95P/R+8n/o/eL8+NOJmTSvz/3Nig3UrW///XvwG7rP1/9T/v7X+
3/B/w/9/jf/L9v+h/g/eT/1ftv4TvJ/6P3o/8X/wfur/4P3U/8H7qf+D91P/
l80FAO+n/g/eT/0fvJ/6P3g/9X/wfur/4P3U/8H7Df//e/o/eD/1f/B+6v/g
/dT/ZXORZOdL4P3U/8H7qf+D98v8/7XX6bVf71oM/zf8/w/x/9+6/v+v7v90
/x/Z857g/dUOq/mKXLGw9f+NYj/NjYiNZev/C3dOu7bE4li2/l+MS1sTy9b/
h22d4L90sIX5P93/B7x/eeFVatALK1v/T/0fvN/wf8P/jcM4jMM4jOP/O2Tz
U773voDE82U/rVunWeGnq09VaJPeqvV88wc3VnNWcaXBWvD28zwJLb6sYxIM
vuV7+CbrdLfFb6v3vM0aU+FVPt9QC6vzel1lbZEhR7xWldxYZb/fvAWK5kvU
+JBC2ye2mevwoNOsR7WF+TbEv8kqmy8pmyNc82aaQYmfebDK7o941Hswo4b1
Outr4TR3WFvPLz797Lhg1rni1xXCKtsvSPZ8esLU+oP1N1jjVdbnr45gnXhi
6pglP95mvRz3rmz6If6ss/VlKukCWPeXLeqRJ00gqzit9YzCwvnzzV7xfro0
WcXe7uO1YNSgMOk+xsfFf9COdd7HMSsBP0+8o1zSsFYxb86Ecyvp/Epweerz
Tm+KwcLcpffiOikau/FQOsvt9CGKfnWZ7W4QK8z1oj0b9uBwn+n+rDJPhvlj
tE16XtkfVo/XOVfzLqvHAWvn8kmvsjrnWV1irSnuC7mzOr3NgzUw1+ML5qxe
rObSH2stT8ibf5g+ENuXFeYc0j7ceTL40uVAVtlz1jAXkdb/feOwUyF+rPGE
C95hPSTuhwSyNnk6MU+hl1FYwZolg5XE+mMgI1Rsqzxld19tFaY018cE39Ow
YY5XS9sUZqW840eV6qlh98WuqNWhjElJ7bXV99xNDQtzqEfpY9Vy27G5dsxt
VuSUWYm/dv7I+Nvt2PqegbU/HY9QRqU6/ePSUDs2p7hPGql8vVv8erUecVjx
yy0VpUyaMrrgpMt2rBh7+ShCCd9m9hrQy46FudUFVuS4X6u2Hbvoarz8E16Y
f5krHsLq9BUPVudcx6usJ7Ml32xpfoy14qn4MR0SXGRNmFCXIHfWycmLb781
7DarzPkXL9JBjjdO/zhZ48cK8zxpu5gX3Z+QwY31ZUsd+vxYM6fPvrV9dxOr
zEn6TG8TPf54COv1s+dNZ3YGs54bsrfA8RKhrO/bLeo6vF44q2yu5TIxaDiE
VTYv8nX8AuZH40NYna8fXtnzEeLl8DSENUFBRWvVgtf5OcYr8zRZs7wctWPE
wzBWVcwz5HV5fW37i1UaVtxdW2dS7uw96/gT17A+j8tXqnclXCksblBqWJjX
uWlc4g1netixjhfxqj6lI5S91cdNiKhuxy7JerLVyYdmpYbjqj97PQ174WLS
PaU+hCsrlz+9uDeVhhUfF6vDlQvpdTmyY4977MvWf6ZZuTHzyIpdDzSsu0ve
WTWbmJWxTc7viu6lYQtWrHzgfHmTcqtpoppDi2tYj8rBEfc8w5WJK4dN8Uhm
x5Z029Fp6WKz4vxY1bCtM6n6t4RSa+JeL49XGvbSqvQflvYwK9XLPn8Z3UTD
wvxlcfswXRirzP9h3jvtjXUporxL8972S5Mq34UA1ghxf49X9uPr3U3arMkN
3mN1K7cK+MgrO0+QnY85/5oDWG0Dju4dVOEWa1kx13cHa1at66dP/idZnfMz
eVcLLzzNGiMA6jrrsP1Pdt93j8EWj2na/scP96TPAcm+T2Tfzxf1sZprVSzM
gR1xoN32i5dULLx+xxVNse/dExu2yOv7x+LayOdJPfzwMXHOayo208brP5Z7
ESb99XiOTp1lxAAVK1bJ1ApTTsVW7JLzoIp1/KVkLH87TLo///bjye8kUVXs
VLEgI1w5610twb2uGvZgzVrDVhU1Sffzv3dfX7Bkw8JcXdnPK/PwBvppaBt/
1rGz9U8CX1ZxmZrdn3WB4PsIbGF9TG76QCVTn9YlGjZQsTCPWPbnVks8Z2vD
Xp5y+lDvLKHK/EoleySbpGIdJz85U/YPkz7vJvv7lT2/9iHt4OEPxlqx5W9v
rO7dLUjJr1+mZjNjxWOi7f2VCWLhhAlbMvTLvnM+vkqaNvt3jmxtxp7It6zt
wyX+ygsxP9yEhev0K6cf276esmDh9V5hfmSjgnOt2ANHxB0qpb5YNxGFtSbT
JwwHK9eC+4ZuSRvK6nyuOJDVdGDp2I+zA1ibiMHE7qwHb1jqjLx2gbWLuA7c
x+oyVH9Hm8vaJ0unhDOXbGJt4bjqT1/zJO/xvIU7p3VnfTpcH0x8h1XmEk5H
P8zqfF90Y5XdH/9x/MQ6lR6Est6bVuBixIxg1pLZ5q9Mty6GdcHlyqVuJAhg
rSN+g26s/xn8Mg7jMA7j+Acfhv8b/m/4/6/2f9n6GfB+6v+yfYzB+6n/g/dT
/wfvp/4vW58P3k8L3k9r+P8/0//B+zuk9qwcHGHFr8H7qf+D91P/B++n/g/e
T/0fvJ/6P3g/9X/wfur/4P3U/8H7qf+D91P/B+83/N/wf8P//1Xwfur/4P3U
/8H7qf+D91P/B++n/g/eT/0fPJL6JHg/9X/wfur/4P3U/8H7qf+D91P/B8el
rgveT/0fvN/w/7+2/4P3U/+XPQck+z6RfT+D91P/h9cr9X/wfur/snlS4MHU
h2W/HvB+6v/g1tSxZfvzg/dT/wfvp/4v288fvJ/6v+zn/U/7P3g/LXg/9X/Z
nxt4P/V/8H7q/7Ln3WR/v7Ln18D7qf+D99ctsaPYwGex+DV4Py14P63sOl32
egfvp/4P3t/2jH4CZTX83/B/4zAO4zAO4/gth+H/hv//Cv+v7ji7XPExGgv+
v2hM2eU9v1qx4P+7HqR+232kDQv+L5sX0D/sa/KTB6Kwv9X/cyzskrjJzGAs
+H+OLBlmrS9lxsL1Zt5ySVyLtrJgwf/PNCpTPoOPBfut9f/g/bSyfQzA+2nB
+2nB+2nB+2m/d/2/GFd3yIoF/29X4NayQsWtWPD/jOL5TjMWrutl+8nnHnvz
iH9hMxb837lPjxn7Z/V/n4ZZR3reDcWC/z9Y/GjpuVmxWPD/SgPKNauVzoIF
/+84c5xrnwJWLPg/PF9Nn7N2XvdEYL/l/879QUKw4P+VxAPdFuy31v+D99OC
99OC99OC99OC99OC99OC99OC99OC99OC99OC99Ma/v/b/H94lYM5So3TsOD/
MB+RzkkU2w9ts2HR//WP50y2f/UX/7/U70nvbhE2LPh/ZFj0R1dNxYL/vx7o
ejHpHhUL/q+vUgzsbcOC/6dP5PIlWXMVC/7f7UTJGh9m2bDg//P36e9QNiz4
P+yLRPdHajhd/4SzYcH/+7pVv3F4uA0L/u/8PLNhwf9hjiadpyn757L1w+1K
j69wuYWKpf5PC95PC95PC95PC95PC95PCx5JC95PC95PC95PC95PC95PC45L
C95PC95P+5M+PrWVigX/h7m/dP7vy69d1CqLrFjwfzd9G8oeViz4fz2xEYcF
C57vU8bV8dZrwYL/y358vDV5xhXZb8GC/1duXfnNo5sWLPh/9eyr95xJYMH+
3fyfVjYHXPZ9Ivt+Bu+nld2/A++nle0nCR5MK/v1gPfTglvTyvbnAe+nBe+n
le3nA95PK/t5YQ4unYcrls08icWC/09PfW1hyUaxWPD/FKMWHXAJjMV+a/0/
eD+t7M8NvJ8WvJ9WNu9e9vcrm18P3k/7n17//y3/p5Wt/xdnKT42LPh/P5dV
t9w/WrCG/xv+bxzGYRzGYRzxDP83/P+71v9T/wfvp/4P3k/9XzYv4L+1/v9q
/o2Dln+IZev/qf+D91P/l83P+rP5/7fW/5cUsGRj6/+p/4P3U/+H63h6Xf93
Wf8fUinzp4vNY9j6/yyXNvfc3yiGrf+n/g/eT/0fvJ/6v2yfVfD+hE98d/bb
aWH+v67kE/dnl2LZ+n83sd41mq3/p/4P3k9r+L/h/7/H+n/q/+D91P/B+5n/
w7p/4v/g/dT/wfup/4P3U/8H76f+D95P/R+8n/o/eD/1f9l8BPB+6v/g/dT/
wfup/1Pvp+v96T+XrR8G7zf8/4/xf/B+6v/g/dT/wfup/4P3U//H9fvE88H7
qf/Lfjx4P/V/8H7q/7LzBNn5mOH/hv//J/wfvJ/6P3g/9X/wfur/4P3U/7+1
/v+v6v/fWv//UFygxLL1/1Wu64MvLGz9/8HeOnjHMv+n+//81vX/1P/B+2X+
32Jun0XxFloM/zf83ziMwziM4591fK//yw7Zj5f998P187KJrM7zQQ9WXeMD
1VBW2fObzvP0E6z66t2VHTxZm37QB2bGsda4ocudlTWmSJWBGxosYq1TfE1G
91mzWcPXvs4yr9gB1jHCHQ+ydojds31Pt2usTu85xxouzl9usI4Q86M8WPWn
z59OvM4qxgF2ucL6Wvx532G99KXz7FrHIrHd/GuWv2QPVLx/DE+Rt919rGCd
5SHKleij8zrVDGKFuaa0BcX8T2/WJuL+0nHWuOwpvkQWOstaUB8XVcKTdddU
z1GHcgayyva9cc6D4g04GlljvDkKO2bmjSfPMwYra+6+fPB+vQ07sPyJKo9c
QpSE1nkv949TsU2HBjRp3CNMaXvN81TpRBrWmqfnXcc1hjJE/787x2DhvOvZ
ndyHNz6Oxq7elKBHxiIhyp1mwyrXzxfEahdzoQNYZa+jViUaNig1xJc1bY/L
daOGeLI65z16scYc1wdT3mIdcfDCxrWnbrI6v494PfKOX+4y/yzrwfSN3R4v
O8zqKq4nbrA6r5Puss4++nKre6J7rHGN7m2rcNKb1XGynHZsjgBWfcpeF9dA
1rw++guCd0DNj7b93ry1lyfM/rpqEOv4ZrM3rGnhweqcF8oLcxdpZa9f2b6y
T5UT0YmGathc4j6mSRG3SbZo2KnTqmUrccgk/fEdHVc9WU9q2IdHbk8sHmJS
jkSETol3347d0G1S54/lIxXt2tvQu5XsWJgfOvz0Dw1bR9mxWZL6PdlYJlJ5
mPDI8VMxdmzGY3lu9KgcqSzSGXm5Hdtaf0xiRYSiT3UuetWOPR7XJnOzZxGK
d8jIRzVn27HhrfbpO5Uob9pcHXChg4YVL4vcJkW8fWcNZp3uFbTn7eKbrG0E
851jHR9RPU3Mz1dZ3zcae+HnojdYZXOBZdeJx/sfUUZ09WHN5164RJvXwayy
5/2d88Y9WGHeLG29IP07hFe8bYYEs8K8XFqZCznnyIWzeghICWNttFZ/Yw5h
/Wml6/EuP4exyvYvEuPJt/KO9ys0coyFV/znNvL2qKtf8IaxRojzBd7iXg8S
NDrLu2nnnYrJ7byCd38ysfZZc7KUyytemXs7Pmw2eOUzsU47O67DvfoatnLK
UylXfwpXXmzplaJuPw2b37TQ8RZhku5TLdtvvLbWqkXHGhoW5hS3P+TbI+q8
htXe6INsTcqrN6mqTu+uYQuJz32Tov9spRpr2ErivptJOZE54lCHwRp2hxj4
blI2vT8y4qeXKhbm+eYrciX5yPwqFuaoyt73Tqd683Zs+VDWPW8KbLq3MIj1
1rNLyZIW5e24c96JfMsCWJ3rbgNZHb/pbPNXBrA6n8cL/NXtKu77+bM61+nw
irHaJf1YYT4w7ePEE/YM9PVkPVg4KvsA61nWTQlvpI6f8hzr84O1dg8YeoL1
vRggfoa1qABDN9a3h5NszNo5Ftvt5akCHRv5KuLtMpeKhbm0Efpvb6eGhfnR
GWZ/LFLynIbV7+K3vW9SzNPL+M54omJfbysa703rcJzrTOc7V1ilb8yjYg8I
hwxTZqYpMCdxLQ1bQ6zzkc8R2DhDv6Nkw4q7CAtCcP46ncMue50uEzeYNGyn
wq+mnkltVvS727kGqdj2ISt/rlA3TGnx+dLJ/M+tWPF23jFYsRd4cfJaNxs2
zSNxQqBkuayfmKjY0dnuZvj4LFR52zDV1XzlbdiSZWxRNU3BiuNcocf8gGjs
FvH9EKJEWlbqo2dZxWOSK+6x5hT3ae+wDotL9VPftbdZK9pTlhx80Ze1Wtt4
D3eejMSa8qtbcz4KlM4L+xIwYcSbRSq2RmP9O0A+5+vG045pSpfTsO6zJ8zt
GBauqOIFrmGTNz92ucQMk7JrwNA8M8NU7LwR23a/KRCujOl56m2ZYyo2X6+S
bbv6hSliPHYeG9Z1z8H2P5wNVvRVMIuzWLEwB3Zq6aHzMlywYCvH2zYsrzVA
mb+lsON/WrBNwzP7fzgaoHgkO1FvaxMr1v98kQdlEgcpFfTbsZvvY4OSLB9y
IihEEcsINsdgYb654yLq2MlpIaxLfly/sMpbf1bZeXXuxfl//nn4HdYhubNF
jWt6mVW2rs9feMAB1jqD+1S792Yxa5y4DtvFWnRa6ylTg6+xOuec32V1ntfw
pqySpe/ZQtdZs4q51udZxdnUazOr7PykSfYq16ZN92UNEBttRrPKfrxzHdN1
Vqk7fdDnXXdQfnWNwziMwziMw3kY/m/4///B/8ELacH7af+u/g/eTwveT/0f
vJ/6P3g/9X/w/k1DOj3NVV3Fr8H7aQ3/N/z/1/g/vF5XbKjmuBKx4teyfWXB
sahrgfdT/5f9ePB+6v/g/dT/wfup/4P3U/8H76f+D95P/R+8n/o/eD/1f/B+
w/8N/zf8/18F76f+D95P/V+2T7Vsv3Hwfur/4P3U/8H7qf+D91P/B++n/g/e
T/0fvJ/6P94XJTX8/6/l/+D9tOD91P/B+6n/g/dT/wfvp/4P3k/9H7yf+j94
P/V/2RwB8H7q/+D91P9lr1Pwfur/4P3U/8H7qf+D91P/B++n/g/eT/0fvJ/2
j/J/8H5a2bww8H7q/7I5X+D91P/B+6n/g/dT/wfvp/4P3k/9H7yf+j94P/V/
8H7q/+D91P/B+5uW7/tD9xM2/Bq8v96pgx9zTlcN/zf83/B/4zAO4zCO33IY
/m/4/6/w/4sjtyd5/jka+1vX/+tTBI/3t2LB/1M+iHX8DVmxv7f/O6//Q7Hg
//HFPkMRWPB/2b73hQKHXWn50oL91vp/8H5a8H5a8H7a713/796+zYOCnaxY
8P/2a/UJqhYs+L/YLiSTGftP9f+d8zPmHNgkDAv+HxwwO+f2XOFY8H/x7dve
ggX/zyRAxooF/3+esUP1JSEWLPj/rWGZKhRfE4n9lv9vad99s/ejECz4/yy1
ZFh/l/tY8P99BTMUPvnGgv3W+n/Zc+Uy1wLvp5X9ePB+WvB+WvB+WvB+WvB+
WvB+WvB+WvB+WvB+WsP/nU2//s30GQk0LPh//KzFG9wvr2HB/8/nrLZ4TFkb
FvzfOb/EhgX/h3mQdC7k/uwek197qljw//opuxTpMkHFgv8neD+z8fsbNiz4
/6EJk/aVcVex4P+y+QWa2ChOxYL/Z898fP7lyioW/F98PKdTseD/qVvX3be2
i4qF6+uWkzOZG3RTseD/4zOkbbN/p4oF/y8xc+aQpBdVLPh/33sPh9RZqWHB
/1dPejWg/XUNC/4P827p3FvHv7R5SCcNS/2fFryfVrZPhWy/EfB+WvB+WvB+
WvB+WvB+WvB+WvB+Wtn7XrVz6z2vRNuw4P/lipXK/mCxFQv+X2+/voOVFQv+
n9xxVpNxmQUL/i+WBzyxYMH/mxY51e32cgsW/H+U+OOzYMH5Zf98uT4e3S8W
C/4/IG31Rm3qWbD/FP+nBe+nBe+nBe+nBe+nBe+nBe+nle0jBN5PC95PK3ud
gvfTgvfTgvfTgvfTgvfTgvfTytb/67snFveKxYL/j09/pKP3wRgs+L9zv7Zg
LPj/+vy7M1dcFYwF/y8lQDgW+631/7L9QsH7aWX7fIL304L304L304L304L3
04L304L304L304L3037v+n9T/JC93efZsOD/Be0D0+2sY8GC/++4lGfIpC+R
WMP/Df83DuMwDuP4Rx2G/xv+/x3r/6n//9b1/9T//6zr/6n/g/dT///W+v//
q//L9l0E79dXw6TqamPr/6n/g/dT/5ftg/pP839c92/KUun1whi2/j97vFaV
Vr+IYev/qf+D91P/B++n/g/ev6bFJrfQElbm/7PG5+r+ua+Vrf//MEcfrHGf
rf+n/g/eT/1f9vo1/N/w/99j/T/1f/B+6v/g/dT/wfup/4P3U/8H76f+D95P
/R+8n/o/eD/1f9n8AvB+6v/g/dT/wfup/8P1NPV/8H7q/+D91P/B+6n/g/dT
/wfvp/4P3k/9/1vr/w3//9/X/1P/B++n/g/eT/0fvJ/6P3g/9X/wfur/1Pvp
en/6z8H7qf+D9xv+b/j/H+n/4P06/s5rbmPr/6n/g/dT/wfvb/lqdILBt6LZ
+n/nc3/RbP0/9f9vrf//u/r/967/pwXvp/3W+n/q/+D91P9l59WG/xv+bxzG
YRzG8Y843uvviw0UVumP/865wML7+7C2Sebfbk2ytax17PoFtDsrzL2kfSzA
1pvV+blxgjXjssN+N8L8WZ3n13bW5u45ph3sZWF1EdfTG1nrVM165/jXBaxF
xYXSHla3bKfOHL61i9W1Yn/v1v0vsco+H1soETv2XvdgLSrmkl1mjTf1Tekm
446yyp57FdNjR/mzjq+Yt/HgJJHYTIkTfbDWDVTSiIGbVmzv+G/PtmsQrLQv
W7vo6Or3sTA/cXrD0j5ZXwWx5siSYdb6UoGszuu/W6yy+yltGu2YtGXWEdYx
Ym6nK6vzuuE2a9I5rklqV/BjLfNshW3UuwDW0eI+QCQWrseX3Lvvuum9Fatr
cPFBwcrAxM82rcusYlOcPLA+/+5QRYz96xiDhftfLnmy1xtVIJC1uZgf5c86
XQwSvMeq/+XM1W6wfir60wmPfRdZ096L57nq4hnWyW/11/0RVhfxXMFuVud9
qlO8nvrEyiusThc8y1pWzCs7w3rtWvxFo+/dYB3yskvtXNdvsupTVte+vsta
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
GNK89sS9Fuy31v+D99OC99OC99OC99OC99OC99OC99OC99OC99OC99OC99OC
99OC99OC99OC99Ma/u9s7zE1aiZar2HB/2XrBmX77X895TU6dRYbFvxfbGew
yYoF/5fNFwCHoh61IZW+s4aKBf+X7edfYO7wKgdzqFjwf/Fu39uGBf+HefB0
LrxsvWVu75TR5YqpWPD/53kSWnK/t2HB//WzgjznbVjw/9ZBtxLPbq9iwf/D
8s3eVe+1igX/ny0Gk6pY8P+5zfSNZGxY8P/XA10vJt2jYqn/04L304L304L3
04L304L304L304L3036v//utz/Jy1A4bFvzfuU7ahgX/h33f6P5vbTwy9n5Y
1ooF/7+ealu6GkcsWPD/nl9LuO3oZMGC/8O+G3T/Ddj/gu6Doe8elt5qwYL/
H8s08cTUMbFY8P/7OUuHe2yJxf5V/Z8WvJ9Wtr8TeD8teD+tbE43eD8teD+t
bB8Y2X4d4P204P204P20v9f6f9n+ruD9tOD9tLL1/4HmQX4z28Vgwf8tncsn
zVUgBgv+L5sDJfN/533HUCz4fynHq2Ho5Rjst9b/43p/UvB+Wtn+ZuD9tOD9
tOD9tLL70eD9tLL7+OD9tN+7/r+ouP6xYcH/d3W9OCnurBUL/j/F8SY9IJEF
a/i/4f/GYRzGYRzGEc/wf8P//+36f7rvJXg/9f9vrf+n/buv/6f+L9uP93v9
X3Z9BN5P/R+8n/o/eP/1Hx4P3bc4hvl/9oVdEjeZGfmP9f9vrf+n1xHg/dT/
Zfvtg/fnGnQsWd9UVrb+v3se/caMlfm//qor9jaWrf+n/g/eT/0fvP9J04/L
bqyzGv5v+P8fuv6f+r9s3aBsv33wfur/4P3U/2XzBWTrUcH7qf/L9vMH76f+
D95P/R+8n/q/bL0leD/1f/B+6v/g/dT/wfup/4P3U/8H76f+D95P/f9b6///
6v5P9/8B75ft/0P9H7yf+r9s/gt4P/V/8H7q/+D91P9l+2/L9sEG76f+D95P
/R+83/D/f5b/g/fTyuZlyJ63+tb6f5n/y9b/p1/aMMQeY2Xr/6n/g/dT/5fN
gQLvf2jTP3mi2fr/XUHH95ctGsPW/1P/B++n/af5P3g/7bfW/1P/B++n/i87
bzf83/B/4zAO4zCOf8Qhc/7/tP9fGDYqa7+hrLOFC27lvXg7V8Ptc1kfi8//
O6y6ih3a7c16S3yen2LVh0n2mB/A2vOKLkdxrE63trHWGVUg/Y1zR1hlf2wy
/x8h5oKeZj39bt2Bxk9usEaKgX28GfXLyaPurM7rs+OsfRxXYauVa6ziMcyU
QazFWq8yF2gWjfUU5wnB0nWYsn0sd2xO8+P5DRp2emhcw0G7TcqJFCV+uN4g
Bvs1rvr5j+6hSjrhykGsMRP0gYd+rP7l5qZvN+YWq2x9e9WY5yOrjT3Jmlb8
+a1ldc5DPso6Vayrvs36/oa3voUKq2xf05dTz6Tu9sKGLbi57JxjnUOVEgkK
KlqrGOy7MH1etuN8Wb/szBbIevNDogvu7f1Z3WoU3tewgA/rOrGu/Sar7Hyy
zuRR16fHerA653zyyu5DyeZ018x1fU3dOFfWyfvKuPs0/DeVzMUeL94/TrOW
/Xn3wui0F1mLvr5/LK7NHdbHG8vkPDPDjzW0RUTD64sCWItX0zcSCGTtnUIH
3gBW25YLzyc/8GSFOdu0+YfVfeUR58vq/P0FsuZM5RFgih+Fhbnbs2b5/LB2
voqtvXvA0Dwzw5RLYs63hj0zM+E40xizogS0f5fgiYa93vDHdvFbm6X7bFdz
03+AHXu6QMdGOyaZlQ1ZOw+d3N+OHRE8qfLDGhHS+QLtqhWMaDPajrVlSp99
a/sIZfXLlisnFIvD9l08cLbtbqSy1ffczacd7VgxLTtvhOK/zLvBmbF2bOyl
fk96d4tQPMRGRHHYANcXUdZXkcralp8vncwfhx1U+5ap26VI5fUYfWWjHVt0
gQ5rkUr3fbEranWwY989WT5rfK4IJb0+nnWkHTvQfejJqm0ilMwRhzoMPq5h
R3TNpf8NKbNcoj60fxzEeqfTrPDT1b1Y23lO6XqriBurv+O7JfOks6zTxeft
ZdYmS/Q7rx6sJQ/r7+yhrIsya10/ffJnlb0/z6+kXzCq2Map8+dM2T9M6ei8
gckqxpQvDWW9fva86czOYNZiwfodCN4Tpxt6VakWygpzg2ll89xl969h3i+t
OeuWp32uh7AenqNPjg9mnZWjaoGJnUJYBSdl45X9vcj2BdJXs6ZZxOt4MTzz
HxrGKtuvqVvfd4eTbAxnneYEataDiXwK7JmmYVeLgdMmRSjoNTu2RI0Ps46+
jFBGzejxKnNuOzbXDv1Og1kp+FkXKA27eHvHQitnm5QnYk4sr8xdZf4vu08n
89i4690DdpUMZj0jbrTylu2zvU9IpVBetV6VM/eCWZcsehPSr0YIa78e+htM
MOs7MQ88gLWD2NfMnzVSvHD8WH+0Xr5rrxbAukqfmtoukFW2H9HXzrNrHcvI
Oz8ittjB8TdZZet2mjydmKfQy3O/uq5J95T6EH6DtbF+G3KtBas/5ZdqW4DS
tFa6w88DNGygPpY8q1k502PVnNrp7VjBw5vNytWq785dqK1hL2d09RvyMlx5
saWX4xNdw8Kca5fX17a/WKVhxct9nUk6FyDqpnXf4E0a9mex7sJxniw+KDQs
zKfWhzMPu6JixWn3kzClcjdt2xzVhj3WecP2T4r8uaSkx6NcRp21Ydt8nb8v
NCpEOaTqd2ZVLLwPBy0vp6wYGsy6zjmwldU59z6QtcK+x7XUBwGsX14u6H/+
WQTWcVKXqUJxx/ntUrcy6RJEY+H733k/8z4W3j97L9y6rKw5kDV0VJsq3TRv
Vud5Pa/zcvEOq+x+utPdvVh3fdUl1J/1hTi/i8aCbz8W9xs0rNNXTdK5JLLn
2uqn7FKkywQV65wPG6Yk6hWdwzNKwzZz/gEp8Q7OutnukYat4zjL3NHcrMxM
U2BO4loaFuZN35h5ZMWuBxrW3SXvrJpNzErIHf/xSX5WsQ/LDndc6YYrmV/q
k6fvY8+7t2/zoGCokuzSy3rRPkGsU3/aPKTTUx/WSgvq1v0y2Z9V3yXr6UQ/
1hmHix5IkzWAdczS0FV9Sl9mPShe95dYPQ5YO5dPepU1RlwQb+QVn0tLeCtd
zTz31jbWg8daaG8GXWWd2Vi/kvRhvVQ8a551VXj9xfmsN2ufLJ0Szlziyiqb
352p6NSHM12iWGXnpZ9yN/oh1dRIVn31V/rsEawVM+t3ju+wyta9SJ3q/7F3
l3FSXFsDr3F3d3eX4LKB4O4QLLi7BJfg7h4suAxug8vMIOM+Pd7egwT3IHdq
d9Y696717ktIIEbVh/P/9Tk5BIaWqqd276Vwpz+HaPqhH/qhH//CQ/d/3f//
hP+D99Oq1mGq9rEE76f+D95P+1/1f9W6JvB+6v/g/d03V7Tvq2jT/V/3/0/y
f/B+TR+O9LPgY/B+6v/g/dT/wfup/6v22Qbvp/4P3k/9XzVfALyf+j94P/V/
8H7q/+D91P/B+6n/g/dT/wfvp/4P3k/9H7yf+j94/9fi/+D9tLr//7f9H7yf
+j94P/V/8H7q/+D9Kv8P1b7u4GLX/V/3///T/8H7qf+D91P/B++n/g/eT/0f
vJ/6P3g/9X/VXADwfur/4P3U/8H7qf+D91P/V30vCbyf+j+876r83/OZ9gy3
fHb/B++nVT3/Ve+f/xb/V61vB++n/q/6XpLqe23g/dT/wfup/4P3U/8H76f+
D95P/R+8n/o/eH+tDI1evAyz6v6v+7/u//qhH/qhH5/z0P1f9//f4f+Ne3Rx
edfCgv3Y+n/VHEbV91jB+2lV6//j1vxUqcVOCxb8P/4ksfOhjeHYv9v/85qS
V54zMRgL/i8vG9NbsL/X/2lV6//HXteu+MxY8P/6pbeVHPDQhAX/r6d9/buL
Aav7/+/z/87yfSIcC/4vv57cKhIL/r9oUPPwqZ6R2D/q/87vw4dgwf/vLLy3
+PRMExb8P1fq91FFs1iwH1v/D95PC95PC95Pq9pnA7yfFryfVrW/EHg/LXg/
LXg/LXg/LXg/LXg/LXg/LXg/LXg/LXg/7dfm/4sb1zSf72vDgv+r1p1eWfii
Zs+s1v/1N/+fsPF0sblVrFjwf22XtvxmKxb8f5rc8MqGBf/f+Muv7r/6WbDg
/92Olqn1eqYVC/5v17YpzGzDgv/71BzsUXmPFQv+/80o0+PAylYs+H+B2me/
vzzaigW/OtjJe3/T9lYs+P8Pc84HVHJYsfD3opoLMPRiqyepUtqw4P+JFgZ7
DJtiw4L/q+Y1pI1dXzh5RjsW/H+rNt6xjA1L/Z8WvJ8WvJ8WvJ8W3J/6v2p9
Ncz9pfN/m7RP86F+ATsW/B/msNJ5rHJ3kUgLFvy/RtF6LZoVs2LB/yfFDHk/
wmjFgv+/3HHxTo/SViz4f5EnWePfAq1Y8P9VUb/UbW61YME/I9sFl0zYzYwF
/5fLpENNWPD/Lr00ATRhwf9zFHhdcWJfMxb8f5/GgA/M2H+r/9OC99OC99OC
99OC99OC99Oq7k+B99OC99OC99OC99Oq5pKD99Oq7sOC+1P/l+y41YIF/9+W
OemO9yktWPD/17My/jLhvBn7udf/r3isXUFYsOD/WZs/jMz5wYgF/+//s3aj
Jgz7R/3fOX83DAv+X+GItmGjGfux9f/g/bSquSSqfZbA+2nB+2nB+2nB+2nB
+2nB+2lV6//7L1k7aqyLBQv+fzn+KiBHfRMW/P/NowsjEyUyY8H/w+R+ouFY
3f91/9cP/dAP/fiqDt3/df//hPX/1P/B+93rdoo/lbd+dv//2Pp/6v/gSYbU
BdpnP2r62/3/Y+v//6z/g/fTgvdT/wfvp/4P3t/2Uv+zHdOZmP+nTLnM58Dh
KOb/ayWgRH21/g/e3z1L8ayPdpvY+n+v4BSP+y4ys/X/zzxPrPlw0/y7/T9n
1maL45/NbP3/ObkOP4at/6f+D95P/R+8n1b3f93//wn+D95P/V+17hTX/RP/
B++n/g/eT/0fvJ/6P3g/9X/wfur/4P3U/8H7qf+D91P/B6+i/g/eT/0f/h6o
/6vmAoD3U/8H76f+r5rXAN5P/R+8/6/2/4/t/0P9H7yf+j94P/V/8H7q/+D9
1P/B+6n/g/dT/wfvp/4P3k/9H7yT+j94P/V/8H7q/+D91P/B+6n/g/fr/q/7
/+9Z/0/9H7yf+j94P/V/8P6jK/0NWyLMbP0/ff6r3j/B+6n/g/dT/wfvNzsW
zF8ZafzT6/8Tx78Le08zsvX/1P/B+2n/q/7/sfX/1P/B+6n/g/dT/wfvz3Ov
vbHuLpPu/7r/64d+6Id+fF2H9PhagvX/95//Pzz/tXZ/oCOv6j6CdIXurBXW
73dx3DvE6jzv9mSVy7zbBbCWCX2/57SPL2vt9W1uHu1/jLWSnAsaxJoz0O3n
eZPtrJvlCWQoq+rHtmNi/c2WYwsE7SM5l9iFVbtq6Fr3EqtzDpsb6/2ZSQ1B
za+xOu8/XGCtIL1/G+uztNWndV9+kbXYHE3MA1mHjDg5SJQMZs0vXSEGCw6T
vUXH0KfPbdiRcq5u/HVSdJNF0xrZsTBn6shPs2ZVemfEvpMn3AYxX85RjMEW
nzxv7g17sHj71j/D2NwBrKEBs/JszevP6pzXFMAqb8Nk9mfNIyH9Nmv1RAO/
D/a/wNpV+ocrq/PPfYu1bbdvAjOGRWPleLqMwaKLNTD+CsqGfTBs1PQeT0NF
z3lVV3W22LBvDledv7eWQaSUc0FjsOBIqv1nwgvZfspzjzfWdeOrQ8MDWNPI
ed3+rAlPlh8alzaAVXV9PXTyrZRHG3ixNtyaaceeIidZ2470LLOo3FXWR120
3/FFVufc4xOsFSpqF1hHWJ1zt86zjpXzom+xliiwo6WI9GV9ujJzr3lVA1hd
UrzNVLG3D6tr3SOTU6+4yZrsTdPaLkdvsI5amOYnl3oBrKp9J0ZJp4zCwrxp
Oe1xiRU7/NtLl7YsDRH5emhXzjZs/JtAnobVDaKiNo40qwO7K2GNmrV2RAjv
kBH3as9yYA2t99QcNyFSZJ71pniZ03asNp29XWy40O6eZGvuwL5/vzlpsZSR
Iv6HmiOL1YHN1F6bEBgldsa6Nd1R34Gd27fd8xqvIsTqvq/SJxrjwPYbfH7O
u86R4mmCy7EZZ8RhtbtZecdEiyi5UZAD+1r7cWaLFDfzawMlHVhf5wW+iH9y
ZdgW6cBKPi4TJSbku/qy1nUHtpS8bxUp1mkfV7njsEOfFaoc4BIliqT4IUXv
/XFY53zJaDFjsXaF6cDWdnV3be4WKXZrP72aDuwiOZ9XPe9g+vZJHyY/t2Nr
mLUbGBFilwTqYFYXOffYk1X1PP+mZfJkvWK8WOF9iPbeugHFP6wIYXW+Lr1Z
++e++4utvxWbImKr8KgbImatl5NPWcuUt0bXDg9mbdGsWMve90JYT6R9/mJs
pVDWUvJ7a7yq+ZVpVr7dWKtiCOvPWf3WnngZzDrmtTaZPoRV5TmqfSoetXCf
NWE2b8fTlvct/XlV92WaDQlo2qRHGKtqvryn3CgrhDXXrUnPbrcKZ41/89u2
+4qBtbJzwCWryjNnam8XD+zYutr49PYRInCYNjHajrVNSfNs1SSD8v6R3N6k
DG/vaW1jxh8JYVXtq7M5ybV0CdPwjuuoDSjnlbdJugSx3t1+LPj8hUDWHZvH
D1u5LIj11p6c/Wbk4m0zt9S0U+OCWQu6FSvd9hlvOu3p3jmQtZz83PNlbXxl
wap6c3iLy/mQ/qyq+9fOOZm8rvL+rSerizwvPsu6/5q53ojLvKMTD3L3PXiC
deW7d1VSt7zOWqBictcSrc3YWdppcsYAcXXNXvOTavb/1TNbyVirQchp9QMd
WOf5SaRo/LJHYLLidqz3qjkpkrsZlN/3eR8wYfjzBTZsrSbaDixhYn7qqicG
RtixLc9XuXWjZITwaaRJrh0bUe5NnaVJIkSbfrnmPU1tx8rbRUsNQttVrny4
DZvoSsM0XYsbRMmTRc7Xm2THaottpgwIFxH3w9ukqmLDPp82PXG62FCRo/SB
8DTzrFh4v9I0+uAGKxbmAp+6tqh7lWpGbIpOrwY79oeKfcWic/W3BLPGmbSF
HH6sqnnx8mMx/S3WBvI6xovVv2eD4/vfeLM673v7s8rbLd8FslZsLjd8Ym05
wX73zARfVud1qhdrS9dhQZlqX2V1l/Nyb7IelI7rw7parruJwMK82vJyYLcV
u72KJt+hoqtfWDXjIxtWjtvtbBDuzZLWHlLKjr1VNTjS67ZBnC5+p3yyDnbs
IW2sce5wsTpw56rlrnYszFUvWGn4iUSNHNjZyXfeev8+QjQ/fKH09Jx2bPC7
ehee7jOIao3uNamwwYaF+dHz9oRGr7tsxML9iBemidFJkgSzDsjTRjulZVW9
X50Ku3Ow9zR/1nvy+jiAtZ5De+EGsY6PrJne+OslVud9yCuscfMLrk+4mvdY
09fFbp5fy9pbXl/OYp12VVvIcJrVeV7vzuo2vrfRdimA1SLXDYWz5pLz0oNY
e8vbPNdZXXft75DoVDBrsiWJT7/uFcXqnO99i1U7638YGc4aoG1T1srMmuiA
9WIZcxDrwjKNDxRvcJpV6VfSpfoLVv3QD/3Qj6/t0P1f9/8v4P+qdZjg/dT/
wfup/4P3x1RaXvxZrA0fg/c/vdtzpb269T/j/+D9tOBq1P/B+6n/q9aR6v7/
dfo/eP/gzg/y1vzFjI/B+6n/g/dT/wfvp/4P3k/9H7yf+j94P/V/8H7q/+D9
1P/B+6n/g/dT/wfvp/4P3k/9H7yf+j94P/V/8H7q/+D91P/B+6n/g/dT/1fN
OwDvp/23+D94P63u/1+n/4P3U/8H79f9X/f/P+L/4P3M/3/zfur/4P3U/8H7
qf+rvu8D3k/9H7yf+j94P/V/8H7q/+D91P/B+6n/g/dT/4f3J+r/4P3U/8H7
rV03JHqZ06b7/xfyf/D+yd/2N/RPasbH4P3U/8H7qf+D91P/B++n/g/eT/0f
vJ/6P3g/9X/wfur/qnkEuv/r/q/7v37oh37oxxc8dP/X/f93+P/TUdqFlRkL
/p/Fpu10YMF+bP0/eD8teD/tp67/l9uXdDBjwf9bbOge1S7YhAX/d3N7M/T4
VjMW/P+c/F54OPZz+//EyaOKTLwQi/3Y+n+Vs4H306rW/8O+M3T/Ge8rabdk
rGXBgv/7LdY2qjdjwf+H7z+7Yc3xCCz4f29T8/grnAis7v+/z//lthvLQrDg
/9e1XWXMMVjw/w1jf/4pfIAZC/6v2ndatf4fvJ8WvJ8WvJ8WvJ8WvJ8WvJ8W
vJ8WvJ8WvJ8WvJ8WvJ8WvJ8WvJ8WvJ8WvJ8WvJ8WvJ8WvJ9Wtd/Rf9X/d0zu
P96vqA0L/v+iUdpLBStZseD/STuUG1/5ghUL/l/j9LrbF2OsWPB/TXfX3bVi
wf9PuyxPZo2zYsH/B/ywKVfBXlYs+H+Fc7M39qhvxYL/q9bTwhxHOs9Rtc9/
147T012eb8WC/6eS+7JZseD/qv3/k1jmPNk7zoYF/x+Q7OHGtdlsWPD/RtO0
K20rFvx/xOouTQcPt2PB/5P5ajvv2LHg/5Pjz2ryrLZhwf9hjimdZwreTwve
Txv/ouyRcqIN+zH/Xynf6KxY8H/VvvqHj00NmdPCisX7AIYEow/+aMWC/59z
rK5afYwFC/7facY4196FLVjwf/nLLrVgwf8bJtQGbFqw4P8LRldY2vODBQv+
r01xPySsWPB/x/71C7Y8MmPB/13O35gtJpqw4P+V8k0f22GgCQue9lTesDVj
/63+T4v+TwreTwveT6ua9w3eTwveTwveTwveTwveTwveTwveT6u6XwneT6ta
/39SPrZiwf87bJ9ztOCScCz4/5tkeS6XbRKKBf+fq7Hj6lgs+P+jlLvj3zKN
WPB/bZeysklMWPB/5x/bhAX/L6rx4hMzFvxfavklMxb8P+mQ5W69EoRj/6j/
X++VYNX5+PcJKPi/53dHbtbLb8J+bP0/eD8teD8teD8teD8teD8teD8teD8t
eD+tav1/9/xhF+fdtGDB/1dfbNCg3zgzFvxf9X6VJVnS15b6EVjw/+bamLMM
kVjd/3X/1w/90A/9+KoO3f91//+E9f/U/8H7qf/j+n/ST/V/8H5a8H5a8H7q
/+D91P/B+6n//1Xr/6n/g/d3dS++srmv5Q/7/8fW/1P/B++n/g/eT/0fvH/g
sDtjl9Qys/X/Rm3ccUsz8/8m3gnLLV5j/ur9X7uaXZHXxNb/556W9rul7WPZ
+n/q/+D91P9V+06D99Pq/q/7/z/Z/8H7qf+D91P/B++n/g/eT/0fvJ/6P3g/
9X/wfur/4P3U/1XracH7qf+r9qkG76f+D95P/V+1/z94P/V/8H7q/+D91P/B
+6n/g/dT/wfvp/4P3q/yf9X6f9o/uv6f+r9qX33wfur/4P3U/8H7qf+D91P/
B++n/g/eT/0fvJ/6P3g/9X/wfur/4P3U///r6/91//88/g/eTwveT/0fvD98
oN+M9vtNbP3/4c2553dNZmTr/6n/g/dT/wfvp/4P3k/9H7yf+j94P/V/8P6T
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
/8H7qf+D90tO32rDx+D9tLr//zf8H7z/xiZtgaoVH4P3U/8H76f+D95P/R+8
n/o/eD/1f/B+6v/g/dT/wfup/4P3U/8H76f+D95P/R+8n/o/eD/1f/B+6v/g
/dT/wfup/4P3U/8H76f+D95P/R+8n/o/eD/1f/B+6v/g/Sr/p3NYvrT/g/fT
6v6v+7/u/7r/f6r/g/dT/wfvp/4P3k/9H7yf+j94P/V/8H7q/+D91P/B+6n/
q+YLqM57wfup/4P3U/9XfR8KvJ/6P3g/9X/wft3//x7/B+/Pa9K+cGvFx+D9
1P/B+6n/g/dT/wfvp/4P3k/9H7yf+j94P/V/8P75CeanCjhr1f1f93/d//VD
P/RDP/6KQ/d/3f//hP8f9LsWttLDiP3Y+n/VfhTg/bTg/bRw3UP7udb/a2qa
ZYIZC/5fX/s26z4zFq6vi8vztUgs+H9P6b4GLPj/CrnvQBT2Y+v/wftpwftp
P3X9v/w67VALFvxf/rVlsmDB/4P9cxdyK2bBgv97HPmQtXcbCxbO01T7bX5t
/u/cZyoQC/6fcs7st48LmLDg/ymXV9q94FsLFvy/3UntN2DBfmz9P3g/LXg/
LXg/LXg/LXg/LXg/LXg/LXg/LXg/LXg/LXg/LXg/LXg/LXg/LXg/LXg/LXg/
LXg/LXg/LXg/LXg/LXg/LXg/7d+1/l/l/0+mnEzX7bEVC/7/4/eFkrlktmLB
/9O1qb9nTVcbFvz/tfxrtmLB/3eXd/NplMOGBf+POVv5fcAEKxb8v+n1M7N8
B9mw4P+q/fPrDNM2gLJiwf9vzU05/NIJKxb83znnxooF/1et1/WpOdij8h4r
Fvxf2/2pW6QVC/7vce7opedjbFjw//g36/h3LhsW/D/BVr9cl25ZseD/B2wF
i19MZcOC/0eFxbxxtduw4P/167+ftPIbOxb8P6bS8uLPYm3Y/4r/y12qSluw
8PtsdN+l1JgkViz4/6qoX+o2t1qw4P/vq45ufN/FjAX/fzz3/YWsec1Y8H/V
+Yk2nbVVPgsW/H9spc7tT+Y0Y/9r/k8L3k8L3k8L3k8L3k8L3k8L3k8L3k+r
2l9Idd4L3k8L3k+rup8I3k8L3k8L3k/7w9P+8acqViz4/0y5QagJC/5f42qj
Me0ThmHB/zOc1nZ+C8OC/1eeXGb78u9NWHDF5226Do3uacKC/+ce/epMnhpG
LPj/vBU/LB862YgF/z8ub7CYseD/zvvxBuwf9X+ny4dgwf/LGm5tHhJ/vg4F
/3+d9Kxbh7Ym7MfW/4P304L304L304L304L304L30/5/1/vT8vX/jU1vZ0ea
TFjwf233slKnTFjw/xPy+jUcC/7v3J8mCgv+P/nujB3RryOxuv/r/q8f+qEf
+vFVHbr/6/7/Cf6vodIvdSPY+n/q/+D9BbVdeD+Y/zL/B++nBe+vKjcAtrL1
/7800yDQwtb/U///2Pp/OkcAvL9X7Cy3szYjW/9P/R+8v3zTcXleJDL+Yf8H
76cF73ev22ltUHIrW/9P/R+8n/o/eD/1fzgvo/6v2m/za/N/8P7Ccn/pKLb+
n/o/eD/1f/B+6v8fW/+v+7/u//8m/wfvp/4P3k/9H7yf+j94P/V/8H7q/+D9
1P/B+6n/q/bPB++n/g/eT/0fvJ/6v2q9Lng/9X/wfur/4P3U/8H7qf+D91P/
B++n/g/eT/0fvJ/6P3i/yv+3VD62xTbF+o/3/x4rfqybKb2Frf+n/g/eT/0f
vJ/6P3g/9X/wfur/cD5C/R+8n/r/f339v+7/f43/q9b/U/8H76f+D97fcuKx
2KH9jGz9v+vjaMvTLUa2/p/6P3g/9X/wfur/4P3U/8H7qf+D60eGTk4Q+9D4
u/0/8asZTV5di2Lr/+e/qNkz69JYtv6f+j94P/V/8H7af4v/g/fTgvdT/wfv
p/6vmu8A3p/mjjZowsLW/49I0yr+GWfW/V/3f/3QD/3Qj6/rkHM72wpW1X0B
xbzgWXIO0khW5T+/MXGPLMXnse497bPt3W5/VtV8wJXuGrj6sJ6S5yk3WbWp
te1Hu7PKq7kMZtZm1tJjh9yIY13um25/sWhPVtWPeeGqenPyDdopaNum9G+/
OuVJVqc3X2N1H5q1cqnVp1h3pNa+oHyWdal5d6Jt33iw7qivnRH6sDrn1nqx
BsefdWTNdJ5VNZ/IUL3RvSYVbrLmOpFjz7YU0Vg4f6hrb92yUy079uKoQW93
3TOIQy006XZgtanMma9HCCdv2bAf+q2LzVPOIPbKQYQ27FLDd53MKQzKf76r
X1g14yMbFuZk+cjryFjsyG3D74bNCxHjj04ZvWhMNDarBKggEWP49vnq6EBW
bTeUkS8DWFXf53XuYxKGXSo901M0bdKji8s7C9b5vA0WsyKmlfedbsM26Op2
fd3oMPFsgOu5FLts2OKjaoaluhAm2gS5J5vVwYaVY0tzh4lzE+NOHSppxGa6
djp38LLQ3/73WCzMo0yaZO2dQZFBrDBvlja0ZWSjKwsCWFXf23X3S5+24Nnj
rHFyvvc11l7xZ7krhS9rnstlm6Qr5M0Kc+RoU8j7hOdY66UsWd1z5RFW51zB
E6yP5Nxmd1bn/8+XdVirFMO6ugayOucZ8nbzr13pvCMC++bngtaqhQKEvGzb
ZMFuKHfWddf+IBEU6XW7azMb1iEvzMJE38aNVvd95cAmqdBx4eUBUSKdHPRp
x/asljDhgDfhotGCE22nxNqxnsfLJX1QOUJcKfy298BHduzlu5rwRYgU55Y1
TRJmx7bJKgeFi/iLt0WncjmwBV5XnNj3YIQIqV96W8kBDuy9YnKgsli+YVuf
mhXisNquCCNDokRFsWxIFl8Hdqf2Y8gYJQrlHdPz+AsHdl70oXw9+kaJKPPy
na1TxmG1aYXrF0QJ5y8Xh7VqX48vFyPWXNpXu85QB3ZQvpzR45pFihTfxI0p
Vj8O2zb15iaNX0YJa8zPQUf2xmFT9tHAIlpInlsZh5WMvT5azKkXlXj7Jge2
ibyfGymOFlzS7u6iOOw2e2wy34XRQv52t8RhM4zNvSrFkWhR8nJwn9DNcdjV
+ccV33swWmTKoEGoAysvo9tGisJy7qADu+BSgkITHkcIub2DiwN7XmNin0iR
v8mg5B3X2LEzK27UJk+LC1m0yfQG1vTTBtZ1D49g1VR7+NRAVtVcYNV6+IbV
c9w48iGEVfX+E9ZgZfwZBq+ffH8PY73wvsusOoeDWVdJvwxjHXE5u+Pyi1BW
1b4u4fLzMIxVtT/PD/LzJoTV+fkfzPrzSvlMYL0mN6AKYw2NXnc5TTVemA9M
q9qnKFFNbQJlOCvMAaa9Wj5j4tCUoazw+Uar2pfDOX/bi9X5x/ZkneWiDbj0
YpXb6JX1ZI0/ecz+ZKQvK8y3p1Xtd+fTfdLFZ2mCWGHuNK3q70u1L1yyIcvd
eiUIYNWmuK4rG8gaNX3trS5WXtXvX3VfIHip9g7szvr2ybx+Zx6eZM0gbwge
Y1XdF/AeY0hdoP1NVpjDTedxy9vD3e3YoitsQY9Lh4tlebR3Cju2e1S74JIJ
I0QTc5/ppw12rN+gZb36F4sQ2i6SPldsWO0sZ82zMHFp/8/VGs63YbW/xB9/
DBPP217qf7ajHSu5K1+4cs7O9pTnnzSIsWFnnKnTbGZFg/il48HKXc7asLla
5fPaZwkTrtp48ZZ27LH92hddw5Xfo5FP021GrHiXeX23iWEic54BTdMviMGe
lAtggkVOuf4lEht/8lj2tSH+eS3nbUZiJW/nCRTbln9/u8B4K3a6PP8PEbfl
nPBorOT+ksHKOfJZ5O/jBqtzTuxN1kLh86dMrXGbNZNcx+HNqpp3f2r8OY+8
jXxYVfvP7E5Yo2atHZ6s423zLv5U3It1tJyf7MGqTT3ent+TVbVfqIdzsDtr
De1yKFcMVl4WdwpWvi5KxJ9t5ktnw67K3Gte1VWhYkhLbSWWDZupdoZGL17+
b147ndt+dc1e85Nq9v/1t3nZkqEz2rDy43FDqPhOzD43vLoN+7SgtjIlVJTr
FTSsYFMj9u2yJYuueIb+dv7iw2qVA9u9WUvI00Rf1pRCGxwfyJqjvnbi7c+q
Oj93roO7yrr2pHbn9zprvaC8989GuLKq1j3uiP9bzrN1GetguQ5uP2uJu2sT
lC16m1W76xr/CcpaQ74wo1mr/CTPDFjd5QKSa6xN5A3uIFbnfppGVtV99tbL
J5QcvT2A1bl+zc56fkWm14t7RLAaMzct6hhwnPWqnKs8l7We/HsbzfpXkpt+
6Id+6Mc/4tD9X/f/v9D/wfvrPNr0OsMgCz4G76f+D95P/R/8nno+eD/1f9U/
D95P/R+8f8N0bWWTFR+D99N+Lv8H76cF/6D+D95P/R+8n/o/eD/1f/D+O+le
dB+RxoaPwftpdf//e/0fvL/nh9JXt3U242Pwfur/4P3U/8H7qf+D91P/B++n
/g/eT/0fvJ/6P3g/9X/wfur/4P3U/8H7qf+D91P/B++n/g/eT/0fvJ/6P3g/
9X/wfur/4P3U/8H7qf+D91P/B++n/g/eT/0fvJ/6P3g/9X/wfur/4P0q/79U
/eXps3Xtn93/Vc6s+7/u/7r/f33+v3ddoZ3ZvonFx+Ca1DnB+6n/g/dT/wfv
p/4P3k/9H7yf+j94P/V/1Zwd8H7q/+D91P/B+6n/q75HA97/oUzR+I8cGz4G
769RtF6LZsWs+Bi8/+KJ+9YPx834GLz/mHwimPExeD/1f/B+Wt3/P6//g/e3
fHf+WKFHFnysel2A91P/B++n/g/ez/z/N++n/g/eT/0fvJ/6P3h/r+fGTJZS
Nt3/df/X/V8/9EM/9OOvOHT//yr9v4Kf2bFgvgH7uf2/zGttAm8s9mPr/8H7
acH7acHvacH7aVX/PHg/7aeu/9d2R2j5jQUL/v+qaN+rNa+ZseD/qv08Vev/
VR4C3k8L3k8L3k/7qev/+1awNah20oIF/++Y7nbV4EgLFvyt6lTtC5iR2D/q
/8Ha5fPIQCz4f/qQFj+0sBmw4P/ObSnCsH+V/3d1L76yuW8QFvw/gfShcCxc
X2TttH3O0YIWLPh/jmOtj93NZcF+bP0/eD8teD8teD8teD8teD8teD8teD8t
eD8teD8teD8teD8teD8teD8teD8teD8teD8teD8teD8teD8teD8teD8teD8t
eD8teD8teD8teD/tl17/r3Lm2c2LH+/mYcWC/6vef7za9Ms176kFC/5/M8v3
dysMs2HB/+XbRB4rFvz/wISJe8q72bDg/+vT7rtmrmfDgv+r9nX38bz07b6e
Niz4v2p//tzzuyZrOsOKBf+/btkzaGM6Kxb8/9iL8odHvLBi0f8Tt+s/c6bt
f/3Nk1vkHXg4ZR8bFvw/iWXOk73jbFjwf9X3MuTYmuV2LPh//JN3a6eidiz4
v3wb97Ridf/X/f9T1v+Da9KC99OC99OC99OC99OC99OC99Oq9tkD76cF76cF
76dVzdH+0uv/wftpVev/td11cl0yYsH/h15s9SRVyhAs+H817W1xQwgW/P+x
HHQfigX/H9KlQ44s1jAs+H/qp2VmzBhsxIL/S27OZsKC/5dZq+38Fo4F/694
tNq9HVnDsH/U/2+tOJe5Q0goFvwf9gml+4Ve18aW3TdhP7b+X/W6AO+nBe+n
Be+nRf8nBe+nBe+nVa3/byg3tjJhwf83tX+x7ckzIxb8f1xdbYO9cCz4/2D5
vIvC6v6v+7/u//qhH/qhHwl0//9K/R+8/9b795uTFjMx/39wRFs5bmT+/0zb
rjJ9BPP/GAntBrb+n/q/av/Af5r/g/fTfmz9P/V/8H7q/6r9PD+2/v9L+T94
Py14f4HaZ7+/PNrK1v9T/wdvo/4G3u8VnOJx30XmL7b+3/XHyn0HdTKx9f+O
rRqgGv/y9f+uTxrE+KyJZuv/tU3YTw8xsfX/1P/B+6n/f2z9v+7/uv//l/0f
vJ/6v+r9B7yf+j94P/V/8H7q/+D91P/B+6n/q/Z1B++n/q/anx+8n/o/eD/1
f/B+5v/gyMT/wfup/4P3U/9XzSkA76f+D95P/V9f/6/7v+7/X87//+71/1nk
x72Frf+n/g/e76m9bfjGsPX/G8YlW3+yRyxb/y9vR2Q2svX/1vizUq9gI1v/
T/0fvJ/6v2r/efB+uRx+hJH5v/ya4Aoj8/+J32kLQWLY+v/M2sdOKyNb/0/9
H7yf+j94P+2/xf/B+2nB+6n/g/dT/wfvH1r124IdppnY+n9rK+2M18z8/77v
9r7bS5l1/9f9Xz/0Qz/04+s6VPN5VcckbV5KF0GrnKui+PVn3WzhVyHvRta4
+QXXJ1ztxxp/DlF16osg1mcnFrYpsM6bte7SJLmeVXdjLWDRJvbdYI3WLs9L
m1nbTon1fdXEweqcb+PPqvy5NbxrrnJpr6CtXbHTL67iJOvoxaErepe7wNqj
9P1ez40nWJs++CF/0SenWV/5mGYvc7nN6rz/EMi6TTt9XBvEKseG5Qxk7V9J
WwjjwboxXZqLF6tdZ5VX6/HXVdDL32oDivzFpBhtAqUVW0GbtlglVNT5Ybfn
rad2LHzun830IOJUEgf2yK09OfvNiD8fyLsmcOcqO1aOpdoYLpprjJvTjg1+
V0+bkKecF7D0Z20nHBtWjg0uEyZu7D41eHdhO9bnfqUqDS4afpv7aMIOi9FE
xiA2FBmeOm5aDLbaC+2L4cGioFux0m2fRWG1qZTe5YLE4M7agFwzFuYYeslB
VFZsaN9a6+56hwh5eprPjm3/vMarXCcMQp7ud7Jhv9cu0/P/7zqQXg/GX/PH
X7HbsA+GaQOkQ0V0k0XTGpUzYWGe1/Wkub+rPCIW2y/sQ6pj+0JEc+12QvYg
1nLjtYmb/qzOualerGtb9z29OOdpVveli4t4PLrCWjXBlqHxr2VWD3nfgHfy
s9utNhXl1S5ufprgz2oIap6xXWpP1o6Nt03cPNOLtVSN8kteJQlkVf0+GydK
O2VLM3/WM/K8NQrbOZd2ZylQTDvg5lKloBULz6udwZl/TpXfhp3X8vGedCdD
RcaiLX59dMGOlWNB74eLnbFuTXfUd2Dn9m0X/wyKEGObnvk5ppcdW+Qb7cIv
XAyXgyYdWJjnK8eqetuxnYs9nXIyXYTIWbBXmXbfObDj5HVxpPLfO/Tmu007
SjuwWSp5bKjpHSEWzF8ZubBhHLbNsbu5Ur+PEg3KJC4i7Has+69+hybWj1C+
HlWvC9Wfq2H2FH6/bHBgbwaEJwzZHSkSrtEGBTqwMKe4jHxex2F/WlIhYvWK
aCHHcGaMw8qxkxujxOJ2dxe1nefAOp8/kUKOh8x5B3uuuVvuqftjfrvujMM6
nTxKuEsPiMPebvlN6ZfposULr+zLwy87sKVrvZ7p8iRS9Mi6NL3nT3bsa/m5
EC4yz3pTvMxpO9Y57z5cvDo0fNWTVnYszPM9XDr0/Z7TNuxPbyb0aWQME/I2
dmYDa/X7ciIy6zeONGUGnfNl1XazOBznz9rvkBj+XV4bVm5XdDRUuf5fu5vT
K8iClW8zuYNF0g7aO5EV26JZsZa974UIW3+X3QMrB7PCHGBa1X47jXKMuH1z
eTCrat+h8X5FR4w2h7IefGsffa0xb960t7RnJKtqXvPIGmMzmHobWLWzozUF
eCtFvlz0cnsYK7xuaIdInzCwqv68qrmx4+UcbB/WVbN3aaMcWZ3zJ2+xOtc1
XGJ13n9wZe0o57vynmrfMHi2/RqrS/2qrQPe8N6fcL5UjvzurC4jXtwvPs+T
1XF774yeXQNYYV4lrXOfL3/WcLnxRgArzAGmnbJqU/yphg+rkxc9WJ2f21dZ
MwzU3mjPsDp/vydY62nbgKQ9w1ph/X4Xxz0v1ntD9izcn9SGzT4xy4Tms0KV
309xb5a09pBSduyt+HcDr9sG5fuYdncg51w7NpW87x8urj3olL5cRTvWLf5V
1CnMIORy62x2bFjXR45yPxtE/H907Tjdjk2XME3WnaPCld+7qXq3Vu7nW21Y
F3ndFCaayD9HLDau5hmNgkWmYseee56IxJ54uXZfk18CxMANBzKaPQJZ78j1
EQGsnvssXSql8GFtKu8/e7Gq9l05oi2D94vCtpZv9EHiZ7n+KBYLc8NV+7E0
lTeUvVid64w8WZ3Plxus+/OsHrH/7E1WY0Tau429vFlh/jCtan9Udzlwm3fs
rCXm3Yl8WeXl6JabrLOT77z1/r0na7Zd2ombH6tzPG0Aq7GylHTWk3Leewy2
Y81FIaUGBotg7euxK61YeF7JcbwbrFjr3C4/t9odIs45VletPsaCPTn2of+Q
LkHifOAGk72QFes8Pw0WFy9tWbou2IqVY3LzhYpkdSvnNw+3YVvnr7DzUusw
IZ8e2c3Ys+Ent2cZGn/+dlZ+grPm0E7Dynuzztq570HyCB/WLEsO+l0L82d9
0koDZz/WAuOX7pibxZu19wltEPQF1s1JrsW/xD1YVe97CeI/DXP0HcKq8n/X
w08TXI79mTX4yN4KJW5dYd13aLa2hI1VNSf6pXMhDauxinZf4iJr7i2unca5
+bP++ChqxuvrJtZ5ct51IOvVRmPaJ2zjyTq1W8lCQ+tbWMvPatrz4t4wVtXn
eD15/bSSVe1g//c61T9la/qhH/qhH//kQ/d/3f//Qv8H7xf+D96WfGHCx+D9
1P/B+6n/g/dT/wfvp/4P3k/9XzUvALyf+j94P/V/8MV1W9+Kzq9t+Bhcljot
eP/VVzsu3ulhwcfg/dT/wfup/4P3U/8Hj6HOqVoPBt5P/R+8P23s+sLJM9rx
MXg/re7/n9f/wftpVc8r8H7q/+D91P/B3anDg/dT/wcXp04O3k/9H7yf+r/q
3wveT/0fvJ/6P3g/9X/V61H1ulD9ucD7qf+D91P/B++n/g/eT/0fvJ/6P3g/
9X/wfur/4P3U/8H7qf+D91P/B++n/g9ORt0MvP+v9n/wflrV/v/g/bTg/bS6
/+v+r/v/3+f/9zo0qjH9qhEfg/dT/1d9PwW8n/q/6n0MvJ/6P3g/9X/wfur/
4P3M/xXfuwHvp/4PLkudFryf9u/yf/D+5JXnTGzZ3IKPwfsTaMv8b1l1//+L
/R+8f5G8YLDgY3ge0YL304L304L3U/8H76f+D95P/R+8X3v2L3tj1/1f93/d
//VDP/RDP/6KQ/f//7T/O30nFAv+X2TihRWZXpux4P/lfaf/cniFBQv+P7ez
9s29SOzH/D91/9pvrHujsB9b/w/eT6v63h94Py14Py14P61qvyDwflrwftrP
tf4fvJ8WvJ8WvJ9W5TPg/bTg/bSfuv4/qYRxCxb8X5u26t8+AvtH/X9VQJ0N
p64FYMH/18l9biKx4OoN5AWUGQv+r6lpnnsRWPD/bH1OFc1fKwIL/t9i49XQ
0l6hWPB/p9uGYcH/n3meWPPhphkL/j+lnCZiZiz8PufIQa8m7MfW/8PziBa8
nxa8nxbcnRa8nxZcnBa8nxa8n1b17wXvpwXvpwXvp1W9HlWvC9WfC7yfFryf
FryfFryfFryfFryfFryfFryfFryfFryfFryfFpyMFryf9t/u/4G9x+yoGmvB
gv9ru0EHTLBiwf9V++3PPh9QyZHGigX/V80dyJXtyNwLVW1Y8P/TLsuTWeOs
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
yvjLhPOleJ1zMsNYNcXKm8jAqpoXv2DfjsBmLqGsznnpBtb7S3JN+bY/r2rO
rHM+7TVW/1o+V9Ju4T0l55S6sxrk+cgp1mBtO5flx1k1lc158yTrwjKNDxRv
cJrVuY7gHGsF6d/HWJ1e4sJ6tc3FDxennGXtKN/XrrI674ueZ+0t59tfZm0o
1yVfZXXO1TzDauifdPG280dZn8n7MMdZm8r7+SdZK1Q8EvjoxhFWp89dZK3t
6u7a3M2LdWqNnKUPhFuxVbK9PdeiRKjItO75tOmJ7dj+Pqd6PptqEB0XFe79
opENe+d0hiL2BGFCbhM32oQ9pI13zh0u8srPJxNWcuNmg4g9HNc2W3MHVrJv
ykiRtFdM7tvRdmzz7+drt3RFXXvrlp1q2bEXRw16u+ueQbRMMayrayY7Fn79
7SnPP2kQY8PCnN9GC060nRJrx3oeL5f0QeUIIT+Ghgez5ug3I1dQCW/W1dHt
axSJ9Gd1rovxZD2l3c5Zd5N14/Yb36Ry8PaQ54+3WFVzsZ2fA7HY12d/rNx3
UIhYdv110rNuQazJliQ+/bqXN6vqvrCm3xnDPFhTaD9eHzfW1nIQsy+r6j7j
M20503Jv1vdZfu3YrrUf61ptG0A/T1bVfcPQkW2rdbN7s3Z7crxwp8a+rHEm
bUKwH2styfcBrC59TM1dhwWxLhqzbn61F/6stxw12iW468caNbPXpdSB3qyq
fYpyVrs8ddq2SCzMj77wXfLDk/ZGYZ3r1gJF80p9EnU/asTCfGGVS6t+/ofs
2kLBQNanqUdqH1msqvvIw+U6kVuszrm7rqwr5feZr7M+qj3r4cS521mvyvt7
E1mbSp8+xlqveo4bRz5MYJ31g6PN8TanWZ3rHdxZYU41rbv8/vZNVtX6K/H4
/dO7Pf1Zq41ufN+llIm16lQNfIJY5XagfmGs8mtEa82scF1OW0TOdT/HmiCr
9rxYwTpL+tMwVt3/9UM/9OOrO3T/1/3/L/R/8P7813pU3ZLMgo/B+6n/g/dT
/1ftw6/678H7qf/DeQT1f/B+6v/g/dT/Vfulg/dT/wfvp/4P3k/9H7yf+j94
P/V/8H7q/+D91P/B+6n/q/5c4P3FonP1t2Sx6f7/O/0fvJ8WvJ8WvJ/6P3g/
9X/wfur/4P3U/8H7qf+D91P/B++n/g/eT/0fvJ/6P3g/9X/wfur/4P3U/8H7
qf+D9zealuiA9aIVH4P3y6drZzM+Bu+n/g/eT/0fvJ/6P3g/9X/wfur/4P3U
/8H7qf+D91P/B++n/g/eT/0fvJ/6P3g/9X/wfur/qjkpKt/+0v4P3k8L3k8L
3k+r+7/u/7r/f3n/H9Wj5dtOZ4z4GLyf+j94P/V/8H7q/+D9p4vfKZ+sgx0f
g8dTnwfvp/4P3k/9H7yf+r/q1wfvp/4P3v9f83/wflrd///b/g/eTwveTwve
P/n2yAN5Vtt0/9f9X/d//dAP/dCPv+LQ/f8/7f9HE2jfoDNjwf9PV/wm+toM
Cxb8v86jTa8zDLJgwf+92vTLNe+pBQv+/+6Gh/v3AyxY8P9qV4w/TEplxn5s
/T94Py14P61qHx5VwftpVecV4P204P20qv1SwPtpwftpwftpwftpwftpwftp
wftpwftpVX8u1fr/rbu65Rt73YIF/387sXTNtfMisJ/b/2132k1teDsCC/7f
ptX5KrdumLDg/997zhs5cIMJC/4vOTunGYv+P73xmptPTP/rb/6fo8DrihP7
mrHg/+lP1Zq5eLoZ+0fX/4P304L304L304L304L304L304L304L304L304L3
04L304L304L3037q+n/wflrwflrwflpc708K3k8L3k8L3k8L3k8L3k8L3k8L
3k8L3k8L3k/7T1v//7n8f2kx7ULSggX/b9qkRxeXdxYs+D/MZafz2WGeOp2r
ns87TUzFkjYs/HxC5AWyDQv+r+02kPuuDQv+X+BsxkXGCBsW/L9ao3tNKmyw
YcH/i9/Kn371DRsW/P/ZANdzKXbZsOD/hbWnV24bFvxf25Wos48Nq/u/7v+f
Y/0/eD8teD8teD/tp67/B++nBe+nBe+nhV+PFryfFryfNkW+hYV+/dWCBf8v
dvN8Flc/Ixb8v+RW96FZK5ux4P/a7iV5Bhix4P+1dmweP2xlCBb8v/SMGYNT
nAvBgv877xPHYsH/x+1MECz6mLAfW/+/N32OgF77LFjw/4IZe1yoH23Egv+X
Hax9Mpmw4P+LulepluZ4MBb8v/+StaPGugRhwf+Tu2tXNAYs+L9z/xIDFvy/
m/bLpjFgwf+N2tv78HDsx/z/Qpc68c/sQCz4f9bmDyNzfjBiwf9fHEy+IUcX
Exb8P3yg34z2+01Y8P8Zi3Ica33MjAX/rxq7ZNz3Uy1Y8P8ijgEZt9czY8H/
2+8f0jfxVRMW/L+L79g6yd4YseD/qjkFn2v9f2SPuQHrp1mx4P/ap1j2TSYs
/Py11Umtb5ix4P/OfY+isLr/6/6v+79+6Id+6EcC3f//4/4P3k/9H7yf+j94
P/V/8H7q/+D91P/B+6n/g/fT6v7/7/J/8H5aXO9P/B+8v1yHwu5Lipq/2Pr/
QkvPWPs1MbP1/9T/wfup/4P3M/+Hdf/E/8H7qf+D91P/B+8v82rchrZlzL97
/b/u/5/m/+D9tOD9tLr//zH/V81J+a+s/6f+D95P/R+8n/o/eD/1f/h5UP8H
76f+D95P/R+8n/o/eD/1f1zvT/wfvJ/6P3g/9X99/b/u//9k/wfvp1X5/D/N
/8H7qf+D91P/B++n/g/eT/0fvH+z9rHYKZat/1/isunMkhmxbP0/9X/wfur/
4P095X1hK1v/T/0fvJ/6P3g/9f8/uv6/8uQy25d/b2Lr/+vKhSMmtv4/umLJ
srnuGL/Y+n/q/+D91P/B+6n/g/dT/wfvp/4P3k/9H7yf+j94P/V/1ZwC8P6L
J+5bPxw3s/X/6RqueveuiuV3r/+n/g8/b+r/4P3U/8H75dMjq0X3f93/df/X
D/3QD/3Qjk9935Ou30uwqub8yjk201lV1zuqeaNlQt/vOe3jywpzmWgvxL2s
kGmwP+varof7Nm50nbV/xeZ1Mh40sopdt/u9Hn+fdVKqUvFn2iGsqh9bAe00
fth8QbtQzj3ez3r3kMcPpUJus9ZLWbK658rLrAmmPC/XdNxFVph3RFtVzguN
wobdrDLK9DhQaJg9OpcRuzXCs3+vUaFijpxfaMSCj82QbhGDhfmDdjkvMQoL
c3/kFKdICxbmM76/OCX77hp2bJ28V1bXjzOIvPfPRuTYbMdOcX4xXHQeXyL1
npc2LDjDSsdWe2wyO7aPHLRpEC4XSk/POdKO3ZRLO+MIF+sK7cz2zQoj1jNb
yVhr1zBRrlfQsIJNjVjn9XKoqLxC21DHht13zVxvxOUw8Vz7MXa0Y+XlRb5w
kTBHqYaxlezYBkHan0S9337NCo+exDS1Y08lPtjsbLJw4SsXWtqw0Q92Nbxc
KExoZzs559qxMLcuMP537Z3QjrVNSfNs1SSDeCCOxiQdYsfmlYOcw8VeCbM2
LMxB1lY5rXpiw45eW7BOnm4Gkb/22e8vjzZijc00CAgTw271XTulUDBr9j6n
iuavFcjaabs28TaA1Tc00JZtojvrLHk76jCrag64HLO3wZ/16crMveZVDWBV
7Rd0NbS0V+v3fqyZ5ABBf9bZkaaS+8dHYAsdvhFZ5Ki/mLTCL/5SOQoLPwd5
WZTair2p3U5bEqycEyFv2x2yYXemnut44RUmzo/YmvzROzv2pHwhR4jv5AIr
B/ZJtXLF3peKFP4ZxuZelcKMrff0Vty2FhFijE/3SRefGbFzhm/Z+bywQfk+
sNer7IMSd4NZN83MXb3wDzFY7apy+7FgUc1zZb50ZY3Y9HJeZKjocMC3R/QZ
O9b+XLsREi62ltRuEDiw8jIic6SQ4xi7xmHFct90+4tFiyM/zZpV6Z0R+y6F
dsPVoNyvLMnMB5kWN4rG7m4b5J5sVpB4JaHFga34WLvhFPnb/cw47Lb4dxvf
hdEi9HhI/jMudqzcPsk3XIxMe2LM4lAHNs/lsk3SFYpSzjXYkLhHluJZ47Cj
tNtT26PEQE2Z7jqwabdkrHWoeZSQt3+yO7CFOpp2bd0VIe4mOXTkuNGBzXJY
23ktSuzLMN2r+rY47Ap3tzdDj0eLonGeqSdXc2A1PbhniRBzj82fV9pkxzZL
EjaybbUIsbSiWDYkix3bNVnTGd5bDUJ7lnY5a8LC+3b58LLrvj1hwr6XGxmF
iyunzoSf3B7Mqt1tu/PKg1Wbprq2mg+ryvmXaLcFD1qxki1uh4iQCwV8xhgs
WDlVumiwKCDf16xY+fTtHPKbM/Ga41/lmQ7xqu7PquYgt50i7/Cxjhn/Q70q
d0JZBzs3ZGJV7SMU4BJVa3xECKscH5shlLW480Yeq8o5m1lLjx1yg1e1f5rz
fesma/UxmuDcYFW5dIlS916/SebC6rzvcZbVOWeV119+zpxitX447jkq3VlW
1a9TQn4gXmA1amy3/ShrBq8Et1ecO8laQZsuXeUM68JV9ebkG3SCVfXz0aZf
Nq/D+0ybFmo7wypvS5U9z1rPcbJx+UonWVX3R8bLee9erNrdmSzFQ1jr138/
aeU3duy1ojc65Yox/LZ/ogk7wSNCe4sQA3/QzuSM2BGXszsuvwgVPeq3PFKg
WCwW5nS3mltq2qlxUdgHndKXq3gk8Ld15FYsvK6PZos80HGQHbvNf+bZnd+G
i5M9VvxYN5MDu7dHXPxvIUJsqasNaLVjJxVYfP/hUfX5qnNfSxMW7qer3Mx5
f8CTtd6RyalXbPBlHa7dbszG2/jKgvhnDK9qnuZ8eR/Mg9V5P8qT1SWF9hP3
YdWuKsqkC2bdkT9Xg5GFA1kfRJxKkr5hAKtRpHCv8+g2a5pj++JP5W+wqvYX
2rKkQsTqFT6s8Set8Z+gvM/219nZf4gfq/P566HoaVbV/j+eDbQFBn6sqvnC
oSk79+x3zY/VM1WWOhOEP2saeb7gzQpzlWk7ynVPt1jdly4u4vHIj9U4IXOG
tnt5/V0fR1ueerOq5pLD/GraEWV7jhzTJIB1qXdDbTQxa+31bW4e7c+rXd1s
nB7A2uOGNtDZg7Xpgx/yF31ymnVWk1fXvI2XWHeMnnHtl0e7WWfJv/8JrP49
Gxzf/2YLa2+5MOMnVkO5N3WWJjnImiFEG+x8lTXJOg3wb7O23rzYK9b1FutG
Ocd4D6v8enKwP6u8jdfByKrah0ouh2oXxeq8X2RibVVl5eO4NZGsc6WXuLI6
vX8766xzHnkbbZ2taF/WL2Juv+eQDldasOqHfuiHfnyuQ/f/r9L/wftpwfud
bmbFx6r9scH7H8p9Hqz4GLxf/rjemvExeD/1f/B+6v/gRtT/4fqJXk+B91P/
B++n/g/e73Hu6KXnY2z4GLy/13Ntg3IbPgbvp/4P3k/9H7yf+r9qv33wfur/
4P3U/8H7qf+D91P/B++n/g/eT/0fvJ/6P3h/G41JO9h0/ycF76eFP/d9+cQy
42Pwfur/qjkR4P3U/8H7qf+D91P/B+9PsH/m9fb37PgYvP/n/kPyzwiz4WPV
OnmV/4P3v9X+mvJa8TF4/6A+2zz80tvwMXg/9X/wfur/4P3U/8H7YyotL/4s
1vZR/wfvPxGqCbcFH4P3U/8H76f+D95P/R+8n/q/aq4BeD/1f/B+6v/g/dT/
wfup/4P3U/8H76f+D95P/R+8n/q/6n0bvJ/2S/s/eD8teD/1f/B+3f91/9f9
/8v5//43eaal/c6Kj8H7qf+D9+dapU2IsuNj8P71abUzMRs+Bu+POVv5fcAE
Kz4G75dfG8xjwcfwOqb+D95P/R+8n/o/eD/1f9X5qmqeju7/uv/r/q/7v+7/
uv/r/q8f+qEfX+TQ/f8/4f9GCbb+WPD/u+O0Kz0z9u9e/w/eTwveTwtuRKva
ZwC8nxa8n/ZT1/+D99OC99OC99Oq9tsB76cF76cF76cF76cF76cF76cF76dV
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
p/4P3k/9H7yf+j88jxoU7DDtgJv1s/s/eH9SQ1DzjO0s+Bi8n/o/eCT1SdX+
t+D9ecb0PP6ivA0fg/ePGuvS4sdfrfgYvP/sUkvKdxMt+Bi8n/o/eD/1f9Xf
O3i/c38P23/G/8H7acH7acH7RYtmxVr2tuBj8H7q/+D91P/B+6n/q14X4P3U
/8H7qf+D9x94FODbrqzjH+v/4P0j0rSaeCzWjI/B+6n/g/dT/1e9vj7V/8H7
y4zz/X/Yu+v4KpKt0fvB3S24u7vTwd3d3d1dB3d3dwkQIEAIgbgQ9+wYbE9w
GXyQN119Vj3vXevW5TzMDMPMVP3z++QMZwZCsnf3tyu13GbsNvGPwfux/4P3
Y/8H78f+D96P/R+8H/s/eD/2f/B+7P/g/dj/wfux/4P3Y/8H78f+L9q/Kjr/
H7wf96/2/8fsuaqZfwzeL/1f+r/0/z/e/8H7sf+D92P/B+/HBe/HBe/HBe/H
/g/ej/0fvJ/4/3+8H/s/eD/2f/B+6f/S/6X/S/+X/i/9Xy655JLrL13S//8R
/v+8YtctcaXDecH/wz7mChztaeDl/r9YPUnB8D9F/o8L7osr2v8P3o8L3o8L
rokL3o8L3o8L3o8r2v8faedzousUIy/4f3SJwmfGfdbzgv9X8wxqbTvZwPut
/f/g/bjgkbiin3//o/b/g/fjgvfjiv7eRfv/w4dNP1rvgYkX/D/QVT2pxMQL
/u/BDn5J4P1e/+9rDt9YU4niBf+fH3Grj+6OkRf8/8ax+0O6+Bh5/+j9/+D9
uOD9uOD9uKLvC/B+XPB+XNH+/9aLUp8zu5h5wf/vl7+/dMgdEy/4v7lz0oDh
74y84P+dVgxbY7PayAv+r36Weo4x8IL/33uYpo1jjIH3W/v/wftxwftxRd9f
jXO2fvsuxswL/p/eqUKXSnoD77f2/4P344L344L344L344L344L344L344L3
44L344L344L344L344rO//m77P8H78eFc+7weXcnHcedLH3JxAv+X++BeoKS
iRf8f+ZFh4VRv5h4wf/P9w48266HmRf8f1ThR08to8y84P+rbVZnDrtp5gX/
tzkUUuiOn5kX/B/mreK5q5eyVE7t2srMC/4vmuci/V/6/x/h/7jg/bii/f8i
/xft/wfvxwXvxwXvx+X+jwrejys6F2vM8vYeN5ZZecH/T5XJU87hjZEX/L/n
ueBBiTeiecH/tTn0Ol64H2GngU3R8X6v/688FZ24624kL/i/7anDGXu/1/OC
/+9XLyN6P+AF/99woY7LlTVGXvD//UHd/PIONfKC//86qqdrNXs9L/j/M+Xy
/XTjo3nB/2tv2fjs1skoXvD/GZ7qiVoxvOD/N2rtizkwW8f7o/xfez4Uwwv+
b7l3esngfrG84P/jwy82r9cllhf8X3Te/rLYAnVfr9b/T//zevvcOVPGChEP
eMH/X+4fkqX5iGhe8P9jD7O/HTg5khf8f+uklimX/pG84P+nj0zuGj40khf8
X5u78IAX/N+//yVfu+IGXvB/0TyL+S1H6UalM/KC/3uyP1A8r/R/6f/S/+WS
Sy65/h9L+v8/wv+/tf+f+D/s+xf4v2j/Py54P+7P5v+iryvwfuz/37v/H/eP
8n/wflzwflzwftw/yv/B+3HB+7H/g/dj/wfvz3XErlLD6qY/bf8/9n/wfuz/
4P2r30SNaLzL+F/v/8f92fwfvB8XvB/7P3g/9n/wfuz/4P3Y/8H7sf+D92P/
B+/H/V7/F+3/x/4P3o/9H7wfV/r/9/n/z7r//7/1f9G8G/B+7P/g/dj/wfux
/4P3Y/8H78f+D96P/R+8H/s//Lmx/4P3Y/8XzXOR/i/9/0f6P3h/1lFNPppP
m4n/4/N/wPvPK5P6F82m/2n9/1v7/7H/g/fHPZ7Vu0YzPdn/n6FCRMiN8oYf
vv8f+z94P/Z/8H7s/+D92P/B+7H/f+/+/4fv1RPu9WT/P55TAN4/6PVC20x1
9D98/3+pT8PGvNhsIPv/Ry8z+yasM5D9/8T/4XUW+f9fvf8f+z94P/Z/0TwL
8H7s/+D9uXKoG56M0v+l/0v/l0suueT6EevmhCm2I8YruG5sns9yUpf+GS7O
O+1FOqdS1L4L8dGkZ5mLBJHufzbMNconlJSxVZZw0kVua982GnydNP+mWV6z
veNIZywtl+yf5SGpaJ6Xvq76fOMgqejTJrp+ME95173U0DDST3ui6y1860lq
m6AOFqR98nFoqreO4aTDU64u248PI13D5nol8oJLaPuqLbyar0YrkxhYWXgL
vJpyeNKjGD53EM8fjCm57FiL1xbeZ1Z1o4tOOckGD1p4GWPn1ylbkw6l3MlY
eWGe78N13VZtmWPlzcO+3mKVNGygmJW37bpFrasF6ZSq6Z7V3t/kPq82TzZS
Kafe9ucOJ00boF6QhpDazlVPNPIhFT0vWNlHfUIQz8tuUwqGK/UeNS785pCF
V5sbCHMfDbwODGpilfyfbnWskD+KNG25TPGpG4WQ2o5cUiiiQiBpnQPHtla8
m8AbOWl1i9Pvw5XqsVV3tbxq4T3Uu+zmZbExSrnEQqNMeS28Gwd/rex2OFph
jwH26HnZtK3xKX/vSfqJfiMiSWGeG+n+WRO3boogdWRza/1JbVo9Mta9c4N0
7RoV7L1JPWepJ0GFkZ6+HnT488lQ0tG50zZOWyOBN705+cmyCeFKy6z9yveb
beH1uz3/6rmhMcqrzJk2BZ2z8Ja+Fb94p1+MklTtWL9ei628mkvEKhOvpm7d
NTGJlx0rUD1Bsa3Xf/nxM1beaTkWjWnmFau0eTcoPH15K2/gtl8yZvDUKaXK
u2SeXMrAayo+2LfPUp2SinmfnhfmAou+ft6w+ZBhpDAPGZc93ZhDu5LNYQ4i
LcGeV9wj3Tg+b3B1pyDSlC/eI3UXhJFq7h7P22Bgxz0DE8IUdQr2njFmXm0u
YZTSi523pedtm71UkawjY5Tzn6zT3NtEk05g++rCSLcXn1n+9PkgUuvdt9G+
dZN4s5W8mWudPk7pfk/9CYtkXiN7/U9QerL59sm8MOc3UmXNosm8D9sEHKzt
kKCMuPE8z3MliZdNh30dp1SsttQ0wpjEu+OrbyXXhglKyAX1BSSZ9/5HJ2vV
lNe5jHWSp5drnszbLcv+tm3eJShlU97F5tdP4oU5vx92T29y7KuVt7Y2IFb4
69eyxyFW3u5sQHicEtmn3K8Lrll5k7vl7/A8PlZJirpdImi6jrTuKvXEs1DS
edv2jevz7A5pv+HvzmfY40TqxAbR+pMWLpBn6a6q4aSi86zWsdePKNKJndWB
t+GkoudEq688XppORzuldG7364UjSXO1GfjqSuko0sv1Hx/NFxJJqk6JzdMz
ipS9XEyhVd8NbX+NINV8OopUnQJZ6EAEaaWG1Te8TxtOuoTNPwwiFc1xTmbP
291J26n/t6KepH5nTH1rZbxD+v5YSXO9UsdIlw3cXKRVg7OkddgL4A3Ss+yN
zpF0Wa6ns50rOZHOy1zpkNeE66SaxziT2udu6/ZkA+245Gzbhu+4TlrlfLMM
Q1veIH2drcGigZtdSLX3SWdSbQ7qDVLtucpFUpHzw3x7XG3fShTpwP01rWdq
WnjfxVSp0V4XrVzOH3+u11grL8zVNW4+3iVTaDipH3t+7kVq7rcn9buCUbwZ
e78fl3TWR1GfjvXeGc/LnvoHhylFDRlq/zLXzLtgdGzKlVqUErJLvXI187Kp
21eilI5Fx1zMNNzCq+5+z1o/RjjHp+/Qqjd6nrPyqg+1j/rGKmcK+c17fc/A
C3Ph15w5Gt7ePpo0c8eLtysvvkf6vs2Mm79VcCcVzZ9Nm/3B7tIZ3EmFc6v7
qwfaXSP1Y89jvUhh/jAuOxYvZyipd6/r6pMA0h6Pn3UYujqA9Grp3m0Oz/Un
XdS95dS1WQNIV046ePxNaT9SkbeLHFj0fCGj9aqhTr9A0m6jli4NSu1JqmP7
IK6Qvh9y8Le4ga6kecs5vPG/6kmquaYX6QT2OuFNqj0/9CJt0WLkzAmVPUln
9Qpo2WWeN6n2c7lepKLXYdHrqvY82Yu0UWP1ij+UVHTe0bCzORcHNAgmVac/
7/sQSio633UJe97rQaproX7nOJJOazgjp2GYE6l2f29PWoLdwO6m9X5RPK1x
M2koe7m5TCra7+TH5i1fJtWe954lzbl8aKn09jtIMw5tmf9E5DVSm37Lml7M
e4W0SuMPS+1fBZBuW3Ei60ODntSpzsjAriP9Scvsq7H8Yt9o0lsVr5Vxtksm
Fd3fVWDP8exJbc6ZXaoYT5DmZE6wj1S0T/VHEppccskl199ySf//R/i/6Fxi
8H7s/+D92P/B+7H/g/dj/wfvx/4P3o/9H7wf+z94P/Z/8H7cP9v/wftneFwI
LRdu5B+D92P/B+93WrF3UPNO1j/c/8H7/UcNmRrd3MQ/Bu/H/g/ej/0fvD/1
2kjviQss/xj/B+/HBe/H/g/ej/0fvB/7P3g/9n/wfuz/4P3Y/8H7u9+9l3LH
beUfg/fXrJPovuSC5R/j/+D9uOD92P/B+3H/KP8H78f+D96P/R+8H/s/eD/2
f/B+7P/g/dj/wfux/4P3Y/8Hv8eeD96P/V/068H7sf+D90v/l/4v/f/f6//g
/dj/wft/r/+D9+OC9+OC92P/B+/H/g/ej/1fNMcHvB/7P3h/9JWo4jfsrdL/
pf9L/5f+L/1f+r9ccskl1997Sf//Kf0/unJAly/FTbzg/1uH78hXYYGR91v7
/8H7ccH7ccH7ccH7ccH7ccH7ccH7ccH7cUX7/3+dmmasV7CRF/zfyH7uP5YX
/P/x+FNrz6aL4gX/F80LEO3/B+/HFe3/n1jl/cw93cy84LeGuYlp0+408IL/
l/N1zusUouf91v5/8H5c8H5c0f7/DgycTbzg/zWaVZjaKMbIC/6finlVIu/3
+n+ZV/lu1RkZyQvXh+7jOjabc9LIC/5fO9OKoqltjbzf2v8P3o8L3o8L3o8L
3o8L3o8L3o/7v93/L/r6GXBy0Y6Rg4284P+xb8t89h5m5AX/38w+IUZe8P+S
F33iy1zW8YL/J6m3o/n0vOD/nu2ONt9S28AL/h9U3ano4RVG3m/t/wfvxxXt
/79ur/7Ozbzg/4x9Jhl5wf9bvVXFysCL/R8XvB8XvB8XvB8XvB8XvB8XvB8X
vB8X/B4XvB9X9OvB+3HB+3Gl/2stYKeeWGLiBf8fH9au7aC+Zl7w/wb+W4tl
r2rmBf/X5zZVyjbVzAv+Hz9oZdjuRWZe8P9i3a865nA18YL/l++snohn5gX/
v1iiXN+cO0y80v+l/3+P/+OC9+OGzZ70Zk1VEy/4f5nJ04x9ghJ5v3f/P3g/
Lng/Lng/rugcP/B+3H/q/v/Wa652W/Agmhf8vzPbEGHgBf/30L1xTf3EwAv+
X+eheuWs5wX/7zTX4cGEkXpe8P9iMS6rfDvG8Er//3v6//7xt5Pf1YjjBf8X
zTvYwlxZxwv+P/5Vv2ZFXeN4pf9L/5f+L5dccsn1A5b0/5/S/8H7sf+D92P/
F51L/Hf3f/B+n31p3bOnMpP9/9j/wftLHrvS8Pouw+/e/48r8n/wftxv7f/H
/v+t/f+4/1v/B+/HBe/H/g/ej/0fvF/9auu40fSn7f/H/g/ej/3/W/v/fxb/
B+/HBe/Hha8X7P/g/dj/wfux/4P3Y/8H73d7+iJvr0YGsv8f+z94P/Z/8H7s
/9/a/48L3r+ybpVBmeZayP5/7P/g/dj/wful/0v//z3+XzpDruyrr5jI/n/s
/+D92P/B+7H/g/dj/wfvx/4P3o/9H7wf+7/c/y/9/0f6/7f2/2P/B+9vxfz5
Ptn//6XetDZP7I1/uf+D9+P+3f0fvD88bkzIkh56sv8f+z94P/Z/8H7s/+D9
2P+/d/9/GmOx94GL9MT/J7MNE3rp/z/Z/n887wC8f24/9QdsDHL/v/R/6f9y
ySWXXD9isfnAlRXSD89ezu8yilanXu+vJi3TbHmvGUN8SAtXnRnsNiOatJK+
fc/pHwJII15WLrhycxjpNJVzz4eTate/V0hFrlLyuQrUT0mXb2x7JGFnLKno
0xbK7ld2KrgrR3R/0/C9Myn7x3kDSR17tIpcYXUndThoWZD1NW3Kzf+TdrvC
SL2eO2fKWCGCVLsOCiftEBxQqtnyBN5HRxwinW+HKzOapv/Yromed1Wnl6ey
X4sWnoveqMaLV/fbWXkd05xvfzN9rNJrXelhb1tbeB9ez1nGahOj9P4QZFix
ycz7eNfo8l+3RCnn2cApK+/OUR5pbwyJVQpty3gp8aiVd7Z3nKvjjdj/PK+4
zwu+Ifo8XC65ofujdaGkCcwj3Um1+dUBpO+alM9s9zmed2/2rC4u9cOVOb84
h9VKMvNq9/XRCpt2miuGdLrptm9SwzDSg0OnNW6SzptUNHep+4PYs88nJfC+
ZAPhwhWHt9UvTn5r5lV/OiByeLTyeXjAo3F2Vt5GY4c1DHijU/ZkO+NutDPw
Bj2pVbeFi07R1/5VnSxFKprHLdofK7r/YtyQ8xZpTvW2ZKcPqXYdHUK6MZA9
sSBdUrhB6Tl9EnmLPS0S9WprhBJ9uuy8Euv1vDC3ekWH8lcGeOt5U27K8tby
jlHSe6o3uHrei313H/qkRP9nfqeeV5tvFaP4sudSet7q7OdUUq6H5yY7Xqio
52VKuClaSfmm3xbWNIZ0ZMzXzA5nokjvsOerkaQJKd+Vfc3hpOy26nAoaYL6
3XQthFT0vGnvEZ86mZN8SXusfj1t3PBgUtH5JDAXGvd56Pi+PW0jSQuGex5b
NT+adFLLO3cObowiZceFZY8knTDfL9PlFgGkA6wHl1uqPOD9cHN57RFjo5Rd
Z+2THhdO5p2gTjG0T1AsXTr1bvwsiTdL8xHZp3VPUAr4XPqab1gS79Tq6uS0
eCUVG9CcxNvyXnizT5filZQvit1dfZN41el9e9MkKLlzdjt9ZHIS72jP8Q4N
usUr7G1sUDJvs9rFjZOqJip12YOeJN4Lm449zP42XmFjJSsk8cJz8Dmb1T95
Em8VNjA+Tnje9T6TQwG7k1bemRMq75h/J5bPp8VNYI/nA0m1eXcupEUOOvWe
6elA2kmJP3zS1Ym02tFf+58ocI80MOv9mhWr+pOK5gbmvqAO5g0nFT03XLas
1udJC2ndd2ZJDKwWQSr6+hfNKYY5qLi1b3falLN6NGnJdoGpqq2PIL26XZ28
GUkqen980LRZyLrUoaRHO6oDOv1JF/lHnHi71oN06+fPdbN0ukqqvU67krZj
88PvkmpeforUtn/tyQU+XyLVxopfIRXN+RXN2/Vi72NXSLX5n1dJQ9m+A0dS
7XnyTdJF7HmFE6k2F5dW5Pmi981hnYd326rcJdXmmQeSir7eXjafH3Grj440
5UVl4OSsBt4Z7AVap2Su23mSTYMo0rM39+y4st2fNKt6mZ7rPu9+9W0yq7ei
V4/x6WTkhXnfy1LuJvK/NPA273SpRLm+oQp7HPZEzwt/LvVvIe9sIy/st0nz
Xn2CZebVnltFKbdetbgftMPCe3Vt1xK7DsYoZ9MFlT6x0Mq79dLIC8qkWKWh
0XnE06FxpI3bXm9iXhlDKrqed1vl2zGkxibSjOz5wC3SVodyHz1V5hppTvXx
le0RUn2oR5MNRy6TiubAiu7L2rDvy2BS0XXC7lbqTghf0rQ1eq29OzqQVHPQ
AFLt+8OPVPt+8iVtMjjfxhz+AaSdZlsf3ZgdTDqmwqj11Wf7kUbOU5+MOpPq
dqiTg8+QipxW2xdzldRe3Y3w8Qpp1gUH2+d84kBaZosl5Vb4Fqno+137vLqQ
anOnPUhDGwe5ZjvoTip6nSlyt2rb7KVcSI/mC9l59Z0X6ZIbTdsvrelH6tZ6
eo9UXf1JtbnZ90i1/WuepNp83Rukda6k0vdKc4v0KNtHc5P0Bbve3Em6l/08
w3FSu0yhPbZn+oVUz54P7ycVfZ86sXnaZ0hF10V2KVeLl0cdJZ1WNuH6+EyX
SN26unx1WXCGVPMJf9IMvXZMyXbVQNqPvT94kya8V30okrTHwlYpV7pPSBOf
qSd8xpCav17xn5r9Jqn2XOUwqWgusPZ84Bfav2qJnE0uueSS669a0v//lf4P
3o8L3n88Ms+xzMUt/GPRuejg/dj/wfux/4P3Y/8H78f+D96P/V90vvGf7f/g
/bjg/T/a/8H7ccH7sf+D92P/B+/3Oek47mRp6z/G/8H7ccH70zNAtfCPwfuv
GOr0K3LWwj8G76/HgNjMPwbvT7nJ2XmmrYV/DN7/rkbucaEmM/8YvF/zE4v0
/5/E/8H7ccH7sf+D92P/B+/H/g/ej/0fvB/7P3g/9n/wfuz/4P3Y/8H7sf+D
92P/F513Dd4v/V/6v/T/f4//9wuJqa9/YeEfg/cXPJ0mTfXnFuL/Fr/mK38Z
bib+36GIKvl6/jF4Py54Py54Py78ObD/g/dj/wfvx/4P3o/9H7xf5P+Lj8z7
Ov+NVfq/9H/p/9L/pf9L//+/L+n/cskl18+2pP//rfy/pveeRoED4nnB/1uc
ft9jTX8TL9zXF3cfVO9gehPv9+7/F52LAt6PC96PC96PC96PC96PK9r/L/o8
iPxfO5cknBf8X/1p5vGn9Lzf2v8P3o+7rW+7cZO6WHjB/21LfKg5d4SRF/y/
2pCIiSXbRfKC/w/rWrl1q6p63m/t/wfvxwXvxxXt/+/ml3fooxomXvD/FvlP
ROY5ZuQF/7c+SB+89lAi7/f6/9jhh1P+lVG84P87qzz1fO5s4AX/P73zzpkm
TY28f7f9//emZi8waZSFF/w/V6EDPQfuM/OC/zdTGdTWzAv+32Xy6FqX65t4
wf9V1T+S18gL/t9l8+yK047E8n7L/ysvWZLyR4ziBf9/07XfhMTBBl7wf9H5
5LmO2FVqWN3EC/4fkz/0g32YiRf8f1KBz8XapLbwgv+zX7bBzAv+H5Fh47jL
EYm84P/5Jn4NjxsTw/ut/f/g/bjg/bjg/bjg/bjg/bjg/bjg/bjg/biic/DA
+3FF512A9+NK//9/+7/o6/9xbNfMdTubecH/s45q8tF82swLHvthg/pvNPOC
/0/rkarr/vUmXvB/7fXFzCv9X/r/z7T//4/2f1zReZvg/bjg/bjg/bj/tv3/
adh9VSwv+P+ToQPin8TG8MJ1woXQcuETXKJ4wf9HtGm9fcT7GF7p/9L/pf9L
/5f+L5dccsn1g5f0/7+V/4P3+83v71V+q5Hs/8fuDd6P/R+8v/eSmU7DSpt+
9/7/H+3/ovONRZ8H8P76rvo58zIbyf7/qszbE8j+f+z/4P0X6pa0H24wftP/
v7X/H/s/eP+mjc9uncx2n+z/x/4P3q9bvWBhw4Km7/Z/8H5c8H7s/+D92P9F
52P/0fv/sf+D92P/B+9/fvKc06dNJrL/Hxe8Hxe8Hxe8Hxe8Hxe8Hxe8H/s/
eD/2f/B+7P/g/dj/wfux/4P39x2i3kEb/uv9/xvs993YsOQB2f+P/V90Pjl4
P/Z/8H7s/3y/P/J/8H7s/3/0/n/p/9L/5f5/6f//dv8H78f9Xv/H5/+A9+Pz
f6T//1j/n3D66fEHnnqy/79WscUzeo4xkP3/5Xyd8zqF6Mn+/8xfm5d4tvyB
3P8v/V/6v/R/6f/S/+WSS64fvf6Xrz92bMDTNAXXJt9vvbp32UJqt+LWpAbZ
fEjzFhndLseaaFK7TBUb+G8NJo3uFN/adU0YKcxvxBW974/bNzP97msJpKdm
tLtx7P4zUu2+IYFU9PkpwebMrFNwX9QdVbND0yukedk/v0fqtVu9oQsiNeZR
ByS5k4p+rnbIVmuDJ+lCSUWOcY7dv9LaJV1rU71WBGnR7ZNTbt1oN7D5sfd5
q1Q3JzaJjfzP/XoibyZn9QerIxR2vM+lRF6bLnW3vkyOUIo3uTn07jQ9L7vt
KByjnLeULO+S2cD7+mAFmzdddcqcywumrZseRSr6/TP93h9Kqs27cyMVPZ/y
U4/dcAgjZWx6JJK0hqVF/WsBtH2W6q42KhRKWoe5jg+pNo/Oj5QdO/M0jHSL
OmavRzhpw+426qMeUvWnPewvR5OyMbrdIkgDFqpPgCJJRXMz2dTRKC/S0MEt
rpz96EKacvFb4NWUYNIm7Do3lFR5+eXXR4NpRV6Xutr6HZnn0b4dU9TRuI8W
5gzj3rz4q83dB7RsjPTucNJ6C9+mvPBGkPabvSnd0mfhpFPXZj1gbxdGOiC0
SS3npHDSYwvuTTlXhFY0h1Ed1pqlBG30lG71B1gDSTV/9SNlL1uHgkgZB+cL
JxWdEwVzvHGr5mho6D0ugvQMm+cZSZp9WveDvdwiSN3OqxOTfUkdZ93yLto6
iLTuAnVArZX3/J4nu/1LxirqNMMDG5J5izRcO63GxsT/zLlN5j3P5mwmKrsZ
8CbxToqcW+9R43gl5f9cI257Em8nlVf3xyvXBm1Z3ix3Ei+7/d0Xp7Afy7JP
4nW+fOfN9KB4JdPJ7b9eXZvEq81bjBf+d+c9VE/wSOKtOefzZZuFccqetake
p71g5Z3iGNgwTUCskr69yWfuliTezurL9o54Ze/7C5O2vTLwMl4qHif0cG3u
nDtpP3Z94UYqvN+PPuW2uA2tyDHmTS0z9/YWD9J+OXdUXnvPm7QYm+/nQ7pR
17+3MaMfqfa6FUjaYpRuVLr1waQdnSZG5G4SSiq6zjnkNSFf7UrhpFnrFxju
WDaEdNQ4518+9wkghTmZuKLzu2qw55Y+pKL5kpoDBZJ+7av+PYeR9v1YK2HQ
StpBfe0/d5wYQKrNb/QiHVS3ftYrWd1IX59tenzUeFdSkY+9cIn4FO92i1R7
3fIg1RzlJi1z3IukTYq6bm+e7EQq+jxr41S9STWP9CfttlUpVmZTAOkmjw/p
bnpGkLKxtQV1pKJ9HR/Zz5/oeXc+HBu/43WMksMwzPb2lwe8l6+29q/fMFqp
y+aF3ueNStJP9BsRqczbEjLzuE0Cr/pVW7xxuDKdPadN4IXncVPYfp843hxR
Hed0tIQqE+8WSLr79j5v1q2f9jauGaUYMu5d3L1lEm+a6x/UiazK24ACm2Pv
JvFWZvMu45XIPuV+XXDNygvzzcuy+cQG3kcXvOdUiopV5k1xXWTYa+CF5wKD
XdQnuDpS24TsXZuf8iR1Yxd+60l1bC7xTdIaNS+Fv/C5RCpyP+369xppnaSs
VcbeukvKvowKBZD2O6Y+2aXV5gz7ku5Uj7kL8ScVPRd2ynii6gedO+mwqwMr
rRl1m9QuUb2j8yHNejBX4wsdAklF91/a5+kuqWheqkPBzPuMHS+S5uwxbWfJ
pvak44oVTJzZ/sJ/Xf3+my/mPTxHKnLgduptUoFrpNr78HnSZfavDnimu02a
/LjwtPc3XEjXVmlzrnyL66RuBa9cO+91hbQCu69yIM3J7qtoRd67s8uI6+sL
XicVze09yuYPO5K+Z/PJb5DaWvt/+hR6lFR0v69nnn1SwR3G9oVtINX++UpS
B/ac5xipHXteNI90nnrZ+ewiqej5tei5gPZ6dovUP3/FB+Z+vqQfj5U01ytl
IJ3G9rMEkLJdT1NCSU8/aWp52P0xqei5s+j9WnOd06Q2x9Xf1zbSZeptVZ6F
pL+X0eSSSy65/nZL+r/0/z/B/8H7ccH7R23YOXWGvYl/DN4/LEq9IzTxj8H7
u0Z4pV/W08I/Bu+PW1Q9ePFTi/T/P8j/P/Up3DKiqFn6v/R/6f//D/8H78f+
D96P/R+8H/s/uDt2ePB+7P/g/dj/wfux/4P3Y/8X/XfB+7H/g/dj/wfvx/4P
3o8r/V/6v/T/v4//m9hloYX4P57rBN5fqXRIyneWhX8M3u+UQf2JJDP/GLy/
w3F1g62Jfwze/2TIG31uk5F/LPp5HPD+JNvmKXcKRv4xeP/oOfsKlRxi5h+D
92P/B+/H/g/ej/0fvL932iXrbB2s/GPRXADp/9L/pf9L/5f+L/1fLrnkkuun
WNL//xH+LzpX8+7dVGumBsTygv+POLrFy/OjkRf8v+7r1X4O94y84P82pWa/
3D/ExAt+zn58epuJ96/e/194db/07ZaYecH/Rb9/kf+P91FPMAnnBf+Hn3/G
Pwft6flxwpVDRl7u/2vfNhqcz/w//Y//vzvq8nBQZTMv+P915sSxvN/y/w/L
1R/QfsAL/t+QfWKMvOD/Z5Z69Hj8zMgL/g/uj/1fvXvtX9TCC/7faNejwKjJ
Jl7w/9ZP7CtNT2vmBf9/z85NSeT9Xv9fnV+9INfxgv8v+eBRM/6dgRf8/+vp
Qn7zXht4wf+PMMA08YL/D2+t37M2lYkX/D/eUPHsrNwmXvB/93Edm805aeQF
/2+cblfKnYmRF/z/gHp7ltPEC/7/28T8e8tMMvGC/2d9aEi5RTPxgv/vmXHs
QOxoIy/4/6bdDccOa2jiBf93YIxu5AX/b64ei7MrgRf8f9lvG8ttscTzfq//
q6e05dqp4wX/r7kv5sDsUCMv+D+cD4XPifJh8xLMvOD/b6/fbHZpvokX/P+a
+7qBdeubecH/px6e9ChmVSLvt/x/04Z1rv75DbzY/3HB+3HB+3HB3XHB+3HB
+3HB+3HB+3FF/13wflzwflzwfly5/1/6v/T/v7///9P2/4P344L344L348r9
/9L/pf9L/5f+L/1fLrnkkutvuaT//yP8/1v7/7fM2Txhvp+B7P/H/g/ej/0f
vBz7OXg/9n/w/rets90pWcv8X+//xwXvxwXvxwXvx/4v+v1/7/5/7P/g/cT/
Yd8/8n/wfuz/4P1Zpqw5czTcQPy/v3OCcfPx+2T/P/Z/8H7s/+D92P+/tf8f
+z94P/Z/8H7s/+D9VdQxH7tNv3v//8zjNpHKcAPZ/4/9H7wf+z94P/Z/8H7s
/+D92P/B+7H/g/dj/wfvx/4P3o/9H7wf+z94P/Z/8H7s/+D92P/B+8NmT3qz
pqrpT9v/732i6xT/Kgay/x/7v2hOBHg/9n/wfuz/4P3Y///o/f/S///v/i/3
/0v/l/7/7/F/8H5c8H5c8H5c8H7cb+3/xwXvx/2j/B+8H1c0F0D6v/R/6f/S
/6X/S/+XSy655PopFnv/aaWQsvlC3WjnqddxfUmPsuu7NaTaHL9A0nfs/Taa
tMKq/eXq2QSSjmry0Xw6MJx0w9gOsQv9I0jzLh9aKr29J6k2pyiWNGPcIcW7
mYU0XVr1TiaCVPTpdFiSdmbstPMK7vsm5TPbfb5Gepb5jTNpjQnqBnlPUm2+
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
/F89RWb9WCMv+P/Z5+rJJkZe8P+i0X03PO1l5AX/h3OF8PlCvpt7FZx/38AL
rt42MFW19TuMvOD/bDxrDhMv+P+XetPaPLE38oL/f+448UDT3wy84P9Z+2/s
0XWlkRf8fzw7/yOWF/y/2vNN5invYnnh93ns65TWa67qeMH/y7JzU+J5/2j/
V7V8T6NIXvB/y73TSwb3i+UF/186q+jAz8NNvOD/ql47PDDygv9vZgeXGXnB
//3fLjZ+Tkrk/V7/v2Ko06/I2Sjeb+3/B+/H5fv9UcH7ccH7ccH7ccH7ccH7
ccH7ccH7cUV+K/f/S/+X/v/P9X9c8H5c8H5c8H5c8H5c8H5c8H5c8H5c8H5c
8H5c8H5c8H5c8H5c0f7/Q5cy+2SwGHil/0v/l/4v/V/6v/R/ueSSS66/ZEn/
/0f7P3j//IYFK5+LTSD7/4sFnDH1raUn+/+x/4P3Y/8H78f+D96P/R+8H/s/
+D32fPB+7P+iXw/ej/0fvP/3+v+39v9j/xedtw/e/3v9H7y/IHu+E0/2/2P/
B+/H/g/ej/0fvB/7P3g/9n/w/j/L/7+1/x/7P3g/9n/wfuz/ovkC4OjY/8H7
sf+D92P/B+/H/g/ej/0fvB/7P3j/6GXqN5KB7P/Hv0/wfpsC3u3TNTGQ/f8t
8p+IzHPM+Kft/9/eonOewjb3yf7/Up+GjXmx2UD2/2P/B+/H/g/ej/0fvH8X
4yPTn7b/H/ff5v/g/bjS/6X/S/+X/v9v83/wflzw/qDWtpPv+Vql/0v/l/4v
/V/6v/R/ueSSS66/ZrH3mfkKqcD/RfNoRO+bnWZbH92YHUzKxpXtiiF9Py7p
7O41gaS5mHdGkNZp4dLv+NVgUtG5KCk3u0fqLjCQzjSX8HCvYSUdFfM1s8MZ
b1LRp7MBm9t5TcFV34ULdr5Lqs0d9SAVecjR0+uy2ZzZT7qkrAp0HqSBqXek
XGkFkTqyz7cvaaWuW+JKd/AhLcP8JpC0Y22fT3VOh5EeLV4o5dY2nLTbwzJ9
LuwNIxXdv4vOVxGdo+LOrrNof2GDW8NJRffpmhvdId2bPauLS30PUphrivsl
r3qdFULqpp8zL3OlIFIn5mf+pKL5WXo2//kKad6Lxd0H1QskVac9Fm4ZQdqZ
fX2Fkmr3f4GkIv9JYvu5aZ32DT7dZq0vqej+TnsO4EiqzTdzIx01ZGp088rB
pG1c12yz+4VW8zbaQymvcjndQklhLi5u7VPq4KowUtFzHNHXYcrNa8pXRhjp
fDaPNJzUa+P6lFufENIJ8/0yXW4RQMrGYQcGkXab4l9lXbVQUvvcbd2ebPAn
ncfmFXuQlsix3WfT87ukZU4srDb+F09SuzyzLKtcAkhFHtJuac29M44FkJaa
0PxXv+Rg0hu12GBh0n6fPoXmnBFAqs3b9Puvq9795TXH8OZmc/0ClQIde0X/
+sbCO4XNodMpIRfUG8Nk3vsfnaxVm9xXWqfOlvLOmszrrz6OzZioqFNWD3sn
8WrPwRMUdizG5GTeWpOupm7dNVGZku3q9PXRSbzafNWE/7xvJPPq7n0duetB
gjLq2Ou7h14m8Wa0XjXU6ZegrFm9NX5tq2Terg5MfBU2Tn5PEq9vWGyqqJPx
inpq0YvPVt5r7Hl33H/moseTth8f1q7toBhSVecK+nqSdmIDVa+TnnU32k2+
e5NU5Fcr1WNDJnuQiu4rD26oEbd9yx3SXmUqrv5awo10GHv+c5dUNF9P+35y
JhXNO64wsmzdA8doXdj82DukkZdO16jg50o6qPKTIW/0HqSi5xHafGxPUtEc
Z9Gc6OfDy4Qe9aW9yPwvhrQnuzDQkRbqrO5YiCHdqT1oJhXNERZdh2RRteFV
KKmRva+GkYrO/dN8MZBU+/sJItXcMYD0KGMUX9JPmzasc/X3IV2/+HyFMzn8
SMN2L3rSblcY6awOqrDrSHew57VW3jEVRq2vPlun7O85cF/gYwsv/Hr/R+Ps
NgdbedkY5NxxStse6olhVt6Qtsbhi6/rlEwVG/hvLWblhec7lbNHWhdOt/Lu
cZ1e82XfWOVgs2GtFh6y8s4rsf7J88uxwnkrzy73H7bdwcKrXv0Xi45RKqj/
uewW3m15hqyqty1aifIJnZXhNwvvoxoTO2ecqFNyNGrTrUVmK+9Qdr+jU/K+
OHnO6ZOFd/wveVLunHTKoyVHEz/0NPOCX02872E6NVZHWrG/+g0eQZq3yOh2
OdbcINX+nmlzvnMba20ZSCq6bh/koz4I8yYV7a/Qns+7kuYt5/DG/6onabt1
i1pXC/IjDZyuy1Kihy9pmX01ll/s60PqyDYsBdEKnvN2itN7XdwfQHp2Q8zr
ARk9SOtU2p7Xc6kDqfb87Q6pTatHxrp3bpBq9zcepKvZXFxvUtHrquj+Qrt+
dCcV/bmezHauZFvci1T03CejV9MX+z64kerYcypn0iZOXk4dPG+T7rym7njx
IBU9F1ibcjVebKwH6Ur1ZbGoH+lG9mDOm1TdXdY9iz/pMvb/20uqXe/Yk2rO
MY20HdsHd4JU9FzGrmbvp07KDlIbnfp8dQ5paIlZG4+u3Ekqcgbt78dBwT05
bYn70xeOpHbs63oZ6d4jPnUyJ90kbWeuPGO8jx9pkYZrp9XYmEhajv38cASp
6DxP7XU6mfThmDn7CpW8T/r6scd6t+rupJozHSXVj0q3/rDzFlI79rx0Femf
g2tyySWXXD/xkv4v/V/6v/R/6f/S/6X//9cF78cF78f+D96P/R+8H/s/eD/2
f/B+7P/g/dj/wfux/4P3Y/8H78f+D96P/R+8X+T/s4u5vWvskST9X/q/9P+/
kf+D92P/h3+O/R+8H/s/eD/2f/B+7P/g/dj/wfux/4vmrYD3Y/8H78f+D96P
/R+8H/s/eD/2f/B+6f/S/6X/S/+X/i/9Xy655JLrp1zS/6X///+qnmaz61Ek
L/i/NscxhhfuIy4MN3RwmhjPC/7/tXPdrS+T43nB/x0K2J2sNiSeF+67wy35
5+adbeQF/xedry46R7357V/P6M4YecH/jezn4BN4v9f/L9QtaT/cEM4L1+eV
2c9b63jB//VOe99fmBTLC/7verjP+rUDdLx/tP8/Snvh0hV9DC/4fyF23k8i
L/i/eop82MdYXvB/zcN0vOD/6qkIhabG84L/t2UH3cTz/ij/357Yo2GZeB0v
+H+a7A92l84Qywv+r10/xvKC/39K+erYuSqOF/y/+Z07BzfuSuAF/9/BnCme
F/w/N7sPjucF/xd9HbIfuy0Uzwv+z44h653A+0/xf5sGUXY+J2J4/27+L9r/
D96PC96PC96PC96PC96PC96PC96PC96PC96PC96PC96PK/f/S/+X/v/3939c
0a8H78cF78cVne8E3o8L3o8rOm8NvB8XvB8XvB8XvB8XvB9XdH7FrkOflD4f
LLz/dP9Pk/IuUKhKNC/4f9uxGXrtmBLFC/7/asG17ANeRvKC/zsnv6uRe5yO
F/y/ITtfTccL/r/6gPpCHcP7T/f/uq9X+zncC+eFP1ef8fNG5oiK4AX/L8wu
/CJ5wf9H5VQfcIXzSv+X/i/9Xy655JLrH7yk/0v//wv2/2c8UfWDbpuR7P/H
/i86X110jjp4P/Z/cNaSRbKOjPlq/OH7/9VTZgvsM/w0+//Vq8WcY01k/396
pwpdKukNZP9/fPR8mwfP9WT/Pzvudb+R7P/vuUPdiWz84fv/1akOPbsZyP5/
dWpBzzEGsv+/UrapKX8kw3+9/z9s9qQ3a6qayP7/D8tyPZ3tbCT7/xuet5Qs
72KU+/8F+/9r1J7ne9JRT/z/8+18Rf1bGIj/12IHiOr/cv//1v5/6f/S/6X/
S/+X/v/v9H/R/v8/2//LTMqSvCha/5f7v9z/L/f/S/+X/i/9Xy655JLr51x2
7HpzpoJro7J1noG0gucFw4oVTJzZ/gBpzkG3myeOu0eqnl4wzRhNKpoXDHNl
cZv09L/f83AwreD6ZPtkdYCggTRibxvDpxWPSc37b76Y9/AeqejzOSnlrqGf
01UFN22NXmvvjnYhHcbuJ/xInWKvHck7wZ90Vq+All3mXSctddEnvsxlN9K5
zOfCSUU+r71ve5LasTl1t0lF/qD9PdwlbRB9ym1xG0/SrA5ndpU67kOqOWIw
6Zr81v6fPoWSXhp5QZnUP4j0BfOGe6QiD/Gr5NpwkIM76dmLnaxvxtwh1dzU
jXRe5kqHvCZ4k2o/D+BOWiVHQ0PvcZ6kbtGVA7p8cSUdx+47nUhFv/8qrVtV
HVfsHunWiuoDBX/S3ezAD1/SfhNb9PP08Ca1mzfFdZHBj7TL/vUBD5xoi5Su
UDJd23ukov1sR5tvqZ1pRRBpbXY9G0qqj8v2qE1AIKnmhb6kojlivRgQ+ZGK
Pj+aU3qTiv67Iif38/YaOnqDF6no/j0yST/Rb4QXqej+iI3znhhAmpe9rt8j
FT1PPD+xyvuZe0JJcz5VbzxDSMew57HBpB891SdngaQ1Ng7+WtktmLT3kV8u
l9wQRiqaj+nIfJr2PPs+DiKNTtx1N2t9X1JtDl4Yqed4hwbdDiTx+sypFLXv
Qrxydln5zt6WJN5tJ22//GKXoGQb8LJTxYVJvAPZ5z9eeN71Rvt9NzYsSeLt
z55fxCts3Pu2JN6gNQ0GdtwTr/RkPp3Mm/S48LT3NxKUWJWVcybz/np1bdcS
uxKUY1ML+ub5mMS7YsWnlyXGJyj5Jn4NjxuTxKs9V4pXGN8USOJVp6geOhGn
bGjTyOg8wsB7Y0j/Oa++6hT2GKBwDOnB3mU3L4v1JdW+rq+Tvi4ZHB1uuUGq
fX25kqrTvx81DiDV5hD6k7JtAdvukYo8VuQwovdH7b9/m1R7PuNCunF83uDq
TndItfmf3qS6Bq0ft63hS5rMnse6k4r2GyQMfhgwbaY7qWie5jh23RdA2jWf
5XWq0nGkhVuygaSktcPsExrPoq1TZVCmuZNp83+61bFC/ijSFqN0KXf+waSi
ucai5yaaK7iR1lnVvPmXebTafEVX0kVua982GnyddOvnz3WzdLpKqmOvNzdJ
/diDKmdSNmX+uDvp2js2pWa/9Cd90PNwsettI0nVn/4MjLLwqmqzo4ROKXEz
1zp9nIWXPfaupFOmDb7ytvpFC2/JIVW69w+JURaVKRbdd4OFt8GTdDnPbYhR
YrOu6vTylJX3lUvEp3i3WGXotMZN0u2y8qovkmmOxArnCOxZm+px2gtWXnje
dDux7bpFra288PrjfevynTfTLbz++Ss+MPeLUVKvjfSeuMDC2+rajOeh42OU
dh43lgWPtfCGla8/enerGGVkuf27Fq6x8mZ48Xnzi19ilXXRW4ZVK2zlhedW
oucU6dLufDg2PoJ0a3D2s+USnUmLqY+jtnqSPtlTvci1xSGkbLp6iQDSwIWl
b8Uv9iIN9Wiy4Uhxf9LArPdrVqzqTCqaG55XfTyWK4T0aunebQ7P9Sf1v1It
3bPatCLnF71uu7Gfpw0lZS9DhQNJ552q7hnU2om0gjqmtNsNUtG82qxZ+noM
PuBDKponLpoDLroes7s0P8uWPcGktupxfNUDSYew58/BpKL9LaLrOm1/mT+p
6Pqz3WCX0zEt3EiT2XWHC2nuGr8dX33fjVQ0L1j07xE9r0leXXJ3qu2upMI5
uQL3cGOvr/tJtefzDqR2bJ/jZtJh7LnuBlLtucRaUpEzaNcXVxVcbb79HVLR
vs06nTKkH3L/Nundu6nWTA1wJ93ErjsSSfOx+boRpC99ip3f8ySa9PVC20x1
kg2kE5KzbRu+I4p0zJ5zuYzeHqTaXOhLpNrfzwJSPbveWU765+iaXHLJJdfP
u6T/S/+X/i/9X/q/9H/p/7/f/8H7sf+D92P/B+/H/i867xq8H/s/eD/2f/B+
7P/g/dj/wfux/4P3Y/8H78f+D96GK/1f+r/0/5/f/8H7sf+D92P/B+/H/g/e
j/0fvB/7P3g/9n/RHAHwfuz/8HqD/R+8H/s/eD/2f/B+7P/g/dj/wful/0v/
l/4v/V/6v/R/ueSSS66fcUn/l/7/M/j/6PTP9+5MuV+Hgv8/Z64Wywv+b22V
6uxSjzhe8P/6+heTG87Q8f6s/h+yfmyH2IXhvD/K/990uzPqZq9o3h/l/2sW
6mv/WjKaF/z/mXL5frrx0bzg/8nnfls+JymGF/zf78uX/enKGXjB/7f3uzii
Tes4Xun/P9b/M+9v2+bdoDhe8P9k9ViN7rG84P95NpwPcY/R8YL/D95qbfAk
nY737+r/uOD9uOD9uKLzLsD7ccH7ccH7ccH7ccH7ccH7ccH7ceX+f+n/0v//
/v6PC96PC96PC96PC96PC96PKzpHSHTelOj5I3g/Lng/Lng/Lng/rujcKphP
jOcUj651uf7jo4m84P9pjMXeBy4K5QX/f66OG94UwQv+34edaxXLC/5/IPi6
x7PeMbzg/62f2FeanjaS93v9PyZ/6Af7sAhe8P/Ry8y+CesMvOD/neY6PJgw
Us8L/h8eNyZkSQ89L/h/oOPg1wttDbzg/6u2zNk8Yb6eF163SwSpT6LjeMH/
nztnylghIob3R/k/e/koHsML/r/cUiVm5NEYXvB/bR9ADC9cj7HjOicaeMH/
x7zY3H58mJ4X/N9pee0RY3sbeMH/q/Us7bWhrJEX/D/Pc/UC3MAL13UOqfS9
0hSM4QX/35xr59YVJyJ5pf9L/5f+L5dccsn191nS/6X//wz+L/f//9j9/+dT
PitFs+mJ/6vfJYUX6on/Z/7avMSz5Q9+mv3/2P/B++e3VIHHSPxfnXbc+71e
+v9ftP+fccUGA9n/fytBnaRgIPv/hzxY5nnToif+P3Hbq86bZxuk///k/i/3
/0v/l/4v/f/f6v+i/f/Y/8H7R9SwtKh/zfS79/8PzFs+34uTBrL/f/GScRlv
bdL/8P3/2P/B+7H/g/dj/wfvx/4Pr9PY//m+/8Vtdvi+Mvw0+//XPCp7+9QM
Pdn//yLTye2/XtWT/f/1W63u3Oeonuz/x/4P3o/9H7wf+z94P/Z/uI7D/g/e
n3Hv4u4tp+rl/n/p/9L/5ZJLLrn+AWuZOk7p0AgFV+j/7H1sCKnofU2bExVC
OvlugaS7b6NJn32q+Pbc8UDStOUyxaduFELqwQZ+hpImX89ZxmrjS6q50X3S
KOZkZtJncY5pc7RyJxV9PjW3u6bgiuYMTvtQuECepd6k2n1/IGn68Zs9h9i4
k/Yb/u58hj1OpANY/Uib7O7qe3lUKKlormgcm/vkT+rmeCP22hEv0hLt1IG9
nqSivxe7FbcmNcjmQyryT8ap+TxItff/u6SqDuWf60XqdbTE0ibt/EntJ799
Un4Vbb9jnVP+UwGkTiHjXvVrFkS6MZDdSf7XVf/2d1UNJ2XMVziMVOTGIgdr
dS+82adLAaRXFzVSR0aTavMtaV+8ut/u2RxX0kg298+ZNHpKt/oDrIGkovng
dZmjhJJ+PFbSXK9UGGn155vMU97RFn03dsUll1BS0Zxl2xOReY5ldiXNOLRl
/hOR10jtm9frEvbRndaq3mh4kIq+X5xOnO2Z2pH2ReWCKzfnoq3DgMuHtNvX
laeiE71JQ9m8R3dS0X39pKmLB/2a/y6pzcNGNz56+pBq89wCSVWtrzgthFR0
XlOjxkf3z5pI28I3Y4d27mGk2v1iKKnIu0Q/D/J2Rq0+Pa7dIz34cfbw1npf
0lub2qWNmRJKmmfZx/JVrlt51Wmg3R/EKqnU2+lDSbwt2fddvLI0nfok5iGv
wu7r7yvWlDdD37pJvNlKsgM3lN4pd222DlbeRxe851SKilUadDvw3PtWEq9D
S5uWq5LjlbcBBTbH3k3irdz4w1L7V/GKTYMoO58TSbza/OV44fn/Z3IuDmhw
OJl3i5fnxwlXEpVDlzL7ZLBYeBfYPHieUdEp3papgzp9SuQdfbNX9nv1IpUC
7AF0NOmzieoXmA+paJ7g+yblM9t99iQVuavo7zH9x3ZN7C/7kIrmM2oeeY90
FDvwKYC0wqOdNlXL3iM11r2Tf4VXIKn6oltzRTjpMe2BLKnyOc/uAXNjSLX5
mdGk81et9LFG0l7dvj+om18kKRv7tzeEVPS6sazte/dA/R3S1NXW78g8L5z0
ADvoJYr0+riTpS9Vjibt/yKp2rF+kaQ5x6g/OOhDasu2BTiQ1qh5KfyFzyVS
l5E9BtQJv0JaQf1s73cgdXvkXtan93lSB+aUF0lzstcnB1Lt/+dMav56xX9q
9pukoucFL5osez535WVS0bzLUTFfMzuc8SY9l75WscUzIkj7K+qFmYX3V/bc
LVopWd4l8+RSFt4VL5vPj7gVrTisXlXZcMnCqz0vi1GsLQ9ePBVg4c1SObVr
q6w65eMcH8V5s4WXjeneHqPcafDu+s1mVt7bedUrLJ0yKN/GHP4HrLwfggwr
NtnHKtXYQF4r78HZoepPWip5X6hPoi28MLc3lW2lVg9qWXlbsMdQOmXvuD7P
ijay8E6fxQRdyd61+akd/Sy8g5p3ulSiXIwyr79X+a0drLw1U95FCmaOVY6r
lxHFDbyWBVlfb5unU9jY6e5hpKJ9OJpP+5F6qY/JiwSRiq7rRM/xS8WuXrCw
4T1SvxYPFzc2uZL2S99uSeAhP1L2x3waSMq2l+UJJRU9Txfdj2hOGUAq2q9V
pH/tyQU+B5Nq86v9SEX7bfTsddqFdEWG435fvviTas8PQ0jtMlVs4L81mLQf
2yhFO7Bu/axXsoaSKi+//PpoMK1oX8SXvOr7YQip5uK03r2um750CiV1uDtg
0pkeQaTsy+4QbSX2oD+AVDTnd2eXEdfXF/Qm7ZIptMf2TJ6kIs8X3acsYe9L
QaTa66ILqRBQ2Pzn0wquti/sIqlNPfXrZRGpcB+mYGnXQVcVXNHzwdDBLa6c
/XiQVNtv6EQqul+unZS1ythb90kPeU3IV7tSOKm7W4D6ZJF0911VgsykHb2W
zV7RO4l0xpD8LzOd9CDtpm43GXCJVPR51p5frSf9nYwml1xyyfW3W9L/pf9L
/5f+L/1f+r/0/9/v/+D92P/B+7H/g/dj/wfvx/4P3o/9H7wf+z94P/Z/8H7s
/6Lz/8H7sf+D92P/B+/Hlf4v/V/6/9/X/8H7sf+D92P/B+/H/g/ej/0fvB/7
P3g/9n/wfuz/4P3Y/8H7sf+D92P/B+/H/g/ej/0fvB/7P3g/rvR/6f/S/6X/
S/+X/i+XXHLJ9SOX9H/p//8G//fZl9Y9e6pIXrieYbeXffW84P8B9/q1Dxqj
5wX/v7G72k2nE3pe8H92eZrPwAv+f3rnnTNNmhp5wflF//vTWyezdUkw8oL/
D2bnEsXxfsv/tfNWwnjB/6/oQ1Ku/PS84P/qZzt/BiPv9/r/rqyqzIbygv/n
6/A8vuBXPS/4/7WAyIwvRxh4wf8/vrg9JXVqIy/4v/rderiPkRf8/33ZEW6N
3I284P/PK3bdElfayCv9//f5/4PjDc4tKx/FC/6f8uJUpJpOzwv+n+i+5MKm
YwZe8H84pwmf1/S548QDTX8z8IL/H3tTem/A6njeH+X/FytHfzl1PYoX3LjJ
bCX02ScDL/Z/XPB+XPB+XPB+XPB+XPB+XPB+XPB+XNH5P+D9uOD9uHL/v/R/
6f//XP/HBe/HBe/HBe/HBe/HBe/HBe/HBe/HBe/HBe/HBe/HBe/HBe/HFe3/
j7TzOdF1ipEX/D8iXr3yTOQF/19QPXjx04sPeMH/2THsWQ284P+i6zqfy6Ny
Nmqj4wX/f7l/SJbmI6J5wf9zp1yF9rgbxgv+/2TogPgnsQ94wf97z/TMGWBj
4AX/31j4QdNmIQZe8H/1KrvCKCMv+P+2sKZ7HN0NvHA/op4GU+iOnhf8v2C+
9usNip4X/P8pu2+L5QX/399z4L7Ax1G83+v/JWtNupq6dQwv+L//qilj9pyL
5QX/d5hWNuH6eAMv+P/sz5dtFg4w8IL/q2+e8QEGXvD/r6cL+c17beAF/8/8
JaFs3g1GXvD/o7/2P1Fgn4EX/L/Q1hPX0pw38IL/e+jeuKZ+YuAF/2cv94UM
vOD/3ilfxf5VDLzg/7OLub1r7BHDC/6vnnpUODKKF/z/fO/As+16RPJK//8/
l/R/6f9yySWXXL9nSf+X/v9v8P9v7f/H/v+t/f/Y/793/z/2f/B+7P/g/fft
f+nTpKfxd+//x/4P94Ui/1/vVj1XmmjDn7b/H/s/3++P/B+8H/s/eD/2f/B+
6f9/7P5/JaznuzRP75P9/9j/wfux/4vmNYD3Y/8H77fZXnxm+dPGn37//7/d
/+X+f+n/0v+l/0v//z/3/4dPLJlyJWwl+/+x/4P3Y/8H78f+D96P/V90XSc6
7/179/9j/wfvx/4P3o/9H7wf+z/cf2D/B+/H/g/ej/0fvP9M2nEV7600/Gn7
/+3YG6+e7P/PF9dqwKabBrL/H/s/eD/2f/B+7P/g/dj/wfux/4P3Y/8H78f+
D96P/R+8H/s/eD/2f/D+CaefHn/gqZf7/6X/S/+XSy655PoL1zLmbVMUXM37
O9J+ePZyfpdepMPYddxWUtFcyAfB79vGXIkivdvyzODOw0NJYS4Wrug++vVj
j/Vu1d1JbRPUn9g1ka5RL3eK09qx+4CzpKLPZwn2fntNwRVdP4v8Ye6WkJnH
bSJJRfP1bCff893c6xapX4lZG4+u9CINHbtpyKhy/qSz4hvl0P8WRKrNWQok
nVa9/MiydQNIfdgDDn/S90MO/hY3MIQU5rjiJrP7IXdSbS60PWna7A92l85w
hfQ1m28ZSDqw456BCd0jSWex52DhpK0P5T56qkwE6ccii7L13xhO6neq4Mgl
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
kbwT9ieT1hh2aFhU3dOkyxrY+lz6OppUux89Tyq6r4xO3HU3a31f0lIXfeLL
XA4lVU9reL7Xi7QXm7d8m1T0c74inxfNSSxSdWaw2wwf0ifqWNniXqQJgx8G
TJvpTqpdznqTap8PH9JQjyYbjhT3J80Z1XFOR4sbqXa940iau8e0nSWbBpKK
3Ebk+S3Z33Pi/8feXYdHkXWLHg7u7u7u7lRwd3d3d4fgDoHBXYJbCAGCJkCA
QCAuHW/vDDa4DXJTu2et85y1zr75hoGxr+qf39PnzuWDpKXqrd17YU1pPs8o
VzdEWS/Ov2KwlUbHZ9gwKFjZlvxGxiTpY7B1wg55zWserCRcHGyfkjIWaxB/
zxBlXw7/TW7vorGOtnPNK1UNVtaK9VK8t/0zZShyMZB1bqcmE1ak92XdciyL
8XbWGCxcL/Qvsv9snfOhrGObXLu2aw2v/fnly9r5TZ33ed18WMWYszR+rPl2
eXSbckuHhftNhs+20CuFLdhke7dnmnQhTCld+75zwYwW7IZs/ZfW3BCmROZW
r3hjsLMfzd8X8yFYuXjqlcP1uEBW8XJyDmDtKQYr+7LK5lbbXdyH1fpmeAF3
4z3WzsteTxw5yI9VNk8W5uLSGrO1LGEbFsi6KuOw/a+vP2RNGz2i+qzy/qzH
F65psTfam7X0kBI1du73Yg3KEp5jzNcg1gstPyRccoew2ueo88rmeMr2C1pt
dEm6p3ooq2suR5eK/YNZZfO2G65Jnvd17VusTk5VP4+dc5N1h3j/i8OKt/O8
sM7Pis0irvcjFG+VRTbZsPfsG/4oTXOl9n+61Ya9GxiRJNQlSqm2Q528bsMe
Dm+ccCkXrTwIHfe4vpMNq2t/qO6UaVHKUadS7W5bbNgNLrnVEbTK0ITf8u4X
Nqx9bl204t5iU/mnt2zYY1VfXg3+JJ8jsFm9zZAvHjv6ddFqgSejlcnqGMd7
NmyJso8/fEwZrdwtlGnjnbU2rJ/RtnyZc5QixppmjmBVp05vsD1kbflseqES
L2+z2v2S134df4fV7qlBrOlzHJiQ524wq2wfnvs7/c7ffBbKOkdfTR15ytpU
fB6EsspcXfZ6yZCux81+O8NYj3+yTrzRnHebHd5Yu4Su+7Vao3BWi5gfyztM
+HEo68noelMjQ0NY04vzxADWiclGePsdv8naUtznvM4qbkftCGBtKQYN+7C6
zk8+JWLicVZv8bl3lvW5+mz3usSaOYn6DODNLz6HXFll9xfsz6NzrFe/9HBq
cMqdtaOYV3mO1X4//Axr9bNJ9F2TXWLNnn9Yy0zLL7Da798eZ7WvpzjF6iTu
ax1i9RDPRxdW+5z5C6wBYvmOP6s+q6lshglmrMO99ZeydQlVvgROG/tmuQVb
r4W6g0+4kn7Ck/2z71mxPRceOPIsVaQyptbRfBWmWLE5s+bd2aVPhPLl6uxc
LnWs2AYFPDc2itcp9x+NdFznZ8WKt4GskdJ9+1P6rdjdrYQV21ZRFzzolKyb
38ydl8yKHfrQvd/rOTqlRef0XxsVtmL9WxgHzTuvU2Krriv1Os6C/SzeiHXK
EzG42Yq1r8+JUBa3fXEo47lYrLqqZPXTEGXW63vttpcIZLXPOw1m/RoUOdx/
fhBr4/HFst4478sqm3df2BRYqtawO6z23zPvprj8FXU+91lri4U0EVhd+crq
jkhK7nLHItIvNWMnfVBXoIQqET+9zrW4TBzWft8hVKku5ov6sbolXEXumXGf
VbYeLEy9PVwggPWJmI/tz9pxvHqjxItV5rrVr7Rdm7nSHVbZ3yfl6mTnP/Tn
rb17zNKYE36sD3ZvOz492p81+EW5PEvWBbKecWt2v1adWGwHsa4/5DcXj8PC
eb79Nr8ea18vFK5sLnogZ/X1Zqy4rPkpVNn/ptg232VRWFiHI+6qdI7Ewv2O
HaOuxL+rHImtKzYMDFAWDVyufkOTtUtTcYeb9VSjmu0DP/I2T5oh4RMogHVd
g66VIircZu0r5id7sU52Us8s/Vg/Vo3uuyTwDqtefH5uZXUV75ebWDtG6r1P
7TjBKvV/yTFRrEc7oNC27Hc14RTSi9VL/L6PsMaLvy/vs0j35Jma3mA9fP7h
ns8uelb7uqQY1uyrj/vfCA9gnXe89JFMuQ2s6hTvfPdiWF8v83G9l9adVfZ5
5CjWy8xh1Yuf6xJW+32VcrzaoR3aoR3/1kPzf83/Nf//j/0fvL/TuTxptxtN
+Bi8f8aQTAl/ExM+Bu+fm2d8xZsjTfgYvJ8WvJ/2e/m/bL3QX+X/su+bgPdT
/wfvp/4P3r/7YO+Ck2+aNP/X/P+7+D94Py14P/V/8H7q/+D91P/B+6n/g/dT
/wfvp/4P3k/9H7yf+r9sjgB4P/V/8H7q/+D9mv9r/q/5v+b/tOD91P/B+6n/
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
n4n5tmHKJXFDwIx1S/jpd/QJ+W1efQz2rWFGTPLkIcqGz59rpGsbxFpb/3xc
nckBrLL9r4beGuVau6Mvq2xdgXO1NIsKJPVhlf2cxRjr0edZnYSXjGGVzW3v
KNZP7WS1v49OYnUS3zNfyiqbT91S3A9xZXUOVW+E7Wa9nzZ7g2lKAOtScaJi
ZJXNSU84SU+4cvZh3S/m2D9izSfWFVpZXzurC71usLZcqb6DeLDaf95zeCU/
N9mc5R+Dcf/Bod2P0A7t0I7vdWj+r/m/5v9/2P/B+6n/g/dT/wfvp/4PXkL9
H7yf+r9sn1jw/uyjd+gcJhrxMXg/9X/w0b+7/4P3r/SN89j23oSPZetswfup
/4P3U/+X7Sev+f/39X/w/g3RTxu2NpvwMXg/LXg/7V/l/+D91P/B+6n/g/dT
/wfvp/4P3k/9H7yf+j94P/V/8H7q/+D91P/B+6n/g/dT/wfvl/m/Q+1QxzsH
bZr/a/6v+b/m/4n6v2wdOHg/9X/Z91bA+6n/g/dT/wfvp/4P3k/9H7yf+j94
P/V/8H7q/+D91P/B+6n/g/dT/wcvp/27+T94Py38fan/g/cvzbFwQNGUZnws
m2ek+f+3+T94f6lrE0Z8OmjCx+D9cQdqH3MqZcHH4P3U/8H7qf+D91P/B++n
/g/eT6v5v+b/mv9r/q8d2qEd3+HQ/F/z/7+B/w+qWznhr6bHgv/vWXymyOpO
Riz4//RXQ7t4VjRjv7f/3+91+q5jIQMWvDd9rzWdOywxYqn/04L304L308r8
BLyf9veu/wfvp5V5KczZpfN27fs9RGMT8/8i+dMPCf8ahAX/z7pgc8IVtwEL
7wPuKkf2NWATW/8vm7MJ3k8L3k8rW/8vez54vIgxvdqlx8L1pl/x1NNTD9Rj
wf8dXZs4NFmqx4L/fz2c12fmawMW/H/4mJ8nr65nxIL/l38/ZWvH8kYsXLdO
FxcaRiz4f7dnBeo+HW3Egv/br6ejsYn5/87Tae+kssRgwf8bDGw6Z/dpIxb8
38Vd/UWZsImt/5f5v2z9vzpNd8JkMxb8X/Z9lhwzsk9r7RSLBf+vU8KxTauS
/1Pw/4iEq8XORw1Y6v+04P204P204P204P204P204P204P204P204P204P20
4P20f7f1/+l/Vn9xJiz4f8241VMGzDFhwf8TnrxZwnOYsOD/V8VgDRMW/P+0
WB9pxoL/59nZpc/2ByYs+H+DMeoGSmYs+P/H6XeUy+ssWPD/gMyT821IbcWC
/8ven28k6zR0wQLL//Q3/18jbixbsOD/gpXzm7Hg/7J5B3vWDbhXeKoZq/m/
5v9/hv/TyuZWg/fTgvfTgvfTgvfTgvfTgvfTgvfTgvfTgvfTgvfTytb/y+YF
9J8Q1qjcHgMW/N9+vzYcC/5vf18LwYL/n/MNSf1isAEL/r/QO7/+QG0DNrH1
/7L7F793/b/sfKzdy7Rp1j40YOFzR3YepT7rNleIxH6r/6foot6YCsGC/29/
NtAz9I4OC/7f9O278PKVDVjw/x5+kxuk/KjHgv/L5iDkiGzae+1FAxZc+sbI
Ng2nuxix37r+H7yfFryfFryfFryfVrb+v0yFvD+veGzEgv/P3ZMtxb4vBiz4
v2z+RdbMHQ/vHReOBf9ffcE8pMXxEKzm/5r/a/6vHdqhHf/KQ/N/zf//Bv4P
3k/9H7yf+j94/4/yf/Bd6r3g/X8X/5ftEwveT/t7/R88ifoSeP+ypeUMp9uZ
mP/PjFWvoKP/4/X/1P/B+6n/g/fTfi//T2z9P30+4Hp/cr0J3k/9H7yf+j94
P/V/8H7q/7jen1y3gvdT/wfvp/4P3t9tvvoNFRPz/9yH9qTu9l7P1v9T/wfv
p/4P3k/9P7H1/3T/H/B+ZzFowszW/1P/l32fRba/+reu/9f8/5/h/4mt/6f+
D95P/R+8n/o/eD/1f/B+6v/g/dT/wfup/4P3U/+XvT/jun/i/+D91P/B+6n/
y+YdgPdr/q/5v+b/f73/y9bPy+YFgPdT/wfvr1xt5l0Xdz1b/5+xbvOOjdPG
svX/1P/hvJv6f2Lr/2nB+2ll84xk52PwOUP9X3Ye9Wet/5+b8fqy8s0NbP0/
9X/wfur/sjkI4NDU/8H7qf+D99OC99P+aP8H7+9TKPzq0rsmtv6f+j94P/V/
2fwLbf2/5v+a/2uHdmjHf/UhrhuaKqzifbGPpP+H/wuX6sibQ93wYAGr4JK+
QazDT6UZlCFdOGvhTBvvrP3Fj1U2V9Q+DzaSdalYJx3Gquryo5UBrL/cvnTm
2hsDq8NEdSKmP6/sx7y/iLlm0f0KrWCdfBdZ07se2Vz0wB1W3ZFVkz863WB1
9st4tGTMDtbk6njTVZdYH0zSpSvc+S7r8NJDV1Wa5sMqO++VuU20eB55s6pX
EztL+bK+az754q+lA1nVab85Z4Sw2ueR8sp82z5n8hKrfS7rUVb7eZwnK8xJ
o53c1bdJ+5kx2GwlXd/cdwtWwos47W/82oJ9ZlVvPOgUz9xtLwU8NGPFbajM
YThnkc5bzD+p39m3lSzYWUuX3LGGhCkh6nhjZzNWnJ5vCVVmtc/u9LGUGVvV
8eWQZ94hyuNRh1YcTWHB5hLroMOUvWkuv2wca8HOv9Cg1YIqOmXSVHHnidU+
h9Cf1T6X+BbryJc9GxbwvMk6UVzv+rHC3F3a/bPvjT+WP4h15nr/KQccorG5
BrmXKFQvSLlUMNm84gVjsTBPtkOwd0qnLhas/XUXrjRq9GWmc3Ur9kaJO93y
xuqUYDGfNho7VczVCsL5bLQns7bwerL6Pmt2dRxvFn/WG+L8PZBVNhf17pmh
mes2D2BVn6WFMgWx2pomObrgJq/MRd3ebTrS4mkg6/uRtqNblj9glT0fMj4+
cXt62Rjs6avOM14NDf5tfZUZa1/nFapYr78Nu1vDhs1QRGyAoKhXdWnaGLD2
p4NO2TlgYr36KUJZa086YV1WJIxVfC09fTCrbI65eNqExWHhddqrddVBSfvY
sC9rVSz5pax8f/4kxdSJz/HYJuptrkIxyuwQVWxs2Opt1clmUYqK0Fnrx2ND
s+1PW+hptFJFfTvIYcMeTFKnbr19kcr1c53iIo7asFfTjlNHwytf75b1rNM3
HtuwWiHj2AoxSuPyyYorVivW+1f/EzMaRSrb1NsSfW3YSavC1g+sGKUUqTrW
LWkzG9Z+3ypSEU/TLPHYySmqXFq0LVoR4x1HhbM2DlYHzfuwwpxJWruz3mEt
XXhfWyXKj1WMp2wfziq7r2e/jgxj1V17lPDSD2Wtentr3Qe9g1ll8xBlfvJp
7eqVnvd5jWWOTs16IpTVLcObhB9JGGs6cV7AO2DXr5F9CoWzJnxY5QtZG8Y6
cf6Np8+zh7C2E/ftQ1n3O4uJvKzrPE73/HUrr7gt1CeQVbb+wX7/9jyrzJOn
is/d86zxHXO2/iXqEqt9zuFF1o7ihs95Vh9xg+Yiq/Oo7H6VPE6xthWvW1fW
5BnjthRLdZZ107m+6xc2dGOV3V84Kj5PjrPK1qXI5j/anf4iq/0+syur/b69
G+sm9bQyz3lW++eJG2vImirK2lHurOnFXOs7rOZ2tt6D3hmxaZRtea4OCVL6
5liT6f5OK1aM0z4ZIf0cEctLWlqx7smOqyPrpXOCZH++cWbjrzGrrNgU4rw6
QjGsVQeJWrBJPZum71lKp6xU30bzWbFdOv5cvPsJnVJS/ECs2LVd3NXJ1cpV
AdUWrEfD07PSrQ9XEl7cOauvN2PhfWaceneylR4L88dDxi5rfPh9EOs6cX1w
n9UpX+1i07vfZs2ubr9z8harV1g53/Zf/FkrVjkd9PyOH+t9se4pAgteesp1
TujiNmbsjuQ3MiZJH6rUOb/53tVYMxbe9z6K+x5R2J2jVKEPUkqLMe1+rJXF
/Wpf1uynCt3oW/MBa38xx9uPVTwtej1kdRL3Oc+zyu5zyX4+Sz53z9ck+CFr
iPj8f8Da+d6sXt6lAlgzq7eLcvuz3hb7AAawwtxjWtn3bWXzy2aO95xr2GbB
VnIS7zTKva9DNsflt2KDDmxI+GjQKW+9Rlib7LJgK5TYXnnhqfDffDoWK053
/EOUFu9vPNAXCGaNSlp3b43Zgayjg8QkYFbZeazseW5/vlxhld0XiD+fubjV
4SKro7j/vJjVvp7lEKvdp3eyOojB2dNZ7c5xnPV9wkVhoNNV1szifX0fa+HO
uc78fJ63sr/RtnxZAKt9nYWRVdz2261jfSWcPpB19bu9PX5ZZGatma5t1gsp
eBNOvrLdzHuH1X6f9hKv7JD8PDVv1w7t0I5/7aH5v+b/mv//Yf8H76cF76f+
D45I/R+8n/o/eD/1f/B+6v/g/dT/wfup/4P3y/x/28juzwrUtfxt/R+8nxa8
f03J9ZbgFyZ8DN5P/R+8n/o/eH/edF+iS2Q3af7/H/o/eP/FNaY0n2eY8DF4
P/V/cBrqNuD9tD/a/2WvU/B+6v+y/fnB+6n/g/dT/wfvp/4P3k/9H7yf+j94
P/V/8H7q/+D91P/B+6n/g/dr/q/5v+b/mv//KP8H76cFj6c+L/scAe+n/i+b
EyT788H7qf+D91P/B++n/g/eT/0fvJ/6P7yvUP8H76f9u/m/bF06eD/1f3if
o/4P3k+r+f8f8/82W/tEdwox4GPZvC3Z/DLwfur/4P3U/8H7qf+D99Nq/q/5
v+b/2qEd2qEd3+HQ/F/z/7+B/0d1CimTpLcRC/5/Z7t6IWDGgv9Xn2B4EVTN
jP2z/P95GpeEf6Iem9j6f/B+WnBEWvB+WvB+WvB+WvB+WvB+WvB+WnB/6v9b
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
Wo3GV3seMLL2EgO79awuYv3LfVbZ54iDOI9bzGqf9zuNVfN/7dAO7fjXHpr/
a/7/N/B/8H7af4r/g/fTytZbgvdT/wfvp/4P3k/9H7yf+r9s/TOcf1H/B++n
/g/en/n480C/TpZ/vf+D91P/B++n/g/eT/0fvJ8WvJ9Wtr4RvJ/27+b/su8v
gPdT/5etfwbvp/4P3v+j/B+83zck9YvBK434GLyf+j94P/V/8H7q/+D91P/B
+6n/g/dT/wfvp/4P3k/9H7yf+j94P/V/8H7q/+D91P/B+zX/1/xf83/N//9s
/wfvpwXvp/4P7kgdUjYXALyf+j94P/V/2fdxwPup/4P3U/8H76f+D95P/V82
vwC8n/av8n/wflp4X6T+D95P/R+8n1bz/2/zf/D+QedX5cnRyoiPwfvTzarV
oeYbEz4G76f+D95P/V/2upO9XsD7aTX/1/xf83/t0A7t0I7vcGj+r/n/n+j/
nY+OGpzMy4BNbP1/qXa3LRP6mrHg/5XEF5+jsIn5v/17vIHYb/X/1uIEJgqb
2Pp/2bxF8H5a8H5a8H5a8H5a2fxT2fkYeD+tbP2/+GcGGbDg/6bBxjNuzYxY
8P+LpduX1beKwn6r/wuVyqnDgv/L9uV+kPCsyFLPhAX/79Ducg2fOwYs9X9a
8H5a8H7aH73+v6NP9gGPKpuweB9g64okj5ObsOD/ZSrk/XnFYyMWrptk+6ZW
Vr+OXtCIBf9/vzl947upjdjE1v+D99PK5p+C99OC99NOEhv4mLHg/+LllMuM
Bf9fITZeMmATW/8P3k8L3k8L3k8L3k8L3k8L3k8L3k8L3k8L3k8L3k8L3k8L
3k8L3k/7o/3/3I2VfWrUMmPB/0PFL9CCBf9P9n5+i/c3zFjw/2Oj7yb8KkxY
8H91l4/tF0xY8P+hqzdNmHzShAX/31XNdZdlthkL/i9b12r//DBhwf9hTjmd
V24VG3pZsOD/LmIwtQUL/h8dHvvRw2rBgv9/TKlKnxUL/t+n7PKh+R5ZsOD/
9n2rzVjw/32zhk71L2HBgv9P8RhYbMxhCxb8v0Xn9F8bFbZiNf/X/P/P8H9a
cEda2b5A4P204P20snnc4P204P204P204P20sv2LZOv/bbutcSn99Fjwf/t9
iDAs+L99/7JQLPj/nGKXouZt0mPB/zteG5pw5mTAJrb+X3afFLyfVrb+/5y4
gW/Agv93EidQeiz4/6uhXTwrntRjwf/DCuc7MvKzHgv+X+3QkwaWnyOwifl/
1s1v5s5LFoYF/5ft879aOLQOC/5fteC8yV2GG7Dg/0cH5OqefL4BC/5fys3T
c/hCAxbvA1RJ5VG6vRH7rev/wftpwftpZa+737v+X3Yeu9ND3RnJhAX/b1n/
5JmcUQYs+P/jjwOSvHWPxGr+r/m/5v/aoR3a8V91aP6v+f9fsP6f+j94/+FM
uQP7HzGx9f/U/8H7W6j/cz8Z//D6/0Jie9gY5v9iG+o8kWz9P/V/8P4yu71H
56hm/Nf4P3g/LXg/9X/wfur/4P2rT1S/ena5kfm/bs794INv9T9s/T/1/8TW
//9R//+z1v9T/wfvp/4P10n0ukm2byqu9yf+D95P/R+8n/ZH+z94P/V/8H7q
/+Bh1P/B+2k1//97+v/3Xv9P/R+8n/o/eD/1f/B+6v+yda3g/dT/wfup/4P3
U/8H76f+D95P/R+8n/o/eD/1f/B+6v/g/dT/wfup/2vr/zX/1/z/z/d/8P7K
lxZt69vIzNb/U/8H7x8ivkcWx9b/K+oy/KexbP0/9X/wfur/ia3//0/9H7xf
8HUnE1v/T/0fvJ/6P3g/9X/wfur/37r+f7K6bf+9OLb+n+7zD94/7fMZhzm9
DWz9P/V/8H7q/+D91P/B+6n/g/fTgvfTfi//l71ewPvFmKrOJrb+n57HgvdT
/wfvp/6vrf/X/F/zf+3QDu34rz6E03dVWGX+L5sXLLkv4Fh2Y/ZbC5xYYV4l
bWFTYMKVQxhrNfH/L4D14qlXDtfjAlll8xy916xKOEXyZxVTgT4aWF8J4DSy
2ucd3WaV/ZgHis+rhM950szD1S8+XmB1TFOm9n3n67ySn6fXUvXGx25W+5zb
e6xtA9SJSH6sI9f2H1pyx21WVzF/yZvVWXxO3mZtWXzRmFpHfVmXdFdPaKOw
cN8nqu+SwC1zzdh3fYNSlhrP59pCZefh9rmsN1lXXHMoOu3FfdZGgzNO7LQr
hFX2fdvsYq7vLVZ16ulK9/usA0PVO08mrEP7Gs4v4oOVuyrbjrFg/R+oJ8rh
Ss6ADycDV5uxY5tcu7ZrTahSwJCq2uIZZuzsYREJVyShys3+Dhsuz7Rgbw+8
v3T88HDFKXJuJb95Fmzjnrdubp4Yrmze/Unp/sGCHRN703RohE4p5VMo4QrB
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
a/6vHdqhHdrxFxya/2v+/wP8f7FjdLK928Oxia3/l/l/iHrZ5mzGgv/L9uHM
m+5LdInswVjw/5v9dm7RL9Rjwf/FaVk2Mxb83/791wgs+P+oRq984vcEY8H/
lz8qceXQZD2W+j8teD8teD8teD8teD8teD8teD8teD+tbP0/uD/1/83i8sCE
Bf8XXy/Pb8aC/9v304rGfm//F/qa8POAgv+fq7dg1bzjemxi6//B+2nB+2nB
+2nB+2nB+2nhepcWvJ/2r1r/D95PC95PC95PC95PC95P+3vX/4P304L304L3
04L30+J6f1Lwflrwflrwflrwflrwflrwflr0f1Lwflrwftof7f/Vxb7AZiz4
v/qutS2jGQv+Py+5unG1GQv+L9ufH+5j0ftZsK8E3V8ictKCkvH3TVjwf5dK
tx42y23Bgv/37Dov4/VlZiz4f3bL6yTFIk1Y8H/Z+uRXbzLUntvHigX/h7nv
dP77Lb/jWVt4mbHg/7nEG68FC/4veH2DFYv+n6zT0AULLP/T3/y/3r4dU8c4
W7Dg/5vc3m060sKCBf9fU0VZOyq7FQv+L5sXcKfg8a1Pthix/63+n+9t0hUh
t01Y8H8X95EuxU6bsOD/MfUjQs6kM2E1//+//Z8WvJ8WvJ8WvJ9WNkcbvJ8W
vJ8WvJ8WvJ9Wdt0kW///9XBen5mvDVjw/5FtGk53ua/Hgv97vIgxvdqlx4L/
DxIDk/VY8P+G3TYFp1qjxya2/h+8n1Z2/vN71//faqnubGLAgv+bG9c65xui
x4L/P23Y2lxusgELDt9l7+IzRVZHYBPzf9m/t0T8/XSzaoVjwf9l/7uZi1sd
ct02YMH/ZXOsrro9MX89a8SC/4P7U/+Xrf+XzXkH76cF76eVrf9P32tN5w5L
jFjwf/tfy4iF68Tso3foHCYaseD/28R+aTFY8P8hYv/OaKzm/5r/a/6vHdqh
HdrhoPm/5v8/dP3/pIu/lt5wRs/W/9PzOvB+2f4/1P/B++/9nKy5e7iBrf+f
VSdPuWMR0Wz9P/V/8H7q/7L9NsH7703ImGvs0Bi2/v/f5v/g/bSJrf+n/g/e
T/0fvD/Nuqouy5uYftj6/8tt12autEXP1v9T/wfvp/2n+D94Py14Py14Py14
P61svfRf5f/g/bTg/bSa//+z/P97r/+n/i/7Potsf2nwfur/4P3U/8H7qf+D
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
G6x2/3ZjdRT3pSfyig+yxayyObz7xJ93gNU+T9iVtfKWoydtj3ey7hPOvZzV
Waz/Osoq2zdsw6KD6X826FlnHFIXROhYq7xQf0FRrG1u5ZtztL+RdUahEi9z
XDKzRnu6X4g4589aW9w/P8da+OLo8bkHr2SVr3fV/F87tEM7/qWH5v+a//+J
/g/eTwveT/tP93/w/rvruiZcmRnwMXg/9X/wfur/sn3OwX2pA4P3U/8H76f+
D95P/V+2Hzt4/+1LZ669mWT51/s/eD/1f/B+6v/g/dT/wfup/4P3U/8H76f+
L/u9g/dT/wfvp/4P3k/9H7yf+j+4KfV/8H7q/+D91P/B+6n/g/dT/wfvp/4P
3k/9H7yf+j94P/V/8H7q/+D91P/B+6n/y/bbB++n/g/eT/0fvJ/6P3g/9X/w
fur/4P3U/3/vHAHwfs3/Nf/X/F/z/3+q/4P304L3U/+XzfGh3g+PZf938H7q
/+D91P/B+6n/y75HA95P/R+8n/o/eD/tj/Z/8P5btz6OPrvbiI/B+6n/g/dT
/5d9L0b2/c1/u/+nUJ8G24z4GLzfdnTL8l3PjfgYvF+dWnFqvQkfg/dT/wfv
p/4vm98E3k+r+b/m/5r/a4d2aId2/I0Ozf81//8B/j9ObPMRh01s/b/M/+9s
Vzd0NGPB/y+P253q+ecwLPj/XTG/LRYL/u+wsdCUUoeNWPD/cDFo14QF/1fV
9vQQExb8v5Sbp+fwhQYs+P+riSMH7bkdh01s/T94Py14P61snxNwX1rwflrw
flrZ9zRl+7HI1v/3Sxs9ovosMxb8v9mTk2UnJTdjwf/L5i60qdZuE/bP8v87
2T7+0n2qHov3AR529Mk+wIil/k8L3k8L3k8L3k8L3k8L3k8r+72D99OC99OC
99OC99PKHBW8nxa8nxa8nxa8nxa8nxa8nxa8nxa8nxa8nxa8nxa8n1a23w54
Py14Py14Py14Py14Py14P+3v3UcIvJ/2R/v/+ZPrUprjzVjw/zw7u/TZ/sCE
Bf+X7Z8v+95K6YRPvYIZLVjw/0sz4t1PlDFjwf+z7HUsW6eSCQv+PzbX54LN
k1qw4P/93+izmspasOD/svkpFZ6VfrTJwYIF//dZkmbsNTczFvwf5mXSuZkf
8uXKtmCzBQv+L/vv1enc44pasOD/Qc/VHfjNWPB/50/b6lXpZsGC/38tXyLh
DMCCBf9P0UU9YzNjwf9l+/+fvFJuXp7xViz4/9At6kRsC/bv6v+7th2fHr3X
gAX/X5o28OIakwEL/u8zq5d3KWcjFvy/Zoeabx7fNGLB/xdMLdDn8yATFvz/
wv7Y/u3vGLHg/72rB2UJz2HCgv+fqFHk5CCDEQv+P6iZfuuKJCYs+L/Q7A1G
7L/N/2ll+/hR70+s4P204P204P20sjna6P20v3k/rWz9v7oL6J6xRiz4/6Zd
W5vNTWrAgv9frbXxSkwLAxb8X1Xnsu4GbGLr/2X7gYD30/7e9f/nfENSvxhs
wIL/V9D57Bh1RY8F/18/fd3oWT4GLPj/IN9HIx3XhWHB/73FRkchWPD/gHxF
b5Usp8OC/weOvtruZVoDFvxfLC9ZbcCC/3cRGycaseD/4P7U/3/v+n/wflrw
flrZ/o2y9f9lM0x4sn+2AQv+30xcv+qw4P8Dhj9f12pUBBb8v+Yw9Y0/HAv+
31M4ug6r+b/m/5r/a4d2aId2/H8Ozf81//+B6/+p/4P327c3N/7h9f8Z2kcf
vzRIz9b/U/8H76f+D95P/R+8n/o/eD/1f/B+6v+43w/pP93/wftpwfup/4P3
U/8H7//R/u9eckmN8n0j2Pp/6v+Jrf/X/F/zf83//zz/T2z9P/V/2f75su+t
gPdT/wfvp/4P3k/9H7yf+j94P/V/2fwU8H7q/+D91P/B76nng/dT/5f99+D9
1P/B+6n/g/dT/wfvp/4P3k/9H7yf+j94P/V/8H6Z/xe60bfmrpQm5v903+zE
/L/uqrolHNsY/vD6f+r/4P3U/8H7qf+D91P/B++n/g/eT/0fvJ/6P3g/9X/w
fur/4P0y/x839937+qWMmv//zf0fvH/5xMpr+n01sfX/1P/B+6n/g/dT/wfv
p/4P3k/7e/0fvJ8WvH9MkZYPklQ0svX/1P/B+6n/g/dT///W9f+5D+1J3e29
nq3/p/4P3k/9H7yf+v+3rv+n/V7+D96fyfNxycL7zGz9P/V/8P7OubOb16cy
aOv/Nf/X/F87tEM7tOPPOCRuL53zW/NazkXeY3l/p/8/+1Tm7bEDD1i7ikFy
oaz2z70A1kWpDvh8+XKf1WH2m4otp1xlvSTmg0WyTjiWf+O4ozbW5TnVE0g9
665u6o2Ai6yy+bx64Y7LWT3E3LwjrKnbnEq48r3EmjnHgQl57h5kfZ5y2sFh
fsdYjWKQmT+rbB8b2RyrkYuzJXxS+rB6NDw9K936u6yv585LljHuDmvzeSMO
Xj8XgU04aU24QPaX7me+uLsKccGsdke5w6pXUns3eH6PNauY0xuFFeMJnwYq
dRKu8luVNGPPPW31cfWNEMUirpPisDBHdV+hvI3HFwtiXS/Od3RYdZqkb20/
Ze6ebCn2fTFga+ufj6szOUB5mTbN2ofHLFhVwzf5hCvOtt3WuJRW7KDJKapc
WqRT5oh5xmZsjZyfLrUpHaZc3PrT2Y07LNhTAmrClezP1SsIC3aU+H3plCS5
yzaNq2rFNg4u8ORipE4R2xA9tGBXzTte+kgmnTKm1tF8FaZYsTmz5t3ZpU+E
oqr75kd6LPz37jdW9qlRS4+FeW0wf5J254CJ9eqn4K31tuO1oRdDWNV/dc5u
/qyydf72uaDerDD/kFX8/gJYXR8vSKELNmL3z743/lj+IKWUT6GEV44FC3OT
ncSFsxXbSMyL1En/+8reVR1fDrFiYd7fgo+lyp9/ZsU23Jbn6pDOkUoh8UVt
K3ZBlW2T9++MkP6+aoU63jnYwYo9067Nc8fsEcrWFUkeJz9hxYpxer7yfY8z
3t/pd/6mFduvVpIkwz5GKAfv+7xq/8qGFWzfJ1pZ7BidbO92G7aFmAMepTRS
x9rtsWFvqqf5Ca/L5W/r9suxxobt4KwULL42Srqvvvj6yRordolN7CikrBhu
id0fbMV2EoASqahX37uqxWP7zOjxsWp0tCKmCW+0Yduqt2V2RCnBVlX2bVih
z22jlMMlZhZe9cSGFT+m9tFK/S0d7p4ZGo/18B/5smfDGGW/GLRqwy5a9OlF
4VHRSvyxXxdOt9mwmd95jbA2iZbu538iKmyWQ5wNu6W3+AconesUj+o4wYZV
py3u7BKl+Ij7oFYszrcUGx3ZsIbLg58O6B2llN1TZtgvZWzYzXH5K+p8IpXq
aW25ojPasEfFG06kIp4Gz0JZHZo+Mta4dod1RW7X9q6P7rPuFp+f4awwJ5x2
W/Gx6eLnhrGq0yzvtYtglTmS7H2pUczI7VNShrGK5QUFeWVzvfveUWEnlFU2
572CYNYQVphXTFtq1tIld6whrOL2cE4dK3zO0MrmbO5Qv3aXPpTV5bHuUaY+
Yayy+85bPSepl/isYmxoSyvWPdnxVhdTRijiY2CzFftFvIFEKAXDry6928aG
ndepyYQV6aMU/xbGQfPO61jX9PtazmtPGGthMTgyhFXmijBHl1aM9SwdyFpX
DEYOYH3lrN5gCmRVtSr/4yDW852bhiyyBrJWad0gy/HnvOnFeXcAK8z/pG0h
zsN4xe3qXkGs6ptN3yWBrHC+Qyv799pdKoB1n2vI5StBd1mXDO70ps77y6z5
xX0GV1b7eZkba1pxHn2PVf02avALE7bXc1vF/T0T3m9iWqyc28yKvdC/1/SX
X3XKpgqdr987a8WO+qIuqI6Qfo4fex7o16mCDfvTknFJdvtHKoKX09iw5b32
dF+1IlI513f9woZZbdjDfeOHT98eqYy++3n7vnI2LMxXlf05r4d5JPyqLdhS
E+qGp70SrixY8DDpT0ss2IYHho4qND9cSXlL98YzqR57qseW3Z+UMOn3dkcl
fLoV8IzEqmfb2z8EKB/E3NEIbHVb+vIjLvkpJjGY2oRNNaBJzoMhwcq1o+qC
Hwv26uv0wQsXhitv1Y/DXRZsBfW24qlwZZi6rCenBZvO9cjmogfClJ/rXvh4
a0sMFuZiJ5yMpj+bPoAV5hXT2j+3H7L63PYeMGy1N6tsXQrMT6Z9rY5xX8e7
Sz39WP+QNa7aqyJ+YZFYJzGYPlA5p47/LheLVVdVlR0eomQ+rj7RLFix3CN3
uHROhOx8MryI0/7Gry1YmE89Q3zMxGLh/rV6lrJzfwDrimsORae9uM8qu5+S
XlzX3mItLT5Yr7Daz+vdWYsfnFNx1OJzrH3LPen/Ru/GKnPjzL4O99Zf4vW5
Msvt2IC7rAPF/SJXVgfhzaNYHcX3YaawOujU8eHLWO3vl86spV/HnYrveJjV
S9x33cBqvw9wgnVgru7J5688yjqz5qN6+d48ZM2271DxbCX1rP0rXOhyzC+a
Fc7raWEeNW2KzMdWh7+OZD3/cM9nl47BrJnFjSpX1t/rV381z2mHdmiHdvyw
Q/N/zf//RP8H76eVrWf+Xv6P3n/cUqTUVSM+Bu+n/g/er67K3zrcnKj/y65/
wfup/4O7UP8H76f+D95P/R+8n/o/eD/1f/B+6v/g99T/wY+pJ8v+e5kj/dP9
H7yf+j/4PfV88H7q/7L/HpyAugF4P/V/uD6j12uy3xd4P/V/8H7q/7J9j8H7
qf+D91P/B++n/g/eT/0frgOo/8v21Qfvp/4P3k/9H7yf+j94P/V/8H7q/+D9
1P/B+6n/g/dT/wfvp/4v288fvJ/6P3g/9X/wfur/4P3U/8H7qf+D99Nq/q/5
/x/xf/B+WvB+WvB+Ws3/Nf//I/4P3k8L3k/9H7yf+r/scxy8n/o/OD11e/B+
6v/g/dT/ZX8OeD/1f/B+6v/g/TV7W3cttJjxsWxuF3g/LXg/LXg/9X/wfur/
4P3U/8H7qf+D99P+0/0fvL9wlVQepdsb8TF4/0rfOI9t7034GLyf+r9sToTs
fBK8n/q/bH6N5v+a/2v+rx3aoR3a8Q84NP/X/P8P+L/67dU0a0Ox4P91873Z
vfZjLDax9f8y/9/fS92BwYQF/79e7NPA4c9jseD/6iqkjY302MTW/4P308rW
/1duWDrhCsqITWz9P3g/rcxhwPtpwftpwftpwftpwftpwe9pwY9pf+/6/1t+
x7O28DJjwdkq9g8eU6SlGQv+v1V4Xiz2W/3/punQiG0ZQ7Dg/2Uq5P15xWMj
Fvz/6C9jQ2bUNGKp/9OC39OC99PK/ntwAlrwflq4PqOV/b7A+2nB+2ll+x6A
99OC99OC99OC99PKrgtk++qA99OC99OC99OC99OC99OC99OC99OC99OC99PK
9vMB76cF76fF9f6k4P204P20P9r/K0VU2NzEzYIF/79eoUXGovnNWPD/k46B
Xd4ls2DB/8dt7NFy5FgrFvwf5kfSOZKy9yWH3f55r/mYseD/V6/tWrM5xIwF
/+8Q7J3SqYsFC/6/Lssm50UHzVjwf7Hd3GozFvx/+quhXTwrmrHg/7uque6y
zDZjwf9fPernbK1txoL/u3jmbnspwIIF/5d978zcc2vSd3ksWHjfPuU6J3Rx
GzMW/L+qy/Im6V6ZseD/MG+ezp0vlzHEOmeSFfu9/b9F5/RfGxW2YsH/S8bk
HWrKbsGC/6t3rTM0MWPB/2GeKJ0rKrgynQkL/h/VKaRMkt5GLPj/5zZjdjb4
1YAF/494W/zz7YFGLHj4A091ZzETFvz/So8GHt4eRiz4/6zgS91114xY8P/h
Y36evLqeEQv+f9XtifnrWSMW/D/5U7+9g/caseD/JYLUjUmMWPD/1SeqXz27
3IgF/5/Rc0CFC10M2H+b/9OC99PKPsfB+2nB6WnB+2nB+2llfw54Py14P+2P
Xv8P3k8L3k8L3k8L3k8rW/+f8V7NkChfAxb8f5D44pEeC/7ffvD5VXlyGLDg
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
ZvLGbRp1cOJxPStdsiv7jBOmRl3rO/HYxmp26fWAbA6UcXuwRqXuNuaBWpVs
y3rOed/HRZ1mDKgOonnhfG74qG7636iTqk9FXdglQNmpX1Y1dVFxXSd7ncbN
qw9m16hNX5d9l+6gTfp9626MP839xkkNcof38+kaqFivlBwU8TyYOtIYKO6n
vNOvgtrdFrr/bNv+25reFOo5710V6llfdkNo5eTD1emnrwv17A9oo+L5QmPj
7SOM+jx/2mnzkgZK53/JPs8lm+d1JPf9wrGaadRdL1ZdjJnerszNUD3yzlyj
tgvVH2jKrzP1q4ZGWcKoxmOotgHSdXqdjfdjH6GTJhX71H/sBaFR7j6Noyw/
IVQ2H9y3/M1zCVcfENrY+H05LtRn+sCey3YcEHp++pV6t4vsETp4bf8H1ulH
hHruyy8L3Z823gpHvT1C9bvOFLmXCPU1LjgXC5X9fArUqF6wd6YTQmVzipMY
z8eWCs2jjzvJv0NolB2u0wUcvwqtcPzS8boXrwu9OLxzuHomQugg4wGc2AzG
go5QoYtb7+las4ZDqOd2yyV0sP7rleSW0OY58s74kmW/UI9XNRdrzv81D/Mw
j/+2w/R/0///Rv+H93P/h/dz/4f3r7RFGbxzsou+hvfzwvtLnwsfOTqeg76G
93P/h/dz/4f3c/+H93P/h/dz/4f3c/+H93P/h7tzh5ftyyrbTx7ez/0fbsT9
X/Z94bXcb+H93P/h/fou8wOvub47/4f388L7uf/jPpXft8L7uf/L1jnjvp87
ADyM+xjuw/h9Ge7v+f0+vJ/7P7yf+z+8n/s/vJ/7P3yae7Xs9wfez/0f3s/9
H97P/R/ez/0f3s/9H97P/R/ez/0f3s/9XzYXAN7P/R/ez/0f3s/9X/bzlO3z
DO/n/g/v5/4P7+f+D+83/d/0/z/T/+H93P9l72/wfu7/cHfu/7K5OXg/5jX9
3/T/3+P/8H5eeD/3f3g/9394P/d/2Xkf3s/9H97P/R/ez/1fdj0gmwMF7+f+
D+/n/g935w4P7+f+j+s47v+y6yh4P/d/2feF93P/h/fz/lP+L5svAO9vfSn3
grq3nPS1bP6X7PNcsvlc8H7u//B+7v+y60x4P6/p/6b/m/5vHuZhHubxHRym
/5v+/zv83+NZVir8v+n2Pl2jn4+gwv8j71HjPO8aQeX+zwvv5/2z1v/D+3nh
/bzwfl54Py+8nxfezwvv54W788o+ly3bTwbezytzJNn3hdfywvt5Zev/Q28U
apb9kpMK//fsl+qiwv89+0Xdof5R//fMbw6kwv8Xna5atdswB/Vr6//h/bwy
X4L388rmnOK+nxcexov7MF7c3/PC+3nh/bzwfl54Py98mlf2+wPv54X388L7
eeH9vPB+Xng/L7yfF97PK9sXCN7PC+/nhffzyn6esn0e4P288H5eeD8vvJ/3
z/J/pV6dXPU7O6nwf8x35HMePdsTOKnw/42ByTfEy6xS4fZWYyCziwr/N8Yj
7nJR4f+yf07r5uMTnZ3hosJju5wv57Wzn4sKV5ftM6/f9WfsqVLh/0rL9zcj
pqhU+L/BOHtcVPi/9HNb8/d226W4qPB/2b9n2q3Roxd+qlLh/7Kf/9siyXr7
Ol1U+H/EJ33nCJUK/1+acJuXo7JK5f7PK3t/g/fzyhxetm+e7P250Z3he1OO
dFPh/8uHxVp6qL2bCv+Xfe5gob7NVEOVCv/vEC+0V4kxLir8P4X6Kmr2YCcV
/i/7fXu7/vT99vldVPh/c2MjEycV/q/vapg0p5MK/2/sk6LTgyJOKvw/r/GC
dVDh/8a4pV0RVPh/kb36BoMOKvx/tb6N47oIKvzf5T+nqDI3ggr/d6epEjdv
GQf1e/V/Xng/L7yfV3beh/fzwvt54f28susB2T6Q8H5eeD8v3J0X3s8rW9ch
e53C+3ll3xfezytb/5+ppn4DFUGF/ye4o2/ME0GF/wc/HN6iSKVwKvw/fI6t
TQtHOBX+X6T46CubD4dT/+j6f9n+n7J9RGX7c8L7eeH9vLLrTNn6/1k9Jrmu
hEZQ4f+e57IWqun/pv+b/m8e5mEe5vEPHqb/m/7/J6z/5/4P7/+/+j+8n/dr
6/95Tf//e/z/a+v/uf/D+7n/y9aJ/dH1/9GMdWV3hPX/3P/h/Sf6l0mYKrbD
9H/T/03//wvW/3P/hzdzf4b3c/+H03O3h/dz/4f3c/+X/XPgr9xj4ejc1WX7
zMP7uf/D+7n/w/u5/8s+twXv5/4v+/eE93P/l/384f3c/+H93P/h/f82/5ft
/8P9H97P/V/2uQN4P/d/eD/3f3g/93/Z7xu8n/s/vJ/7P7yf+z+8n/s/vJ/7
P7yf+z+8n/s/vJ/7P7yf+/+Psv7f9P/vw//h/caYoXYOYf0/9394P/d/eD/3
f3g/9394P/d/2XwBeD/vv83/4f3vk/Tqd3+oU1j/z/0f3v9cv8y/cdf0f9P/
Tf83D/MwD/P4J49vfX/7Rv8P18cFtZ6sCNVvw/t7CZXd972a4bP/arxAoQlW
Jy2/q+4NoSXqx47V8c4pocFpVj7pfC5IaHWfAdWzHdeExq/SNdHgJo+Ejms3
L0P1Mjahsp/D+j6n7r0tskjh9cxj3Cn0lb4dROEDQs8b9wG/CK1srCNZL9Qz
/8dbqOzzmD2NgYa3hDa9OqbNpdy+Qk/MrR3DOlDsIuO8HUwtbsxB9lU6/DTj
/vnzTupvyyylxr4JUDK179p+S4RKxc/zfqI37QYkUKnJvI6kD5xrUW4vSf1i
4FoX1dD5A0HSP38qTL+j0KiY41bkUrHKL7ppVMxre9Xj+Ik4m1Qq5qb1K709
fcFhGhXzVWX//AUfl5cv2kKldtJvLzJblSE3240+/cpFzV5pcvOhHS1Kg9Ep
g6u3Vakhv75KPTWvVfkw0ls5OU+lllrY0jlgkVUJ6VViTIF1GvXN0GItmx6y
0xxKPo9S9n1ztR4xN+ZEjTq32eEJMYbZldWVOlcfu0ajGtuv7LMrBZ/kebA4
SgT1w55SM7aWtynG46gk4VTMhaywW/9keqBQ/S4vzcsAobmm+hadksxfqOw5
VBLDD84LrZ2u9Nmx424JnX6qVEGv6H5CPfOmgqlnq23r0KCLr1J/bpLCS7eH
U8s8MiZQ/Wc+cTgVc0j7Ge51h5rA+AUIUryNeXGh1J7GAyF/5YpxvR9Khdvk
N+AunPrWqs//siixKhXP7OivUhtmLrLxTEOrdD/YwJa5Xv50SKPea5yq7tMQ
u+Iz/0TyZkEaFfNhZfsJl4jnTh2ayE3FHNgEgx5t+OmqRm09eeO2J7GDFX3X
5HzZ3dSVS8bObHgqWLn609mzUWe6qQHLa0Z8nBKijBozKMeoU25qYWMeWYhi
TPU966bmL/9+4u4XIcrQi/okNjc1Z76H7z/EClWKKnP7pLjlpm7M6iqVLWmo
MkX/NWp6j2rcNqUNU84nipog5UY31ev89bGRPzvl5IA1sZ990qiH9FfF4GBl
xip9MJ+binnBxl9PqntUz1z7UJpHy+fS7ltYMmCkn5u6ztv4ySrvjDmi96mF
iurgdke52Gd/mcar3FTvkfmCVuwKUYxxe3Xd1M+fV8bMFTdECRq9ypUyWbDQ
a6ny3nW1tgqVzYM2nsJnCRHaML/+E7wlVDZHfk3wte4dB1mEynwMcwV5e8/t
2D3XSrGeOYEBQndsKF19RgOL0PIXEveM9dQm9GLM9G2KD7AK3WYAf6DQAsZp
Q6wyRX+SaBGK+cO8kRcXq5ufDxCqn/2TRrcIjXxTT518YpDQ3MZ53iJU5uQN
V/5y/e5xsXc8g02FylwuYm7F5oXtKjXaueoJWue2Kf79sta+EVWjqj8leLVw
tE3Rp+42b6JRC+mPNVLbld2n8o9PO1CjGlzXxK447z2a1NdfpcYasanHrbQ2
pX6cfq2PJ9OoxuOFlTZl/LrRX8a81qhlHfqg62Alac56vz07pVGN6deP7Mqs
nuqdDQEaFXPDC/WZmvxYX426eoTvL73q2hVj+5cGGtUYM5jErvzk2ahDqGyf
JdsZ/QFokNCt1/UzbKDQUsZcygChw09czlhjjb/Q4DXK5UotAoUaLJjGT6jD
OBHcFoq5o7w1z81cWHnqLaGhOfQHOjeEys6/Hzbob9Riwzrcvz54mNhse7xD
cuw7L1TmWp7z3gmh243X8WGhFTKeW1Tl3nGhZ7ZVqNh3fjhVV91Vua8rO1R9
RxqV+uvAhAeH/GJRjLfRNhp1u/4/y2OXzsXocv1B78rzNKpnLqpdyZf9dvmb
51Tq4vu9Ii8RrcpW44SiUg2GjmOTXr/Jrvdk++3fyX1nYsczTuonY8OuAGVP
fsvnLUdU6qoPI7rUCLcqCe8uzR47qUZtawygtSkvfjqUqO1zFzWH/uvfyqJ4
RW/SfeJE9X+6s1+Bd8Pkc5Fkr/de+vZ9iVWq/m6+fLGF5tTyebWehlGP52mY
L7xOgPQ68GmLxJGn4mDqPOON1VeJe/JF1Ts3Q6j6dNK2cfxp3jafu527wWV1
UHsXdZ7+dlkwSHpdVy9jzz1xu6hUS9iSswlKW5UJibNPjlVRo+L81Uofw71D
oz7tksN3/RW79P32cfOdxVsdU6npGmS6vs1plf6cPfONw6h5jXm1AcqNaPpk
65tCPQ59WWiWCdYGlStfFep5nuYjtMQp/QrcW6hnvdJVocuNC6orQkONF5SX
2Mjf7vj+p4XKnhd41v1dENo6ya/5Z13dIlS2HrKI8fzkkNBCw4tH/hf6Cs1i
/PedEOpZP7hLqOx5aBHjuvKs0DSavtJlvdCl1VPHuf34itCG9Z5VTmG/K1R2
neB7Y2aZdvWuCPWs/1KFhk14f6FoiFvolNgbfT5/viZ0kuEH28Ua58OuQqMY
6xM7ijUP8zAP8/hRD9P/Tf//C/wf3j+mWndb95gO+hrez/0fPz/u//B77vnw
fu7/sj8Pj+c+D+/n/g/v5/4P7+f+L/vnw/u5/8PducPD+7n/w/u5/8P7uf/D
+7n/y74v7v/4/SDuF/n9I7y/w3T930Slr+H9vN+L/+M+j5e8P0cmS6vZKn0N
799dWd/YXaWv4f288H5e2bpNeH+7lUW1bUVV+hr3hfw+UbYfLLyf+z+8n/u/
bD9heD/3f3g/9394P/d/eD/3f3g/9394P/d/eD/3f3g/9394P/d/eD/3f3g/
9394P/d/eD/3f3g/9394P/d/eD/3f3g/9394v8z/r+mMdEsT/P/yiX1nXg9R
Bf9fNivqwxi7NNP/Tf//Jv+H93P/h/dz/4c/cY+C93P/h/dz/4dLcaeC93P/
h/dz/4f3c/+H93P/h/fzmv7/Y/s/vJ8X3s/9H97P/V82FwPez/0f3s/9H97P
/V92/Sa73pPttw/v5/4P7+f+D+/n/g/vF/z/P97P/V82H0H2eof3c//HeYP7
P7zf+BhoXyd9jes+xVc/g0fQ1/B+Xng/L7yf+z+8n/u/7LoO3s/9H+cr7v/w
fu7/svdbeD/3f9nPGd7Pa/q/6f+m/5uHeZiHeXwHh+n/pv//Dv8/+FaXSTsV
/l9hhH6FHEH92vp/eD+v7OcJv+eF9/PK/jw8nhfezwvv54X388r++fB+Xrg7
L7yfF97PC+/nhffzyr4v7v94cb/I+63r/8frbJrORYX/Z2py8HDic04q/H/6
gYcTY9pCqF/zf88+wv5U+P9UwxXsVPh/tjlHXd1qOajf2/p/3Bfyyj4PDu/n
hffzyvYTgPfzwvt54f288H5eeD8vvJ8X3s8L7+eF9/PC+3nh/bzwfl54Py+8
nxfezwvv54X388L7ef9t6//3rtI/we6iwv8xF5PPx5St20wxou6kpYtcVPi/
ZrwwnVT4vzGu/ZGLCv+XrZ+sekCHJpUK/z/k9XO7kqVdVPj/mxoJz2Qt5qLC
/yc+HTUt8w0XFf4f/d2EWu+8XFT4v777zp4tTir832vYb2r8Ky4q/D9N/h32
BNNdVPj/sDzxt7x97KLC/zEfl8/JnTlW3xFGo8L/G3VLN/1lfI0K/5etE4b3
88L7eeFPvPB+Xng/L1yKF97PC+/nhffzwvt5Zf6v76aSZqVGhf/L5ix4zisu
Kvxf3xVzWTkXFf7/W79UkacaJxX+b2yPlcJJhf/X/3Ryf7ZnTir8f+1UfYdE
BxX+v1zfrmpPBBX+n6Vo7ON5Gjqo8P9imcYPbdYzggr/X/ZWf4AZToX/y86/
P4r/88L7eWX7YsH7eeH9vPB+Xtn1m+x6T+Z18H5eeD8vvJ8X3s9L/s8q2x9J
9nqH9/PKniP/1ev/ZfvWwvt5Zdd18H5e2fNreD+v7P0W3s8r+znL1v8nf6oP
vo6gwv+frewYeet8hwr/H/RYfwe3UE3/N/3f9H/zMA/zMI+/4TD93/T/b1j/
Hze57ace9ojfvf6f1/T/H8P/v7b+v9jmmdXiv3QJ6/+5/8P7uf//2ev/nxsb
EkcI6/+5P8jWfcH7eeH9vPD+HsZGsy5h/X/yD09bDs/j/N3r/3lN/zf9/3v0
f3g/9394P/d/2bpNeD/3f3g/9394P/d/2fpJeD/3f3g/9394P/d/eD/3f3g/
9394P/d/eD/3f3g/9394P/d/eD/3f3g/9394P/f/r63//2/3f3g/93/ZnAV4
P/d/eD/3f3g/9394P/d/eD/3f3g/9394P/d/eD/3f3g/9394P/d/2fkX3m+M
z2jpMP3f9P+/1P/h/bxfW/+vT4ELLusQ1v+XNG5MHT+8/39t/T/3f3g/939z
/b/p/6b/m4d5mId5/AOHzP9lc4FH6/OgWomV/PnK+mVB8sFCPfNvDwi9V+7o
h4tLg4RODYnIu324v1DZ/Jf93XYp/ducEZpx0YDtx5YFCD0b2MWyMokm9Imm
P7C4J/RFg3kj8g6+LVT2Y56UUwfMjQrvgk+fSsavf1DoemMO506hnnlK64VW
Ns5XE4R67v8uCO0fOKrUg/LXheYxxtbeEoo5TrzrU95efPBtKLWy+1DNwsUC
lGeZYzgyvXNRszj9cpfuYVHa5ZvZPf0DlfrGA5pKphv6pC2VOr68M3OHKxal
lTE4TqU+6TdofPuXFsVgx5UqdY8+jm6nleYO8vmDqes1t7x8rVIHlh2aJKKz
TbrPqv5p3WuDNGqaAVevzGtuVywHgjIf3a1RjWUrt+zKpL7+e6qU0qhVRg88
Ny7CJt2vWLbP/7DjnbP326pSc6WYvfO2l1U6H0G2/3/wuMK3xj9Wqa9W54ny
upFNKT5/zpMTm1Wq/lMacNaqnPJfFqFlC6emHqXLmkW6/rxdvWX6iDChJ6d+
apm+WoDQrhF1j/cL8Bfar4H+wWKxHu+8JdTzPuEl1DOv9bRQ2fNB2RzqhyNO
5kuTOZQ6p9a60MVt/P8zb/MutfGXaVssYUHK4Oi9Lt3a6S+0XPn1K4f38xXq
8QmxmJvNG+PnsudrDPEXWiTk7c9v192lYh6xbP4F5pLy+aT31tYLDr+kUiNf
FGlOfbYqnvGoKjVGuldlfs1iU65+6bbkbgaN6r9x4bzje21K5ItmRe+WGnXn
skdLr2W1KxFxlo9vUs1Nxdxh2etriC1+lqap3dRszSM2rdkUrOhTKRsPclNd
KfUHbyHK05Nx4+QJcFMzpQ0bVid9qPLzkCUzSr+5R/XMib6jXHgf89jFZveo
l5YG+U3KEKZokW8SV0q6qZiTK9snOYY+BnWpm1p7YtHlQzeEKKn0sfFp7lEH
NPLvlGBrqDI/dh2n9yg3teNB/R0wRDHG1D5yU/VXZcKGoYo+jXfV7HvUDGVn
DS4yJ0wxmC95iFDZ/jPvoj++ta7rbaHPXtyp/WSkWM/5zSbUM2YyWOhhY67d
TaHG2NMCt4XG+lC7wu59FqH9fLou/ilboNCKSXc+87vlJxSvS95qZ86snrMk
UOihx3U+zPYSW9zwA4vQAjsrxe5UTeyGBXn1SwOh/br1jnyrE4v3Cd6CxgDr
QKGhxnWTWJkrln7T+Ez3Y4FCZfPoZc9/cf7k1Z9qpZ9hE5r8WN+Babrahcr2
i46aJl/1u8U0KuaNzo08i6Xx1qiYO3ku+8fOPZ9pVMwHz58oUBs7RKMuOzek
6PNWdunnFwymTO6mYr5wp8HlK8RcolE/T60cGn2dXcl7KMfJyqM16iLPggfp
vtntU85JfG2VRtWnOc/dHfnzmPQhd4EjGrXXprOHmty1Kzk+Xe58bbpGneUZ
AK94HuNZhMr+viL/nSLfgoOEuqtH3T7xgr9Qny3GBHGhnjmNfkJP39k9tWWF
AKGY88m72Xiw6C/UWF3j7StUto9KjwyN9FHGQiMvqhr6fRB7vnyuLTWy3xQq
c/vzxpztY0Ivzfklx+Vn54R6XvdHhbpWHns2+v4JoQMSNBi1/66Dms4zkJjm
f/M54LLXy5cC+oMhlap8Sr607Sir9PMjsv3eZa+jKS2srZ+5NWr1hvqFaLBy
2qd+ifxvNao+rbVRt2CaS83nU489PKz59WoatVSCAwkWfLQp+tOWtNM0arx6
e07lH29XGhqDql1U/Wy9+niQ9Hr+Zg39ykCjBhf6UHFOjOD/rBfXqJkNN7Yr
K5z7U1ferFGH9c3/65gzduX2+isrYnhp1Duu1suivbVLP3d22jhtuKjGMqhM
FuVmud6Xi29xUbF+DHPQ+Tx0/SnGssYuqjG2N1WQUthecEm1gyrV8zZgVdbq
/7OlGnWc5V6NnhvlnyeaVrJA+7ijVGqtRNkyJOhmlV6nRV7srMnYWKU6Nkdb
WyKlVVkWeXU2aJaLOtCYbxukvNZPJ801qvF4P5Nd+rk5z3PpO1T9bmVuxUAl
yWP9gvq20O1Jxl8vs9ZXqE++c2Xb7/cTqn8aOKCu2AEFOwwcUkussdxnbYBQ
2fteZeP5vLfQ6muSrd+S45DQ3cb7kJdQmf/LfGC7PpZ7xUmFV7aOQvYcQeYG
C/qkuFX4+B6hkRd9mXO+uCy0sRKydvO57UKTNdWfxNwQ6rmeDhcaM4b+hDJA
aKU5+h2F2NX6qpVoD4R67i9dQl+NGx890V1voXmMdUC7hU4y5i1PF/qt61rN
wzzMwzy++8P0f9P//w/+D++Pkm3E85UdnfQ1vJ/7P7yf+z+8n/s/vJ/7P+4P
+P0CvJ/7P7yf+79sn1V4JPdJeD/3f3g/93/ZfsWyff7h/dz/ZfMRZPv/w/u5
/8P7uf/D+x/22TJre0yVvpbtP/+j+r/MFWWO90/5P7zfZ1rc/mcOuuhr2fwL
eD/3f3g/9394P/d/3Efy+0p4P/d/eD/3f9nrC97P/R/ez/0f3s/9H97P/R/e
z/0f3s/9X7ZPMryf+z+8n/s/vJ/7P7yf+z+8/5/yf2vWSRuqvlJN/zf9/3/1
//s/N54+f6RGX8v2i4b3c/+H93P/h1Nyt4T3c/+XfX4B3s/9H97P/R/ez/1f
tm82vJ/7P7yf+z+8n9f0/x/D/+H93P/h/dz/Za8XeD/3f9nnR2T7vcteR/B+
7v/wfu7/8H7u//B+7v/wfu7/8H7u/7LreXg/9394P/d/eD/3f3g/93/Z587g
/dz/4f3c/+H93P/h/dz/4f3c/+H93P9lnyeC93P/l12nwfu5/8P7uf/D+7n/
yz43B+/nNf3f9H/T/83DPMzDPP5Fh+n/pv///+rZZ8hOhf/P6jHJdSU0gvq1
9f/wfl54Py+8nxfezyvzCng/L7yfV/Y5a3gkL7yfF97PK9uvQLbPD7yfV7Y/
kmz/H3g/L7yf91vX/yfU+eWJkwr/r/hsxfskvZxU+H/SdZXzlS3spML/jV1W
xodS/2z/7/lx00PbAysV/p808cNdl0c6qH90/X+a/Q33P0jnpML/P9Xrt6ri
bxFU+P/zaZ9PpczooML/m27v0zX6+Qgq/N/xonShXJ8d1K+t/5ftfwXv54X3
88L7eXEfyQvv54X388peX/B+Xng/L7yfF97PC+/nhffzyvZJgPfzwvt54f28
8H5eeD/v97L+v1vOkqs2LIigwv+N03BGlQr/X7Ko/vLzFicV/v9Z365nt4MK
/8/p3/d0gxcOKl6nUY25Iy4q/L9szsr16uRyUeH/72d7LY4f5qLC/0dOPelX
zO2iwv/3vym8Z8AbFxX+n7Jzo/w1qqtU+H+cvWHrBx52UfG+MfJl92bnCrmo
8P9bO5PVOv/ISYX/Y54onyvqmTviosL/Y1+0vT4XzUWF/2PuO5//Llt/65tk
aPqFcTQq/B/uL/N/Xng/L7yfF07JC+/nlc0vhvfzwvt54f28sn0z4P288H5e
mf+vMjaYUqnwf9nfV8aI2MWnjnJR4f+BvumzXczlpML/jTR1UuH/Xr3rVRq5
2UGFg51d83z+3m5OKvw/8qTe7/5QJxX+X3SFddUIXwcV/r9ni75hkYMK/8f+
KXwflUXGIFYH9Xv1f154P6/s9QLv55XNj5bt9yJ7HcH7eeH9vPB+Xng/L7yf
F97PK7ueh/fzwvt54f28tN6fVTZ3Ht7PK9s/Ft7PC+/nhffzwvt5ZfPE4f28
sus0eD8vvJ8X3s8r23dItv5/847jH+fOjqDC/w8f1X/jHVT4/8WLH/oeWOOg
wv9bPMlY7nFfBxX+b7w9Jgihwv/HGu+LYVTT/03/N/3fPMzDPMwjiun/pv//
Kev/eU3//778H97P+7X1/9z/4f3c/+H93P/h/SlbrJu6L6vzL1v/r6+CKmQL
F9b/c/+HI3JXhNtxx4P3c/+H93P/h/dz/4f3c/+H93P//9r6f9P/Tf//N+z/
w/0f3s/9H97P/R/ez/1f9jqF93P/h/dz/4f3c/+H93P/h/dz/4f3c/+XvW/A
+7n/w/u5/8P7uf/D+7n/w/u5/8OPuSfL1t9+6/4/pv//Mf+H93P/l/19wfu5
/8P7uf/D+7n/w724/8P7uf/D+7n/w/u5/8P7uf/L9lGH95v+b/q/6f/fn/9/
bf0/9/+vrf/n/g/v5/4P7091uU7MCn0cwvp/43S/2Gn6v+n/pv+bh3mYx3/X
8a1zfmWHzP8Nh6gndJLh0AOF5ogzMk7n7fuFYj4e75JD7edPruQvdHSpB+XT
v74pdP+ilTcb+xwW2vrjR98kQ68L7Zxga+QZVxPaaEu5YSNCHghtfD9Hy13L
/YRKf27VHzhKntmq8K4fPMHr8bPNQmXzgGzdY/6y9uQ+obJv64r7aVT+cpcU
3gTGHOMbQjGvidcY35bHT+iobomD6o10Ugv3vZdwYZcApXPjBUqmHCo1qvHf
a5Hue1m19cULSwbfpTrybh+ebFeQsj2D/oDmLtVzfRKkXFt168iFJ2Ljr6xV
8217f6H63WTf/AFCz896U65DynAqnlMc6KnfaYRTcT1/oWOUhSdHq1R9F9+B
Pa1K4nI1G1eNp1E7pdY3ALEpy2ZFfRhjl0bFPM0Fo3T40aidF+kry+1Knmo/
lTlcxE318FKwdL1lrFu6IGjU+sZ1mk26X6hs/+Fo+vL++mHUTa+zL78+I0Ap
a9lyfnxNsdnzZI1ZK62/UMwD5JVdb2NOIG+g/rHxeV5CPffr24TGSHR3afbY
B4Qu1tnf55rQB+v2B5485S90feZ0VQdmF7sjlj7ZMEBos+qBU7SFfkKvxUtR
cYTiK7Tk9CpVPo8Wu3p2keBF828Klc3/8jKee/gJPdUm9p7RW0Op7fM/6vg6
3F+pU6xLtHb7XNSA2HN67wsIUsavG/1lzGuNivmYRfeVfrg+pZu6KWrZcuXX
ByvD9cdXrTVq3geLoxTMKZ+LIZsLoE83vV5Qo+pPQRb42qTfN5a+bc58N7VB
yQXP7/0aoszUX7Zz3NRG+tvN3BBlw6C0V5J/cFOnTPn4PEufUOW3ySPdjQ64
qaW2HS22wiqfIxBUJf/avD3c1Ie5sqyPfI0pO5753WpS0E3V3yXX3A5WLhvj
ezXqdX07s4LBSsZeyWKUj3GPOnaI/iQzVFm4OY1Oj0JfZr1l8VctQo0f45Ob
QhcY9zFHhPoaY9H3CS3SsumhtPGuCg17sqn62WxWoTL/XDhlU4L7Eb5CSxrQ
YREqe76Z6XGGoBcLAoTK/MQzF04szjO8snUFOM/wnhpzcEen1BahmFfMK/vz
MkfyPK4LFCr78z6lAkOuX7UJxZxY3rUnM/ce9TlQ6IkVHbbWnGUVmqOE/kqw
C02ov40m1aiY4ynbf7vZjlvtw45qVO11z4yHHXalV/+GA3oUc1Px/GhOUWVu
nxQatXWs2hNurLEpgzsceFN4j0rVp/+2uW2Vntdk+/9jzjGfdyybezIwWrRr
rw6p1Azbb751hFqVbrn0yeUaNfazT/OeTbUri7q+SxxtiJtqPPZpGaJsj3kz
+6axGnXBXv2Jl13x3ny49+bsGvXmo2Ilq562KbV6xW7+60CVetPYAM2qHEz4
+s3QYhahkX9p+laGQo1x8smChM5KsGp3Zb8AocZj/qX+QmX7U+k/3ch3IqGy
68P9q/VJz2KNy+UmYmP1mXexYxSxsvOpzNs9c2W9hUZpPaninhQHhH40Nog6
JHS/4XkbhI427m92Ca1+1b/Sx73XhRaplGdQOauDiuuKx5eaH3F+dlHTFxx2
6/xQC83b5nO3b7RNfiFdKo2q795TaINNaXsy1DFvo0bVV5OkPik/zzY1LiRU
qqpvw5fIKp2TZVy2ttGomF88Ud/e6olGrbQ8beTfQLCy+1T+8WkHalTM75Zd
J+/yzeXf97RK9cwVtSpR9MdVDzVq5Zc++ktWWf9KfzKlUScbD4Dtyv4Z0/NH
7FWp643LOqtSOqiy96ZGGnVfA2NAqZLFeMyvUicl1WFa/vORfZ5rYavavfs3
VKnGb2FSq3Rugmy+Q5pSbSZv3KZRB3veKJXl73b1X/hCpXrm4dqU47ErFc/s
cFH3HaxxrXTZyPNSpiO1FhdQqWM9L1Tll5rlIq/wVGoLzy+kEnbBuaXXco36
W56F+3y22KX7/38yNkzVqOV6dS57/bVN+vO3lanxsFaRu9TR8fKtudQ3SGnr
ra+ECaP+tsxSauybAOVNxKiwGDEChepXQalGiZ00qdin/mP9hT7ff7Zt/21i
R82/PWxjlEChGYwbmatC0xjPDQ4JDd+r/yJdEuprnNA2C13f59S9t0WmCH2X
sMy4dvN2C61w/NLxuhdPCc1jLFDcL7RM0RaPjyubhHYvpl9QHxFqq6pfKV4S
erz2+1xXTm4WGvnmtPRhUV+hcS7pK77CheoXWX6Tbgid2n/1xtfZbUJd01pt
aLBZFRpmzGEOFer5PueFPjN+fquFVjbeb0YLlc4FNg/zMA/z+N4P0/9N//8L
/B/ez/0f7sL9X7bvpcxh4P28f5b/yz6nINvPE97P/R/3Mfy+Bt7P/R/ez/0f
3s/9X7bfMryf+79sv1B4P/d/eH/RvAXT3Z/lNP3/O/V/eH+i6gs/fSrppK/h
/dz/4f3c/+Hu3OHh/dz/ZXMxZHMB4BDcJWTfF97P/R/ez/0f3s/9H97P/V82
RwDez/0f3s/9H97P/R/eL/P/7ZNyN7isuk3/N/3/X+X/8H7u/7L9t+H93P/h
/dz/4f3c/+H93P9l5zXZ/v/wfu7/srkn8H7u//B+7v/wfu7/8H7u//B+7v/w
fl7T/38M/8d1BPd/eD/3f3g/9394P/d/eD/3f9l5Fp7NfVs2Jwvez/0f3s/9
H97P/V92nQzv5/4P7+f+D+/n/g9v5v4M7+f+D+/n/i/7+cg+zwXv5/4vm5sg
m+8A7+f+D+/n/g/v5/4P7+f+D+/n/g/v5/4v2/8f3s/9X/bzh/evLq6/A7jo
a3h/h59m3D9/3mn6v+n/pv+bh3mYh3n8mYfp/6b//w7/997XPUm5mjYq/D9E
/1h+WweV+z+vzGFkn3v91vX/NcZF2+E67aLC/3v+Vun555cOKvx/8u0bM8u0
c1L/6Pp/eD8v7mN44f288H5eeD+vbL8FeD+v7PPCsv0HZOv/x6UdWOhCbycV
/j/0gn6n5qDC/7MUjX08T0MHFf6ffdPYQn2mhlD/Lv/PtzZvj6d5rVT4f4sJ
+oRlJxX+L1und6RoiTCvCU4q/N94HDPPQYX/Xy6+5VFFNYIKr/C8bwVT4f81
m2yL0TtvBBX+P+re4V15Ezio8P8qp15us21zUL+2/h/ezwvv54W788L7eWX7
Ysn2BYJD8Mq+L7yfF97PC+/nhffzyvYRgvfzwvt54f288H7e7339//an+s5x
Dir83/N246LC/zHXnM83f2psDOCkwv8xN5HPT8zxIuWJEt1cVPi/7HNngfVG
1lMXuKjwf33aYYJVLirOOxX7vcpW3M9FhefvXaXLgosK/5f9ecyP5HMkjxob
Ormo8H/Zn7+kb2uQT6PC//XdipZud1Hh/3vj5492rrqLCv+v8FudDVt/Vqnw
/6G1j26401Gjcv/nle2/Ae/nle0fBe/nhffzys5rsv1/4P28sn3P4P288H5e
eD8vvJ+XvJ9X4v9ljyy5evqOiwr/1zcT2v7URYX/FzDm9Lio8H/jccNeJxX+
v+p4i2EXkzip8H/ZfIrGPik6PSjipML/ZdeHxz7Onf3zOQcV/h+oM+xABxX+
7+zq2HewhoMK/5edT783/+eF9/PC+3nh/bzwfl7ZeRaezSvbJxPezwvv54X3
88quk+H9vPB+Xng/L7yZF97PC+/nlf18ZPPc4f28sn2TZPs7kffz/sf7eeH9
vPB+Xng/L7yfV7b/D7yfV/bz/9b1/+0yW09Pv+Kkwv+9V8TwShTVRYX/rzNu
rJxU+L9thn6GcFLh/xbjPBlGNf3f9H/T/83DPMzjhzxM/zf9/xvW/yd/quy7
EzPid6///7/6/9fW/+tX2UvOuoT1/9z/4f3c/+H93P/h/c8yx3Bkeuf63ev/
fzT/h/fzwvu5/8P7uf/D+7n/y/YZhvfrmt6sZ8Tfvv6f+79snR68n/s/vJ/7
P3yCewW8/8OzUwOjRXMI6/+5/8P7uf/D+7n/w/t5Tf83/f+vXP/P/R/ez/0f
3s/9H97P/R/ez/0f3s/9X/a5M3g/93+cZ7j/w++558P7uf/L/jz8nns+vJ/7
v+zPw/u5/8P7uf/D+7n/w/u5/39t/b/p//+M/39t/T/3f3g/9394P/d/eD/3
f9l8Cng/939cD3L/h/dz/4f3c/+H93P//1HW/5v+b/r/f6P/w/t54f28X1v/
z/0f3s/9H97P/R/en/5NtFmBl52m/5v+b/q/eZiHefyYx7f6v8TzpZU9F9DH
8D3qLDSPPu6r8Vahlq7llzy4ESR0264pz6uMCRBaYPGdY8U/+wldX2V+8bhT
zgj1uXypU4/Zl4SWMgYpOoV6nPW+0KEdUz2Pu9lfaGXjOmi50PYlSyc4kOC8
0ALG9dQJoYH6+LRkJ4V65gsdEHreOD9PE/pTlLtP4yg+Qg9mb1Fz7ahrQpO0
P1UlrPdVobL7F8xz5XNdZftP1jX2HwmnFvcAnGLwbtJAofrVUbLevkLjZ9aB
SGyWxIu85z69JdQzb/O6UNmc2T2eGyWhk3+bk2u+GiA0rNbP42oUUqkfioW2
n+ZnUSYkzj45VkWNijlZUy9PDh5XWKPWLHQzzcsAmxL5xa3xj1Uq5vZ2Gly+
QswlGhXzCmX7Hq9s1m7FjYcqdXjkXf2i+vLvO+R9+tTJJ4ZRk16PcnX+iQBl
zKAco07N9xeapWnqffeP+Ar1vVBh9rrM14R6fn/Fhv68o++VT1eFdrd+ibd/
22WhOYw5TqeFvjKu78SenJ/s/S/trwm9fDtxwqzH/ITqn55vGNdX6L6ss5s8
+Fns+J15tiVO4yc0xBgkLVa2X4pnHqaPUGMcXesbQmccMCafCVW7797cs3ig
0FHTp3lrgXeoaVr1Gd0tcZB0v9nIv4QV6/O7qSmMQY/B0v20jcexydzUrcb8
Mvk+vfqU9rUhburyI7mmlSzwP/vg8P1wzieKmiDlRjfV6/z1sdlPhCgJH9S8
vrr4PWq7Ua0iX3qhyoxV+gMUN7V+sD65NERJlqTx1nUD3NQeF/vsL9M4RPp9
N969WHt9FTd1Wtcmr8u+C1aqnG698eBaN/VC+rHbOx4Mkc4LKJS+of6SEzq7
V1372GsBQj3+fVHouw1ZXaWyHRC6uGHXI7+kPSLU8999SqjHWX2EttVWT1YL
WIXK5pV/aaX7mZ/QaOeqJ2id2yZ0VrbffuuXSqxsvxrZXEXZPjYyn4k8ia0Y
FssiNEvkd0nxW6DQkft+GvzzkCChsvUJZ4zP2wQKbTX7cfOdxa1CF708OKtR
liCh6Q+m2bI2jthEnhe4UEMF2wQJXWdsuGUR2uH0VmvVBTahA8e3f5kqk5ua
ce2UurkPBEv395btFy17H3hrnPjcVPz+y+aDyPYPl+3/P2CRvvGGRk3nM/rV
1QZ25ZRxQtaoRzu2Gfnii005MOQXy/zOGnXTjDtJ0payK5mNDfg1qjHWe5Vd
qa+PpU+mUTGnVf9tad5Eo+K5mOx9Y8Iv+hnCTfV4TohyL+3W6NELu6lJrSn7
ffEPVryiN+k+caL6P92pPwmzKksTbvNyVFapA86mdp99Y1Fa37aWDn+mUvWL
5BMtbUqZIbu0GVktQiO/R8/bE/yFyuY2+hadkqzp4EChmA/MK7s+l51nT8yt
HcM6UGzwzLsjkicRO73UwpbOAf5CZdeBu0fp9yVXhJYx1jVcFOrTcqLtYLmT
QmcdOjL8xOUzQj3XHTeEyj4nNf/5vV9XFXNSOxknLH/lY8v01QIyuqhlm0TR
lygowY/sjeKVVKmvjXmXFkWfup6xp0rFfOGqB7Z/yDBOpRrjpQdYpXNqfJMM
Tb8wjkbFvO+Ww/PE3/JWpT6ane6nat1t0tdp/21N15w4qVJTvzAmyioNXw6K
3uuSRvVc79kVz+McjdpCH3OaMlg6j+Oz34j+r2eq1PK1jlRwTbMqHYxfAJX6
YU+pGVvL25R0C/UdezTqiMvB5w4ftSu9uqyNvPRTqfrV+fLFFuVB5FVlhrMq
NaUxaDzyPmVlx/hVumrUbHYdlu1Kvuy3y988p1L1V8uvr6xK8flznpzYrFL1
V+uAs1bp57y2/TL0w6SkKnXe8b2tf1tmUa4OSpS6f3eVaqwyqWhV3pzvpVVb
rVIxD/qiXd8JSqN6G7+3wcojl/4gw0E1LsPThShJd+obGUZQ9SnR6e7YlBXr
vCN/Q+5S8b5x2OvndiVLh1PjtHjX273dolw0Bte7qFcqZ9YfzSvOe48m9fVX
qcbykLQ2pVyRZy/u1Naoh6PvrHMsll3Rpza3iR1BffPWWqBIHZsywpiLfoeK
9QBt9MdgrQOFyvYTk613Gpwz9EifuLeEVo6bt8y1BWeFZjCe13kLPR/5y3Vo
3WahMm7pfvNwh1djjyu8nvV954Re6puyeL5Fh4X65i7dY2n1bUI7G869Xajn
Pv6g0CSG06wXKnteEx75btx4612h8ADeIp3XdA4qaRF6r3Gquk9D7EJlz6dk
6yobx/Vtuijur0L/NB8zD/MwD/P4Xg7T/03//wv8H+dz7v+y/Sfh/bzfu//D
+7n/w/u5/8PducPD+7n/w/u5/8v2PYb3c/+XfV94v34XWm+jU/D/jD33xO2S
0Gn6/3fq//D+hzobNHDR17L9ZuH93P9l+2nD+bj7yfbphfdz/5fthw/v5/4P
7+f+D+/n/g/v5/4v+75wO+548H7u/7J5Aab/m/7/b/Z/eD/3f9n+3rL9omXv
A/h95/4vmw8i2z9ctv8/vJ/7P7yf+z+8n/s/vJ/7P7yf+z+8n/u/7H0D3s/9
H94v+P9/vJ/7P7yf+z+8n9f0/3/W/2Wfk4L3c/+H93P/h/dz/4f3c/+H93P/
l82pgfdz/4f3c/+XvU7h/dz/4f3c/+H93P9l8zjg/dz/4f3c/+H93P/h/dz/
4f3c/+H93P/h/dz/4f3c/2Wf84L3c/+H93P/h/dz/4f3c/+H92cYl7DNnKZu
+hrer38adUEJjb7G+8RHbbBXTYuLvob3u1ovi/Y2rUpfw/u5/8P7uf/D+7n/
w/v1u7T0D1T6WjYPyPR/0/9N/zcP8zAP8/h/HKb/m/7/O/y/d+i7J8/HWKjw
f9m+6LLzu+zzp7L1/60v5V5Q95aTCv/XV6MvibwvQeH/fRvoN+LBVPj/05Ld
i9ataKfivm9+bH1wqJUK/39nfE7dToX/H9XHgSV0UOH/WXZ3ifwvdFK5//PC
+3nh7rzwfl54P69s3wN4P6/s+8rW/8P9uf8Ptm7NOTqLgwr/T97pQZF+DcKp
8P8lCapeiVM3nAr/99wHWqh/tv9XHLn5ms9LCxX+n/Nzvnabx4VQ4f+31nVd
l+9aBBUuUfpc+MjR8RxU+P/aqfr/y0GF/98sfDzj2ikOKvz/mfH542AqHCBq
mnzV7xazUOH/DvfMGQtCwqnw/+yxkyaaccBJhf/7dx6yvtRdJ/Vr6/9lnzeH
9/PK9tOA8/HKPqcP7+eV7YcD7+eF9/PC+3nh/byy7wu344X388r2C/pR/b9T
25BH9kYOKvw/Ym7F5oXtKhX+v/lcmvonfFUq/F+2Xz32X+P7sMn2scdcRj6f
Mcqa2+nO+Lio8P/BjpY3E1ZzUeH/6WfoPxEXFf4/8emoaZlvuKjw/0r6tmtp
XFT4f/xXC0e37qRS4f959G2GWrio8P8BM7et96/josL/ez1/Wa2aj0qF/0de
vCweNNRFhf8XrmNL5fveRYX/z9MZKqFG5f7PK9vfQ3Y/LnsfkP3+y/YHk+0f
Itv/B97PC+/nhffzwvt54f28sn2xZO8b8H5eeD8v+T8rvJ9X5v/wO+544ctm
RX0Yw0mF/3ctolYtfchJhf/XrtW+1e5PTir8X3+6u7ebkwr/H2ls9OGg4vpc
dp6tMELxffIxggr/b/AiXty5NyOo36v/88L7eeH9vPB+Xng/L7yfV7ZPHbyf
F97PK3udwvt54f288H5e2X5c8H5eeD8vvJ8X3s8L7+eF9/PC+3nh/byyOe/w
fl54Py+8nxfez/tXr/+H9/PC+3nh/bzfuv7fuAt77qTC/2XzRGTzzkz/N/3f
9H/zMA/z+KEO0/9N//8L1///Xv+H94+5OnBHhkWqsP6f+//ftf5/90nvKcqo
CGH9P/d/eP+P5v/wft6vrf/n/g/v5/4P7+f+D++3LLic53X18L99/X/VVJsC
k29wCOv/uUvA+7n/w/u5/8P7uf/L1gHC+7vUrLGo67u7wvp/7v/wfu7/8H7u
/7TfD6vp/6b//xnr/7n/w/u5/8P7uf/L9quXzWGR7WMP7+f+D+/n/g/v5/4P
7+f+D+/n/g/v5/4P7+f+D+/n/g/v5/4P7+f+D+/n/g/v5/7/tfX/pv//mP4v
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
miPOyDidt+8XmmXp9t3uh7OF/o3iZh7mYR7m8e84TP83/f8v8H94f5NDaeOt
cDjpa3h/4nP6CljXD+//8P5TV9xlm0Rx0Ney/Tnh/dz/ZfsSw/u5/8P7uf/D
+7n/w/u5/8MzuG/Ag7kPw/vLlCu/fuVwp+n//3L/l31OSvb3C+/n/g/v5/4P
7+f+D+/n/o/7Zn4fLduXGN7P/V82RwDez/1f9ufh/dz/Za9HeL/p/6b//5v9
v1CfqcmP9dXoa3g/9394P/d/uB13PHg/93/ZfuDwfu7/8H7u//B+7v+y/fPh
/dz/Zftaw/u5/8P7uf/Lzo/wfu7/8H7u//B+7v/wfu7/8H7u//B+7v/wfu7/
8H7u//B+XtP//5j/y/674P3c/+H93P/h/dz/4f3c/+H93P/h/dz/4f3c/2XX
q/B+7v/wfu7/svcNeD/3f3g/93/ZPA54P/d/eD/3f3g/93+8T3P/h/dz/5dd
t+A8xv0f3s/9H+cN7v/wfu7/8H7u//B+v0kZ1mRsrNLXss8j/9X+D+/nhffz
yj5PB+/nhffzmv5v+r/p/+ZhHuZhHv+Pw/R/0/9/h/+vOt5i2MUkAVT4f+TN
akPvug7qH13/PyLy7JxkvJMK/28eeVNe7XUw9d/q/y9+OpSo7fNQ6tfW/8s+
nwvv55XtSwDv54X388L7eeH9vPAM3m9d/9/iScZyj/s6qPD/KIsyD8u91UGF
/zvDKtgD9zmp8P+18zpdzTLcRYX/y/bP/1b/n33U1a3WzkAq/L/ZuUK743wM
psL/QyLybh+ezEmF/x8pWiLMa4KTCv+X7Ye8buXwfgvmhlC/5v+e/UECqfDb
1nVu9szT3UGF/+s/7aRNnNSvrf/H3ycvvJ8X3s8L7+eF9/PivplXti8BvJ9X
to8QvJ9X9ufh/byy1yO8n/e/zf9L3Z09rNNYJxX+72VAn0aF/8vWSb6f7bU4
fpiLCv8vtnlmtfgvXVTcb+YKS9fdmUKlwv/frj99v31+FxX+byyPTKBS4f/e
edsqU064qPD/GuOi7XCddlHh/7J1m7J1pJhDyedRyuYatN1XoPz7iS4q/L/B
6JTB1duqVPj/40vNjzg/u6jwf7i/zP954f28cDteeD+vbD8QeD8vvJ8X3s8r
2z8H3s8r29cC3s8L7+eVnR/h/bzwfl54Py+8nxfezwvv54X388r29ZL5/+ri
+1erP7mo8H99Ovqg9i4q/H/z4d6bs+91UuH/rezZ1FUZnFT4v2yd/NO8jeYH
Z3dQ4f+JrpYKDLkeQYX/Pximn/kc1H+7//PC+3nh/bzwfl54Py+8nxfezyu7
XoX388L7eWXvG/B+Xng/r2w/Lng/L7yfF97PK3tuC+/nlV23yJ5rw/t5Zc+R
4f288H7eb13/L5tfI5tX5dW7XqWRmx1U+P/jOh8iz9RO6j+9/l8272bdwMM3
ykZ3UuH/MxZWnpqpVzDV9H/T/83DPMzDPH7Iw/R/0/+/Yf3/B2Of2FBh/T/3
f3g/79fW/3P/h/e33Tzu124dHP8a/18yc/WzfIftwvp/7v/wft7v3f9lPvy1
9f/c/+H93P/h/dz/4f3c//+u9f/2N/pKWIew/p/7P7yf+79sP+Q/e/0/9394
P/f/r63/N/3f9P//y/p/7v/wfu7/snWS8H7u/7i/5P4P7+f+D+/n/g/v5/4P
7+f+D+/n/i9btylbRwrv5/4vm2sA7+f+D+/n/g/v5/4v2//H9H/T/3+P/8P7
uf/D+7n/w/u5/8P7uf/Dxbn/w/u5/8P7uf/D+03/N/3/v9H/4f28X1v/z/1f
Nq8K3s/9H97P/R/e337+5ErJEjt/9/p/3j+6/p/7P7yf+z+8/6U+djCVw/R/
0//NwzzMwzx+zEPm/7IaPtpY7Psnz8c07C7WOP/0ESv55zQ2vG2J0EfLCmc4
NP620Nxjpk/z1gKFyq7zPe51UahsntdvlZ5/fvkgTOjTkZlzvkh5X6jsekb2
4x9dueR9S5ZTCm8efVxR/h1CZZ4//MTljDXWHBRq2/bL0A+TDgitbVxf+wg1
Pj6fWKznn3dBaJnwZwPKDvUVKrsfwVw43rq3rmerNFmsbF6bfteQtsFZocsj
r1KSX9gpVDaXzTMH6YrQnnm6/1J4hI/Q7sbzpctCZxSouSN3VbE1x+uCb6fe
WLN858jQ28oONWvu0/FU6q8DEx4c8otFeflaHwynUXMaf+92Zfm7Xf0XvlCp
BnO2tSmxbukio1HrG8/LbMrKZu1W3HioUjHn155gev3nWzTqi9MBH0PO25XO
7Sq7D9V0U6O2rVusS7QQ5Ymy707MPho1Y/Y8WWPWsiv6NMzmTTQq5htas07a
UPWVSn2iXd06oYNNug9t5EX5br/ZLmr/amfOrJ4TJP38iGwfm8HRe126tdNf
qPE4pK2v0PCSZ1JNuXRabB39H3hMaImqp1tvPHhLaI5MllazHwcKPZ6nYb7w
OgFCpxoPCvyFeuaG3RIaw/A/b6Ge558XhFrClpxNUPqKUNn9y3Pj8xL+Qmuk
GXD1yrxQqnq/ydjqV/2Vqge2f8gwTqVibmDFkZuv+bzUqJ55ysHS/X4f347R
YUxWNzV9NeMBlVJv+XlL/usaFfcFG+9erL2+ipuKuZlxN+ty7aY2ffikbqcZ
IUrzxfodoJt6//rgYUlrhihzdq84OnuCm9rm40ffJENDlOIrKyxtdMVN1aef
Lo8eqgzu3WXt5dtuapbhc9ZPSxEqfR4h25/qozEP7aLQ5UH6J/T3CN1uAPZh
oZ7Xx2WhsudWpz/rg3cvCfX46HWhnaK+Ody0eqDQfg3i9Gt93F/o1usFn+R5
cElohd36DhKBQmXzByvkjlf5U3KLUNmcwW5N25bwT2oVmkNnqVYWobJ1ArI5
6bL5g+2r1N+bJZdVqD7VPE4/m1DMH+b1OTXm4I5OYvf4P/POtFNsvzsXnFt6
2YTK5sxi/jGfgzx+3egvY15r1LKOk10fdwpWvCbsmrvhvka9uD7LxAq1g5Xj
U5ZH/idq1P36yz6hXTG2B9mrUT2PK+2K8bR6u5t6Ot6AbHu85a+vmWPDi7/M
qlHx89dXiTYfr1ETGc/x7UqLGBN+TrNfoz7YdXlkviC70ujO8L0pR7qpdzsd
Op+jS4iiT6H/5ZGbOufJic0JG4Yq0/bPmJ4/QqPWiWEd2Lh0sHLzyIUnLRJr
1JBEjaps+dWm7Bgxakvhiyp1oTGA06osHxZr6aH2bqqxHVihECXLBa8iIz+5
qZMMGA9VRg88Ny5iuUotPKm2PmpZOW0MsFWpxyvtHRN/fuTv1fsPsTKcVamY
NzohcfbJsSpq1PLGAhebdN7KpkYDrxX4WaPOqLr1XdOZdsUxuuqXsF80aswl
+oBwu5Iu1d5pp0qp1OG3cw4Y7LAodTfqC0uc1CB3eD+froHKywcdFmhlXFRc
h7ert0x/FCw09J1+fyB2sQfuhFat2m1Y3/xi3dWjbp94wV/ouGsBm97MEhvL
de/RpL5ic7xIeaJENxdVH07atfz/zOHm87jv/bqqWL2NTmrS6/qVfoAypmGK
SR9yu6jFKr/o9uRSoNLHT5+M7KImNT4fGaRU9tb/RlzU84WTRrfEtShrMh2p
tbiASjVeHrcsSgt9m525LurDJT1yf5kfpNR4tDvfkBgu6vWx+hPmQOXaq0OP
63xwUgOMjbYClaTpVkVeGbqo3axf4u3fFqQYbzfLXFTXtFYbGmwOUvSn820y
qtRYH2pHvqVbpL+H+pTwtpdd1OrGdVyQsmTNR6Xle5WK9zHMg+dz4Rd8XF6+
aAuV2mn1b8HtMlsVHY83LtSoUe4+jaMstyuvwpM58yV0U/P0MJ4YKcZlcwON
ajyWSWJXUtdrbnn5WqUOLDs0SUTnyO+r62IsjdrFWB9lU3Z2Htf4znCNurj7
hRhHO9qVtfpl2VKNOs5yr0bPjXblSwH9QYlKVT4lX9p2lFXR76bTR9GonvsL
m/R9oOdI/YlpOBVzvWXP6fKVLTz7XQx/ofrqqutlbgn13B/4CC3SsumhtPGu
CpX9c3zf1bIeCLotVLZ/ZsN5I/IOXidWdv/ut3Tco9pL/IS237+wZMBIsZ7x
4f5CN3wZWGPmQV+hnjm3/kLXKpcrtVgcIFR2Hd77XsKFXX49InR9n1P33haZ
InSScT89VOjx2u9zXTm5WWiaTYHJN8Q7J3T/hBjD7INXCo082bZPkXuL0DnG
g6EjQj++mN7t6NNDQj3v04eFvihdKNfnfCFCaz9OmrPeb+FCZXOr15w4OWBN
7HChW94+njNxeJhQz3OtK0J95vyS4/KzfUKl61dlTmUe5mEe5vGjHqb/m/5v
+v9f5v/w/oAWXu/Wn46gr+H93P/h/dz/4f3c/+H93P/h/dz/4f3c/+H93P/h
/dz/4Uzc/+H93P9l+9DC+7n/y+ZHmP7/9/g/vL9p9kuzc+Zz0tfwfu7/8H7u
/7L9fuH93P/h/dz/4f3c/+H93P/h/dz/4f3c/+GR3Cfh/TL/5/MITP83/f+f
8H/+Pozvw/0f3s/9H97P/R/ez/0f3s/9H97P/V/2+sLPm/s/vJ/7P7yf+z+8
n/s/vJ/7P7yf+z+8n/s/vJ/7P7yf+z+8n/s/vJ/7P5yPux+8n/s/nJW7q2ze
Cryf+z+8n/s/vJ/7P7yf+7/sOvx78X94P/d/eD/3f3g/9394P/d/eD/3f3g/
9394P/d/eD/3f3g/9394P/d/eD/3f3g/9394P/d/2e8hvJ/7P963uP/D+7n/
w/u5/8P7uf/D+7n/w/u5/8P7uf/D+7n/w/u5/8P7uf/D+7n/w/u5/8veB+D9
SxNu83JUVk3/N/3f9H/T/83DPMzDPP74Yfq/6f+/w//Txf8cmjNFABX+P25t
8pjrP0dQ4f+YQ8bnkel3P7s/Oanw/+kp9T/pov5d/l/7wtFJt3oFUeH/nuty
CxX+v+jKi/vvlgRS4f/RIq+y0hW4Q/3a+n94Py+8nxfezwvv54X388L7eeH9
vPB+Xtm6U3g/r+xz6PB+Xtn6f9k+9mn2N9z/IJ2TCv/PcnOILX6WYOof9f+f
Go35KTCTnQr/H1JRvxN2UeH/pw2gcFLh/w7jvyOU+mf7f72MPffE7RJEhf+/
W5Kg6pU4Dir83zbjp7Fl0zqpX1v/D+/nhffzyj7vD+/nlX0uGN7PC+/nhffz
wvt54ZG88H5ec/3//+7/4/XbznQuKvz/ol2fQKpR4f+fq2R5Mvm2iwr//2js
N+eiwv8Xtqrdu39DlQr/9+y/5qLC/z3v1y4q/F+2/rxckWcv7tTWqPB/g4Nb
q1T4f5C37/DYv6lU+L9sHX61BK1ztx6hUuH/xnYtK1Uq/F+2blb2OSzZcwd4
Py+8nxfezwvv54X388peX7LnL/B+Xng/L7yfF97PC+/nhffzwvt54f288H5e
eD8vnI8X3s8LZ+WV7bcG7+eF9/PC+3nh/byy6/CEgdrYIU+cVPj/rZ36xhFO
Kvw/X5rMi0uvcVLh/5Nv35hZpp2TCv8P9E2f7WIuJxX+b1yOxnVS4f9d18+/
dPGDg8r9nxfezwvv54X388L7eeH9vPB+Xng/L7yfF97PC+/nhffzwvt5Zb+H
8H5e2XNMeD8vvJ8X3s8L7+eF9/PC+3nh/bzwfl54Py+8nxfezyt7H5Ct//fs
7++iwv9fXTv465crDir8f75xH2yjwu0964SCqPD/0W0u5V5Q10KF/8v+OT75
zpVtv99Ohf/L5mfN0F9mSxxU+P/2p/0DR5VyUHH/7jNG/xdxUOH/84wXsoMK
//cb0f/1zIJOKvy/yF79xOqgwv+/NCi54Pm9EKrp/6b/m4d5mId5/JCH6f+m
/3/D+v8xZdPm32EPFdb/c/+H93P/h/dz/4f3/93+/0fX/z831uffEdb/c/+H
9/Oa/v+/+//X1v9z/4f3c///u9b/c/+H93P//6fX/3P/h/dz/4f385r+b/r/
n7H+n/s/vJ/7P7yf+z+8n/s/vJ/7P7yf+79s/Tm8n/s/vJ/7P7yf+79sHT68
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
PPWsUGN7q71HhG6fbX3VNs4FoV0npAvIs/quUNk8blsZ/QV0RejytKe7NW3r
EnrhfcxjF5uFC7Vd1SeL3xBaRl/2l26rUJlfeX7eIxTevwbXzMM8zMM8/sWH
6f+m/5v+/7v9H97PC0/l/g/v5/4P7+f+D0/i/g/v5/4v278U94v8/hHez/0f
3s/9H97P/R/ez/0f3s/9H97P/R/ez/0fbrdmU9tMQy84Tf//m/0f3s/9H97P
/R8exn0M3s/9H97P/V+27ze8n/s/vJ/7P7yf+79sfoHp/6b//1/8H97P/R/e
z/2f+x++hvdz/4f3c/+H93P/h/dz/4f3c/+H93P/h/dz/4f3c/+H93P/h/dz
/4f3c/+H93P/h/dz/4f3c/+X7RMO7+f+D+/n/o/3M95v9X94Py88lfuqbF4D
vJ/7v2y+D7yf+z+8n/u/bF4PvJ/7P7yfF97PK1tX/63+D+/n/g/v5/4P7+f+
D+/n/g/v5/4P7+f+D+/n/i97vcv+77LrN3g/9394P/d/eD/3f9m+9PB+7v/S
30/JnKD/j727Dqziyv//j7u7FSha3F0Gd3cKhUApFlwKRVNci7u7u3uAAAka
vzcJhOTeOxPcoTi/zLn7eu/n+z6/s2y73W5l5p/nJ/10UxKuzDzm3POG93P/
h/dz/8f1E/d/eD/3f3g/9394P/d/eD/3f9VcAHg/93/VfAHVfBZ4P/d/eP+Q
BofXRXYxJP+v5vkiT5kAl+X/lv9b/m/5v3VYh3VYx29/WP5v+f//6aGq5ieB
Q6jwf9X+is8+ddArTHVS4f8JTc5e6qD+Wv9vf31ItURv/anw/zlGxQcJ00RT
4f+2FcP9Z/RyUOH/uase6Xp6kIsK//9O7LPposL/Y7YunrryiYP6ufX/Kl+F
9/PC+3lVvgTv51V9fhnXi7zwfl54Py+8nxfezwvv54X388L7eVXr/1X7jS99
+M7n3Q0nFf5fZtODavrdMOqv9f/7b80dUsKp8P+W4rongvq/9n/3faBQKvxf
9fmUIed2+BcIdFC5//PC+3lVPgbv54X386r2/YD388L7eeH9vKr9iyz//3X+
/yZ75vTjF+lU+H+6RS/HjI1vUOH/mGvI5xsm2X1r7YCDLir835ya3j+PToX/
P52z+9sdmosK/8f9Qn7fcKS4IHVR4f8/+A3YlmO+ToX/p9n+JOB6S50K/1d9
Pgvezwvv5+X+x/2fF97PC+/nhffzwvt54f288H5eeD8vvJ8X3s8L7+eF9/PC
+3nh/byqfULg/bzwfl7V61vL2gOnpVjhosL/Bf8ti6b+u/7Pq9qvCd7Pq9rf
D97PC+/nVe3XB+/n/a38v/OcH6unS+2kwv8jC0bGnvk5qdz/eeH9vPB+Xng/
L7yfF97PC+/nVT3fVVWdv8H7eeH9vPB+XtW+NPB+XuXjU7FPILyfF97Pq7qe
gvfzwvt54f288H5e1b5A8H5e1f5Cqv3Z4P28qvX/cH/u//PFBpMOKvxfvM3t
sFP/qP4fe3GfJYPLRsV5yJ4vZ7a8N91Ohf97RDc66hkUToX/R+6c2K5qawcV
/q+63vzav2rp4zHhVPh/5y/X7at06BbV8n/L/63DOqzDOv5Wh+X/lv//gvX/
3P/h/dz/f6/1/9z/4f3c/+H93P/h/dz/4f3c/z+3/t/y/9/G/1XreOH93P/h
/dz//67r/59mPFb226u3pfX/3P/h/Zb/W/7/31j/z/0f3s/9H97P/Z/W+zP/
h/dz/1d9bgjez/0f3s/9H97P/f9z6/8t//97+f9vvf7/z+7/fP8feD/f/wfe
/5/u/2P5v+X/f0b/h/fzfm79P/d/eP+PPjmi1leM/sP6/+fW/yf+KujG4YLR
0vr/qMRlJo5o4pDW/3P/x/Ul9394/zefisS+4zik9f/8fqLl/5b/W4d1WId1
/C0O4f1VNKkqzxeu3EWu6t/PaF73jJdaQwDjRKnueZXeUlPfFxAk1T2fNlCq
au7tA3E+eEyqah6c22XvSG3s4zV8Qlub1DjCS9ZJdfXYubFnGR+pvSemP9J3
wFapqr8uu7ifsEfjfW2Oqf1pp9RBYk7dDqlPtlZb36PPHqkjxfm+r9Tyo1/F
PjCCpCZfXr/ez50DpT5PPmDqlrVy7eY4wM4+chU/V+XX2fZn2XRdqmrfnqUm
b6a4Ra0Uusl7bL0gbbsYLBlJxdzh8MHjC9y57KS+mOK71y9ZsLZ5Tf/mgV1d
1Jli4FCIVvZT+UH1Hrio29ZVqDOlaahyn//OGWelvrzCoL65Fj1h9s4wLeDd
9xe14wbVufzIk5F3w7R1PfrkGmfTqRP7rVz/Mq9dE2NicxrUVi8rxf4m7Jq4
zF5kUD9OrHEz/pow5brWRrtOFBmb1aAGf6hx4vkWu+YYWevTrRkGFfMB+zTZ
MGjcWZ2armqaurHXbJqpxX1P6lSxbdBDm7Y5m+/IF346dZa9Y1tHEruWunK9
FrWSGdSu4nzYrmV4snHb0fc6tY94/Nu1EmHFFtXer1NXtc3/k1eYTUssfDCK
iusyzEPjVc3FK/F4tmvAzwFS55q3tVqdk+p+3pyQOvfDh3LJm5yTqrqf9V5c
1x6T2kS8jp6WGtV6dc5D9X2kFs066ae0C72lpnk4/HjhLGekVl3c/NKeHv5S
p6VYsbNGQJDU42J+7E2qe/1UoLZp+xc/95pgUGe+TtDK74cwbbu4cDComJe3
sfLQ4RGVY6jTxeDmcK2rGGgYQ/30w8viDYbeVO5D/mbx4KrrPhnUMgE7b1YZ
Fq6cL9DEHFubzqCK2wvL7dpK87ZgozCp9RaYA2NDpJrTSLNeOi91UP6bh/ok
PS31/eyZ089cvii1ongdOi91mPC/Q1K9dj5bcT7hCalun/CVurP/qwcFJ1+W
mrvB1bjFZ5yXWrj5nPC8jS5Kdd/PPCe10frkk2JeOamYB2o+65eUuClVtW/P
HHE/3y5VNS/1Uo1c5ohOqX3FnD25UT67lmefYpdabl/cqDbxw6RuE/e3bVLd
19lymwf5JPJqrVPdc8Nt2qrdyS4m1nXqKDGo0q4ly1BtuOZvUNuaf70Zw5Xz
X9y3Yw3qjV6zu/QoEK7cz1+13/XQMieazE4TQxVjlheHK+cLXCibLCbzTYOK
Odd7zV9T1hjqus3TU8bZEq6cC1B36v4Wo24b1Mv7iid8VEb958T+F3wfDFN1
5iUxqPh7PPuoberipQzqeXHaZdcSXZ8W+xZhUJtoEas3nrFrIeJERafeT+Pd
4su3odqZg4djXxKCparmuqYvsPfl5f1BUhvaxQ45UosPM3/x/lJnxr7YjL4c
JNXUrMuRclXnUd07b4qeXS1YamXhH6FSMW+bz90+1yXOvOMjdeoFj8uTB/S0
Kd/3xfjOey6q+3UjVOslNnpxUlMNarmyjXeQFmfVjWynfF3UmrfMO7ShWjNT
L9e5qKayrTwaonmElMv0/piTGqeZeWMjSKsi/vMu6uHzrVvczReq3A//48lR
mTdWMqjVvjgzv+YdO83b5nO3y4uFBy7qrvaLV73XQpWPK62deSanU083P/np
5Cibcl961XyK3EfSTo8K16leac03bLtyPoW47bRUp+J1UjVnRCzL6GhQt1Y1
b/iFKZ/vqv35xel1W52K+byq10PV+eo+MTjboG6YEpkma/kw7Uze9x49nxjU
0/fO5r/YNly5r75qHlZK83IrrUEVt2GX2JXfJ6JX2R+KrjGo5iqfVgfU6/Cv
XT5Ve8s3OjVMeKZN8xuYKnO/HjoVc05vr6+4zatgNBXnvd7TXlX+JmMUNbcz
oGCF70K1VT59M5YpHCj1hbg+uyE1Qck2005/d1Vqms4nYp9qflJ9L/h0/W6m
j1Sv+uadtlNS77TI1OhxxDGp04rW21aw1iGpweL95LjUFLke5gh55i1VdT5z
p96VlWX2XpWqcuC7+drtWNoyQKpqv6AH60bFXhldlVqjye7cBdp7S3XPxT0v
NY04H9wgVeUeucUCm21Sl4YEeOVYdUqq+z6At9Tex3LGH5tvt1TfWnfHVnGe
kVpD3Ic8Klf8fHullhXnR35St+9qEvtWf0tqDXN89ZLrUlXXKW4viZGa6rt1
L06vipa60xwfP/O4VC/xexor1bvdePv+yqOkeol1lMOl/p7kZh3WYR3W8Yc4
LP+3/P8v5P/w/jFZBxQ/19tJX8P7J2f8sWueRC76Gt7P/R/ez/0f3s/9X7XP
P7yf+z+8n/s/vJ/7P66f+PUUvJ/7v2pdK7yf+z+8n/s/rvu5A8D7uf/D+7n/
47qH+z+8n/s/vJ/7v2pfVsv/f1v/h/fPXlypl0clJ30N7+f+D+/n/g/v5/4P
7+f+r9qHHN7P/V81XwDeb/n/b+P/8H5eeL/n/nh1m9+K+dP6v3u/O13y/8Zf
9NyVtJtOX8O3uHfB+7n/w/u5/6vmv8D7uf+r9vNX7XcN7+f+r5ovAP/jHgjv
5/6vmgsA7+f+r/pzqvbBxt8b9394P/d/uCx3Wng/79/N/+H93P/h/dz/Ve/7
8H7u//B+7v/wfu7/8H7u//B+7v/wfu7/qv3w4f3c/+H93P/h/dz/VY8reD/3
f9W+9Kr5FPB+7v+q+RR4XeT+r5ozAu/n/q96vqv254f3c/9XvR6qzlfh/dz/
4f3c/1X76qvmYcH7uf+rvg+8n/u/ah0+vJ/7P7yf+7/qvBfe/yRXAkfO1y7L
/y3/t/zf8n/rsA7rsI7f77D83/L//1P33K8QKvx/8ba0jgvpblHh//18uy8c
lecm9df6/4tDR6rv/uEKFT/XQHFiFk2F/6v27f+l6//h/bzwfl54P69qnx94
Py+8nxfez4vrJ154P69qriW8nxfez4vrfl54Py+8nxfXPbzwfl54P69q/b8Y
H9zfRYX/X35x4GHDt04q/H/OF9tKPzsZQf2r+/+4N+dKRfwcTYX/bzzYe2Pe
3U7q59b/w/t54f288H5eeD+vah8SeD+van8heD+v5f+/rf/D/bn/q/btL+ib
K/X8izoV/q9a13r++vbYKz0XFf6/KM/6TGXnuKjwf9W68beJcpwuVt+gwv/h
/tz/4f4q/+eF9/PC+3lV+7/B+3lV+/mo9ruA9/Oq9heC//HC+3lV+wLB+3lV
f07VPhiq+zjwfl64LK/S/8W6W9c/+w///6FZBq+3BV1U+H+fms9976x2UuH/
k8xts1Y6qPD/EXcO7iiUwkGF/+fv7l357HYnFf6/ruOx2H/VSYX/f102MK0t
o5OK86h5Nx9Wb+RyUuH/Yxf6tncFuqjc/3nh/byq9314Py+8nxfezwvv54X3
88L7eVX74cD7ecn7ef/h/byqxxW8n1e1L41qfyp4P69qfyrVfVLVPmPwfl7V
8121Pw+8n1f1eqg6X4X388L7eVX76qj2w4T386q+D7yfF97PC+/nhffz/tL1
/+6XdQcV/r9y6fbvb66JpsL/u9erO7/7axv1r+7/TdJnj31JsFPh/+JhlzmC
Cv//psiDLi+jwqmW/1v+b/m/dViHdVhHHMv/Lf//Rev/33lmWpqvn1Na/9/z
XfWnH587/mvr/7n/q/bt/9z6f17L//9c/q/alxXez/0f3s/9/++6/p/7P7yf
+z+8n9fyf8v////W/6v2/+H+D+/n/q9a1wrv5/4P7+f+r1o3/lvt/2P5/1/E
/7Hun/k/vJ/7P7yf+z+8n/s/vJ/7P7yf+//vtf7f8n/L/y3///38X3Xe+7n1
/9z/4f3c/+H93SqXfPIsMuov7//W+n/L/y3/tw7rsA7r+A0O1fxfMV+3jlyV
/4+sudy5t71U1byVGuJ/N07qyHnLerd7dEpqidiryOVVQ6UWS10pum3vIKlu
7rwiVTVPVnxMvkSoVPPkutbcO1JVrqv6NfvHnt0trrNF4/UV70vbpSrn/4rf
3yapc/tkuF7i6C6pSYz90WU77JSqmlukmo+8UvjrJanD9MknVxS8IrXBdHNi
qK/UiuK+wQGp4uPSj85J1e+2HF3HL1Dqy7h5w+8Pu0VdGJR4Vu89QdpG83ZF
Fp06PZ6YJKnV75W4zYIBOvXaYHvy3K1syn37p/XUI9cFGdSW5riqHOHahLa2
Dk9iDGodU3PqhGs1a34cObesQTWvXrJF2rVTFX8+dKS6QT2R4eiN3s/s2kAB
IAY11zhb0xo1wrTm32ab/Dy5QcUcpUHf7HtVYpdO/bJL0ZYdb9iU+/zf77Np
2taEOjXziAzDG3mFalk3x49f4rFOHSLmbtu1KjPX5MpWy6AeOZZkQ7E3duV+
pzPqVXYc765T25as/tXAyur5AqrfQ3xzjG9Rg1pfPE7syu9T3WjWpG0Vg4p5
hW9nnl2Y/FYUdeHdXhELXti0fDlD2898GCxV/OdSyV05s2T4/DnXpFYt1fbh
Ue2A1K3iPHS71CeeA8d2fn5Y6tFdz+Ocvn1Wqjl9eNHKS1Ixv5f3cqZCt10d
LkktKeYMn5bqMWVF7E9yTurmkl/55kodKLVN5ekhhXvepMKddq/w8ir9wUVd
FX65R5eBocrH/5F05gTuGOpu301Zvx0Xrtynd3bsq02Wiwa1082WwYXihmsr
jx3vvyrxHSrmV04dHVXm+ZcGtdnyGVduH1W76+3rYnCb1KjdTRs/qeEj1Vs4
xHapUWKe3jGpR5d9s7netEtSk/hUe7LsjbdU1eut6np85RNzcvxlqar7CyUF
jMtdv7K6R53R16SqHm+Ym87np9+0Rb49auhUzFWcJQbuhUp1P05tUs1pyAt9
5armC6easu/++IR2qarXmUWr3mvt3uhUTzFP+Z/zifmcYrGNyRWdivmVghty
GFSxncduu5Ztnjm52KAOvxBukrJyP3zV/tgTL/wYPqaEQa0nxm7btYyenwLD
e8ZQ+/7gm3RPrQitVtH4+TTDoPq8u7FjRM1wLdDzywZX4xpUfVSKF/NG2rVt
5jjjYjHUBWLOY7jW0RwT2ymG+qxC8QIfC0doVdYuH+Y5V6cecn5s4r/Ipr34
7mjsO4ROxVz4sBSTmzzdZFCfnQx6H+Gtfl/rcMNWIeqJThW3idrZlZ8f2Rv7
7tf/lYu6bm6h08HdQrUObcamOj3FRX0iQCFEM6dl9i0SJDXB9EredQcHSq2e
uGvtTBuCpTafVHjMwaFyk5Vr2i9OxZB/u7G/1E4bxwRJ7SzWpwZKvZct+ceb
+YOlYt41b4+qb12brwZKnX+rVaV8Ef5SVedXmKvN52sPPeqR13OzTsW8WtXz
62Khr7UJx1xUzKVVnZ88FhsruqhfpPQNCIsbojU1T7O+1qmYu10kVbAxerBB
XXJmcKmn7cO0h222l2l/RKdma5rzyhanTbux9tKyBGcNqnsuapgW+2S7Pvah
Tn2x8qs4L5vbtT2ZIra16WVQV/uPP7K+dpjyvEW1z//4twWLHnpkUKuLgZfh
yjk1HWN/W/0q6lTML96mm88InYp59KrPfeSdYO6Mp1PNN/GGO0OVc5cyejQv
UreOTvX8tvfxiR9ClXMKVPMCQi76D0v8TqfeK+nZNImnXRMvp8UMqjl9dq6/
XXu0p6PH/L061dTMnKHqffWXt+607Op9nTqskdfi+U3U+/+vXpZ68OHFBnVM
6J26PdeHKc836rdK8almboN6w70hm9a+a7HDrbcZ1Mfd8vmvvRSmRc+u1qZE
mE413y06FLRr/cUvPIoqTlOuh2oNhuZ4FW9asFSxTCRngFT308xf6qyrdQ7E
nsNLvX106esd/QKkXmgjXsGlut9Prkh1z6/2lao6P3Ff1x6R+sS8zMhyUOpe
cT54XKp7zvYRqf7f1Nq39e1Jqe7X0fNSE/X56XyXOGelphHzh09KXSqeOMel
mtNpywaelbrXvLs3aLlUJbeIp8dhjTd3q8x77h5aK1X1+8nSsUz/zB92Sz0p
Pq97UGqbeqtHLB9/Qupcsf5iq9QTd34uma63v9TEibpEZve7JfV175iti6de
leorbpxdkiquUlfoUs1VWC3z3JaqWtek+j3XKDw/w/nxXprUjuFTbw8fKvU/
ZTTrsA7rsI4/3WH5v+X/f0L/h/cXzpJrYYVVTvoa3s/9H97P/V+1bz+8n/s/
vJ/7P7yT+yf8iXsUvJ/7P1yEOwm8n/u/ap9/XE/z62t4P/d/eD/3f9V+p/B+
7v+q+QKq3wOum/l1tOr7wPu5/8P7zV2Ar53RLf//D/0f3s/3nYD3c/9XPf7h
/dz/Vfv04vqbX4/D+7n/w/st///v+j+8nxfer/L/Arey9XBm0P9r/t/r6fPa
tX11+lr1OgOP5D4J7+f+D+/n/g/v5/4P7+f+r9oPX7U/Nryf+z+8n/s/vJ/7
P7yf+z+8n/s/vJ/7P7yf+z+8n/s/vJ/7v+p9Dd7P/V/1+RF4Py+8n9fy/1/n
//h+3P/h/dz/Vc8veD/3f9X5Cbyf+z+8n/s/vJ/7P7yf+z+8n/s/vJ/7P7yf
+7/qvEW1zz+8n/u/ak4NvJ/7P7yf+z+8n/s/vJ/7v2ruEryf+79qToFqXgC8
n/s/vJ/7P7yf+79qX314P/d/1XkFvJ/7v+p8A97P/R/ez/0f3s/9H96/Kueh
+guL6pb/W/5v+b/l/9ZhHdZhHf/7w/J/y///AP6f4m60/7mqQVT4f6u8PjPz
F3ZSP7f+H97PC+/nVe3bA+/nhffzwjt54U+88H5euAgvvJ9Xtc8Prqd54f28
8H5e1eed4f28qv2FVL8HXDfzqr4PvJ9Xtf5/cLVEbxtUdVHh/1lXmBeOTur/
2v+PPasVeW1BCBX+PzdmlXE7USj11/r/nKd3FqwoHUSF/x+oV6J0+msO6ufW
/8P7eVWPf3g/r+pz+rj+5oX388L7eS3//339nxfuz/3/wrE9p14O1qnw/2fJ
ks6+tk2nwv/fZM+cfvwinQr/h/ur/J8XHskL7+eF9/PC+3nh/byq/XBU+2PA
+3nh/bzwfl54Py+8nxfezwvv54X388L7eVXva/B+XtX86F/q/z/euDq1Yicn
Ff7vED+ggwr//7Tv8sBUmV1U+P/UQSVjH8JOKvxf9605aWI3FxXOr/rnQ3ft
HR0y0UmF/6eqM+/Dh3JOKvw/5ETu2FMVJxX+r1qfP7/JUu/QIk4q/L+Q2EjE
QYX/q86vVPcX4P28qucXvJ9XdX4C7+eF9/PC+3nh/bzwfl54Py+8n1d13qLa
5wfez6vapw7ezwvv51Xt+wTv51Xtuwjv51XtU6TaLwjezwvv54X386r21YH3
86rOK+D9vKrzDXg/L7yfF97Pq1r/H793Ib9JSV1U+P8X5ulpGwcV/n9v6JNy
PUo5qPD/+2+7xn11MJwK/68eY57RRVDh//km+peakC6cavm/5f+W/1v+bx3W
YR1/w8Pyf8v//wD+D+/vl/lDznrxbknr//n16efW/1v+//fyf3g/L7yf+z+8
/4/i/7/X+v9HYr/Zm9L6f+7/qn2nLf+3/P+XrP//vff/sfz/7+3/qv1/uP/D
+7n/w/u5/8P7uf9z7+fr/fk/h/dz/4f3c/+H93P/V63Pp/X+zP9/7fp/y/8t
/7f8/9f7P7yfF97P/R/ez/0f3s/9H96/eeGpLVWrOaz1/5b/W/4fx/J/67AO
67COzx4q/zdZNn1juar7AorDS7j+AI03TvlTmSb49JPar6n5Qdj9Umt2NyeK
BUv1P1zwbolEQVLdzn1VaopRKxumeeAtVYzrW+on1Zn0w4gilV1Suw1eW/72
TKfUBGLe7z6pXt7moLlNUt3vh0ekthDzkDdI3Svm7aySahfXQ1ukthhwuej0
4nullo1JUbTXsdNSk4jL3QNS2+QrNOVT7r1SB63ud882+ZBU99zLw1JV9ztU
84bqZunvd+mnYKlDhn1fo9zdSGraep2e7csbouV7lvFY2W+jqHcPpclnxLFp
YlnpLhfVfdobokWlcxZOOdBFjeM351j61iHawv0/L9xSX6f2TnJsdoMENu1t
ohyni9U3qJgj2TrrD5F9PurUGPcFu3Kf5LT5G797csKgdn/Y9euIB2Ha+6e5
+9x8bVArTk1efn/PcC24XYHnow4YVPccrjAt2aSYV1cyG9S2O5a2nLfRrk2e
GzGtziCdivnUB1reDtv6OIoqxjBmtWtHE1cvk8sRRU0T7ZHlxEebllr0NnXP
/rqXK1QK/cc8utvUyyuuHzr3KESb+9PR3R3e3aaW9FjlEVIuVBs4ZGfjH9+5
qDmn5Xn3zjNUiyz9U8EXt3XqB/FEtWtiTG8Gg4r5mKq5AObQ6UQFDerVeROT
JD5v1+zifsVt6shkhVf59A3RMv7YNU+inUFS12W8EftXHix1UveWLyu9viy1
gxgodkKqaj6sGCOd8ZLUq2L+3mWpg0oU/DZ/uStS44Rs7DSx31Wp7utyX6lu
9zovtVO5Cin2pfCX2vpM8Z1J3odTn89N32Vy+QCaV8fn1n24mT/2kjSGWuWb
jLNSX47QzN16nnwwqAfE9VG41koMxNSpugA3m7ZFDHSNof50PdXWArfCtTmJ
Gzovjoihdtlv7jgQoeX7YE6sNKjT3IOitf1528Ze4YRLrSrmQPpKrSi85LBU
933I/VLv+G0e902HfVKniDl4F6QefNjw7cyzPlI9mnZrMVc7LXVtTXMy7imp
65ObT/RLUt1z7c5KfWBeJuXykRqv8ppyo+b5SVWtE27vCox9KurUR+J+Vqh2
Y1HmZwNWu6i4n6KaS/J6R795z5oa1JLv1k+JTKPeT1v1uQDVfuMbmptvcAZ1
Sq3Nr1tNDdPiZilc53Zpg+p2DLvWQwwu16nibTa9Xbmfs2NkrU+3ZhhUzElX
7RPe88eG5w57GdQUmzvf6fm9er9x1fvU85cpK47pZFDzz9GDnhYJ05aKX6RO
Fbepv7Zrd1Y3Do/y0al4PW/3eELZS91iqA8FjEdogd8HPO6W7w7VNbdf7VOn
bmoesY/GnPl0atw69xzlToVqw5ceKjCpnItaKNh8xw7+x+eXdKr7PqZN2972
6tYGrVxU8WvLGqJ9vadolTfjXdQX4vN8IVrskyzdjLpyo8V9uWCpRzdsbR3v
oNyb4vxU7o/vZhWI/RVKfZ+ulPmOJTVbhdOjx6wOklpDrK+Vm+n9scZfZQqR
erjBmwKXjgdLPT7xQ7vstYOkqvYLmj+yQ9dih+XOEfPqA6Umct154NVX7uTy
89o5+8tdmytbrQF55da4aD6zXFTvEmnjhyYN1fZOmVwkerdOXbs3+PiJQPXf
u2puiGoOkRjzPcugitOdn8I0825U5mcGtZo53rZjuFb+XpXsL1fp1J0jzPVI
Nu3N4sFV130yqJgjv7BYq9N++wyq+/ZUmLbTPM0YYFCXZTNXXoRpvfo16/9d
6Riqe0x9uPJ17Kutw9LtaOuizn9uPjNCtNgXr2vRE3Qq5gi/8u5l1F6pU4vl
X1byx13/3N+Q73P4oduVe71rGNTKvTwqXXlpV863Ur2ONayWdvuTAIMaaL5M
ZglXng9jLjufz948yCeRV2udirnAqv35P54clXljJYOKec3xpgVf8BylU4Vu
97FpJ5ua7wg69Wh1c+CoTTn35OyjtqmLlzKomBu+Junx2FcqnTrucLWG40up
5xqo5g1FdJ4UsHhMFNXU++1lbFrl/DUaNywQRc2Q47sGqaeGahsGjTv78Emw
1Eh77ZfzbwVKLXnDETN1ir/Upumzx2lWTu5g54lLMZUCpLrXHfhLHRZROXXU
u2tSH1T1ejxi0g2p7vu6flLdvz9fqa+iR9xKkMBHaosidesU631aam9xP+qo
1JviuvaI1DijXhZvMHSn1BfivtlhqVvFBxMPSo3yP1d15pozUt3r3Y5IVXmy
e13POqk/macTxS5Idb8+HZHqXr+zW6pqHeagYxe+qLtqvdSeS7aldVw4J9Xn
6aSPJzKekpp8eX3zUkrq1XjmioFbUvPsMu/keUs9N0O8Q0it+CBhmm0zY6Rm
Lzb0uveQUKkeY1pEDtt9SKrSncTP3V3j/e8gmnVYh3VYx5/wsPzf8v8/of/D
+3nh/W2m5/V4VVf/59f/cBTuKvB+7v+4vuHXO/B+7v/wfu7/qn2S4f3c/+H9
3P/h/dz/4f3c/+H93P/h/U5x+a/T1/Ah7kXwfl54Py+8f6RY4Omir+H93P/h
/dz/4f3c/1VzAeD93P/h/byW//9r/4f3h70yZd1BX8P7uf/D+7n/w/u5/8P7
uf/D+7n/w/u5/8P7Lf//bfxftU4Y3s/9H97P/V81lwTez/1ftZ82vJ/7v2q/
cXg/9394P/d/eD/3f9V+znAy7maqfcLh/dz/VfuNq96n4P3c/+H93P9Vr+fw
fu7/8H7u//B+7v/wfl54Py/clxfez2v5/x/T/+H93P/h/dz/8ffM/V/1uSHV
HCJ4P/d/eD/3f3g/9394P/d/eD/3f3g/9394P/d/1esYvJ/7P7yf+z+8n/u/
as4RvJ/7v2q+lep1DN7P/V91Pgzv5/4P7+f+r9qfH97P/R/ez/0f3s/9XzX3
BN7P/R/ez/1fNddANW8I3p889r/WoatOX8P7+4o/qG75v+X/lv9b/m8d1mEd
1vG/Pyz/t/z/D+D/bk8PpcL/JxwPKB2TwkX9tev/4Si88H5eXN/wwvt54f28
qn0S4P288H5eeD8vvJ8X3s/7v1r/D+/nhffzwvt5VfsCwft5Vev/7z1q1HXK
CicV/h9H+FYk9bf2/wCvHKu+aBFChf9fKJssJvPNUCr8P/PF3Z8yetio8P+o
pQ/f+byzUT/n/+79L4Ko8P9UfuWDI65EUz+3/h/ezwvv54X388L7eeH9vPB+
Xng/r+X//x3/51Xtp6Talwzez6vaT0O1L5BqvxF4Py+8nxfez6vazwFOxqva
JwTez6vab0T1PgXv54X38+L1mxfezwvv54X38/63/d/Zf377Br1dVPi/f8Jz
Q9/pTir8X7BULhcV/i9Y8oGTCv/PvbNbdKOjTir8P/JImY8Bw11U+L94ui50
UuH/cfIMf7q8i5MK//cs+nrokhYuKvz/eOCSaCOPiwr/NxUuTS8nFf6vmhew
re+lD8vWOqnw/y3jz7W6/8hBhf93XzvH5/xbBxX+v8Hv2zfD3juo8H/3dn4O
Kvd/Xng/r+rvXTU3RLUPIbyfF97PC+/nhffzwvt54f288H5e1esYvJ8X3s8L
7+dV7XMI7+dV7W+peh2D9/Oqzofh/bzwfl7V/jzwfl54Py+8n1e17xm8nxfe
z6va10i13+AvXf8fe05f/G01FxX+fyPbKd8mZZ1U+P/rRSlqXUrioML/Ex39
qlnhqGgq/N8/rS2j56dwKvy/z7MO1b84E06F/2dfebTt0NjzZRT+H9okou6Z
2PdP1PJ/y/8t/7cO67AO6/gLHJb/W/7/B/D/z63/5/4P7xeXM+1d0vp/Xsv/
/9/1/7wqL4L3u+8LuP7t9f+8/yv/h/evLLN3pT7KJa3/5/7/V1//H/3BfGTe
ktb/c/+H9/Na/m/5v+X/lv//Wv/n68A/t/6f+z+8n/s/vJ/7P7yf+z+8n/s/
vJ/7P7yf+z+8n/s/vJ/7P633Z/4P7+f+r5oXAO/n/g/v5/4P7+f+D+/n/v+5
9f+W/1v+b/m/XVr/zwvv54X3c/+H93P/h/dz/4f3c/+31v9b/m/5v+X/1mEd
1mEdv/TwEt7vqfEq5/8qqvw+innB/k+LZJ300zqpl7c425dOck1q17ivDraq
Eyy1bK2THdbvvy7V7d/eUrvHXgV6Bp2TuvNpeb8i+VxS3f56V2qyxubGJH5S
vULMFb9jpZYVF4aHpcaxm6eb30v1EH+u+VLbRG9YteHr01Jb+f3Q0aegt9Qx
4u/hhNS5wtuOSxVMn81b6sga5e6G5j4h1e36x6W+Nrcv+Gmn1ATi+uOYVPf5
xTWp4mO8uwOluscAh0hd5HcycufEUKntFlWM17NrsNSNV4o9+ureTWrdVenW
bsoXpNk25x+Ze4aL+uhJhjaVp4doia6b8mhQm2gRqzeesWtvsmdOP36RTsX8
yn2DZ4TO8TCoG6ZEpslaPva6NnepxEe/MqgNXUWG9LloV+6b2qeJeeWgU9NV
TVM39lpFq7q+R59c425Tbw1tmH3l0RCte+dN0bOrBUtdrV2o3nZhkNQdxpQv
F8cNlOp2ULkLO+zqXq+u3LK56/dK3CZIqnv+522qGE+6IERrlqvk+lPNblPx
e1btQ6vaN/jeG/MTJTo1oxgQaNMGi7+QW9S0V8w7P0Faxycxxdd1CJY6+UT5
YmfjB0h1X09clDrtwKFhxy6cktr5onmCfUFqVeHlV6T2iO+9LVHp61InCR66
JtXtAZekPkjj3eLLtxel2nsknLH6+A2pOYec2+FfIJx6uvaWb5p289eyTzHv
xLio3+8ZNWj64Ni/r+cD4/fyMag3p5syFaadyfveo+cTg3pazM8N18LNp0H7
GOpLNzRre76c2fLe9DvU1cbt2KfULS2n7eTkS41jqGNb1h44LUWEdkXcJwmX
qnpf8J01I9+FJ3ukquah9yi9p8L9tYek+ta6O7aK84zUkx0T7xq52Ueqe67a
Uaktvi4bmNZ2SGoS8b5xTKrbOS5JzfLtuGxBX12Vur1RjrgHSjio7pc3f+1Y
v4opMyV2UPePqTwu/0R/TWy7NMdFxfPx7fcXteM/6VTBhPNt2nJzfPZ9nYo5
jCvOJ8zesYxO/b5wyLIdEaHaNv3LgieT6VSaY1nLlAuD2vOrHjNKDLdr1Y1m
TdpWMaiY95099qfpe0enjthU4vy1unatdC5Hv2LfGNRN7g18tLvTW0ye871B
NTUhS/cw5evztPszDo3vo1NbjBJ3NpT72/8069GxjSkN6jcnN9tqzbVr4jZS
JoNq62C+oNi15t9mm/w8uUHFPNyhRz3yem7WqZivWvVdw3Wbp+vUY2KutO0f
9/N0avw1y1IPPhyq3N87aaGKl+fmNKiYO6y6b15/bK8Npw8ESO2a3FyBIddR
yNzgJETqsZj55SsOdlIF47VXv5/WT5UnR4pvbVLPpe6Z6PHSYKnFUleKbts7
SGpITJSnb/dgqb1nd+lRYHmIVPG30FGuap2AOD1NGyz1zplOAeuKyl3RdVCV
qglDpJp3p1O8CJB6x3y7nX9DavJcD3OEPPOXKh7GxQKlqt6XVe/v7vmT/lK3
hw8eX+COg4rvc8ZczpLR9c8ePBx2YE2w1ml5KWNLKZ3qZtRQ5eNfdZ5j3s2c
l8SgRvnsWp59il0rN2rest7tDOr2JQ8WX/4yTPl8bHnab1/xhAbVmeubS7Gn
ptrI2LPiuY0Maql2rQ5kTRam/P5JN5qCH0Ntdd9cSBCh5b9zOfkPFWKoM4d2
HX3fGa7lneBZYWt2nYo5vNcOnYs9dTWoEama19y0wK6VKnvr7LgdOtV9n9em
hT8Ia56snE59OWZs/FS3Q5Xvp6rXAdXrTAFxImdQZ7c+aN6x17bMGPLWK61O
FR/vXKJ+PR+WPk2LzWt0qvtzojblHJNJYuMog9owgW1AiwrhWoUQc6cpg7rH
vN2XIUw5P2JAvHiXXxzQqTm2XvvZcdOm3M9fNbcr3SLzN2tQMRdeNRemYNML
+sDOUVTcH9c+pF/89YjbVNwf75UuQZUEJYOllr6wpPLVr4OkVq6ydvkwT3+p
qv1/hlX3fJGnTIBU9/Wuv1T3ei65reuIictSL+3pkaZyPX+pCQokjYhX+YZU
92nHFanuObRyN/Ysk6H0hUtSH6wb5Tdg20mpPjdSp/zyyD6pdSpmubj70yGp
W2faXnydZL/U8qPNC+HzUsVtgFzHpdYQzjFOqq9w9F1Srw62J8/d6pLUDmkW
FJnmt0nqXnF/eKFUt2dPkGov/rbarATHpbrvx16SahdP6LNSi2dvNvHCj+FS
Y08+UsbZIrfk4q07Y+7vkCqWH2W5LbVFsnJN+8W5I/WrycsLlI9zVWqcba6T
RR0H5KqON+Z9/h6aVNV6V+uwDuuwDusQh+X/lv//nf0f3h9vbL6coe2d9DV8
gnsFvJ/7PzyJ+xK8n/s/vJ/7v2rfVHg/9394fzMBD64/rP/DF3lVv2fVPrSq
fYPh/dz/4f28lv+7C+/X/B+9L/Qqmr6G93P/h/dz/4f3c/+HT3CvgPdz/4f3
q/zfvW+SYfk/K7yfF97P/R/PP+7/8H7u//B+7v/wfu7/8CHuRfB+7v/wfu7/
8H7u//B+7v/wfu7/qtdneD/3f3g/93/4IvdGeD/3f3gn9084HHc5eD/3f3g/
93/V/t7wfpX/87k5v5X/w/t58brOa/n/H9P/8b+T/P8f3s/9H97P/V/1+Fed
58D7uf/D47nPq56P8H7u//B+7v+q7w/v5/4P7+f+D+/n/g/v5/4P7+f+T97P
/F/1fqp6HVC9zsD7uf/D+7n/q17P4f3c/1VzTOD93P/h/dz/VfMj4P3c/1X7
+avmdsH7uf+r5sL80vk4lv9b/m/5v+X/1mEd1mEdf7TD8n/L//8I/n9RnFfa
qfD/9mF59BU5nFT4f8PS3eJ12uOiwv8LL/jhVMfEOhX+H3uR1rz8Syf1c+v/
VV4B7+eFJ/HC+3nh/byqz03D+3lV6//n3XxYvZHLSYX/m1Mod81xUuH/h9dF
dml20UGFD6S4Gx17Cuykwv9V6wNHnT4dd+pAJ/XXrv9XfQ5dtW8AvJ9Xtf5f
7ALx1EmF/+eZddj1bX0H9bf2f/fcXBsV/p9WbJBip8L/vxSfr7VT4f/uuYAh
VPh/ue/MAae3qfD/xVNXPil8MJr6ufX/8H5eeD8vvJ8XPsEL7+eF9/Na6///
M//nVd2Pg/fzwvt54f28tN6fFd7PC+/nhffzwvt54f28qtdneD+van8b+CIv
vJ8X3slL63BZ4f288H5e1f4e8H5euD/3/wQPr6/pvsZBhf+nPlhl/IyxDir8
XzwtV7iov9b/J5Ur2jnpCJ0K/69RvlnA27QuKvz/1aEjsc8EJxX+30jAqZMK
/88w3Hyguqjw/67fzVw4cIiLCv+PSucsnHKgiwr/72By8XUnFf7fRmyo5qTC
/4t3CfL8soGLCv8/IjZIdFDh/9nmbjgQf3s0Ff6vnzLfwR1U+P/DYxtTNrvp
oML/Ve/Lqvf3QeLGu4PK/Z+X/J8V3s+revyrznPg/bzweF7V8xHezwvv51V9
f3g/L7yfF97PC+/nhffzkvfzKt5PVa8DqtcZeD8vvJ9X9XoO7+dV7WMG7+eF
9/Oq9o+C9/Oq9vNR7dsJ7+dV7Qv3S9f/L6iwynPyLScV/v8mTS/Pu0OcVPj/
h8aeK6q9i6bC/1X7/y+/1sI3Q1cHFf7vfl0Jo8L/zZOjCUYYFf7vfp2OoML/
C0aO73IqeTgV/t/97JoTk2LfV1HL/y3/t/zfOqzDOqzjz3NY/m/5/x/B/+H9
6R9reyITRv/u6/95/yz+D+/nhfdz/4f3c/+HB3AfgPdz/1etD4T3c/9XrTdW
/Z5/K/+H999ZsKJ04/VOaf0/9/+/yvp/7v/wfu7/8H5ey/8t/7f8/6/n/5/b
/4f7P7yf+z+8X+X/fP8f1ee84P3c/+H93P/h/dz/4f3c/+H93P/h/dz/4f3c
/+H93P/h/dz/4f3c/+H93P/h/dz/4f3c/+H93P9V78uq9/fPrf+3/N/yf8v/
7dL6f9V8HNX6f+7/8H7u//B+7v+q/f/h/dz/rfX/lv9b/m/5v3VYh3VYh/IQ
18d9NKliXm4LueL1tY1c8fpaRapqPkuUmM+2UeodcT16SaoYm5QhWOoTsTD8
qtR0Yh2tt9Qcp4vFXmJelXpltDlx0CU1tP/9ql6PY6QmuNJx96UaN6Sqfs3e
ky81vlFytsbrYY4RSj9Xqnue6mapZZskTtQl8oTUk+L7nZKqmq/kHxqoZxpx
UOogc5ua4iek3jSXfwSelLrTHLc387hUty/ukdrAHA+W+YBU1f2IteZpX45z
UieZP94XvlJVjjp98KIpFV75S1XNvVqaKsXJk7HXJajbCf2V+9J31CYc61dR
pz4XPhyqmcOUEhU0qJhXu/T1jn7znulUzHPst6XVqmPHdap5NdHvnk3rLy4k
o6ijo8qY/wntw53Kh9+ej6SuPp6r94iPsc+P+L18rm8PlPqkXI9SjaoFSF05
s2T4/DnXpK5fWd2jzmi5YrzlsstSVV79dt2XrvJ5AqR6hxa50uzjDallV6yb
W+j0TWpwP3PCZ6Dy96za7/q7RI+XLsykU5Pv3bIoz/pQ7csGV+MWnxEkVeXh
Qd8HPO6WT66p7DceXpJatfXlyNarT0vNZ473a39R6lbzr7v/NakTEq/3/fjx
stR8Zc1Bq35S3c/7a1LrxUsZ+wruLzV/YN+TTZ85qLPqr7m5sGOgFnLRf1ji
dzr1XknPpkk87dpoceMohlpBXN9FaGsmmRPvYqjjdz5bcT5hhDbz7MLkt64a
1HYFno86kCpcq71y16YrxQyq+emGuf7q/Z9V82Tdf8++Uu1+n75ddHun1JPf
tvq6bOA+qb1zZr01tOEOqQ0EKHlLPXqj97MO1U9JzSDmSx+Q6ivuY5+SWnR7
9cRdax+WOsvesa0jia9U1T4e+bt7Vz673Umd2atR2OjLQdqzTx30ClOd1Lwb
RhfvMzFIuR91tyv3etf4yaC65wWHKf/5i++OHkuyQadi7vkScePGRRWvYpND
lPtaj/iY4V2blga1+NrnHTdkDtNi/7Cxb1gGdeVw/xmxP5r2jRhgqlPf7io/
ZXMVuya4ZK5OFWN1F9m0zdl8R77w06nu36dd2+FfIPaRr1Pdz1+bJl6WmxpU
PN4emben+xjUL/J+9WXC+mHKn6t2ig4FOwzXqb4nfti/ratN84gyRVenmo/O
HMXV+6K/bHGqx5E2BlWMT8wZpuVNd/ZQ9mCdKp7uX9i1SLFg00n98Gzyt4cf
B2kmuhfuGSwVjwveSqGbvMfWk5vTZOi5cjMmSvjGWTNQKubf8m5/bww6Wy9U
6v75pmgFS52WYsXOGgFBUlX7BVUtmKzGh/ShUs27Eq2zBEsVvNYwSKrbh+Sa
z/ovzgRKLVrCdatqWLDUPv0P9NIKyc1y03wCBklVvU9tbBHkk8hLru+mrOYd
QakxYm55gFTx8M0aKDX1mfsFcq91Ubt8uW5fpUMhWomwYotq79ep7jHsNuXr
w5qkx5/VitSpmLs6ulLWItvCXNRyYj1MqNbc/DFa61TMk1XtM/8ypHuVRfdc
1MLN54TnbRSqlb9XJfvLVToVc4FV80fMVQoLBujUa8Lr1D/X69hHb4ajMdRS
T80LjwjlP29YLe32JwEGFfN2FxZrddpvn0HFPOKny7skr9ndoOYJmzJqdKUw
bU+miG1tehlUzB9XzT2ZVUqb3SeDQTV387u6yq4tc+7NXGOjQR3at8iCH06F
aSdumZOMDerhLh2/f/bJrjVeap6ZGVRbUKO0LZOHa3vjRrWJnzWGCiccu2bk
px9eGtRKjuPdH3YN14LFCYBBda+nCtNMdBxTwqDWK34ty/Mgu3Y2fsse48fr
/+x2c9K2TRtjbtc5U6e654ratG3DzTvEOnWeuIFh09oN+yr5pp916oOZ2UbV
7mHX4mYpXOd2aYOKefGqOSzrg9OvS5Yrmoq5w+6XrSjq0jUXyyaLsSnXUYix
rOnkitOk4kFSi5q3Gxf6S1XN/73gHigvVbWPUOe988rFntNKFVc3A/ylus+D
5Kq+v/hrW/LvV5x+Zb8qdWdN84bwWalZxJz2A1JV83y/EvN7z0t1Xw/tk+q1
NH7nDAUnS30wPqE9qNE+qarrbrdnL5Da5KhnULqqe6UqPSHrvgPbffZpvKr1
KimE33hLHS7mP9+SOn7trTetHwRJnRQRXWjrsHNS36cr5bHKQ5faYGiOV/Fi
z/94/atcO5Ny5T6pvcUTYb9UpV+p1qVah3VYh3VYx78+LP+3/N/yf6nw/jGr
0ydc+zGavlbtSw+H5i4N7+f+D+/n/g/v5/4P71+V81D9hUV1+hrez/tn9394
P6/q96za7xrez2v5v7vwfu7/8H7u//B+7v/wfu7/8H7u//B+7v+q/Z8t//9/
/Z+v44X3c/+H43L/V+1Hzb0fX6v+Obyf+z+8n/u/al9reD/3f3g/9394P/d/
eD/3f3g/9394P/d/PL64/8P7uf+rfi54P/d/eD/3f9W+6PB+7v/wfu7/8H7L
/y3//3f8X2z/Fuigr+H93P/h/dz/Va8P8H7u//B+7v/wfu7/qn3m4f3c/+H9
3P9V80fg/dz/VT8X9358rfrn8H7u//B+7v/wfu7/8H7u/6q5J/B+7v/wfu7/
8H7u//B+7v/wfu7/8H7u//B+7v/wfsn//+H93P/h/dz/4f3c/+H93P/h/dz/
VXNY4P2BnuYz0aCv4f1Fxo2LvSTQJf/nc5Qs/7f83/J/y/+twzqswzr+Z4fl
/5b//wn93+0dIVT4f8USM18naBVNhf/ni/ku7ZoaDir8f0U18wQ/mvq59f+q
fWng0Lzwfl54Py+8n/eXrv/PsrfZ3nvZnFT4f4eG12IveR1U+H+9llsS9C4U
TYX/7xP7hdip8P/pdc0dFqKo8H/vh+bGDtFU+P83n4p4r27noML/zWd35gvR
1M+t/1f9nlX7Xaj8f1CruM2Xz3BS4SqYg8vn4ZbZ9KCafjeM+lv7/37b3e0e
Y+xU+H+NvbXj1J4cRYX/9z5x5+eS6aKo8H/xcei00VT4/0QxaDeayv2fF97P
C+/nhffzwvt54f28qv0fLP//1+v/4f28KtdV7UfBvf9zhffzwvt5Vfta0Hp/
Vng/L7yfF97PC+/nhffzqh5v8H5e1c8F7+eF9/Oq9kWB9/PC+3nh/bzTr9w+
uvS1kwr/V31OZEzWAcXP9XZS4f+PN247+n62kwr/77tvVaPhhoMK/z8euCTa
yOOiwv8P7fwpkeuOiwr/PzbizsEdhVxU+P/Gg7035t3tpML/VfMCPtbM/ejH
Gy4q/N+Wyf/NzgAnFf5/slatb4f2dVLh/+88My3N189Jhf8v3FL/Ydr8Tir8
/1XdlKe+LO2iwv8z6C/i5g13UuH//Vauf5l3qZMK/1e9T+0PNSeoOqnw/zpx
t44/18pJhf+3Fhu2OKjwf7i/yv954f28qtcHeD8vvJ8X3s+r2mcG3s8L7+dV
7T8G7+dV/Vzc+z9XeD8vvJ8X3s8L7+dV7XsG7+eF9/PC+3nh/byqfULg/bzw
fl54Py/5Pyu8nxfezwvv54X386r2Yful6//h/tz/i8bPpxnNXFT4v/frtSfv
dnZS4f/mtO1ZqR1U+H+W3G9KjejuoML/z9lfnon3IJoK/1fNETBffR94Oajw
/yziBCmcCv9376MTToX/7xIeH0bF90+2vH69nzuHU+H8qn9u+b/l/5b/W4d1
WId1/BcPy/8t//8T+v/n1v9z/4f3c/+H93P//9z6/9/b/+H9vPD+3cmLxDtT
xyWt/+f+D+/n/g/v5/4P758WUrhnm3zR0vp/7v/wfu7/8H7u//B+7v+fW///
S/1ftf8PdxV4P/d/eL+fYIfo3339P/d/eD/3f3g/9394v+X/lv9b/v/39f/P
rf/n/g/v5/4P7+f+D+/n/g/v5/4P7+f+D+/n/g/v5/6vmhcA7+f+D+/n/g/v
5/4P7+f+D+/n/g/v5/4P7+f+D+/n/q96n4L3c/+H93P/h/dz/1ft/2P5v+X/
lv/L/g/v54X3835u/T/3f3g/9394P/d/eD/3f3g/93/VHAF4P/d/a/2/5f+W
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
hb7WJhxz/eX9H96fucbG4l2CnPQ1vJ/7P7yf+z+8n/ev6v/w/g8XL/h0/c5J
X8P7uf/D+7n/w/u5/8P7uf/D+7n/w/u5/8P7ef+u/i/4tnEUfQ3v5/4P7+f+
D+/n/g/v5/6vmgsA7+f+r9qnGt7P/R/ez/0f3s/9H97P/R/ez/1fte83vJ/7
P7yf+z+8n/s/vJ/7v2rfcng/9394P/d/eD/3f9X8Ang/9394v+X/lv//X/8/
37pF7FuFk76G93P/h6dyX4X3c/9X7ccO7+f+r5qXAe/n/q/a9x7ez/0f3s/9
XzVfCd7P/R/ez/0f3s/9H97P/V+1Dz+8n/s/vJ/7P7yf+79qzg68n/s/vJ/7
v+rPCe/n/q/abx/ez/1ftc8/vJ/7P7yf+7/q8Qnv5/4P7+f+D+/n/g/v5/4P
7+f+D++v5F13cKu4MfQ1Xked/ee3b9DbJfm/ez9Pl+X/lv9b/m/5v3VYh3VY
x+93WP5v+f9fyP/dLh9Mhf//6DE1zpRkYVT4v2r/f/MsvvlyB/Vz6//h/bzw
fl54Py+8n/eXrv9/0OVlVDqngwr/95z3rOlPw6Op8P+TFeafuFU/morz6rXf
Jsi/MSqKCv9/eP7x8aRJoqjw/76bH66/fT6KCv9PN35RsVano6nw/wBz7Gyy
aCr8/95Q85O3Durn1v/D+3nh/bwq/x8lHpBOKvx/Q6VUo+PWcVDh/9c6jTz5
IkUE9df6f+6qR7qeHhRMhf+bqja/fRQV/h9c4+KG5gMcVPj/i8v7F3y65KB+
bv0/vJ8X3s8L7+eF9/PC+3nh/byW///r9f/wfl54Py+8nxfez6vaFwjez6va
pwLezwvv54X388L7eeH9vKp9P+D9vPB+Xng/L7yfV7VvCbyfF97PC+/nVe1f
BO/nhffz5p1gip9Ohf/Dp7hT1X2ws/DgBC4q/H+D37dvhr13UOH/5v8oJspJ
hf+r9vkX2zXmcFLh/y18zRs7Tir8P63JlMtcVPj/D80yeL0t6KLC//ONODEn
3RsHFf5fdOh17yGLnVT4/5FZzqQfRjip8P9CxbLdnXbfQYX/l0k64Yt4WRxU
+P/yBjuelvdzUuH/2KeP79e3rqO505GTCv93n0g4qfD/HRe+LxyyzEmF/0/O
aG445qLC/+H+Kv/nhafywvt5VfuxwPt5Vftlwft5VfvewPt54f28qv0V4f28
8H5eeD8vvJ9XtQ8PvJ8X3s8L7+dV7bMH7+eF9/Oq/pzwfl7Vfjvwfl7VPj/w
fl54P6/q8Qnv54X388L7eeH9vPB+3l+6/h/uz/1/f0/zT+yiwv9vmLvejXZQ
4f9tH31R+WFfBxX+P+07L9elm9FU+H/J3eYbroMK/6863NzxMpoK/x+T6vSU
ovWiqfD/Za1erX72IooK/1ddR+wV/0c0Ff5/8LD5juigwv/dr8cRVMv/Lf+3
/N86rMM6rOM3PCz/t/z/L+T/8P6kYt1mpLT+f1B9c4P7aGn9P/d/eD/3f3g/
73/b/+H9vJ9b/8/9H97P/R/n0fy8Hd7P/R/ez/0f3s/9H97P/R/ez/0f3s/9
H97P+2v9X7X/D/d/eD/3f3h/pgsNE1bt4/jP1/+LdY+R0vp/7v/wfu7/8H7u
//B+Xsv/Lf+3/P/v4//wfu7/qnWq8H7u//B+7v/wfu7/qn3+4f3c/+H93P/h
/dz/4f3c/+H93P/h/dz/4f3c/+H93P/h/dz/4f3c/1XzeuD93P/h/dz/4f3c
/3/p/j+W/1v+b/n/f+7/8H5e1eeqPrf+n/s/vJ/7P7yf+z+8n/s/vJ/7P7yf
+z+8n/s/vJ/7v+o6At7P/R/ez/3fWv9v+b/l/9ZhHdZhHf/FQ+X2I83r5vZy
VfNWVK/Diu+TRtw3mCu1qJhrd0xqoeCy++JGBUvtmrxm91SDAqT6LDbfIK5J
Lbl4686Y+yekppl/cfbjnDek1qmY5eLuT7rUhg3OtpwSe97DW0PM1ZwrVfn7
Fz+3h8brdqzdUu1bZgx563VWahvhE0eluv3+iFTVXKSR4u9/h9QWYq7mUakZ
Cux9eXn/eakJBIz7STWnqm5bf1Wq2438pLrns/lKVe2LovXr+EVK3wCp3y/L
FntJITdLTfNE1F8q5gryfpcuQZUEJW9SxbisvoFaVDpn4ZQDXdQ4fnOOpW8d
ogVFXPHr0FCnxoiBjjathxg0qVOT+reanzS9Xbux9tKyBGcNaqTY8CdMuS/0
vXHmYKYo6rAb5k4Z8NFI6u3Wq3Meqh+srRfXEzepYsxhkSBtRuxZ/eqyt6iF
D04/mG1gkCY+Rv3TTap+t+XoOn6B2g8DTVGR22WuEXvp7y/VvEuVLtsVqf6v
69v2hdyQKv7fKyKoVWKvvmKfwppP34xlCs+/Se1R9a1r89VALX9378pntzup
mH8aIgY16tT7abxbfPk2VAv0NCcpGlTMcett8kH7KOrgYd/XKHc3VCvxeLZr
wM8BUlWfv3bf15LrnnfnJzVOnXuOcqcuSvWuUmBT3bzXpKp+zwXF/cMIqm9h
U4wCtMUpzTsfOrX/6cwxp1+Fale/Tn8uWyaDauvwJKb4Ort2f1jbktW/iqFm
mj3MZ/iFcG3smpGffnhpUDHXT7Vf8c1WlfJFtIihvmlQdeeeTOq5AAfjb294
JJHcySfKFzsbP0Cq+3FwUOrKPuZg5P1S3b/XzVLdc+aPSPVtN96+v/JxqT5i
wPI+qUVTV4pu2/uA1JHmoyj3Cakb41aqXGXtZanb+l76sGytkzp/ZIeuxQ4H
Kfefvzu9xeQ53xtUzH9Mc2jtDz2GxVA9zMuvbyK0FAMfrBvlZ1A7/Lh+y6PE
4cp9s7Nujh+/xGOdOkQMTLVrj7Q9kQn7GFTMw01UvUwuRz+d2ixXyfWnmqn3
w//Q7cq93jUMamVxP9eu9WliCohOTVc1Td1XP9u08DElro99qFNfrPwqzsvm
dm30waFtrtQ2qOVT7Esx971dE9uG7Dao7reFMOW8ANV+5qo/j8O8ap5hUBOK
97swTQ96WiTrJIOarPGuE0XGhmmFF/xwqmNinbrI72TkzomhWoFb2Xo4M+hU
cXt2dag2Jc6UZAFHXNSm4sZ/iDYy0pwY6qKW9FjlEVIuVDPvWi4YoFMxz1R1
PwjvD7yq/YIwx5JXbEt1JVjq/pQvXw0pHSp1i/hBg6Wq9hHCnF5e97qMEKk+
5u3pr4KkYi4x7/IEZ1PFTREiNXfvER8zvAuW6uVV+kO/0YFS09br9Gxf3hCp
tU+dWjlrUbDUJrtzF2ifJkgq5grz+cILKqzynHzLSe0lzkeClZ+/UL0PNjIf
jlkNavCHGieeb7Fr3gs2O55VMP5ZAdx27d6bt4lynNapGcUCBZsmlhkU1qnv
Z8+cfuZyqHJOh21z/pG5Z7ioj55kMEdRa0cTmy8YLuqe/XUvV6gUqkV/iAk5
kVunxl+zLPXgw6Fau2FfJd/0s07FXNdzXeLMOz5Sp14Q64hs2rXKvS+U2eSi
hmdZ/sjjTIjy8ynpEq79mLSxTnWv47ZptVfu2nSlmEHF/HrV3BPV/JSePzY8
d9jLoKbY3PlOz+/DtGbPB8bv5WNQb0433wnCtMolnzyLbGBQ8f6oel1S/XfN
u1qtzxhUj/nmGWWYVmTcuN5JjulUzLF9tKdj7L+iU82rkZyhNu2mLfLtUUOn
vm41taNnLbt2XWzYplNvPdpQ53Qem9Z0ZMbwOl/r1IgFLzJPLGRTzhcYlj5N
i81rdCrmPu+dMrlI9G6dunZv8PETgTbtxK3608fUNaiYX6z6ec1ncZuWBhVz
53NeTRFZqpBOHVvFXLkTqpyXVG7UvGW92xnU7UseLL78ZZjmEPdTo6h4/Lg/
nxxFxf2vMubtnGW3qUGJZ/XeExSimdOHMzcOlqqa0zqkS6anSTcGSsX1Cq9q
H0vVPpyhTSLqnpkaINW8K710rFzVfpWq4nyfV3VfoEOaBUWm+V2Q6v+Neaa0
U2qbeqtHLB9/Qupese5jnlTV5bu5emHJg4saL867eQe6LySlmmfZAyvbpIrL
w4dyM4jzOz+p7vsqu6VWHGyKf6jUHFuv/ey4aZPqEd3oqGfQfqmqueENHn2f
K/8zXSrWo/G6v996qV7CkwbIPXbhi7qrJkj9r5iYdViHdVjH3+Gw/N/yf8v/
/23/x/ly97VzfM6/ddDX8H7u//B+7v/wfu7/8H7u/6p9oeH92TLtnnSivE5f
w2+ad+h765u7Tvoa3s8L7+eF9/P+t/1fdf4P75/fZKl3aBEnfQ3v5/4P5+Du
Ae/n/g/v5/2z+D+uM86ff9t33yoHfQ3v5/4P7+f+D+/n/g/v5/6v2q8Y3s/9
XzUX4O/q/34DtuWY3z+Kvob3c/9X7T8P7+f+D+/n/g/v5/6v2jcb3s/9H97P
/R/ez/1ftR8+vJ/7PxyLuxa8n/s/vJ/7P7yf+79qXoBqP3PVnwfez/0f3s/9
H97P/R/ez/0f3s/9H97P/R/er/J/Pg9C9X5h+f//1v/h/bzwfu7/qs9fqN4H
4f2S///D+7n/w/u5/8P7uf+r5nTA+7n/w/u5/8P7uf/D+7n/w/u5/8P7uf+r
Pp8Cr+X+D+/n/q+ae6KanwLv5/4P7+f+j/dD7v+q1yXVfxf+zT0c3s/9H97P
/R/ez/0f3s/9H97P/V81XwDez/0f3s/9H97P/V/188L7uf/D+7n/q+Ylwfu5
/6seP6r5F/D+hqW7xeu0xyX5/08/Vk+X+r7T8n/L/y3/t/zfOqzDOqzj1x+W
/1v+/x/4f5+az33vrA6iwv/dDhJKhf/bipZsaM9kp/5a/z87bsfsdXdDqfD/
NcuHec6dHUGF/9sulRsY/TScCv9/cH1N9zWFHVT4/8aDvTfm3e2kfm79P7yf
F97PC+/nhffzqvaF+F+t//9CXMg4qfD/Od//1PcH32gqXLp624WxlzJRVPj/
wqLmDkLR1F+7/h/ezwvn4IX386rW/78WNxYcVPi/av/VMylXpq2yw0GF/weL
D+aHUuH/3uJxHEmF/7c41eNIm1TRVPi/6vesWv8P7+eF9/PC+3nh/byq/Qrg
/byqfYH+rv7PC+/nVe0/A+/nhffzwvt5VftmwPt54f288H5e1X448H5eOBYv
vJ8X3s8L7+dV7Rek2s9E9eeB9/PC+3nh/bzwfl54Py+8nxfezwv35/4P9+f+
r5oXkH2KuTOIiwr//3ntybudi7io8P9Kh8yf0EWF/x8Q82xcVPi/ah27LZP/
m50BTir8v8nsNCUWb3VR4f9i+7COTir8v+++VY2GGw4q/H/X3tEhExu7qPB/
c/p0ytouKvx/zYCDVyvFd1Lh/2IbmvYuKvw/rnk6mMZFhf8LxmzqpP67/s+r
um+ieh+E9/OS/7PC+3nh/byqfbrg/bzwfl54Py+8nxfezwvv51XNp4bX8sL7
eVX7nqn2T4P388L7eVXvj6rXJdV/F/7NC+/nhffzwvt54f288H5e1f5C8H5e
eD8vvJ9X9fPC+3nh/byq/RLh/by/1fp/uD/3/zUfk8a+ozip8P9l4l9wUuH/
WLfE1y9h/0q+j6VqDteV4CRPu093UOH/KTrOatV8koMK/1fNq1L9c9X5v2ou
gOX/lv9bh3VYh3VYxy84LP+3/P8vuP5/vOtS7CWTQ1r/n3301i77Ozmk9f/c
/+H93P8/t/7/9/Z/eD+vaj8HeL/Ynr2TU1r/PzyJx9Y0Y53S+v9WeX1m5i/s
lNb/c/+HQ3OXhvdz/4f3c///3Pp/3t/K/+H9S3u3e/RFZV1a/8/9X7X/Kryf
+z+8f9k58wEbJa3/5/4P7+f+r/o9q647LP+3/N/yf8v/f+3+P9z/4f3c/+H9
3P/h/dz/4f3c/1Xr2OH93P/h/dz/4f3c/+H93P/h/dz/4f3c/+H93P/h/dz/
4f3c/+H9lv9b/m/5/1/H/1WPH9X8C3g/7+fW/3P/h/dz/1ddv6jmWKnmcMH7
uf/D+7n/q+ZVqf45zvfHTc+yt9leh7X+3/J/y/+twzqswzp+j0Pl+cKDO8lV
/fuKOcLerx89/aHZMKkNVqVbuynfBqnusWFBUjG3jXft5ukp42y5LNXtpkek
quYIHxAbXehS7WL9epRU/9zDZq2dtFCq6tfsnXXfge0+P2q87rlGq6Wq7l+o
5vBOE/MSj0q9ky35x5v5D0pNYuyPLtthp1QvMednv9S5Yg7eOak9zvfZW7HF
FanmbhMDtl2VmiX2rGZJCbliGYztitQGriJD+lz0lRqv8ppyo+b5Se2wzhST
K1LF/2zpDamq/W1U66tV6/rmvl9apVRbndp15bvwTrlsmjm96IsWOlUsu89o
03rfNJ8IBhVzyqrMXJMrWy2DeuRYkg3F3sReH+W9UeXaGZ1qTgNd8MKmLRQD
l3Vq7yRiopfmFKf7OtXcfeV6Vrtyn9uu381cOHCIi/qxf9Qse8cQ5X6/Z7I0
OeZ/zUU9HdwtdHmaUO2LaXnevfOMpJ7qmHjXyM3B2jJxfXmbivNS7UP6xV+P
uE29fV3cGNA6tBmb6vQUFxXz4FT7248ffy3egkk6FXPiVPshH52wtHPNJgZ1
r7nNSsqwf3zeO5raUDxQ7JrX9zHN9zW/RTV3Eyo+I0gztTldb3+pbfIVmvIp
t1zv1e1mTPta7nc5mt850ylAauor5h2mCOreleYdjABtydiWtQdOc1HFdMPJ
IVqFEPMCy6C653OFaZkbtwl9/lKnDqg0JE20R+x1/I5+8541Nagl362fEpkm
TGshINegRmtJfKo9ib3e9RjTInKYQcUcwyXT4t5PsMOgCia7Eqbti31VybFV
p7rnI9u00O5VFt27GiI1n/nwTnlV6slvW31dNnCfVJXnq+4XuOeC7pfaInrD
qg1f75aaYu+WRXnWH5ZadHv1xF1rX5TqJ9gimhr0fcDjbvn8tcwnPrb3qqZT
B2a9lP7t41At1eUV1w+dM6jfVIgb97u3YdodsQFPDDWtLaPnp8Bwbe2L06ue
zjGoP86qv+bmwjDN9W397bOqxlDFtjuPwjWfNoecH5vcofo1KVvk51S3tAux
z8LMNw3qFXP7g2LhysdDzZofR84ta1DP5r/YNlukXTN3G7qRX6d6LRY7dmnP
X5qD7A1q/jnmzjhhyv2TT1X8+dCR6gb1RAZzUp9dW1ndo87oVQZ1ZO4ZDx7v
CdPaJjDFwKDeEwNSw5T7mbd3Bc4qpenUR54Dx3Z+Hqp83TZ3PSlW36CW2xc3
qk38MOU+1caBeiVKp9ep4vbLCvXrUqviw8qcaKJT9U/7Lg9MZVO+zqu+T1hc
c1C7i/ps81CTtJXvU6rXjd0rTNF2UVeFX+7RZWCo8nxMjL9tIXeU+ICa3PFi
znmI1I6etTqcPyd3oRvEpJq7rcyuFizV3HXpp7RyC3ws3GnjmCCp4mm4K1hq
gumVvOsODpS6S/hQgFTzLnDalk5qI3McdOYgbfbiSr08KjmpX/tXLX08JlCb
tCn01qLTLqrbT0K0Zuar/ToX9dbQhtlXHg1RztdYIW4I6lRzOvCOiFDl43N9
cPp1yXL9f+zddYAU19bvfSS4u0tw1wBBC5eE4B4cAiS4uxOc4MEtuAXX4Bmc
GcZ7ZpgZZrq7avDgFiC3q/r81nnfte+6JDk5Ock5VX/c7zP3yUNIT0vVp3bv
pVO/bvxoc+oDoeL3PqT9/K2xlzndVDxu0j7/uWKTlJ860k0d80X45V96hGjW
ti2ldOrrcpEdpwWEiv9dN7/7ePukwjoVc1ql77Pct97w3NQcJc0B0KHarpoB
LV8k1KnLC/RLcWtcqFYiYQHNaOKmLtueznk+fYg2L6e5Esigfh7ZPLho/Ait
kzUIW6e+3l1x+paqYVrZj6LOTtipUzEPV/p8/CLxT8uXZNapKazPl1BxPsL5
Y3tOPhusUzGPuPz8uQ+ObdKp5tlR/1MOrWOmuWmurDKor3xjp8zbFa69OzEm
y6bKBrV6rtOLat0KE+dP7TK3jRpgUK1lNc3DtXtu843LoFpfH20Vrq3x/BaW
lNCpY72DvWn/Sr6PZfIVzk9z9dKpmMtc4K15R8egmrvVfTMpXNs+3Jwcr1Mx
jzhH/AOlv7qlUzFffmNTczCuQZ1u3SgMF+cLVF1vfrFYp5qfnv5LHeLnY/NT
l/eVSmRQzbsIbSaGaWELzXdynfrIcuNQrdKVBblTl4yhpullPgFCtSoFa37a
qFAMNWPOLxqmmRGqtbAej5tUvM8fs+D/JhXvnwOt9/UoaupBzVe3OhOkDbPu
30ZRM03uki/xriBtn3WfNpra/Gb4tp/6BWueD8X7R7UgpWk87y79mwYqtR6u
eUFK8b7Ia15dZUjrrxTnubwNX569FpPrR6VlzO3Rdq5VGmNdH+9T+tD6Yvq3
SqXr95iIVHfqX72m8RZIOiJp123+Sq2P9Xlqrz7Leiv/oxilVzzPmgflI5QW
qDG51ZDOh5Xmta4/flTq+eW1aXEgXGmQNcc4WOnnFSql3JfSX6l3fWWs0sHW
iZNL6UHr9XFRqeT5NYstyvjjxElqrXWXXyv99+CXfdiHfdjH//Bh+7/t/7b/
K5X2V5fW9cGNuCPB+7n/w/u5/8P7uf/DgbgLwfu5/8P7uf9L+5TC+7n/S/v9
wvt54f288H7vcjs3/Qzvv740y+MBa930M7yf+7+0vz08jPuYtB8yvJ/7P7x/
Wt6ySY4WMehneD/vv9v/cd1zxHrgnfQz3I47Hryf+z+8n/s/rl/59Sy8n/s/
vJ/7PzyD+wa8/3/F/+H93P/h/dz/4f3c/+H93P/h/dz/4f3c/+H93P/h/dz/
pecDvJ/7P7yf+z+8n/u/tH8yvJ/7P7yf+z+8X/F/YT9zeD/3f+l9G97P/V/a
pxrez/1fel+C93P/l97npT8HDsT9X/qckt434P22//82/4djcf+H93P/h/dz
/4f3c/+X5mvAxbmTS89PeD/3f+l7H9J+/nicuP9L+/zD+7n/w/u5/0v/XfB+
7v/SPAt4P/d/eD/3f3g/9394P/d/eD/3f3g/93/p8xHez/1fmo8A7+f+D+/n
/g/v5/4P7+f+L82fgvdz/4f3c/+H93P/l+ZYwfu5/8P7uf/D+7n/w/u5/8P7
uf9L8wXg/dz/pc9HeD/3f3g/9394f+9ua89fT6PTz/D+r0589jh5Mp1+lt7n
8X6Z0vqCrJt+hvf3NszJFS76Gd5/58EnXaavctHP8P6kuc2FOy7b/9lh+7/t
//ZhH/ZhH/9Vh+3/tv//Cv8vWjL77Zl3A6nw//TmZWZ/BxX+b22fkT2MCv/v
uz9BvaZRDir8/+fJ5sJqBxX+73XYUCr83xof+U0oFf6f8pdaeR9MdlDh/+2P
jbx1cGcsFf4v7W8vrf+X5vrBjXjh/bzwfl54Py+t92eF9/PC+3ml7ynD+3ml
7/tL/v9Hrf+H9/NK+9vAw3il/RDg/by/df3/yXzLes19FUuF/88+UzpdwtBY
Kvn/+PqLLz6O/Wf/4f+LTpg7NDmp71v/D7fjhffzwvt5cf3KC+/nhffzwjN4
4f28/+3+zwvv54X388L7eeH9vPB+Xng/L7yfV3o+wPt54f288H5eaf8EeD8v
vJ8X3s8r7WcC7+eV3rfh/bzSPhXwfl7pfQnezyu9z0t/DhyIV/qckt434P28
+ZOkSz19n4uK87Eq5qu1v4sK//e8aHIPOeeiwv/zVjvS5dQgNxX+D7fiflUs
a54llda4qPD/hZH3a3zidlHh/+18Ci/4xM9Fhf9bj8ZUFxX+L61jdz6uVKrQ
OycV/l+xacVnd885qdz/eeH9vPB+Xng/r7S/FlycV3p+wvt5pbnP0n4+0n0T
aZ8feD8vvJ9X+u+C9/NK+1nB+3nh/bzwfl54Py+8nxfezyt9PsL7eaX9keD9
vPB+Xng/L7yfV9p/Et7PC+/nhffzSvtYwvt54f288H5eeD8vvJ9X2l8I3s8r
fT7C+3nh/bx/l/X/by+c9+nyhYsK/7e2zbzvpML/re3U5rqo8H/pe1LmXY55
vrFU+L903mv7v+3/9mEf9mEf9vEHHLb/2/7/N17/H/tmyo3YojHK+v/D35Y6
cnRjjLL+n/u/tL/9+9b/2/7/+9b/88L7ef9T/g/v54X3D2oRv+nK2S5l/T/3
f3i/4v9Y98/8H97P/f996/9t/7f93/Z/2///Xf7/vvX/3P/h/dz/4f3c/6X1
q/B+7v/wfu7/8H7u//B+7v/SOnZ4P/f/963/t/3f9n/b/23//7X+D+/nhffz
Su/z0ven/uj1/9z/4f3c/+H93P+l70nB+7n/2+v/bf+3/d8+7MM+7OPfeFh+
X1VTKs0LlvxfrOn9dZVKHu4zrGuMfvKs0qNFmhSLaRSkNG8ac4Cvn9I22aPD
6jw7p9Q75+280pzWhWCk0k/8ruarMdmtVJpP9Fsf/gXLE3bMWHipxhvjf67a
nHV7lEpO5Z2nukfpUWtdyBGlaVsMWvJh9V1K47XzXM5l3KfUx5qrdlHto2nv
fsjkq3S2df/hklLv3MILSk0Nvf3yvNJ4t83rvAtKk7Z+2Sdum9pga+DsFaXJ
I3t/NLrEdaXS/CZrW54mkdRxV4I2Pp8ZqF1t2iP7109cVEdt8zcWrMXPWqzu
zXIGtXZQrntHIsLEfWLfWl9cMKiYgzkhTf7Jiasb1KrnzCuDMHF/0bZdSh5u
ud2gmti4/mK4dntWs6/njzComBMq7Wst/X1mhc7vWiqHQW3ZzJzcFaa1GVYk
xeYXOhXz+MyrjaslDSrm5Un7cq81x/t9a1DHhd6q1+s7eZ/w3B1N8dGpmLuX
90i6WTEROnVSuvvDjxfzXJePuKAd/0anmr+F/oscWsKh4YOylzCo1jYEvmHa
j+Edjkc6DeoF6wssEVr6pebkNoPa0/dgp6djw7Tz1qDjGGqxpvMj8n8Sqn1r
+UEU1dp+6LMgrVzNxz0e+ERSA72wqx2yNgxwUbcnLpd7/JAg7e6Xm2duS6RT
s4zMOPyTSaHi86H+i46BiQsb1GsLpyZN8mOY9unyM6HFrxpUh3kZliJCnENR
bG3RL34qGkddejNnqbBLEdpDa2B0HDXvq7Iju++IEOdWVPu50YYts3Sqd52a
Q4u35nr2k5fcVM+/dMXQxKFadi/sK900aMLZ+w99lPayoOac0kjrhuBZpQez
mTsMnFS6zZpH6qP0o7iUJXof81M6t5AJ2i5qe3Occrtgzcccq1fMoF6qGHzj
6uUw7ch3ddoXORlH/d47EFprVD3djocBBjXQfNvIGqH1X9S2YZ9+BjX7pVFP
L38WrkWX+6bw05s69a114zZMWzDySc+Wpw0q5h5+WK7f/gT14qhTknx36d27
CG1P5hvbW/U2qGv9J3r+auHaN+b2EakMaqcTWzxvcWFaYj9TXgwq5gX7XjlZ
Z2snnRr+sblxhENr0ML8BpZBvd7A2W38Ifl9APtt8X230lSp36x2coPaJUub
DybMCtP2DZ7teUcyqBunR6fNVjFci026fHzzOnHUhIdedV79c4T4ezHVYftu
N9XaJsk/RNz//FmIeaPKTcXrveSDIneWxNOpKy3gDhXns0jPH2kfdeybxvdP
k9bPW7cz27up3vOKEK1pkE/iSS11akwjE2IcWs7BnfY9L61TR3897YIRHKrN
skDATTVfjOkcIdrW2UNeT0qnUy1+WxaqJfrAvGMRpNT7ugxU2t2aB6g29nvz
xmWw0mXmbf1tQUox95fP/5W+j3DNGtjuoobn01flvBuoDbDGkTqpnv+jnf6F
AsU5PtLzNlPXpsXr1dWpmL/cMtvo6C/f6dS4kB/y+g4O0yreqZrj2RqdivnU
0v7wgdYASjfVPa2tudJB63amytkdfd1UazubxiFa9v1ZN69NGkX1/GXa5KgT
pD227pNEUhda6zoCtbXWB2801by7mXmj5/cwZd6uFYdd1ATb3SdKOIO0K08P
3G/02kWFL31cxdxBxUXdm6XmplKdg7RjcYsqfjzYRT1gDRoP0laGxRu0w3N+
jQ5tdbVOk1EhWprTdwvlXe+mdv5ww77Kh0K0CdZ9pChq7vs5Qx4vCNJWWfev
oqnWNPrtwdpYz6d81ic3qDmyZJi4tGSg5v24CqdaX/vM4K+9tdZBRFHXej/p
tYLdzQfYRZ3T+5PwsVeCtIh74U2TV9CpmPcqfS5Lry9pPoLFpNt1av5jN8Yv
ueTQTli399zUY97BveI+/9L7pDQn6Njj2tG+i3Xq/plN8y5d7dDOdY638Pgo
nYr5y9IcIuk8Qdq3XzpfTXXz2/xJ0hnUDt1e7EiyLEz7svFGz5mBTsV85Jl3
Zx+a+KVObTbGWmmizTm7JEXUNYPaptCTMQdSR2jfbylT5FKeOOpq64QnQjwv
lT6npM9l/znX6h4YEkeNPd79fpcON8Q5C9I8CGuboHk69WiN70enmC/Pa5Dm
4KTLvqrl5yvc1B6OX5Lv3Rryj/e5m9Qp1vdfPZ8j04qNOzg0WGnJ2YuTjwpU
W/qnee4BLwKUSuu7pPm5o2pWuB2a9welXa3He5vSSdbb3Bq1lkN3V1ozztzA
74BSawx8qwCl3nV5V5V61+UFKK1/esbCmlOjldayBsH7K22WzL/FomQblW6f
43jaIWmgUmmO8JIx+VrFbvRVGnD0UZTrSaTSHtfMC1yX0oPWgp9opdI6GdHz
rYWUI9S+Mq+3e6q1D/uwD/uwjz/2sP3f9n/b/5XC+9dmMDfKd9HP8H7u//B+
7v/SPrHwde7t8H7u/9L+ovB+7v/wfu7/0r7W0t8H3s/9H97P/R/er/i/sC83
vJ/7v7RPOLyf+z+8n/s/vJ/7P7yf+z+8n/s/vJ/7P/yPeyC8nxfezwvv5/4P
7+f+Lz0f4ArcGeD93P+lORTwfu7/8H7u/9LcCng/9394/9/F/0v2yZ0tamgs
/Qyv5X4LV+bODO/n/g/v5/4P7+f+D+/n/g9X4M4A7+f+D+/n/g/v5/4P7+f+
D+/n/g/vV/xfeB+Q5m7AUbirwPu5/8OxuGtJvxd4P/d/af9z6fUO7+f+L81n
kZ4/0j7q0vwUaf08vJ/7P7yf+z+8n/s/PJL7JLyf9z/l//B+XmkeAbyfF97P
/V+a4yM9b+H93P/h/dz/4f3c/6X94eH93P/h/dz/4f3VH654lba3i36G9/PC
+62vpWRx08/wfu7/8H7u//B+7v/wfu7/8H7u//B+7v/w/p82bT/6Zp6Lfob3
j//A/IB308/wfl54/9wcN6vXuB5LP8P7S/uNv797vot+hvdz/4f3c/+XPpel
15c0HwHez/0f3s/9X9rnX3qflOYEwfu5/8P7uf9Lc4ik8wRp337pfBXez/0f
3s/9H97P/R/ez/0f3s/9XzovlT6npM9leD/3f2nOgjQPAt7P/V/6c6Q5OPB+
7v/w/g23Uz//vL/b9n/b/23/tw/7sA/7+G84bP+3/f9X+L/3/D6ECv+vs7XT
Z92ahVHh/+a3etv4hlB/r/97572FUOH/7nbLErzIFkKF/18xxwH4hVLh/z0K
Vli1YUEsFf6P/X34Pj/S+n94Py+8n1f6njh8nRfezyt9vxjezwvv55X2tZD+
PvB+Xng/L7yfV9qXA97PK+0TAu/nhffzwvt54f288H5eeD/vH7X+H97PC+/n
lZ4PcAVeeD+vtA8VvJ8X3s8r7VsF7+eF9/P+Vf2fF17LC1fmhffzwvt54f28
8H5euAIvvJ8X3s8L7+eF9/PC+3nh/bzS+4C07xYchRfezwvH4pV+L/B+Xmn/
E7y+eeH9vNL+bNLzR9pHRdo/Tdr/Ad7PC+/nhffzwiN5Jf/vXkavXemAiwr/
z/D6pzbDirio8P9062oWq1zaRYX/+yc6N/Rn3UWF/1vbPK1wUf9d/s8r7eMn
PW/h/bzwfl54P6+0Pwy8nxfez/tHrf+H9/NK+0vA+3nh/bzwfl54P+9/av0/
vJ8X3s8rfS5Lry9pfyR4Py+8n1fa50d6n5T2CYT388L7eaV9CKXzBGnfHul8
Fd7PC+/nhffzwvt54f280nmp9DklfS7D+3mlfZak/aDg/bzSnyPtgwfv55XW
/88YVGZup19cVPj/CPM2Ryk3Ff7/0rpR5qTC//UmjVtXfXCTavu/7f+2/9uH
fdiHffwJh+3/tv//Ddb/awEtXyS8H62s/687Y7/nVD5aWf+/NGXti0k/iVHW
/3P/l/b5h/fz2v5v+///t5IHwvt/7pt5eYF+rl+9/t/2f9v/bf+3/f/v6v/v
W//P/R/ez/0f3s/9H94v+T/f/0eaR/C/5v/wft73rf/n/av5P7yfF97PC++/
f2xTqiaRTmX9Py+8n9f2f9v//87+/0et/+f+D+/n/g/v5/4P77f93/Z/2//t
wz7swz7+xENy+1Hm9Udbtb/R/6XP2UnW9U1vpc0GXCkxq9R6peHWRrMBSjGv
lXfJtP7x11y/ojSr0f7NG/+9Sr2ecUlp9JfmJNRbSq1tNx64lEpziKSH/4zl
i2M03vW15pdPNmW3Uu/c3f1K016Nd3n+sQNKB5nbI5T6QWkf6/p7v1J/c9zm
6n1Ka8z9IPvTj39U6p27eFlpxjk7rp91+CttcdccPHVVab9tR5Yt3ndOqbSf
z5BJczyX4H5Ke1kXPmpT5DEvDP2VSuvBvrN8MZJqTmX9qniQZo2XW+KmGjfN
HTFCtCplHj6ObmhQDybc0ehI4nCtsTWI06CGH1iX8auVYVq5PM5+JTsZVHOK
YavS4dr19RdXfHDWoEZbX3AI105u21Cp7nSdeuJpyqDJkx1a8dTBxtjBBnXZ
6cFlH7WV9/9/ubPfwsefGVTML/soeVyWyNRxVOvhXxShDbxvTg42qHkmOD6r
WTNcq5OyXeF2w3XqpR9G79/exSHuj/r46x6Hf8oQRy1o3hVYHaGZ6tVqvEFN
HT9lpu8Ghmvrkh1/XDtap044XL3RxLLyPrHrn55a82i+QcVc1AubDvbZlN+g
+t4rV6H2iTDt6RdHPVeeOrXwwCqO5D84tNB9IXkO7zKo1n+2X7j4+1rhMkXD
oHqeJItHnwzXfA+de9A6jUG9kbpprc2Lw7SZ1thyg9rcvO2WM0Lr/ehJnTqX
dGpq76BNrcjHVxbkTq1TF2bo/HXFhaHiPvBDj3bN33eLTi3kfeGJ8wse7Gnv
uSTVqV42cIh/f2k+hfTv3V089N3mQzp11evh3erFOLQ13ye/kETXqWPi3fwp
qRYm7j/f07qQ0anWZVCGMG1AggRXnh7QqTm3+b5wRjo08y7Jt4vc1D7zOvcs
tDJEK2GBmJuKOY+PVnZOUau7Qc0XPn3M2Mrh4vNB2g/58sDUWfr11KnBU4yF
AdUd4p8vPT7S3JC51oW4Tu1grJ6sl3BoNQzzAtqgnhhobWAi7pMsvS8NMrd/
2a1TTTVof90hvv9UPrT08oloN3V/qmfPh5QL1Qb7fj7qxFM3Nb81ty5U+7zY
jJ457ujU5y+swXvakIaHN0R3NqgFPjInwIdr99zmDiQGFfMlN1jjb3Xq1H6r
v3uWP0xbXaNr3bFrDCrmBR/vvybJw7cG9cAEc2OQCHF/aWnuibR/svV2uVKn
7rY2ZpFfd9v1DwufSK5TFw9ItX/w7NB/fM9Np2LO6XfBGTYkz6NTMb9Vmr9Q
ve/TfOUD3FTr7TlLqJbFGtiqUzGH+lA1U5B16vaci/pvO+LQpsebnjzgiJv6
2aYQzyew53VkjlP91kVdPst6Q6P56HxO+gFroKSbuqX+THOLEc2alu5yU0sn
elB+ZTV5P+pP0x9ONKyGi+q4WGFg7KNAzfr1L3dRs0aab1hB4vuAOYV8WRU3
dctVc+emYM3zpLyv93RTk0as0c7XCNH6ZXmbu34CnZot8McNX48O1azt2nbq
VMx77fLFnCUDh7ip76z14yFa15AKmd8cc1HjNamw4NGtIO2uuV3MZ25q1rZf
juqRJkSc7xCv7h1nhZPR1A2Zri/Z/+Kfc5B5E6Y23wAClErzH5Npy7Od6BGo
1Lv+JZJ6Z501MFWbaQ3EdFGb95w40TfBP+cu8/nLc6rOrlKwpovqXZ8TqH1k
/jbLu6k7rA/yYC1BqjGrG6WNoW66G3YnzeehWqbEiV65agUqNXe5a/LuutLp
7RI3nHDNV+mtuzkGvTx8Tan19dLP/JTesv67I6izBi+dXum5v6ZfqjVtajc3
1fPL7Bfv4xDxPESah2LuLnYtRKeaZ9uL84aJr9NWs/J3fV5Pp94+lLaAEc+h
PWt2sueRVga1eL26JfvkDteCLeg2qN7b0eFav60t1hw7rlOzPLYmhIvnY9Ln
l3Q+ltx8eWQxqK13Lm++cJPn/XC4eSanUzHP99tU5iRjndr/VJa4U89Dxfd/
6XNT+twJT2m+kxrUxyeC3tw4I5/X3Vr7aUSMj05NG9s16w/vHP/4nrNO9a53
CtPGHjTvYBnUip5X14I3YVoZH/MboAZ1XfHS7qhq4eI8oELths9LNNGgzmt5
0PwE04pPmNAn6TGdunzdBc8pvPz4S58L3tuQLuqd7CneRRYM1rqYpwtZb1LN
q8oMLUPEfVMbjO+98dQBteevp0n14RG11VpeiW651k9pw+yVTo0dp7ZEmsqx
rfscUCqtl5PWH8ZUOJl5is9cpVmTXr+/rPQJpYda1PWcygUoPXUq/oyBV9VK
6zS0fu1zpboUoPTMwcOeU7CDSr3XVUeU/pDx6PU+j8OU5rC+3xWi1OL1zP5K
vde1LqWR45dcaut2Ku06JFHZY1MuKZ1krQ9dpbTrrVQLuy3+Wqm4vtQ+7MM+
7MM+/pzD9n/b//+H/V9aDwbvn2wt/HTRz/B+7v/wfu7/cDXubPBj7snwfu7/
8Dbub/B+7v/S/v/wfu7/8H7u//B+7v/wfu7/0v6o8H7u//B+7v+4vuTXm9I+
sbi+4dc7uM7m193wfu7/8F3uvdLvC9eF/DoRXs79HN7P/R/ez/0f3s/9X9oH
Hu7OHV6aXwDv5/4v/f2l+RTSvxcewH0A3s/9X9p/Ht7P/R/ez/0fzsfdD97P
/R8ez31eej5I+yHD+7n/S3++9PhIc0Pg/dz/4f3c/6V9kqX3JXg/93/p/Qfe
z/0f3s/9H+7CHQbez/0f3s/9H97D/Qfez/0f3s/9X9pfWpp7Iq2fhPdz/5de
d/B+7v/wfu7/8H7u/9L8BbgOdx54P/d/OCJ3RXg/9394P/d/eD8vvJ/7P7yf
+7+0HhXez/0f3s/9X3ofgPdz/4f3c/+H93P/h/dz/4f3c/+H93P/h/dz/5fm
O8D7yxybsrxjLfef5v/wfl54Py+8n/s/vJ/7P7yf+z+8v9ymGXVSPHH/x/0f
3l8g7ot062o66Wd4P/d/6TxEmocC7+f+L71O4f3c/+H93P/h/dz/4f3c/6Xz
MenzSzofg/dz/4f3c/+H93P/l97/pc9N6XMH3s/9Xzqvg/dz/4f3c/+H93P/
h/dz/5fmAcH7uf/D+7n/S4+/9LkA7+f+D++PSe8qlmqg2/Z/2/9t/7cP+7AP
+/hvOGz/t/3/X/D/1h9MmJV1bygV/j/c+j1HUN/n/9ZlVe4gKvxf2s9/xYOu
p0MuhFHh/8cind981ySWCv/XTy6MvF/DSf296//h/bzwfl64Gi/8mBfezwtv
44X380r7/8D7eeH9vPB+Xng/r/T9aHg/L7yfF9eXvNL3xHF9w4vrbF54Py98
l1f6feG6kBdezgvv54X388L7eaXrC7g7r7R/EbyfV/r7S/tTSf9eeAAvvJ9X
2n8G3s8L7+eF8/HC+3nh8bzS80HaDwHezyv9+dLjI+0bBu/nhffzSvskSO9L
8H5e6f0H3s8L7+eFu/DC+3nh/bzwHl54Py+8n1faX0La90zaPxnezyu97uD9
vPB+Xng/r7T/ElyHF97PC0fkhffzwvt53+f/vPB+Xmk/ang/L7yfV3ofgPfz
wvt54f288H5eeD8vvJ8X3s8r7e8krf9v51N4wSd+Lir8v9uh2dkyNXJS4f+p
L5sbYcVS4f/uz+I8bxVO6vvW/7/P/3nh/bzwfl5p/f9X+9Z8MtxwUuH/pn5n
OR9Lhf9P9skZ893HsVT4f4ei+b6q9SSGCv+3tglrF0t93/p/eD+vdB4i7YcG
7+eVXqfwfl54Py+8nxfezyudj0mfX9L5GLyfF97PC+/nld7/pc9N6XMH3s8r
ndfB+3nh/bzwfl54P6+0HyC8nxfezys9/tLnAryfV1r/L81N++C+37ru65xU
+H/tzBuDM2xwUuH/b9ua+8uGU23/t/3fPuzDPuzDPv6Ew/Z/2///Quv/vesA
I5X1/3w/f3j/uNSnppeoH6us/+f+D+/n/g/v54X389r+b/u/7f+2/9v+b/u/
7f+2//+n/P996/+5/8P7uf/D+7n/w/u5/8P7W08wv+nl+tP8H97PC+/n/g/v
5/4P7+f+D+/n/g/v5/4P7+e1/d/2/7+z///W9f/c/+H93P/h/dz/7fX/tv/b
/m8f9mEf9vEfOCS//62H9f79uaZU+vOFf77ruGbRw77frNRU3+yrgpRaY3LS
qp1mnQ9eUuo9vzildFFUi8oFbvgr/azo2Kajx7iV+nyVqXyxRWp7Wtep55VK
D9v6LbNSxds6W+OVnH+UdX9D7ZIm3T1XdoeUvrROcw8rHZSwt4/fjv1Kq5Vt
ff+odkDtt00v7ul5RmmY5Q0XlU7pOsPcMUBpY/+lnksKP6XeeUEXlHrnI/kp
TepT/eGKV/5Ks76bWjMy4XWlt63z2UiqqULtuwZqY2LKP/nQL5qK8yVpn2ff
eqZAGdSIUq+rz/0gQtvY1LxRZVCnW4MIw7WIcaX9xt/XqU9XF4n3rKm8/3yG
Sa8LlzhkUM2z5+Y35f2upbkD76wH1qBWr/7V/CLt5f2upf23b5hjktcZ1OdD
yrVpcSBc27wj14veUwzqnJcftLg8Olw7anJEY4O6d9vrnONShWtLSrY4dXmf
QbVuo4WFa5GO6NdHDZ1qTm/sWztM61tpW46SQw1q5vTmRhCe69NPW4U+eaZT
MZ9O+nOkv7+0n3mPQiuXjp1hUJM8fPvNw6nh2qj2JqgY1LKePyVb8nDtUOHb
pRO3NKg7H6/6MVGOcC1+1mJ1b5YzqJgHveuH4uOzDTComMtmTjlfGKlTf+lh
TdzVJv40clqea26qNuVYv49ThYqPQ53VuzdfLWlQMX9Z2idWen5K+8NrbV75
xk7RqaeanvjlxBiHtn50z2HXC+rUSd8uarz8TKjmZ30hXqdGPdhY91Q+h7Yo
8DvPJb5B7dkwzYzMRriWpkr9ZrWTG1TM0fuy8cZBE87qVMz1O53/TddeDw3q
qTtnC15oHaF1GVS1WqKlBtV6G1gXrk36KnB3rYoGtdaoAafHxYaJr+thG7/w
y9bOoBa9syReyYLhWv0XHQMTFzaomOc4yXogdaqpdUsHyXMQPs3Va3eybjo1
NGrpqZSVHFrlM/UGt4gfR92fv3X9tSMjxP3w907/unjs9zp1vcVyDq3NsCIp
Nr/QqZjTHdjXlFmDqo9J+XThqDDtnGtz7+WpY6gFVpSZvLttqNY7/QdVPygT
rBRz73lTZPpuYLaLN6jmtNpv4wdqqyKu9Ow8MJqKuZzFFo8+2T6JTjV3E9o1
NVS71iHDueyZDaqjnTkoN0wrfClPmkUXdKp5dzxXgjAtd8fuHTfH6lTMB5d+
XwevVU54tb1B3VbNfKOU57ZIv699sR+1y7lNp27qZe4sI7++pPkp0lwM6f1B
mrNg3TbOplOTtn7ZJ25bqPg8NKdg5+qlU1uGfPNz+VoOcd5N47fH9+Z76KJa
TN46WPtihPmO5qamXPBmedWyIeKfs7xPmwe5qujUwcNGmBMdtS3WwGudOjes
fWtn0jBtyieF93U476bWteYJhmiPxxxI3eGRm4rnbcNzhyf59dapAYUrffFt
XYfW5NbpzwM2uKlRQxvlWH00REv0uqHnKRlNxX2Bg+ZY6KU3qZgTbY2TzBVD
pbnPlnNEUa1tU3yDtO8r3V2f6XoktYl1IzNIG7ZnzKBZg6OomSZ3yZd4V5D4
ujNXNyTzD1RaN9/REVOPByhtZ53o+intmfDM9sTl1N5bVjrngfHXlX5U+0S7
7/b7KfWOcQ2nYn7uBxMfpJ9dL4q6qVmQT+JJQdqL9SdudyzuppbRa1c6cDVY
O3B21ucVKrmpW6057MGapdBfhyh9EHHwgzR1A5QW7lGwwqoN/kpN3b90y0+p
tF9QEev9/rJS73mE2iGuHy7GVQ6n4s//2vqFuqne708Ea+bZQvvyOtWcar3z
hjyno6n58LXUqZjffTFjlztl+upUzCvv3W3t+etpdKp5t375klAtcY3yeZz9
dGqTPGW+O9nEIZ4nPND2RCf60qDmyl/kw0QNwsX5U30iTWg1qOk6/lArqk+4
NvrygO05F+nU8uZp5gqHZphjVjPo1FQp2p7rtCpUc2wpOCrvbDcV89CluQDS
3IR5Oc13CoP6eWTz4KLxI7Qprc1PFINat8moTBF1I8TzSelzVjqflOY6Tctb
NsnRIgYVc8OluQw/RDWYNa6eQT3cuf2Ix7+Eaea7aOuCBtW7bi1MO7Trm8Tu
W27qjjfGoLP1Q8X5R2MsuHZRP8rboHeSVkFap+L3Oj+LiaC+eeOfdkiOAO2l
OS368+tKnywwF6gEKJX2H+u8wPj4XiJ/pd77qBeVvimycM+lzceUprUWMu1V
Kl13L/BLva1Q1HGNV/r7N0idL2fKHg6lGa11VZeVJv90t+cMX+026/3soNIY
83Qu9TKl/r3NG9ZXlJpXJ01+iFBae0D+9GcPXVX6wLi8ZUKnMKXWx18Jt9Jv
rMcjQql/aKCeeeRBpV1jPznaN+g7tZL/m1/jutdVrX3Yh33Yh338OYft/7b/
/w/4P7x/c4EMhfY+c9LP8P7+M7auD2zkpp+lfZ7hgtwJ4f3c/+E93H+k/efh
/dz/pf1OpbkD8H7u/9J+19L+2/By7ufwfu7/8H7u//B+7v+4ruLXWfB+7v9w
bu7e0p8j/f2l/czh/dz/4f3c/+H93P/h/dz/4f3c/+F53Pfg/dz/pccB3s/9
X9onVnp+SvvDw/u5/8P7uf/D+7n/w/u5/8P7uf/D+7n/w/u5/8P7uf/D+7n/
S69reD/3f/gx92R4P/d/aZ9k+DH3ZHg/939pP3w4BHcJeD/3f3g/93+4Ke9v
9X94Py+8f7y5/D67m36G93P/h/dz/4f3c/+H93P/l35f8H7u/9LzX/p9wfu5
/0uvL2l+ijQXQ3p/kOYswPu5/0vPQ3g/939p3g28n/s/vJ/7v/TnwPu5/8P7
uf/D+7n/43nK/R/ez/0f3s/9X5oLAO9Pnmye7/bdbvoZ3s8L7+eF9/PC+3n/
Lv4P7+eF9+8PneZ5a3LRz/B+7v/wfsn/l41vXmfgTPdf1v/x592eeXf2oYmx
9DO8n/s/vJ/7vzSnA97P/R/ez/0f3s/9H97P/V86T4D3c/+X5k/B+7n/w/u5
/8P7uf/D+7n/S3MBpLkJ8H7u//B+7v/S+aT0OSudT0pzneD93P+luQzwfu7/
8H7u//B+7v/S/CN4P/d/eD+v7f+2/9v+bx/2YR/28Tc+bP+3/f9f8H/v3MEQ
KvzfZV2PRlDh/9MzmxsuhVHh/1+YlyWZQ6jw/3K5xw9p2SuWCv/vmdYEQicV
/q+XrNZ5zPRY6u9d/y/t8wAX5IX389J6f1Zp/xl4P6/0fWdp3yF4P6+034W0
/wa8nBfezwvv54X38+K6ihfezwvn5pX+HOnvL+1nAu/nhffzwvt54f288H5e
eB4vvJ9Xehzg/bzS98Sl56e0Pwy8nxfezwvv54X388L7eeH9vPB+Xng/L7yf
V3pdw/t54ce88H5eaZ8E+DEvvJ9X2g8HDsEL7+eF9/NK6/8XVzI3snNR4ZBv
bpzJtu+Ak/p71//D+3nh/bzwfl54P6/0+4L380rPf+n3Be/nlV5f0v5p0r5Y
0vuDtM8SvJ9Xeh7Sen9Wab87eD8vvJ9X+nPg/bzwfl54P6903wrezwvv5/2r
rf+XXncBw/s9m1HSRYX/T9FGJjv/nZMK/x/+dk+8sR1iqfD/j0ubn9yxVPj/
5xkLZ3q4KZYK/79f4xN38SGx1N+7/h/ezwvv54X7c/93rBruP7u3kwr/f3Jz
961mmZ1U+D9cnvu8NC/AGjvleR9E4f+5r251tS0XQ33f+n94Py+8n1fapwve
zwvv54X388L7eaXzBHg/r7T/JLyfF97PC+/nhffzSvsCSfsmwft54f280vmk
9DkrnU9K+zrC+3mlfZng/bzwfl54P6+0/yG8n1da/5+7vjmJI5YK/w9/XuDt
+a5OKvxcmj/i3S8nnGr7v+3/9mEf9mEf9vEnHLb/2/7/b1z/vyG6c5MLnziV
9f9Dv4sXrHWLVdb/n/dcbWSJjFbW/3P/h/dz/4f3c/+H9/NK+yXa/m/7v+3/
tv//r/n/+9b/c4eE93P/h/cftj4AnMr6f17b/23//yv4vzQXAN7PC+83/6kl
8XRl/X/POUsGDtnl+pfX//PXHbyf+z+8n/s/vJ/7P7yf+z+8n/s/vJ/7P7x/
bo6b1Wtcj1XW//P+Vv9/3/4/3P/h/dz/pfX50rwAeD/3f3g/9//3rf+3/d/2
/7+y/0vr/z0fxm2qtXQq6/+5/8PLuf9L80fs9f+2/9v+bx/2YR/28Rc6LKev
qimVDmlesDTnRai/NbBsodKvrM+N80qlfWYODjMHDfsq9c5TuqLU+ppqEx+l
5i4FJVIHK/Veh7mVSv4jPWw1hxt3Dg+foPF67wPsUFog6YikXbftVXqmaqHN
9fKfVJrWmqd6TGnDByPyFHx8SGmfqeak2KNKG3s+zdNXO6O0q+Vzl5QOu1El
TczPvkoLR0/sfDJFoFJzetTCCkFKrf93RIDSp71yHXSuiKAu/ThBry7B/prn
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
eD/3f3g/9394P/d/6e8J7+f+L80LgPdz/5f2JYb3c/+H33PPh/dz/5f+eXg/
939pH29pf354P/d/eD/3f2lOhPQ4w/u5/8P7uf/D+7n/S/vPw/u5/8P7uf/D
+7n/S/sPS/NH/lP+D+9/e+G8T5cvXPQzvJ/7P7yf+z+8n/u/tG82vJ/7P7yf
+z+8n/s/vJ/7P7yf+7+0fz68n/s/vJ/7v7SfM7yf+7/0+QLv5/4P7+f+D+/n
/g/v5/4P7+f+D+/n/i/NrZD2CYf3c/+H91c+ZAqJ2/b/P9n/4f288P5u9WKW
zYzvop/h/aZypU/j+tv5P7yfF97P/R/ez/0f3s/9X5oLIM3LkObmSJ8L0j8v
nSfD+7n/w/u5/8P7uf/D+7n/w/u5/8P7uf9Lc7Lg/dz/4f3c/+H93P/h/Yr/
/8P7uf/D+7n/w/u5/8P7uf/D+7n/w/u5/8P7uf/D+7n/w/u5/8P7eW3/t/3f
9n/7sA/7sI//wsP2f9v/f4X/e+d0hlLh/zlWH2099McwKvx/aK7P33a76qTC
/7VPGxVq3NVFhf+b06vuTXJSf+/6f3g/L65jeOH9vNL3c+H9vNJ+FPB+XngM
L9yaF97PC+/nhffzwvt54f288H5eeD+vtP+G9H1teD8vvJ8X3s8rPW7wfl74
Li+8nxfezwvv54X388L7eeH9vNLfE97PK+0XBO/nlfYlgPfzwu954f280j8P
7+eV9vGQ9ueB9/PC+3mlfaKkxxnezwvv54X380r7z8D7eeH9vPB+Xmn/AWn9
f88cd+7rPd1U+H/qugvfvq3gosL/Rz69/NkKz+ONwv8tvkgdS4X/D3jRPF+X
hS7q+9b/w/t54f288H5ead8MeD8vvJ+X1vuzwvt54f280v458H5eeD+vtJ8D
vJ9X+nyB9/PC+3nh/bzwfl54Py+8n1fat0raJwTezyut/8/dfP/BNKddVPh/
k6g0B6tOdFLh/9WGa/4P3sRS4f/pliyYsjFlLBX+j/0N+T6HvfreHjKnqpMK
/190onbtHkOdVPj/h6Y6/uKkwv8zn2+UqNqXTir8f+uw9DtbX4uhwv/TbDdh
KoYK/49Zfv9nn58dVPj/jOdVOmWa66DC//2sE84YKvzfVPcF52Oof/T6/y1p
sgZ03uqiwv/vDDUFzUmF/z/fkWRZ1raxVPh/ldlVCtb8NJb6Pv/PFFG3w7wj
AVS4XJKiH19ZkDua+r71//B+Xng/L7yfV9oXSNovS9o3T/pckP556TwZ3s8L
7+eF9/PC+3nh/bzwfl5pn0x4Py+8n1fa7wXez0v+zwrv54X388L7eeH9vPB+
Xng/L633Z4X380rr/813x9njnVT4v+fN+NuYyTFU+P82ayPHWKrt/7b/24d9
2Id92Mdf8LD93/b/P2D9fw39dvOxdWOV9f/c/+H93P/h/dz/37f+n9f2f9v/
bf+3/d/2////+n9eeD/3f3g/9394f9+Fjz/7Znissv6f+z+8n/v/+9b/2/5v
+//v8X94Py+8n/s/vJ/7P7yf+z+8n/u/OOfoH97P/R/ez/0f3s/9H97P/R/e
z/0f3s/9H96/vscHBTfFxCjr/60/ZluMsv6f+z+8n/s/vL/e4Bbxm650/svr
/7n/w/u5/8P7uf/D+3+t/8PhhnvOstOOv6Gs/+f+D+/fF3O9U+19Mbb/2/7/
t/J/af2/9baT3qWs/+f+D+/n/g/vt/3f9n/b/+3DPuzDPv7Ch+T//8/+X+b8
VjyZeYpPP7XSP29dDw1S2tBy8e+VSvvDuC1gULsrsuqwiBAfpf4vzW/K71F6
J3uKd5EFg5UerfH96BTz45Ra45AaxSgdVDDy0JfJ1iqVHv4y5llHhS0ab6R1
XrNPqXd+4BGlZw4e9lyhHVQqzfmdWaL+9sK1Dyn1zgE7otTrBBeUXktgLoDy
VZom5NMRn+r+SiUfqJ5ux8MAvwClua3rpEgq7hfEzqveqnS4Tk1wum7KdoXD
NHPaYOuCBhVzskK3FByVd3YMFXPQrmQuetPd7ibVe78pRDwf+6Lcnkp310dR
E32w5HbvG0Fax1rmROqbVJxPNjW1KiqKivPwPgENG3RsG0PFPMRZn1eolNJz
PYnun9k079LVDm2eBQ8xVMwd8+6/EEMtduV2wvoHHVodz6PRbrhOxdzJ0ZcH
bM+5SKdiLpu0v/34daN+Gf3MoFZ2HvdcOkVoBW9dSTG6Uhx1ztAuY++6IsR/
/ocoU94NKuaaSft1JzdZM4tBbb1zefOFmzzXd3FrjJuJDWq3IYnKHpsSJq5n
luYgVPu50YYts3TqsRWdttSf6dAKPM507KMebuqsGc9CulcNof1T+D4qlUJq
XtjY1KDu+cw64Rb3zy+eOtgYO9igYo5ebWtjD4Pq8/P1nSNrRYjzEfJ9l/mj
+XMNqvUwfRMu7q97v9WO8m2P6NTsn5kTDR3aptNZGx/z16kz8/38c9/M8uMs
7bsu/fnJLDcxqC2eVX6ZfX+Y1jHT3DRXVhnUV76xU+btCteMU89DL1aIo6b6
0NpwQFs2M/7dD3Ya1AHWRjrh2qX5xzK0DDGo/ueqzVmXJ0IL8jy6D/rGUa3t
Sxrf0CqfMYUqjop5uykH3tsw5rJBbTf5u60PkkRoZXzK1Xzcw6CuK17aHVUt
XNthDaw3qEt6nvvgcOdwbZ01AFSnTjhcvdHEsmHi/v/S70t6/s8tq837MqNB
NXdTubYmTLvRcVrAt+NiqG3nmL8Jh/a1NWA0hor5gPNzbS/3+ESQ0qLWQE+1
5i4ITSr4K4353nzC+ygNTdamU4+z15Um05ZnO9EjUOls56YEaz+KonrXEQf9
Yx57NPUb8+2+ZIh2Z8L6qFct3dSMG5LnuZ8zRPs21dazzpo6FfMipbknpSY1
7HRiy00q/Nzc3cE3QZDSLN0OFsxTNVCpd85tFNXLbEHa6CYZJ70u7Kaaz6IH
PsFartgk5aeOdFPHfBF++ZceIZr19pTFTTXvImTeGKyVtO4/RFP9rHl8wVqH
C4+mvfshivrzstCKY58HabmsF3I09WT7JLtHbQnW6i6++Pj2yyiq3nPXpl7l
Pf//5u2eFG7qRfP2zJxgbaL7YuSs7U6q1q99rlSXArS68bdNPNfCRb20OVuP
CdmDNGucbQY31dSi5quDNZfnRRO8x0X1/mcFaeYUyLTbXVRTf7JdDNKexc8f
cXdYFHVJUJK5ffYEaXsXrfRtdimSit/LGp+vMpUvFqh0UZS5sZa/0sbWeaWf
0r2nOvTb2sJXac8+x6e+bXNVqbT/Vdak1+8vK31NqfnuMmC72o9jHvavPMRf
6ZXkGasP19RO697c8056RWk7a3DnVaUprfsnF5QO+8Sc4H5JaeRp8wTyulLz
XX/3LX+l1sdcqgCl3nUr/krnNlgXuaR9oNLI8UsutXWrnXvNutOvNO2iC/N+
yn1dqaXHK/2VBsfF9L3U3Uepz/q8E6s1PK60Q7cXO5Isu6S0l/kpfMdBTbk6
XdWdn1zTRoxKXmyNj5NaYkn0kfLvAmhfKr4/1aSIcaX9xutUrCOS3q+sf+y+
TsWc8YBJOdfkaqZTrbfRTA5xjoA0p+m1uc3jNzq14sI2rv6LHNr24eYZjE41
dbvdzw4tsbntTD+divNqz5v00jr7darnZPybSeEOLVPXpsXr1dWpfXuYL6RQ
cT5I725rz19Po1Mx17jVrPxdn9fTqbcPmROdHVrRAwWO1xxlUBclyxDmeW/V
vC8bg9r6ah1zArC2q2ZAyxcJderyAv1S3Bon/17WfJ/8QhJdp2JuuzTfaqd/
ocCvTujUb+tm8bwTOLTUTWttXtxOp3qvGxyaOcU1R7BOtW5P5QrTqq5fOazv
Ap1qjSVf6tBeJ855qmQDg1phX/yYVgnDxXlecfkfed7S3NQ0d3eeH1EsRHtu
Pg0GRFGXlTpydOO2IC08n74q591ApZ5rb3MphFJpH7BLcZWbx7tzXal0fdou
7eLiMy8fUvpbecO/k7kj5S6Nd7P3wlGpNIf642sdMpzLvkVpTWuu+1Slzawe
UOq5eCj5KixAqXTfAfOWeXtZC3j8lFp8n9apVHpfrWmd3w1V+tC6Tl2i1Ds/
eaVSr99MUmsf9mEf9mEff83D9n/b//9C/v+u4qD693Y56Wfp+wLwfu7/8H7u
/7gu4dcp5P0WpLoV//ecdGbycTvpZ3g/r7SeRFqHA+/nhffzwvt54f288H7u
//B+7v/S/vbwe+758H7u/9I/D+/n/i/t1w3v5P4Jh+YuLa1nluYgwPu5/8P7
uf9L+6jD+7n/S/vnw/u5/8P7uf9L8xHg/dz/pf114fHc5+H93P+lx1nad136
8+H93P/h/dz/4f3c/+H93P/h/dz/4f3c/+H93P/h/dz/4f3c/+H93P/h/dz/
pf3/pd+X9PyH93P/h/eneLpwVLsuOv0M7+f9q/k/vJ8X3l/4M/ObOG76Gd7P
/R/ez/1fmnsi7Z8PV54ZE5HqTn3Xe/0f3p8/SbrU0/e56Gd4P/d/eD/3f3g/
9394/4UVH5xNHd9NP8P7O42ZfvvMGRf9DO+vYX78ZXXTz/D+wK6D11e86aKf
4f3c/+H93P/h/dz/4f3c/+H93P/h/dz/4f3FsuZZUmmNi36W7svY/m/7/5/p
//B+Xng/939pPgVcmTuz9H4F7+f+D+/n/i/NEZDmNMH7uf/D+7n/S+fV8H7u
//B+7v/SfBB4P/d/eD/3f3g/9394P/d/eD/3f+n3Au/n/i/Nt4L3c/+H93P/
h/dz/4f3c/+H93P/l+Z5wfu5/8P7eW3/t/3f9n/7sA/7sI//wsP2f9v/f4X/
e+cFhlDh/xf29ExbpX4YFf4fl7VWsqIfO6nwf8wF5PMB4f7c/6X1//B+Xng/
729d/w/35/7/d1n/D+/nhffzSvvbwO954f280j8P7+eV9uuAd/LCoXmleabS
Pkjwfl54P6+0jwq8n1faPwfezwvv55X2R4L380rfr4fH88L7eaXHWdp3Rfrz
4f288H5eeD8vvJ8X3s8L7+eF9/PC+3nh/bzwfl54P6+0/4/0+5Ke//B+3t+6
/r/wSfOJ5KLC/592SJp+6CQX9ff6f8he85Mvlgr/d38W16HbCyf1967/h/fz
wvt5pX3PpPX/cH/u//esD0An9X3r/+H9vPB+Xng/7797/T+8nxfezwvv54X3
88L7eeH9vL91/f+eBf5hqyOcVPh/Uet/cFLh/weuBid91D2WCv/37vcTRoX/
L+r+Mk2CwQ4q/F+af9Hr4TeNvgyIocL/b4SOjnfzpxgq/H/c2gyJ1r+LpcL/
z5fffK+6HkuF/8efMfDqwqkxVPj/3F0rDs+Z4KC+z/9Xtvx8xbW7IVT4f9vO
5hlDLBX+b+2OWNlJhf/HmLexGjup8H9re7VsTir8v2DgVyc+e+ykwv+b9DfP
rFxUONWWJSe3VqvupML/3YHmndBYKvx/1r2f9rTvGkF9n/9bzN3Wnwr/729t
x3OT+r71//B+Xml/KmkfUen9Ct7PC+/nlfYRkvZphPfzwvt5cR7NC+/nhffz
SvuDwft54f288H5eeD8vvJ9X+r3A+3ml/S3h/bzwfl54Py+8nxfezyvt5wnv
55XW/187ncrzzHZR4f+XrcuMWCr8X5oDYvu/7f/2YR/2YR/28Rc6bP+3/f8P
WP+f4SdtT3SiWGX9P/d/eD/3/z96/T+vdJ3ye9f/dy+j1650wKWs/7eu9oa7
lfX/Dms8gUtZ/7+8T5sHuaroyvr/Y49rR/su1pX1/ye3bahUd7r+q9f/2/5v
+7/t///9/g/v54X3H9plTlZxK+v/uf/D+yX/T3y0SJNiMbGK/5f5KOrshJ1R
yvp/7v/wfu7/8H7v/tsuZf0/7x/l/9L++e9b/8/9H97P+0f5P7yfF97PC+/n
hffz/tX8H97PK/1e4P3c/+H93P/h/dz/4f0po8sWLZk9Vln/P/pSsj21V8Uo
6/+5/8P7uf/D+7n/w/u5/8P7uf/D+7n/w/tH9O8wJcl3MYr/17e2YY9W1v+/
mjwirum+m8r6f+7/8H7u//B+7v/wfu7/8H7u/3Ap7v/wfu7/8H7u//D+YfMS
TXyQ3vmr1/+bd9Ey5YpQ1v9z/4f391h6M2epsBjb/23//1v5v7T+3/pphUtZ
/8/9H97P/V+aA2L7v+3/9mEf9mEf9vEXOiSfl+b3SvN/X5lzdHuqtT4Hmqm1
/rzPle6tVbFJwOuFShub/Hv3vNLZ1vqeQKWXGn9U/EVqX6W3Lm+Z0KndWaXu
ZG9HFq/io/Rlwvt+67rfVOr1lTilP2Q8er3P4zCl0sN/ps3EsP1VVmq8efMX
+TBRg+1K/Xsmmr32+DqlWduX75/l7fdKpfsIrSxPOqo06WtzAOVhpR2t9YWH
lHrnWV1R+vBxdMMHI64rtW4HXPFXal2m5ghQOtL8GvVXUdSskeY3ZoPE9fwb
B004e/9hsNLrVX09Z7ABSl/UH3Lk5yJqe5xd98O07mqlfQak77Pn233hRoE9
/krbvi4X2XFagNLRTy9/tqKg2mWL9y1a6euvNLV5GdkmUKl5NdE2bZDSb625
kVHUimPNF57n8YxaeiplpZtUXH89P9PbqLNap5YsuKLM5N3yvvdRJl8uN6g/
F1m459LmcO3H8A7HI50G9YL1PI/QElqDtg0q5vNK+95f/sW84jaomLPm/f6D
m0rzKM3Lxcw6NcXerUvzfReqHbEeQJ26O/Dhhdw75LkDJz9+cehIDYOK1zXu
3/D7OD2tCz2dap3+ZwjT7g5rXaZGkThq5nnDfIafj9Cu3OlT8xs/g4o5wtLj
PyxD2mZb1ulU3PcZtvELv2ztDCrm5PbuZ4pKHBXXFw8875aL9upUzCmW5iNc
zNjlTpm+OvX6tRkff/6pQ9z/tnHSvu2Opjeo1hjJlWHi733XD8XHZxtgUFdk
NyfghYv7+pbL4+xXspNBxXXch+X67U9QL446Jcl3l969i9DWPz215tF8gzrZ
eqGGi/9e56jav0TNNqiJljbpfmh2+D/Wy+pUr5uFifsGS79faU6Es/+itg37
xFAxD9q7L0wMFfNnp29dH9hoVzS18Oivp10w5Dmz5c4vq3KtQ5BSaX+VPo/b
1ch1OlCpd56tj9KcJYf6nRlyQentAm08r6gApdJ+AtkqnRo7bu0NKq6X1x7P
02fku0hqjbnmMy5Ie/1z38zLC8RQaV6etb9DLPVlixnt+9YO0zp/uGFf5UMh
SoMeFc827ZsApde++PHLvR/7K01ZybwTcF2p975xBLXC17VqvRvlr217nXNc
qvZuqneuaIhW3Nz+q0kM1TuGOlSb/PPcQvP1IKWFpvqXnZI+UGmrAkWn/5LX
X+m4ew2XLozzVRpnnQcFKH1hzWWNoOJzR1pvX/GmeSfYRd3VzRqAqsU3l0ek
dVPxPJxtzXOOphYN/mhf/Jhg8fmW86BzRYvnfkqrHfU5+smPV5VatwmuXlM6
TP/6xKrCV5XGG/OsVMOh15SOa15n4MyUV5VK+/mUCH23+ZCvn9JNL+7PnTjM
V6n/0UdRrifXlNbMYP7NrirFvF9e6XFwZmhYMO6Ls0obR8T47F55VemGXwbU
m7HfX6n0z2OeMG+pst97Pln9lErne2WuO+NmTPdXmutF7ynfn1C7KM/Qwlt2
+Cpdv2VWqnhbryg9aLnpRaU5rfNlP6XxBu3wfERcV2pqWEa3g5q+hTl4/pq2
MKD6soNnY6k+c2cXOP/wurYyzPy/dFOHtjIBOkScA/Kj3470Dc64qRdr5jGX
ImiXPe/6/Xrq1OAphudf5dBKPiji+aTXqSsn5vg4/4hQbXb9Ks7j3XWqedYx
sIpDy/jQHACrU7+cmuHIVwPCNId1Pu2mwj/Lz5/74NgmnWrurtb/lEPbkv3S
qKeXdSrmEbcZViTF5hc6FXO9pTkC3u+tuanWtkQDQrSzCc1PIP2f/ce83ZbZ
Rkd/+U6nYu7wvsGzQ+d3Nagbp0enzVYxXEtrLidqrlOt2zhZHVq67Ks8n+Bu
ag/HL8n3bg3RLhTtoE055qZeez7e+TYuRNy3Xzpfks7TzKvdHPEMKuYLVylj
XikZ1IMJdzQ6kjhcm/JJ4X0dzrupdT/OeuH7X0K0NbkPNVhSQqeOjSn/5EO/
UC15snm+23e7qa2sGwYh2tNx4xOmvhlNtU5nsoVo1mVSxmClJTyfeumW+CuV
9k+TPjelubcHW9T1PIXPKt1mPb+OKJWuoz+25u5u03jjNamw4NGtH5VK13He
67MzSr1zcdcr9br+YqVDOmd+lGzTOaV3C+Vd31i7oTSHdX4UqtT6GnhKf6WP
K5Uq9K7YDaXW076U2mvW/cMjSmuaY5pnjVJaptiijD9OXKA0r3V/YKrSmmYy
DFL670Er+7AP+7AP+/iXD9v/bf//C/s/vJ9X2nfU9v//t//D+3ml/Vfhzdyf
pX3v4f3c/+H93P/hvtyBpX3v4f3c/+H93P/h/dz/4f3c/6V91/E65v4vfY8D
3s/9H97P/R8ezH1YevzJ+9l1Jbyf+z+8n/s/vJ/7vzQfAd7P/V/a/xbez/1f
+r3D3bnDS/v6wvu5/8P7uf/D+7n/S/9eeD/3f3g/939p32Dp9yvNiYD3p0+0
/l2yT3X6Gd7PC+/n/bv7v7ReDt4/cViuz992c9HP8P5ii0efbJ9Ep5/h/ZGO
6NdHDf1P8394/+uHPwxIkMBJP8P7uf/D+z9fWdbYWlZX/D+vBequP83/8TlT
4uXQZc1KOOlnab09vJ/7P5533P/h/cOXHyo0rYLb9n/b//8W/g/v54X3c/+H
93P/l+aAwPu5/8P7uf/D+7n/w/u5/8P7uf/D+7n/w/u5/8P7uf/D+7n/S3ME
4P2K///D+7n/w/u5/8P7uf/D+7n/w/u5/8P7uf9L+/ZL50vSeRq8n/s/vJ/7
P7yf+z+8n/s/vJ/7P7x/R+tr2xq2cNv+b/u/7f/2YR/2YR//i4ft/7b//wv+
77kobDbmZigV/u/YOnvI60nhVPj/Pc+jt66Ykwr/j941tU21lk7q713/v79X
RKnX1d1U+H+Da/FLzV7spML/bzQPLhq/g5MK/09nfTHWSYX/S+sepf1svd8n
d1Lh/3N2fnRi3wwnFf5vfZ27nZMK/4e/cIeJ2/btjNUPnVT4//Svi8d+/5mL
+nvX/8ObeaV9b+D9vPB+Xrgvr7TvDbyfF97PC+/nhffzSvuuSK9raY4zvJ8X
3s8LD+aVHn9p3yd4P6/0/WJ4P6+0PxK8n1f6/ju8n1f6vcPdeaXv9Uvf44b3
88L7eaV/L7yfF97PK+0bIP1+pX2i/qj1/9K661dpe/e9PcRFhf9L+95fzDts
7vppkdT3+f99H1Mcgqnw/2DzduEAJxX+L+0n/O9e/5/mtHkF7qbC/xuZzDLX
SYVj1I99M+VGbCwV/p/vTddeD7+Jpb5v/T+8n1da/w/35/7/ZGDC3j5+Tir8
f/aZ0ukShsZS4f8Tv+x/oLcWS4X/t1w8INX+wU7q+9b/S34C7+eV7kNJ6/+X
bG1wP11BFxXPt943Fj/NMjWWCv8f2LHxm9aHY6hwb/8c+X4sVDyMCv/PZr68
2zuov9f/rY+x7GFU+P8d18ojD0fFUuH/jXa1KbsxXywV/r9k9bJ64xLEUuH/
ZcqPurjpYAwV/v/T8WRJiwQ5qL/X/6evmlMmYpGDSp7vOUtKPiqCCv9/0rPl
6VK7Yqj459f3+KDgppgYKvx/1/ELU7SRsVT4v3S+93JpytoXkzqp8P+fijad
H5HfSYX/e/f1CaPC//ea26Bkc1Dh/975qSFU+P/WD/oUvTwtlgr/72JtYBJL
fd/6f3g/L7yfV9oHDN7PC+/nhffzwvt54f280v4n8H5eeD8vvJ9X2kcI3s9L
/s8K7+eF9/PC+3nh/bzwfl5p3x7pfEk6T4P388L7eeH9vPB+Xng/r7T+f/n9
n31+vu6iwv+fV+mUaW4aJxX+L81Psf3f9n/b/+3DPuzDPv4Gh+3/tv//Aev/
AyN6XZ/QIkZZ/5/zbouYGhtjlfX/3P9x/cevB+H9/VZ/9yz/ctevXv/P/R/e
z/0f3s/9H97P/V9a9yjtZwvv5/4P7+f+D+/n/i+tw4T3c/+H93P/h/dbPNbP
paz/57X93/Z/2///fP+H9/PC+0s3Csvs/8qtrP9/cqfTAuNjt7L+n/s/vJ/7
v7S/OvyVeyy8f1dxEzijlPX/n1kwHa2s/+f+L+0nDO8/sf+e+5d9TmX9Py+8
nxfezwvv5/4Pt+D+D+/n/g/v5/7/vvX/vPB+3vft/8P9H97P/R/ez/0f3s/9
X/re2R/l//B+3vet/+f+D+fm/g/vz7p5bdLWL2OU9f/mbvJfzY/5t63/5/4P
7+f+D+/n/g/v5/4P7986LP3O1tdi/uX1/9zz4f1lTK7P7VTW//N/Ht7P/R/e
z/1fOt+D93P/h/dz/4f3131uvlJilfX/SZeP9/ymYpT1/yvN04PWN5X1/9z/
4f3c/+H97tqVDlwNjrH9/7/U/6X1/39X/3/f+n/u//B+7v/S/BTb/23/t/3f
PuzDPuzjv/CQ5gJbn/+d1b407wPUVSvcXziTbd+BHT6DlcaYl1G3tyvNPeTc
Tv9CgUozJU70ylVL7VHrvOyi0r2r9TEpn55VWu3bphf39PRXao1DW+dW6p3X
Gqd0duovNjw95atUepi95xEbNd69I837LVuVlrH85oDSh30Hju/45LBSrzcc
Uup1i9NKB5m8sGO/0g/WrUgz+PAFpdLj3/5hXKkN7YKVWmMlGwUplRzg7eOv
exz+KUjp6IEFRv4wP1Ap5tHxes9Dryu9V23STyOnqc36bmrNyIRqx+8osjVN
1gClpvJlXxWktMFLc0Gl2seffTO86KDrSiWHkfYLkvaj8M67VvvDrRdl0vfx
V4p5nHwu59wNt1M//1yndjBWT9ZLOLTXiXOeKtnAoGIe2fQUFff3ijCojY9X
uHShaIRmbZNyX6dinp207+sPUaYUG1TMES58KU+aRRd06vzyyabkShCmmaqw
MKlBNbUix/QwbUKa/JMTVzeoVc+Zk+XCxLkGq2t0rTt2jUEdlde80xgu7qP7
esQF7fg3OhVz9PI06J2k1WKDOrHs8iEbVoVrXQZVrZZoqUG1nlbrwsW/T657
RyKyrjSoY8ZWzlZ8e7hWdc66PNlrG9QjXjAV5zK0mpW/6/N6OhVz9DB/ms+h
Nt9cvzqhUzHPrvmpy/tKJTKorjydLraZGKZ9Y24XkMqgdjqxxVF7QZiW8OUE
z1PeTa2/+OLj2y9DxH1rMeebz/uW/vzqIzZdufTEoB6fn/7V7I4R4n7+mW9s
b9X7e4PqHXMarpm622xVHPWCOR5v5w3x+YD53HxO90PrhRNHzfuq7MjuOyK0
rzeb37iJoW7Puaj/tiMO7UmKATO2rg9Uutu6Hx6gdNKkcm/7jQ1U+mFD84Zn
kNKNz/IvvzpdbWlrALpa6+WxPFjpla2utuWS+ipN2vpln7htF5ROssYq+yqt
ad4GXuCndHnqlCdOVApUeuB+o9dzzgYrNaey5qgTpDTZcfOJrDax+9a9SV8F
Kp2UKCzok3QBSn9pO6n67oxqtUfvntzp5K9U+u+NtM6DIqnjrgRtfD4zUPO+
jGOoeH2ZU3RbnQlSmjeNOfDUT6l1FzLvVaVlzDGsyS8rrdbySnTLtX5Kr9S+
Pb6q67rSttbndiTV+vha7Pm8bZJx0uvCbirmHWf2f7UrYI6b2s+6ARAiPg+l
58NR6wbiFaWrXw/vVi/motKZJ+PlG/7oilLr9lv2q0qHWS57XqnXj48rldZR
LF934aPkcReVSvvnSPvVtLj74JMu068qlc4TqljudUnprsiqwyJCDiqdbZ2o
XFKKOcm80rqaKi+z78+62U9ph8f78reur7bARxW3Hi53WenBCR8MDR90Ren+
cVUmFJzqrzTY+sVdUbra+iA9r7TF9KeD+nTzUyrtD3nz6PKXO/upNe9+JH0T
QX2yIEPnryv+8z4lv185rUKJjslG6tQGqfPlTNnDob3KkSXDxKU6tdyNF7Ne
rHNoDVqk/KVWXoN6vYE1uFmcK5SyZ7XX7i1uavu+5p3nEHHuwDTr88ZNbfhg
RJ6Cj0O0s0N/1lNcdFPPeW8gata408wG1dHOfOGHifved43RTy6M1Km/eAcl
ax0zzU1zZZVBfeUbO2XernDar43v29bk1unPAza4qeZdrtVHQ8TzvUrWiWgM
NbV3ELv4fPb5NiRgUk5fpedeJTryY0t/pWfWtpk9s4Na733vSCquO8p0XdM1
pEI01bw722JQsPauVt4Hk6+7qdUKJ6/5NkOoeN7oW6XP+fKb3VTPSd+DrqdD
6H4/v+9/z7pvE0WdZ/0HBGnZT/Ro0eGjQKXSvnzNBlwpMauUv9K6Wzt91q2Z
2ibF69Ut2cdPaVfP3+5eor1K41nXYWfVpr75bf4kG9QKR4vLo9v7FD6j8c6c
8Syke9XzSmsGmWfOR5V659keV9rMmj+8VGlwhg3J89w/obSZ9QAGKH0S79TN
dBNilGLOPO+d7CneRRYMVup9X4lV2tE6/72kVHrcalr3kZZqvN45yauVev/3
w5VOshyit9J/lZvswz7swz7s4y9y2P5v+7/t//8z/g/v5/4P7+f+D+/n/g/v
5/4P71f8X9j3Fd7P/R/Xf/x6EN7P/R/ez/1fmmsA3+XeK+2ji+s2fh0H7+f+
D+/n/i/9feD93P/h/dz/pbkM8H7u//B+7v/wSO7/8H7u//B47vPwfu7/0r61
8H7u/9KfD+/n/i/t5w/v5/4P7+f+Lz0f4P3c/+H93P/h/Yequae13aDb/v8/
4v/w/rUZzAEPLvpZen391fwf3m/uapQ+jYt+hvdz/4f3S/5ftmjJ7Ldnumz/
t/3/b+H/8H5e6ftK8H7u//B+7v/wfu7/0lwheD/3f2nuALyf+z+8n/s/vJ/7
v7TvPbyf+z+8n/u/NLcF3s/9Xzrfg/f3fvSkTp1L+p/m/7jOyGV9Uc9FP8P7
Gzbo2HbXWxf9DO/n/i+dN8L7uf9L3/uD92/xXIR03uqy/d/2///rYfu/fdiH
fdiHffyqw/Z/2/9/hf8P+yhvg95JIql4/I9ZG4xEU+H/J2rX7jH0KxcV/i/t
AxxdOHpi55MuKvxfWofT1dqGIIIK/7e+1r09nAr/D218o97pGeFU+H/fkp0G
DG4QToX/R4bVebYoKoIK/3+dvmzXNV2jqPD/rYWisvd0RVLh/x1aO5MuHx9O
xXW9tA9zeD59Vc67EVT4v7Qf9ZIS93/86XgsFf5/Mt+yXnNfxVK5//PC+3nh
/bzwfl54P6/0vW94Py+u/3jh/bzwfl5pXyP4Lq/0PXpct/HC+3nh/bzS3wfe
zwvv55X2ZYL388L7eeGRvPB+Xng8L7yfV/reOryfV/rz4f280n4+8H5eeD+v
9HyA9/PC+3ml9f+ea/J0jkwuKvy/YtOKz+6ec1Lh/+sGHLxWOaGLCv8f1CJ+
05WzXVT4P7yVu+vIHmlCPh3hosL/P6wxudWQztHU3+v/8bKcb5SoWiwVHr53
UMHIQ1/GUuG9Oyt8uKtbrJMK/69csOanjQq5qfD/6g9XvErb20WF//ecs2Tg
kF0uKvy/+/r5Pj++dlLh/3nLJvF8BDmp8P8uHW7cC2/qpNJ9AGsAZiwV/i/9
9/7W9f/m9O/dm11U+H/h/adP95ocS4X/j5/QJ+mxeTFU+L/5rp8saQwV/l/q
R996WfvHUuH/6ScuLdniVCz1fev/4f288H5e6XkoPR/8CiQdkbRrDBX+v9va
fyqECv/PPy/Hzer/h727jo/q2h64jUPR4C5tcXeHE9zd3d3d3d3d3SFAgOCB
AAlxn5nozGTmBHfXN2dP1/q9n7Xe/dL2Vmh79j/fm3u5LbGZM8/Zs1dtA/av
8v8SM7UvfBgW/F92fj6cU0PPq/lh/9qXZxYbsOD/suuEP8r/X4jHmwgsummd
eznq/GDBgv+PEgcfWbDg/2+0Y1Y6WbDg/4PFBYYZC/6frmXU0Yt9zFjwf+2U
o8ONI7Dg/4556uFY8P/SPUOG/dg4FAv+/7pV56HRPSxY8H/ZfKiApYOamqZZ
sd/a/y+bVw7eTwveTwveTys7VxC8n1Z27hB4Py14Py14P63s3BvwflrwflrZ
uW3g/bSy6z3Z/v9i4oAXKxZ+njOuXz13X1oLFvy/TomdxQY8tWDR/2doVyqW
/+vv3P8P3k8ru24E76cF76eV7f8fkbbFJJdYKxb8XzaXZ/GA2TbPKAsW/H+/
OMAwAqv7v+7/uv/rS1/60te/eOn+r/v/b9j/P/T0jqYTVCvb/y9OL34ex/b/
U/+XnTsN3k/9X7YPB7zfnLLCvEnNrf/Y/f/0/H/ZvADZedTg/dT/v7X/X/d/
3f91///j/R+8nxa8n/o/eD/1f/B+6v/g/dT/Zfuuwfup/4P3O2v/uoy2X+3/
9cVc+Bi2/596OPgu9V7wfur/4P3U/8H7qf+D91P/B++n/g/eT/0fvJ/6P3g/
9X/Z5/t79/9T/wfvp/4P3k/9H7yf+j94P/V/8H7q/+D9tL/V/791/g/9eQDv
p/4P3p+26/PmxabFsv3/N3ts22ieY/5u9v+z+bmS8+rB+ysmfPdyHzL/5fv/
qZeC91P/B++n/g/eT/0fvJ/6P3g/9X/w/ovDq6bLltLK9v+LcQFNzWz//wrx
vrAYtv+f+r9sPhR4P/X/b+3/1/3/7/F/8H5a2c8zeD/1f/B+5v+w75/4v+x9
x+D9tH+2/39r/z/1f9lcHvB+6v/6/n/d/3X/15e+9KWv/9CSzAueLZ4HBrBK
5wX/xvsFoy/ezttgx1pW2fPdc/EEGsz64NjticXD7rKKt8363mSVzfFRR99o
GN48ktVLDIy6z7pl5vlaTWZZWJ0eT7hUPMcpVtmX33nkz5lunNum/Nq2brhz
0tZZx1hdcqbeYm12gjWZ8LCLrO/Glu/Y9izvpxXLllz3Ps86X7DLVdZsmXJt
a9ftLmuLzLkTtawUyCo7x6bA+OW752fxZXXMH/Ni3Z0/V92RP99kddIYa/15
1sGbjmS03j7D2tqyb8e+ridZN2svG3acYN2+rGzE2lVXWXe7hF66HOzJGirm
Zd1g7SzmKbmz5hFz8Hhbi7mdHqzu5omTUxf3Y5Wdt9D251vLChWPw9rvt5lW
/26wMr1gvvBOy+zYhIt5pyPLDErzVMM6u2VSsTDvVXbuq+zc+4Fzmtw8P1vF
pj3Y/d7AiSYlQ/WGreumVrG9xLwqo7L+zNv1hxrZsZp6NU5mUNJpLxsyqtiu
YvCbUenUq9T5dkdUrDZsdLenSfrfZyzU7OOzyyq272MhgEq/wls3TFukYlM+
+7zy2TyTsksAox0rft3LGZXCnSesSD5Lxa5oJ4RD+nlVflAj9+sdduxxcV1t
kJ5/m6973+4HLHbs9G4r89SvalQWD7TH7AlRsW20cYV5IpTWYnC2irUoqW7V
emZSUvgv3tGhkIptrkTu3H/dqGRv1j785Ws7dmS1sU6W3kbFbe7m7nWaq1iX
wx/yTE9nUuql7Vyk8wQ71uvylDNHehmk5xIv0caV5Vax7cQLJ6Oy7Mb6NNG+
KrZj4ZdTz6aPUMZVuNx8hVM8VryM3hih+IaNeFhzdjzW2PJA9XETIpUGwqNV
rGNeeYQibvvlj8duFwf1RCj7tf9X9XjskhwuLV0eRCjV3BuMaZs4Hnvm5w4J
j6wRyp39roP3/6xi/R6Vr1T3ilFJI84zMmPFbY0NBmXqg5m7o9+HsE5rNWVq
aL4g1nDtYSVvIGtR8Qf8Wfe3DrmVYnYI66Fjc5/XmcIrxsznDGZ1vL+IV3af
NG3WvaNyenqwyt4XIG7jpglmDdqoTagNYh2Qp5V2IgRrS41Bd/FGi7n3vLL7
ubJzQt713P4xolsAq3t4CZ+WX3jr9jf2T77Un1V27sSkLBOazt4YzBr3w+dJ
JaqHslaMT1ty0EV/1hhb501J3t5lhXmntIOz+Jdxy+vPettxA441lbI555V+
EdjDTjN8qu4MVNqc1S4k4rDw9yw9u3GPKwdjsf5tSmWoZglTOuaKMdZ7HcwK
c5VpHddHAawwF5dWdv5SovoPrJWu3mFNeDLccWvoOVYHk51m1R4tt7x3YXV8
HjdZHXPIvVllc4QL3n6WP5nVn3X5EO0b5Mf66nCtvf2HXGdt7jYsJFNNF15x
3X2NdegUrx9O1fVhhfmftLLrscBBK3r2L+zN+ir7vGLZL91l3SsOVPNjhfnG
tDBXnFa7m7DF4MMamPsnj8IlAlnHzl5m3Z/En7WNNo50jQlrKzF2yJ3NAUp7
8f2MwL5+qEl5kGIVgzit2GRLtGeIYOn8C6WjdiVkx15rdeXrlakGZfbQ4BN1
KqvYOpNHXp9uMSpRhpgPbqodC3PMt3kkz92lgh3ruE0drtQa9uqnCkE2rHj6
zR6O887p3PNprtozsYqtnPZ02tWfjMqQ5vtGz7xhx2aq6dTgzVuD9J8vm3cg
myOwtV23Lb4P7djxCY96a5v/3zk+9Dwfx3YHG7ZStk8XmxUNV05cWT3pZf9I
LDz+dxYDpn1YzU3ajXmf25P1nrhQ5HVcF3izys5hk52fI369E66/oGKMcKfA
X+4DxGAd7w8LVZb1+FrCfWcMtmQZW3RNU6iSNNn6+4MiI7GO/fjBOGebVnsW
yNmCN22dvulHt/FllT3e5t7u1mGcRyBr0X6FKm3b487q+P9dZy2p3R7Id5G1
t3iduoxV9vjcVmyUuM3quH97jrX162rvcp1xYy278fDx+IfHWMW3x8mDVXbu
X8jmhpZPcyNZUzc7cbnEDBNrU+3HLnsIq7YLo5ndzOq4Xx3J6nifyUFW89fT
3qPSb2J9FjikU7sc61kTZf3Yvk3LVbyy/ZwSF/oraUpf+tKXvvT1Jy7d/3X/
1/3/P+P/4P3U/8H7qf+D91P/l537Kjv3Hryf+j+4OHVy8H7q/+D91P+p98PH
sv8evJ/6P3g/9X/wfur/4P3U/2WfF3g/9X/Z+bfg/dT/wfup/4P3U/8H76f+
D95P/R+8n/o/eD/1f9m5xOD91P/B+6n/g/dT/wfvp/4P3k/9H7yf+j94P/V/
8H7q/+D91P/B+2vs3jp+2Gq77v+6//+j/R+8nxb+XtT/wfu1d5vlP2/T/V/3
/3+E/4P304L3d90/fV2/Hlb8GLyf+r9s/gV4P/V/8H7q/+D91P/B+6n/g8dT
nwfvp/4P3k/9H7yf+r/sny+bdyCbIwDeT/1fdp4/eD/1f9nj//fm/+D9tOD9
tOD9tOD9tLr/6/6v+7++9KUvfenrD1u6/+v+/z/4/7Aqh3OXGheOBf93nGNh
woL/2+8enNmjswmr+/+v8//F5oh0DxqGYMH/V2lvu3WyYMH/Zectg/fTgvfT
gvfTyt73LTv3BryfFlycFryfFryflnr/twreTwveTwveTwveTyv7vMD7aWXv
fwfvpwXvpwXvpwXvpwXvpwXvpwXvp5WdSwDeTwveTwveTwveTwveTwveTwve
TwveTwveTyvb/5/w4JFv7M04LPh/3vBOyx63t2LB/ysn2j60QJwJC/7/SviT
CQv+n2zWk0xLG0Rjwf9TiIOKo7Hg//M7aie/RGLB/6u1SfRgl0sU9vf6v2Do
nGFY8P9xebt97uNjxYL/e2lv419txYL/rxUHxVmx4P8Ltbf3b7Bi0YGiM7jW
mGXFgv/bS9XsOXWhBQv+LzsnPF/DJOmmbrdgwf+1U7Oy37Zgwf9HN2pzKNlg
Cxb8X3bu9DaNUZzisOD/sn31pQZrEmrBgv9vFmBmxoL/b/U/d/NJh1gs+P+0
s+m7Pm9uwYL/3zS+vp7kkQX7rf3/svsUsv3/y2osrV7IOQ4L/i+0xGLBgv9r
U9ZXLLNg/2n+/2P54WeSNDBgwf87zjKeqZ7LiAX/fy7OlTFh/27/X95oV9T6
LhFY8P+EX46dtwMMWLgecxxbE44F/+96Kcq6cm84Fvz/tDjXx4j9lv8/vqX9
QIZiwf9LGb22DrlsxoL/N655/FS2SAsW/H96+msLSza0YH/v/n/wflrZ+Vfg
/bTg/bTg/bTg/bTg8bTg/bTg/bTg/bSyf77svCPZOULg/bSy83zA+2ll+/8n
juia8KtmxoL/n9KOp8wZiwX/D4n0udu5SRgW/N+xP8CABf9/Wql/uaa1TFjw
f9n5+X/2/v/jl+7MVSZZsOD/lUO1T8iCBf/fd+1sm1iTGQv+f0+cA2TC6v6v
+7/u//rSl7709R9cuv/r/q/v///u/L+lxlT3I9n+//j0b7qNSBvN9v9T/5ed
t6z7v+7/uv//7/4P3k8L3k/9H7yf+v+39v8XT6edwG1h+//PhM93Wbggju3/
rzA/qmHBuXFs/79jjI6V7f/3vZ5ue8Yacf/z/n86FwC8n/o/eD/1f/B+6v/g
PdT/wfup/4P3U/+XnRMO3k/9H7yf+j94P/V/2bnT4P3U/2X76sH7qf+D91P/
B++n/g/eT/0fvJ/6P3i/GHuUxfo/7/+n/g/eT/0f/Enm/2UrTPbc72r+bv3/
37L//031HlmXZ7Cy/f+Dm9WeuN/bzPb/t198LeFX1Mz2/3d/NS3HDxXNbP//
4rDiA9sXtDD/PzRemwBsZvv/W7wclXTQrRi2/5/6P3g/9X/wfur/4P1dLk66
53rMwvb/0+r+//f6v+zxH7yf+j94P/V/8P4KqeOzR6WPZfv/Fz0odPnAWDPb
/0/nsMjOzwfvn91ee0VpYfv//Y9mauT+KI7t/3/TIN3VH8vb2P7/clsM2yYE
Wtn+f+r/4P3U/8H7qf/LHm91/9f9X/d/felLX/r6Dy3Z/F/Z47/s+eK91v68
U7c3cXrUmnW3cK9FrO88tBfOV1hl76P3Tp2l1gQlkFX2ekeMY9zkwQrzzWhD
hy+se/CdlbXLx03hlaeprOnSdLrZY1s4a6Ijtislrft4Zavy1Wxzbw1XaGd7
Ngsom3cz6+idwx8YFpxjNVfS/n/HWQvWnpNwpXqe9dbz+V8uZ73KKnu9rE3f
Kr7WldUxH+8C6/YOhVbONvFWbJ4yRc+Yy6yzxSDdq6zlxTxkD1bZvLyfTAun
Tqt2l7XyNG1QtQdrweIP339IcYVV9rr7cOHoXP3jXFn7+7n2eDXNjVV2/bk3
zfz4Nz6erI2XTG9Q2s+Ltb24X+HP6vj+mLDdKlVJeOUXiG5I/fC0pWLnPIft
2P0DK2Qpf9sgPd/+/cYxNfd8VbEVgsQEQqV8fuvwUj1U7AHLilrty5iUL1em
Zt9fTcXWynt9bZ17RuX0mKXhq3qr2H0LY5xyVjYpCS/2HviG2bHJcr2quq6A
Ucl5MGnSMk/t2LFPtQtco1JaDOpVsdsnBGoT/pSgjxPvKJdUbJyYM25SqoRp
g9FULMzhtU6u+zV6qYqFebLaFFafLir2cM1aQ1cVNSntck6JGfLFjo0Pu1zA
b4xR6S8GfdqxMNdPNjchclDFKSV3qdg34n6cSekcYKhifmbHaqh7saNRGfU4
xYR9A1Rs/pmGFs7OJsUeot1gUrHwekT2/V3asLr1Ul87tkPZ2kVHVTcoFVZp
gxbt2EM3rM4jrhmUD9qXcaUdC/PsVn/aXKNcBzu2l8ao+Q2KNkR07xoVmyj2
aSpls0lpKXxHxUYtOTLU87NJaRUz/mTWifHY2F5n3Qv2iVQ+PS8wJOqdiq26
KE3lMwMjFFPaBc2fH1CxL66EfIp0NymHNvy0N1vFeOxKMfctQhG3wfKp2Lbi
daJR8dP4NIOKjUzfqs6BdUZFjGf1sWPTlNAmFRuVpuX7JOl2yoyt4AApnFtL
C3POaZ910uTdl9VxX+UC6yftaeaNB+sj7cfA/y6r4/vPm6PfzFwhRX1ZZfty
C+6blvCr5cEaWKTKgI31L7AuH9dr2sM4b1bZ87jM2aqan42oNjaQNSrh0TXL
iQDWtOL6IpA1xZCVHj0TBbHmFfdXA1kThe3vNm+4L6vzySlpVm3yZ5Wdb/PT
iTuRBU/xZvRJdHfVxRDWJWM2LKzyJpA1mU+Xk57OAaxFH6xPVKrQXVbHfVEv
VtlcQplLi6mUdwJZHc8rQaz+7mM3PiwXyJqs8A+RSaoHsMrOI3LM9/Zmlb0/
zjHv9BzrcfH+w9Osbo3fF/a85MrquG9wntVV7Ke4yiqeFp/cZG0sYNmLtXml
1c/vrfNhdfiQB6tT2Y97F8a4sD4bNmpG95fnWR37CFxY50daih0ef4b1ndiY
7MEq288A85lpM7XVbkD7sjr87y5rni4VRmT/fI3VpcrD3VkDbrHK5iMHtnub
9LE/77SEq6McLyOxubNnnrWhVLASW+Hlj/7hEViYAy57X5Jgtew2bO2Uvepl
2xeqnNymTWS3YXdEePfvOSpcEay/2Y4tI94fY1CStys9vsJlG7ZZk8LNez8M
U7QpnHmm27HiuJ8RBqXj+KJpDry1Yx8tyzW1Xn+jMvRKixepf7Bjs+QZ0DjD
onAl98LOKRrPtGEnnpo6esmYMGXT4sQPkx1TsWKcvI9JcV930Pqiivp/9c5W
LNZmVM4dX5nCds+GPfpJ7IRSbl88dfX1GDtW/PHOBmXB6sjF9Ufbsc1uzZ4w
t4NBGaBtu8lmx6Zx0Z6JwxXjmuI/B9SwY5/fyXd006Nw5aGpVepKLWzYHJ2G
TO6XIUxpMb/4dNdxUdiEJ2eNvpVN606v3eoXyCo7h2r13pYJl2A3WWXzXh3P
DzdYHfsLvFmLFtjdXIn0ZxXbAI4FspYNsMYvWsgre75rPKvc5rF7fFjFbeIm
vI79C96sw7WHiWz+rKHx5mFefW+x3hM/+IdYHfcnr7KKhyenI6y7xX2MvayO
+1FerDL/F9uZfjjJKpsvHCW2HVxhTSzmEgexxuXv4dlxlpH1oE+pJ0UfhLLK
ztm79uBGoTsdIljX97+Z7HxPE6vbvsPtkrjeYnXsi9zLWkA8P+9knS3+97Gs
zuJ5YDSr1HP0pS996Utf/+6l+7/u/7r//+v8H7yfVrZ/GDyY+rDsfHvwfur/
4P3U/8H7qf+D91P/B++n/g/eT/0fvJ/6P3g/9X/wfur/4P3U/8H7qf+D91P/
B++n/i+bmwDeT/0fvJ/6P3g/9X/wfur/su8veD/1f/B+6v/g/dT/wfup/4P3
U/8H76f+D95P/R+8n/o/eD/1f/B+6v/g/dT/wfup/4P3U/8H75+ivd1/rV33
f93/df/X/V/3/+/E/8H7acH7aWXvSwLvp/4P3k/9H7yf+j94P/V/8H7q/+D9
1P/B+6n/g/dT/wfvZ/7/i/dT/wfvp/4P3k/9H7yf+j94P/V/8H7q/+D91P/B
+2l1/9f9X/d/3f/1pS996Utfv3Pp/q/7v+7/343/l6sYfWPmsTAs+H+/Pa+u
7XgeiwX/dy2sTWSzYL+1/182PxQ8mFZ2vg14Py14Py14Py14Py14Py14Py14
Py14Py14Py14Py14Py14Py14P63s3CTwflrwflrwflrZ+5Fl31/wflrwflrw
flrwflrwflrwflrwflrwflrwflrwflrwflrwflrwflrZ/v9qhZybNSlsw4L/
e4oDNKKw4P8OnzNi/y3+X+ied5opVQxY8H/ZefgwX5PO2Zy+M3Py3V8sWPCQ
7JVeLfRysWDB/4cnPJuvOx2BBf8fIM57i8CC/z8t1mpVxM9WLPj/7n7JCu03
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
tOD9tOD9tOD9tOD9tOD9tOD9tOD9tOD9tLLzAWTn4YD304L308q+nuD9tOD9
tOD9tOD9tOD9tOD9tOD9tOD9tOD9tOD9tOD9tOD9tLL9/x3FsQVxWPD/wRqj
r4vGgv9nj9IOGorE/lf9322eBuyRWPD/5OLcBRMW/L9vwwZr+74zYP9o//9R
PB4bseD/Xl++bE1e2IIF/++6f/q6fj2sWPB/uC9L788ejRgzq/A9Kxb831a3
ylmfUDMW3CYyfEqi2KdmLPh/zh97lmzTxYAF/796eE+V+gvDsOD/+RpqIGPB
gv9/eHZ5ZJIkViz4v3ZKXs4SFiz4f7NN3aLahFqw4Pyy/36VWvVRcicLFvy/
3qEeCd8JI/bv9n/tFIV870Kx4P+O+74GLPj/7YSr0+xR4Vjw/yoNHjYquykM
+1f5v/Zvyb4lCAvefsJlWti8ZqFY8P+dK3vdLTA+FPtX+f+l4E0W9adQLPh/
bJ7SRq+tFiz4v+y895AON97tvmLBfmv/P3g/rew+LHg/LXg/LXg/LXg/LXg/
LXg/7Z+9/x+8nxa8nxa8nxa8nxa8nxa8n1a2//98xiXmiHRWLPj/hM+nEk3r
asGC/0/YkivhEdKE/aP9f3X8DjU2RTgW/H+IeF1iwoL/a89WeVqZseD/cG4d
Pb8uR4H35Sb1tWLB/4edSdKgVbQBC/4/pFO7HFlsBqzu/7r/6/6vL33pS1/6
+ubS/V/3/z9x///LsL41NjyIYvv/r1RZezm6kYXt/y+2Q5ssYGX7/6n/g/dT
/wfvZ/7/i/c7FVQTZb9t+Z/3/w/RuGlnJNv/T/1fdi607Hxs8P6ZS3K4tHSx
sv3/tLr/6/6v+/+f5//g/bTg/dT/wfv7a2/HOR6n7///m/b/u82p0HdQBwvz
/0r9yzWtldHK9v+7P36WpX11C9v/T/0fvJ/6v+z9WeD91P/Baaj/g/dT///W
/v+8hisLPJvFsv3/1P/B+6n/g/dT/6feT/f70/8evJ/6P3h/kPblSW352/3/
9+7/Fxzd2vzd7/9Pq13WZoxh+/8/X5mafX+1mL98/38ucfB2NNv/T/1fdt47
eD/1/2/t//+n+j94Py14Py14Py14P+335v/g/bTg/dT/0fuJ/4P3PxADoCx/
+f7/AbNtnlFLLGz/P/V/2fwa3O9P/B+83/FjbNb3/+v+r/u/vvSlL33p69vr
t875la3J2vzeTgqr7D6C5H7B7DDtBeMMVpgPRnv5S6fZtU6Esi7snKLxTF8/
1igBlTdY01bJ3se10HVWocofglj9HvpVH3w7jtUx71dlDde42zeM1eEBZ1hl
X2bnja08T/XfrdCW3Xj4ePzDY6yyuW85xNfvJOvwwxcSXlrdZHUWB8Nc4xU3
XC6zyuYpO5wpkPXNwLyu1i3BrF7Fr1fr7hLE+i7pY/9dfQNYe67WgCGQNdFo
TeoDWJ+9iGn8ZCLvvYe5R78778sqm4u33KiJlRdrgbbZT90/F8jq+LpGYOE6
X4w3zhuJjb97cGaPzkHS81Fl564f7T29dcx4FQtzpmTnq29anPhhsmMqFubE
lb1V3vlFPxW7q0QZW3RNkzK/QLmUbkVVbBNx4WtUZuya/HXKaxVbzXqp7+Ne
EcrYxuf3xPRUsQUragNTTYrhx9l76r6yY5+o2iec8DqybdqvdQqo2ADHQT3K
iLWdGg8ermJzeU1+dbeFSYkvvadz+xkqNr14fSH/vI5fLjEj50gVK7aFtTEp
NZbtyp+rroq9cDHVvlLvjUq/wpr4qNiUzz6vfDbPpPiGjXhYc3Y81tjyQPVx
EyIVt7mbu9dprmJdtON70pkU7VXAmig79mu/DRp1KAeOapNHVeyyd8na3p1i
Uu4vab1g1UQVm/nC0JE5+pqkcwo+RxXKsuxoPLZGj6zLM3hHKj0Trbk0uUU8
9tO+h8YHGSKVuiWTFlRUFXvrY8CxSXUipOf6Fvx8u7f3AhW7eIcY4K2snvSy
f7vrKrb3Wk28TNK5A3vFoD07dkHz5wfSnw1XFj9cem7WEDu29dRY/3eNDMrG
dNoEYjt2xLXs8dfehCt3xRdQxQbvXbPS7aRR+nlpU1WLV4vHpr6T0t4iPkJp
+LZ7cIoiKtZ3zbxUKT2MiqagqyuqWG2KW64Yo1Ji3ZSrXVJasG/eGkqWbWJU
fmzsm7j00hDWvpambsNCgllhzi2te43CBxr87Mcqe128+vPnSmman2E1i+ft
/axFV9lDnpc4wpqoc8LTZ5bTrDYxN/si6+I1zvPyDTrD6iUc9wRrgcd5wl6s
Pssqm7cuu49gtnXelOTtRdZXh2vt7T/kOut+ccPxJqu4LNjhxeoWoN2Z9mN9
8qnYmyN7fVlhLi5tdrXLp0+BvLJzS7S7Reur+LF6Na9Y4m16Xpj3SFtf7Au4
zSo7L0I8Da31ZnXM5b7LemZ69ZmF5gWyyp6vb75PfsGjXSBrYMIv9+mwANbt
z4q7LnH1ZtWmPd9N7crqmH94klV2vo02rHvbhEBW2bkisnM8xF342b6sR080
V18P9GOVXT+I25BbvFkT3dfg9w6r43rBndUxv9SXNanYzxLEKjuXSVaHe91k
NQferLls1ynWguJx5SKvto2m0x3Wsst7fC3h7s8q+zkRuwLCorDNTxYo3Mkp
REn004TnW3vGYZ3jzzYsUz5Eebv7yv3uJWzYsnZxo03JmGtbu25bbNh+hq+p
XQ6FKZbP8WGXC9ixSXdtyTDmfLjyxn2QWm+7HQv7ggqNGG3t6GfHLp1xtOih
DPI5SgkXBwl/41jsp0zleu/oHaZUa5PowS6XKKwYf/swWBFjwjOHsHb6UD6q
+/wg1nvXuwXtKRmFdTw+Bys/iHm8MVjHPpZQ5amYxxuDXS38MOyXub6x2Icb
BhT5uipMGVc0zYG3j21YbTrtvdbhSqYNr6fPSKpiHfedjdLrq+GH2u64eMmO
Fdt6Hsjn71R+0/pq/wtRWINnpVGW58E4/5l2o3gd6ccqexyemij2aSrFi3Vx
yYZHitQ9x+q4v3eBNZ94fvNg/TLPOSrprrusBQNq+F1P58sqm6NdfVDvaj6v
vVi1B+Nyc2+yOq4jrrI69ltdk3Qn6+AWqYZ1dtvLKpvDLnv93lzMwb7NKrue
cbzuPMkqO9dOdr/J1XA/4aVRIKvscSZ5svX3B0WGsDpeX5pZHZeD4azzhdN7
sT5LV3V6t5XbWZ3EBpJdrM4/BLZd+8M8Vt359aUvfelLX79q6f6v+7/u/3+5
/8vO+QTvb7duZLozY6z4sex8VNm56+D91P9l56uDi1MnB++n/g/eT/0fvJ/6
P3g/9X/wfur/4P3U/8H7qf+D91P/l31e4P3U/+H1KH19Ct5P/R+8n/o/eD/1
f/B+6v/g/dT/wfup/8vmFID3U/8H76f+Dy5OnVx2ri94P/V/8H7q/7K5A+D9
1P/B+6n/g/dT/wfvp/4v+7zA+6n/g/dT/wfvp/4P3t+t+KL+uR/Ydf/X/V/3
f93/df//i/0fvJ8WvJ/6P3g/9X/wfur/4P3U/8H7qf+D91P/l81RAu+PuVDh
S9AEG34M3k/7W/0fvJ8WvL+ipuYVbPgxeL+4XOliw4/B+zu897PMXWHDj8H7
qf+D91P/l11fgfdT/5fN3wHvb5bpfPLxteN0/9f9X/d/3f/1pS996Utfv3bp
/q/7/5/g/+JlTw4TFvz/c7Nh22p9tGDB/8VfK1McFvzfw+PD0NM7rFjwhJ6j
wuuU2GnBgv+vmrhy6BQvCxb8v5e39sZJCxb8P8/Dtuba+yxY8P+uxbSTI8xY
8P8M53ZP6T8+Fguv35M3ibszaVUsFvx/tOFgockFrNjfu/9f9v5o2bkr4P20
svNVwMVpwftpwftpwftpwftpwftpwftpwftpwftpZZ8XeD8tvB6lBe+nBe+n
Be+nBe+nBe+nBe+nlZ1TBN5PC95PCy5OK3tfP3g/LXg/rezcIfB+WvB+WvB+
WvB+WtnnBd5PC95PC95PK9v/P7pt4lZbl8Zhwf/F7YYycVjw/37i/d9RWN3/
v2//33bigE+pJ2Ys+L/4sKgVC/4/TPwAWLHg/7Jzy9NXs3QYnNmCBf+/1f5c
3JfmRuzv9X/ZedFN82gHsZix4P/hq28XfV3fjAX/vygONrRiwf9lz9cJT9LF
Bjy1YMH/Hf+7CftH+7/sfPtsCVd3+WtEYPE+gORccTi/g57j0TN2tscFuxkL
/u/d5aSnc34LFvzfZeGCEpaTYVi4fjjbfdWc2pkMWPD/2L1Vj8wuEoYF/3ec
DxKMBf/XTg30SWTBgv/3Obc0Z9YmViz4v2wuw/WdHZcu7mrE/tH+/yLhWaDr
81As+P+wNS9arJxgwYL/ry/52OPpJQv2W/v/wftpwftpwftpwftpZeeCgvfT
ys5R/K37/2+f/Jq1d6s4LPj/smMVr5xeZMX+Vfv/wftpwftpZddX4P20svP3
ZPv/2yfNuar2RQsW/P+2GNRswYL/N5wxaN+1sybsX+X/vUbXqJl8QzgW/P95
1osV+/kasOD/r7VPs304Vvd/3f91/9eXvvSlL3397qX7v+7/f+L+/1HioGIL
2/9P/R+8n/o/+AH1BNzvT/wfvJ/6P3g/9X/wfur/4P3U/+H1OvV/8H7q/+D9
1P9l53yC99Pq/q/7v+7/34//g/fTgvdT/wfvp/4P3m99UaV04S9W3f+/c/8H
76f+D95P/R+8n/q/7Nxy8H7q/+D9a+vcy1HnB8uftv+f+j94P/V/8H7q/7Ln
a/B+6v9/9/5/7RTtNomsbP8/9X/ZOd7g/dT/wfup///R+//viHmvUWz/P/V/
8H7q/7K5DH/V/v+2R/y7R5+PYfv/qf/DzwX1/2/t///e/f9b+/99r6fbnrFG
HNv/T/0fvJ/6P3h/wUmXV2V6b/3V+/9pwftp/y7/B++nBe+n/g/eT/1f9jis
7//X/V/3f33pS1/60td/bknvC0gq9f//7/sIjnm2fVllf95pTq+fUhxfxyp7
3SR7XSCmA6+4w1oxPm3JQRevsa6f+lN7yz4/1g97frRV/snCmnzWk0xLG9hZ
74gBjhGsYkxRDgOrbH6c9NtVs0hq58/7FNo827VBsi6su8UcM1dW2etomcPk
W/zTx4/D7rAWyLD2zoqn/ryS83Cuu543nd0Vhe21cNuyshHBv3zesdjWX+cf
CI8OU4KfaRuUbFjb/E57WuwPU7KIAaCx2HOD9/98skS4slO8zo7FKnM1uQhX
BmRKViNZ2ShsCtu9R7OHBisTBQgHscJcR1rH/CgTNkp8IgGKNrW4+NoorGPe
dLDSuf2M9NcW2rDPxMaqMOXDxDvKpZV2bOU1HeNGrDUoRyZMOlDGw45dI+Yh
GpQvYm6fiq2V9/raOveMytWqb89dqK1iL2fRBMuoFPHKn/CdsGO16ZV5kyS8
PttYP3uqADtWXE5mNirNNmsTkVWsIaRpxjZpIhRxe+WHeGxJd22jYIQyaHjL
EQPKx2MdY2zl58nX/Nhkz8EldizMI+6xQPvM7dgPJyovPFhDfv68rV+jo8tr
xmO1VyOZnkQoX5oHbsj+QsXWqjV0VdEuEUqOyl3m7D2kYmHe7vJyyoohWVSs
wwONSvGftRdidqx29b/ulUHxa5BjxF1PFRtR+kOt5ckilMUD7TF7QlRsG238
Wp4IJX+jQSnbr1OxMKdY9vWU/XnHvjEV63j9aFI69Sp1vt0RFfu0T8HA3Z4m
RbzsXaJiYV7h4eR+P++bpmJXn+x3TBluUoZVOZy71DgVmy2TdjCCSSmRPlSd
NkbFwrzd7bV715+2Q8VOLrD00dNT8nkT827PiZheRsXCPMG+559mfqrEY5M7
HVlmeBUh/bl13Ea1Y5PlelV1XQGj8nxrzzR1+qrYn0zaBFOT0sfnwWDnlSoW
5lY7xhOq2FZZ7a8S/xyhNBx74WPRNfFYv0VVuzXbFKmkrF0hv3W4BXuqRbNn
zllMSmDunzwKlwhklZ1/sqFqkoG9Qnllc2ydtbHEm3jdKvbzbdXPm9Uofh4v
sc7v2+Z1tXe8srmHsjmegT3qnj784bik21mdxBzC46yjxf3Mc6wO57jIKrtv
nqPKtWnTd55lbSzmBp9klXny5vRpr1ypcpPVaWCKp5vX32FdMmbDwipvAlll
c+SbV1r9/N46H1aYr0srO3dINk/ZMafxGmuet4Pmnrzizur4/b7LKvOQ6Y8a
b1gT78fq1P1ynejBd1kd1wverNpd4C0GH9ZXqzP3XFD5BqubmMu6hzWTGDTv
zlq3v7F/8qX+rOE/dOzR70YAq+O6z5+1pthnEchadMHWwpUT+bJ6abcVHgSw
yu6/JHxz8hVc4cMq+/vL7k81vL5ojfM8f1bb6uH1rl71ZZWdt3Nv4Y8bE68N
YF18VTtRx5u1e4lHPV+bb7IeLhydq3+cK6vjvuIN1qXpB+x5dc2PNWRikPZU
xrq8VvsyplLR2FIZtBtnIUqHmePcev8ch32wS1z4KQcz5AjqeSgOu0I8EIco
YZW1O+h27EMn99Y/fghX4sTloB2bYsK+Af45jUrjm+dn+w+yY7Up0RvrG5RZ
s/ySrJtvx9be239I/pkGxTvWbfO7Y2YsXNc1cxsWkqlmIKt296PY6ABW2e9j
41zaA50/a5mnK2wj3waxFomZ1fNqmmBW2fOR7DpZbCPoFoNN+KHavnxDqDJq
7PFmcz7asI7XBeFKwpNJ7tc77Njjk7TXiQZliTYmObeKbdf6fsGOx4zKzAw/
z0lRS8XWuJkh4RHXqGyv4LLdPtWGnZy6+I5bQ8OUpMJlI7GO+7zByjFV+wHm
LRtgjV+0MJBV9rjtuC/ty+ratn7oXPUGq+P7c4r1uPj332QdLhydN0thl9fe
ZzxYXao83J014Bar7P64a5x2JXyBNUq8znZldezLG806+F66NX3WnWOVfd18
xxjTFGjryVr29qbqvl3PsnqJ18dHWR2vF91ZHeOrDayDt4xLsfFsFGuvhKvC
9KODWOHnlDbPtVKN0v8Uxeq4PopkbX+99PFUn26yFvi56I/JGx1hdRG/B5tY
V/unT3jI3Mr6V1KQvvSlL33p6z+0dP/X/f8v9H/wflrw/lQno3ePdLXhx+D9
1P/B+7Vd510jbfgxeP+sp5Pm5/e14cfwOob2t/o/eD8teP/a5hqgx+HH4P3U
/+F1IfV/8H7q/+D91P/B+6n/g5tSRwXvp/4P3k/9H3yaejV4P/V/2Xny4P3U
/8H7qf/Lzp8H76f+D95P/R+8n/o/eD/1f/B+6v/g/dT/wfup/4PfU8+XfT1l
fx68n/o/eD/1f/B+6v/g/dT/wfup/4P3U/8H76f+L5s3Ad5P/R+8n/q/7OcW
vJ/6P3g/9X/wfur/4P3U/8H7qf+D91cJc76zr5Wq+7/u/7r/6/6v+/9f7P/g
/bTg/dT/wfup/4P3U/8H76f+D95P/R+8n/q/7Lrun+L/cF3cd/eqWx4frPgx
eH/idBoM2/BjcFPq/+D91P/B+6n/g/dT/wfvp/4P3l9OvJ3Hqvu/7v+6/+tL
X/rSl7709WuX7v+6//8P/v+0Uv9yTWuZsOD/svPwf+v+f/B+2j9q/3/uaYd7
nulmxYL/d90/fV2/Hlbs793/D95PC68LacH7acH7acH7acFNacH7acH7acGn
acH7aWXnyYD304L308rOnwHvpwXvpwXvpwXvpwXvpwXvpwXvpwW/p5V9PWV/
HryfFryfFryfFryfFryfFryfFryfVnbeFHg/LXg/reznFryfFryfFryfFryf
FryfVrb/v3HN46eyRVqw4P+y88+PigNXrFjwlrFx2skkJqzu/9+H/w/qs/N2
QIYwLPh/wXhtorQVC/5/IuvEU1NHW7DgIWdrzFo646gZC/6v/ZTmLGHBgv+L
4wOyGbF/tP877vOFY8H/Zefzzxoy4uwgxYIF/++ffOnOS/nNWPD/I8+C/NuU
MmD/aP8fcmfzrjsVg7Hg/3N6L0q0MLUJC34e5qKdZGHBgv+XEgcoWbDg/zPf
3ywX+daCBf8/GnDDsPq2GQv+3/bwkL5J3S1Y8P+Bz1Y2GRJkxoL/j890rIPv
YTMW/H90ozaHkg22YOHv37KvdpCPBQv+Xz7fjLHtBlqw4P9b2r7Z+eKVGQv+
LztvP9fqfWeTHrVgwf9/XpE7tlZtA/b3+n+vrpGPTK2CseD/ScaOn+hcyYIF
/797P2lDV4MF+639/+D9tOD9tOD9tOD9tOD9tOD9tLL9/wtSB11YHmfBgv9H
35h5bMUeCxb8XzYH4bk46MyCBf9/V6ive/UbViz4/7i83T738bFiwf9lz0e/
df+/zFHB+2nB+2nB+2nB+2ll+//P74np2fKOFQv+/25D2rqeqaxY8H/Z4/ZY
7Vituwas7v+6/+v+ry996Utf+vrXLN3/df//A/b/Fzlz/frAORa2/5/6P3j/
quf31m0rH8f2/9PK/B+8n/Zb+//pvibwfur/4P3U/8H7O/X0ujzljIXt/6fV
/V/3f93//7n+D95P+639/9T/wVeot4D331/8cOm5WRbd/78T/wfv91x1MXO7
sBi2/5/6P/gHdSTwfur/4P3U/2VzB/6q/f/UG8H7qf+D91P/B+9fIAbzmP/y
/f/Uz8H7qf+D91P/B++n/g/eT/0fvJ/6P3g/9X/wfur/sr8/eD/1f/B+6v/g
/dT/Zeftg/dT//+j9/9f18YxZI1i+/+p/4P3U///1v7/78X/v7X/n/o/eD/1
f9nvI3g/9X/wfur/4P3U/2XPR9/a/0/7d/k/eD8teD/1f/B+6v+yx23w/vvi
/2DW/V/3f93/9aUvfelLX/+e9UfNBZb9c8S8yma84vqiN+ts8b8PY3XMuzvG
eujY3Od1poSwThmlTcIKZs0i5mreZa1YQDt4w4P1+Ig3j4os8Gbt0P3Lndu3
YlmPflJH32iosm4QL+DsrLJ5YTnE/EAX1tliTtcE1vo7Mu0+UPAsq+P+AK/j
uuYKa7Ky7RdfG8C7Uuy7us063r7gyrYiPqyPNpXJc3ZGAGt0u535zjWKwjrm
VQUrIZE+dzs3sWPju2p3SAzKk1Ndeq91sWPhek92HvimxYkfJjumYmEOrBhz
uNWOPSEOFDIoE+ddCiofb8OWPFo7Za964crNuAODNqe3YR37+kOV5iucymw8
bMMarz64UehOmHIssHDw0Ct2rDhe57FBWbn8ycX96VRsjysHDXVXG5XMsz8U
KXlOxQ7ad+1sm1iT9M/3NtuvromyY2GebHzpPZ3bz1CxMA93vsvCBSUsKrZJ
MsPI1lUilCRJtVeGKrbBkSJ1s9aOkP5zZP/eyfdzHkyaNB5bbuLnU4mmRSir
J73s3+66ioX5sNNcx7X3qadiK6c9nXb1J6Oi/XbnTqRiBxbtv7TMBKMSdidw
fMqPduyDssMSXiEZlQ8ptJ9UFVvpdGJz+6QmZcTaTo0HD1exMC9Ydk7++lJt
r909rWKHfBlhXm40KcXOFrzkPFnFajdHpg4wKaa02uRaFfviSsinSHeTYp1c
92v0UhWbXPxim5R3u6/c717CjF2jsdaacCWbmHcXiz3vob0CDleGZ/+cr2ES
OzZnsMeeBVPCpef2b4lzye68X8WOG1pi3ZSrJqV1y/xl915VsRYl1a1az+Q/
D7K5BrK5AKMeazKiYvPPNLRwdjYpM3ZN/jrltYqFedCFO09YkXyWil3RznVm
snEm6c9Pk1oZjz4LUrEO54yQzhHY2q7bFt+Hduz4prM3rm1uVBasjlxcf7Qd
K267dTAoR3tPbx0zXsXCvOyTB8sW9cofj3XMIY1QJne5VWR1UxVbrmPbszlT
m5SM4n5yDPbM2q1+rb1ClfWdT/Rt2CCYNSpX/7gsJwJYYQ457aq9LX8IbBvM
GiluZASxGqs2eNiorCerzBnqH+rRok9rd1bZfMDWr6u9y3XGjdeyb8e+ridZ
HZx0jLW3mJvnwvpObHg/yCp7HZ2q2YnLJWZcZJW5d4592oTU66yNxf1JN1aH
g15ndfx+eLPO3nvoScoIP9bddbQ7WLyOr4cP672GPtsruPiyOr11H6TW470n
5sbfYG1fsNjCrwVcWLtXqpLwyOvOmmjq69KNx/myypznlhis6cf66sziVgU2
+LJO77YyT/2qXqzLrfuT7Kx4jtV4aOnYD7NPs97aXWBWzcberLI5to8E5N5l
3f/28fJZ4/1YtbvS2ZtFYT9PKlF9/YJgxeVa1+GH2vqxPuukTWz1Zc3Rb2au
kKK8snOTFp89N/7ibT9W7TS+ll8CWEuXO5lwBePPCvOZabW7q11TBbOWrPF+
1vEXPqyO8ZnerOLbud2TdfTTwCGd2rmxOr6uV1nFs8Bob9aZjd7d8DX7sS5K
u+24c1AkFhx758pedwuMt2FniLnPYUrlrur2OXYb9kSnjTs+KeHKywc9Eh5x
bNgiUxbMv6OGKn7VB9+ucMCGjcghJnsrL1L/sMLviB3788XIGeu9DIr2bNsl
pQULc+H3tw65lWJ2CKtsDuyZnzs03DnJm7V/UvcjKcr7sybz0QZNB7C2Xfhq
9OA+/qyOuam8GcKaTWxmD2S9IO6zBbHKzskcsOlIRuvtCGyKISs9eiYKUqoV
cm7WpLANe/Zxkw/LboQq93Y2izDfsmOdLL1zXP5iUNJpY6ozqlhx+b/JKJ3/
dfbGkm6Vqtiwh8T9plAlf5x2hyYG63ifcaiyO3+uuiN/DmZNVviHhKfQANad
amwK/8V+rN6H4jqVT8XruD95g7Vi8bVZPGa5sPbO3jHZzCVurGm3Z6xxrOkV
Vtk83ETi9esUVpknX/nSaXatE66sZcdXuNx8hQvr2bHaL3II65q5+9LetwSy
3suV5ktUIVfWHOJ69jzrlS4pT0w+eItVdp0zbcyTYaNmRLG26a+dxBXCulPs
dwtlLdh04xvLpGjWdGk63eyxLZw1VLu9lOkS6zPtYS6HK2sBcT9hIau5x32f
0eP2sBboErEodsI81t/sLfrSl770pS99/Zql+7/u/3+h/4P304L3U/8H76f+
LzsPHLyf+j94P/V/8H7q/+D91P/B+6n/g/dT/we/p54P3k/9X/bnwd2pw4PT
U7cH36XeC95P/V/2z5H9e8Frqd+C91P/B++n/g/eT/0fvJ/6P3g/9X/wfur/
snPywfup/4P3U/8H76f+D95P/R+8nxa8v4ZTgzdvDTb8GLyf+r/s3H7wfur/
4P3U/2U/D7K5BrK5AOD91P/B+6n/g/dT/5f9/ID3U/+XzREA76f+D95P/R+8
n/o/eD/1f/B+6v/g/Rcn3XM9Vsym+7/u/7r//wv8H7yfVvf/v9f/ZefYg/dT
/wfvp/4P3k/9H7yf+j94P/V/8P5uxRf1z/3A/p/1f/D+uL7WU2caWPFj8H7q
/+D91P/B+6n/y+Z/gfdT/wfvd7zfxKb7v+7/uv/rS1/60pe+9EWX7v+6//8P
/p8z4VVAmy4GLPh/tyxFsj7bb8F+a/8/eD+t7P2esvNAwPtpwftpwftpwftp
wftpwftpwe9pwftpZX8e3J0WnJ4WfJcWvJ9W9s+R/XvBa2nB+2nB+2nB+2nB
+2nB+2nB+2ll5+SA99OC99OC99OC99P+1v3/4P20snN7wPtpwftpZT8PsnON
ZOcCgffTgvfTgvfTyn5+wPtpZecIgffTgvfTgvfTgvfTgvfTyvb/H40YM6vw
PSsW/D97Je3EGQsW/D/Pw7bm2vssWPD/Q7Nutn34xIoF/69RrsNjNyUSC6+L
/byv1jvUIwwL/p+1w655p34Mwer+/7/5v+M+WTgW/H/P15ENFp0xYsH/HedM
GLHg/9PK+M94fMKABf8PDZqdZ0deI/bv9v+PnwKdxuY2YcH/HedaGbHg/6ZF
sRMyOxmxf7T/i2NS7odjwf9XaT9GThYs+H/u0e/O56lmxoL/Nznesdy+nyzY
b+3/TxtTrlipXBYs+H/3+UEbpz8yY8H/C3teyuIWYMaC/8vmJtTd1vjY88oW
LPi/U0E1UfbbFiz4//FLd+YqkyxY8H/ttMNsKa1Y8H/xsHPXigX/LzEj58jS
N81Y8P+i9aZWdS1rwP7R/p+uZdTRi33MWPB/xXnLzPO1LNhv7f8H76cF76cF
76cF76cF76eV7f8/E67dYY/Dgv/3Gl2jZvIN4Vjw/2ruDca0TWzAgv9XLbPs
XbK2Fiz4/497Tlc7t8GCBf9/3arz0OgeFiz4vzj2aogFC/4fn6NOwn+yYsH/
a4gLGCsW/F82J0u2/x+8nxa8nxa8n1Z2/id4P61s/3/Z2kVHVTdYseD/lknR
yZKtt2DB/1MWDQk4X8SCBf9vkEQbgGzE6v6v+7/u//rSl770pa9/3NL9X/f/
P2D//9VDNWsNXWVm+/+p/4P357/RvfL2FHG6/+v+/6/0/2/t/6fV/f+f5f/g
/bTg/dT/wfup/4P3U/8H76f+j95fxi3vzrlWff//37T/P/slbYCJme3/T5T9
dpPkNS1s/7/Xly9bkxe2sP3/T06+GuB20azv//+N+//FseqdzGz/P/V/8H7q
/+D91P/B+3uKJ5w4tv+f+j94P/V/8H7q/7K5CeD91P/B+6n/g/dT/wfvp/4P
3k/9H7yf+j94/y23ph65p5n/Z/8/Ih4PI9j+f+r/4P3U/2Xn2P9d/g/eTwve
T/0fvL93qxIN6pcys/3/zSe5xA7tZ2b7/6n/g/dT/wfvp/4P3k/9H7yf+j94
P/V/2Zws8H7av8v/cf8/KXg/9X/wfur/4P3U//X9/7r/6/6vL33pS1/6+teu
/985wDUk5X9+tpi/N5JVen9Bcl/ASXQ1a9neO3qHVbrD+qRDBu0lEavsfbL1
q+a4c/LrbVbHvj131lixfz2UNWpx/dGPU9hZBd87WVkLbtEG/4Wztj+nDWy6
zbpbzAtaxOq4ftzM6iw+jwOsxzM1cn+07BKrOXPjQvEDTrN21i5HMruwFn0V
e+Je6zusjrl8gaxW8c8LYn0zMK+rdUsw66kzDbyrVIvBtppffLrruFDlUvAm
i/qTDXu+8fuEl9qh0vP8l4Sv6l06t4qFuWOTvmT52L6Nii2tjV/OblLKVdQm
stmxe9PMj3/jY1Dq1PkyeXVFFXuj0J0OuWKMyiPb19Peo1Sstjt0ZXuTdJ/Y
Gm0s33Yz9sbRYSXfjTMomSdogGnGalOGj/QyKI9MrVJXamHGOl62hivna2uD
QWOxnZzWlVh8N0w5eMPqPOJaLLbhOs8X99+FKUW88mdYe8eOhfmqzcUgXRWb
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
/t/Q8mlupMWC/db+f/B+WvB+WvB+Wtk5QuD9tLJzkMD7aWX7/8H7acH7acH7
acH7acH7acH7acH7acH7adH/ScH7aWX7/8FBqIfkfpNkcejtOCz4/8k0JZJc
r2/Dgv/LzjFupr1MzW3Bgv9r70bPYjNg/+3+X+BCxiXmiDDsX+X/IxdrB5Ob
sOD/fW/sujy/rwmr+/+v8/8OT/JWfzw0GAv+f+JOZMFTq41Y8H/HsXRm7O/d
/w/eT/u97f8H76f9rfv/H7ZrUG2GuxkLPiw+jdZmLPj/00s/pCoaYsD+Xv9P
1/V582LTDFjw/5oTtGdMCxb8H+5/0Psgsv3/4P204P20susi8H5a2f7/MHHQ
jgX7e/3/xvo00b6lI7Hg/y3EIGILFvz/w4Q+DcybzFjwf9n3VzZXQhxLmtWC
Bf93LTy/UsnuFiz4/6R7rseKpbViv7X/H7yfFryfFryfFr2fVLb/f9mxildO
L7Jiwf9nvr9ZLvKtBQv+r/2/2g20YMH/J2bRLswjsLr/6/6v+7++9KUvfenr
X7N0/9f9/zfs/w/pWPjl1LMxbP8/9X/wfur/39r/T/tP8X/ZObG4/58UvJ8W
vJ8WvJ8WvJ9W9//f5//g/bTg/WWaGLMFvrex/f/U/8H7qf9/a///9+7/4P20
/zX//9b+f+r/4P3U/8H7qf/LzjEG76f+D95vq1vlrE+o+V/v//r+/3+H/39r
///CqdOq5SxhYfv/qf+D9yfrMeXHp6rlV+//p/29+//fVO+RdXkGK9v/n3H9
6rn70lp+9f5/Wpn/y863B+8vFDz0SosXVrb/n/oweD/1/z96/7+mth13m9n+
f+r/svdBgPfT/tn+D94//0B49IZrNrb//3/1f/D+1X3WZS061cr2/1P/B++n
/i/7/srmSoD3U/8H76f+D95P/V/2frc/2//B+2nB+6n/g/dT/wfvp/4P3j/s
x8a+iUtbdf/X/V/3f33pS1/60td/d8nuC4jn8yG8Ev+Xzf+V/WvdhPvuV2h3
7r+eo/nFQFaZp8mu3wJ71D19+MMVVrPb5nfHht9g/aIdc5FwXU57OYt2JX2P
tfHjjIWafTSzTms1ZWpoviBW3zHGNAXaXmBNdMR2paR1HuvmZDfSJ057gNVd
zMXaz+qYX8QbeLPmsl35j7JWr7F76/hh7qyy98/CvDLaKOtKbcIlq+P6NJhV
jDHOHIONEj8/oUqbeqMWp91mw1q1txMcC1Nu9ky05tJkO/Z2b++EK2WDor0a
Tv2DHeu4Lg1X3ufOnnnWBju2fOTbJW93GRTxx1bYsW5i371BUSK1nzAzNp+Y
9xSupPAwvr6exIyFOXTtqy8JKz4wlPWYqsFvMKvj9XQQa76xN48FFg5mlb1P
PGmy9fcHRUZi94dpg6yClTbX7p4unVzFxuXv4dlxllEZOKfJzfOzVWzag93v
DZxoUubdnhMxvYyKhXms2m/Bmhd2rODhrkZlg5iHHIutlO3TxWZFw5VHz7Ik
fOrR2BViYyS8bovECl4/HqSIbVdrbdjBK3r2L7w1TMmkHV8zIh4rWL11pBIq
7kup2HutszV9GmlSPLW3+a+Ix/prt/VWRyqrJ73s3+66ioX5xeX3L6qX5qUZ
C/Om3Yq2LG5uEsLaU8w1DWQNfNfIcDosgFW7a9DxiR9rkwspTFUbxGGDMxqy
DvsarDR82z04RREV67tmXqqUHkal5ctRCa+0VWzUkiNDPT+bpPMC8nXv2/2A
xY51zOU0Kttr964/bYeKnVxg6aOnp0xK8xVOZTYeNmO1aZtHlhmUOs1PFijc
KZC1+rtcZ3Ic8Gfd99D4IEO3GCw8Dntu0R6gzNgyyZ9U2FozXNmo8W6maGzl
adoTQ4iyY1/XhB/5OOzUBzN3R78PUd5o41G327GlCmk3Vg3KkOb7Rs+8Ycdm
qunU4M1bg/Sc5wqrlj+5uN+OPSTeT2NQhlU5nLvUOBUL85H9vK/WO9TDjjWJ
ObwGZVuEd/+eo2KwNY+fyhZ5JPSXOb2x2Mmpi++4NTRM6fIsvvSezqGsjWZo
k8KDWL1TZ6k1QQlkLde0Vsajz4JYveKrtUn0IIB17sT4Vqdb3WY1Rm+4lrbK
BVbZ84VzuQ6P3ZR1rKlcDm34ae9BVocfnGfVNDt/hpusETuU27U73GJdL+Dq
NmtqMR/4LmuqXvWy7Qv1YHUT968usO4W92FcWSte1n4j7rA6HN2HNXSuuiao
lierY07jJdYC10o1Sv/TdlYX8TxwmvXdnh9tlX/iNa57lX1esUOsk8V11jFW
2VxIFzHv2pXVOV47KO4sq8Mjj7F6PZ//5XLWE6wyX7KVGDvkzuYA1orxaUsO
uujPavCsNMryPAILc0uX1VhavZBzHLZjrhhjvdfByoTN5wrPr2TDFguteDqx
OVTR7jYcMdmw8PwF5+vRc/bmadsU2sdhxRjbvCHK44v707WMsmLF5UWpYGV5
4VX2kOdxWPh9972ebnvGGnFYx/sPghWfWO2C04YN71tjwwPfMDwf8P/7nMBo
7Bsx8FT+eFJQQJ8vq3uNwgca/OzHagxpmrFNGm/W3me0kw8vs4pjEtN7slas
e6Xz3jP+rOun/tTess+P9ZOYzxyB3dHE6ZGTe6Aixs2uj8PmqnJt2vSdIcrq
T5trlOtgx/bSbrPkN0jnHN0QG4dUrIcYI29UJhQP23IsMgYrfhyyhSm+SbSd
DX6sieo/sFa6eoe1v59rj1fT3FjXvtQmK99mlZ3zJo6vbBnACnOnaXsfdprh
U9WfVTZnPMWypOfe9+RtLL6w/qxro9tWKxgZyFroS/Fu+6dHYm8HZEj344Ug
ZUPpC277DkdiKyfaPrRAXJAyJ8B3UdVucdi6dfuNG1oiRFleq30ZU6lobKkM
1SwdBocoM2toV64x2LzpvIJMicNwjjftqR+XtXmwJJA14Uk6vE4Jf9bEZ8sM
vZcuiFV23qNjXvo11s3iRsYl1tH30q3ps24Dq8OP57DKHuedn395+aCHO6vs
vmcFMZc4kPVVuqoJl4S+rAX3TSs9ZN5Z1s7i8eUAa3ux38qLdeuGaYtaXo5g
Lem+s+PSxbyO/XeBrOmzD0/41YlmLSE2/FhZXXOm3mJtdpVVdv/CPefps0dv
7WGdrd2+3TGDVfZ6/P9h767jo7q6hu9TnJbiFHd3dzk4FHcrVtyLWykOxYq7
uxULGlwSQjwTdzJzZiYEd7c3Z8+11nO/a137TqFY7+79x/N78rmvUppMZuZ8
z5q9PyfJqKWWWmqppdYnX8r/lf9/Rv8H76cF76f+D95P/R+8n/o/eD/1f/B+
6v/g/b+M2t9s+isbfg3eX7lr7IbpdtsX93/w/nJrQ9ePNen4NXg/9X/wfur/
4P3U/8H7qf+Dl1A/Ae+nBe+fta5w/KWgjl+D91P/B++n/g/eT/0fvJ/6P3g/
9X/wfgez2D+b/4P3U/8H76f+D95P/V92XgB4P/V/8H7q/+D9kwvmDum0wP7B
/i97Hgbvf1Y2w0CT1YZfg/eL7ZyHWvFr8H7q/+D91P/B+6n/y/Z5Bu+n/g/e
T/0fvJ/6P3g/LXg/rfJ/5f/K//++/4P304L3U/8H76f+L3v9kp2zA95P/R+8
n/o//H5T/wfvp/4P3k/9X3ZOEHj/T3lCz86+av0/4//g/bTg/dT/wfup/8vO
OQLvp/4P3k+r/P9/93/w/nrxz7IZt+r4NXj/pNKDZmY8qePX4P3U/8H7nx4/
Gf8O3Ipfg/fTKv9X/q/8Xy211FJLLbU+8lL+r/z/fzRJmphVBVKEY8H/8211
qnZ8pQUL/u+7uffm4p4WLPj/pozJtrxNZcUmNP8P3k8L3k8L3k8L3k8L3k/7
vvP/88SFuxUL/m+cUtvSTceC/1fbZ89X5KyOBf8fPuD19lthOhb8X7ZPrGz+
H7yfFryfFryfFryf9mPN/4P304L304L304L304L308rm/8+KC1IrFvx/8bhF
gye6W7Dg/ytK3nG5d9qCBf8/v6xuXNa6Fiz1f1rwflrwflrZfkHg/bTg/bSy
+f9p7Uf1+OGBBQv+/8vtrZM8hluwH3v+H7yfFryfFryfVrbPA3g/LXg/LXg/
7fvO/8vmgZPeMZ4hdSx43ZUKO2/Xsluw4P8TA091DDunY8H/G+R3HjfzdDj2
a/V/wXE+AVjw/+ZvTh/Ofz8QC/6/r4P3niZtg7Dg//HfxBLZZoVglf9/3f7f
44k5g7V4MBb8v8spY6cRCxb8v5T4Ay3YhOb/wftpwftp4fWKVrbPHng/LXg/
rex+H3g/LXg/7f++TyCf/5c9nxTLP7juI3czFvy/jnheD8N+qP+3FRvFBGPB
/+/Ubhr/I7Vgwf/FsfWlLdiE5v/B+2nB+2ll+xyC99PK5v8z3tMOXUtmwX5s
/69ivj+s2qgwLPi/2LZyrQUL/h9/MRR/pWHGgv+P79yz1Il2Fiz4f8Gh38VN
DjFjwf/zpe92pm60GQv+/0BsxGTBgv8Xi38Vy1xBx37o/D94P+37zv/3uFl2
SIuUViz4fxVjG9JvdSz4vzieo7UFC/7fy9LUeUhgBFb5v/J/5f9qqaWWWmr9
a5fyf+X//2X+n+6fCd5P/R+8n/o/eD/1/4Tm/z+3/4P304L304L3U/8H76f+
D95P/R+8n/q/bJ9Y8H7aT+3/Mj8B79+VNqt/j91WNv9P+6X8P6H5f+r/4P3U
/8H7qf+D93/t/g/eTwveT/0fvJ/6PzzvfvO9cZCLjc3/04L30/5T/B+8/7ek
o8NHZLex+f8NFQ5vsE+ysfl/6v/gc9TrwPup/4P3U/8H72+7Z1DvJBctX63/
q/n/f6f/g/efL/C6V//719j8P/V/8H7q/wnN//9b/B+8n1b2fALeT/0fvL/1
ub4n26ex/O35/yPdFk+vnSGGzf9T/wfvp/4P3l+6XQHXBYX0z+b/4P3GqU2r
W9vY/P+n8n/ZOS/g/dT/wfup/4P3U/8H76f+D95P/R+8n/o/eD/1/4Tm/2ll
/g/eTwvef6/iu8ojGtnY/D/1f/B+6v/g/dT/wfvNKSrMHN9cV/6v/F/5v1pq
qaWWWmqRNU2cTztAo00kri+b8YrzgXvwSlYdcc7tBI22bLmDAffdzrPuj6ox
JiI4iLVeX+PEQV/WvjVf2nZ5X2a1pTLeQbqytvWY2MW1iIn1u3WNGz3rprOW
PH734ON+cawr6xsnXOqskxLF3EuphbE6zle8wCr9vonv6yKNVnaOsKyO8xs3
sjqut1xYV4hzXz1ZxeXAt36ssvf/jp9DAGsncd0chRWX3csDtBlNizh1vWLD
Os53DtbutN9XodNJOzZ7i9xeu62hWq7bJyOyrovFTnJ88F97NOlomq4PzNjZ
4pysMM3e9edn+1LEYOeUbLS3SL1gzbg6WPpzIOuiIsZBySbWdMvc/riX24+1
gXE50drEKvu89oj5IYt7lfZiTTZokUuPROHY5uLn7qstir8KT3vLijW0K0uz
IM3yhzFgZccmvtAgdeciYVrX08YdmlisoUhZTodrs8V5eGbs3pzLhu05GYrn
PNNGd7/hNWI07xJXl5eDnXxY3YtfqNbtcDgW/Fwc79rZju0mADpUu/niZfKc
5+3YzKsvjCz3IFTLWrnL9G27Y7Ej0k7uX9s1XCuQ4dLxHEEWbOwT4yDqcG1q
jqoFxnUMZr0bcSxp2gb+rLLP3RdvtTiiQFM3VnGMcWdv1rNHbtveOenYUym3
l3oR5q/VfPXj1l3z7Fg4b/dMdON5kxvGYk/06DLu4bswrfvsyks7Wu3Ylwcq
z9lVI0xr+PuR1pNiYrGeTqWT3a0Q8Z99nXSsuO2zNkJ67nnJGi+m7n/oxVp0
trGBkzerzOXMFR7l8w0JYO2weWb8pbk/q+NxGoWF6/oDh38NntnMhl0n7nsG
a2sGdrybq7odC+cF3zW4ZlAsNleBovmSNY7/fX9iXPDGYgsZHF8iXPN/Nc5N
Ox2Lta47eX/CjXBN6/jCxzLDjnWcqxuqTRL/IdewOY5k3bkpZbBWTPz8r2E9
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
PyRvjt0D35ix4P+lXoQtLV4gFPux/T+P2AcoDAv+vz7+XVa6i2FY8P/NE95N
fFLajAX/b5rzm6NlBpux4P9b+iQttMNsxoL/n19WNy5rXQsW/H/9gZ1epe6a
seD/snMHZOcCdBjtEv9UZMHC73uZJqNzPk1sxoL/rxnw4FH9+mYs+P+r6eOu
t3IKxYL/G7t1NrOHYZX/K/9X/q+WWmqppZZaf20p/1f+/z7z/w5mNLP5f+r/
4P3U/8H7qf+D9wcZb+eX2Nj8Py14Py14Py14P/V/8H7q/+D91P/B+7e1NN6Q
Wpj/r237dNPDx2Y2/99wQIr2y4dHs/l/6v8Jzf//Vf8H76cF76f+D95P/R+8
v/+QG6MW1NDZ/D/1/4Tm//+u/4P304L3U/8H7z+U6NeuxfLrzP+LL8vkMjWd
mc3/T05bYHryWtfY/P/X4v8Jzf9T/wd3oQ4j288ZvJ/6P3g/9X/wfur/4P3H
y1WMvjTF+pfn/2k/tf8nNP9P9/8H7+8oOM7K5v+p/4P3U/8H76f+Lzu3Aryf
+j94P/V/8P59xrbMbW1q/v8jzf83ePostGRZC5v/7/+q9oO3j3Q2/y9e1rPp
bP7/l27NX3c4YWbz/8l+tLqNXxzz1c//v60SXMdtewyb/6f+n9D8/6fyf/B+
WvB+6v/g/dT/wfufr0xd72pK/bP5f0Lz/9T/wfup/4P3z+03zXY1yvLJ5v+p
/8ted8D7aT+W/6P3G7eXg3U2/0/9H7yf+v+Xnv9/cyZzLs96Fjb/T/0fvJ/6
P3g/9X/wfur/4P3U/2XnDsjOBYDfb+r/4P3U/8H7qf+D95cKc1836IyZzf87
T6/Qe0AHi/J/5f/K/9VSSy211FLrr67nxrm+JbT/3hqs0vsFkj9H+r8XjtiL
9fGty/MvlnFiXS+8IYDVZUwvs/2cP2vN7pkXpvX0YnWcK3uFFc5fpRUcky6c
tb14Q2Vmtd9o82sDD531Qd2Jgac6xrFuWWxcKFlY0xlv41acYJX9GOuI65j1
Gu1945jGrCtYD4tznlfziveJ61hl5wnKvp9Z6xoHvZlYvTeu2Tcuyo91peOA
M1bZfiM3Nx8OOn0mgFVcthcPZs3XxAD+QNZMC4yT0Uyssr+P7PP1piJV+q1q
cJV1R/8Kmcpf4XX2G/iwc20f1uYZcyRqWSkMC9ehJZMU1GJb2rCr96bXr2QI
1iYYPNs0FlvOYKZvw7Wwqg1vNS4bg3U4XrD2cms+W+X8/qz1rqZs2uQSL5yL
S1tQnLPnxtqsgtvrirvCsSGpOnbvc8lPqzXkcf4K/jasOEYyS4iWr/zQI4kb
XsfOSLHN/e3bCC13t97ddlrs2Mk/LcrZoGqYtsZxkDJroDifzZ9VcOEmE6vs
59XX51j3x7+6s3YU9xsjsOI4uqL+2mTjON2BVmy1kJ0Xf2sUqMVtahZhdrVj
04nPqYRq4pi6jbHYCXnn3753KFzr8cScwVrcjnWclxqijfT5acLZxzYsnG+Y
t0fJNl38YrDgS0+N45DXBrAau2Htr+PPuib+tynjZU9WOL+RdrJn4PancwNY
4dw/WnGbLFUgq2zfrYbCIyOxDqf111LfsJgu17Ri4f6vMZXpV8OOfeCWe9/q
2/GPi+d/Dl360I4dsSJfrZxdw7Tc4qBGO/a3GtY83a/K5/+NU0E7DAxkNX5q
XXoFsO5oHeiafFogq8PFA1jdi1+o1u2wP+tSMWccwBqe374+5y3eiY89Wqwt
5M8quz+VuPT85d9O4B04M+PJwcPdWR1Pf2dYHT+Hy6w7Rky5dOe+K2u3Erfj
H+KXWfeIc8ivskZN7XHuuwBv1tZLtNwF//BiTdftTN3ogR6s5h/bjXyR4yqr
4z7VJdZGwhUussK52bQzev2eaM63/qwXzePin3p9WGX7bMTUqu03L7GJ9fZW
42BKb1bZ/hgpXWvdX/vCxNr5tXHivBev+LkdYc0rvH8tq3iayO7GWnNVq6uH
+ppYx2Ua23Taqghsltgu8f9mE96Xovenco7s7vS0jB07Ucy/h2hJrTMf7hpt
x/4oPi8Yqr2OHXGpUYgZa9xN+/Z6qOZjzrU8YJs/K5xrSluyYYNSA3N7sLo+
mPX2TGYfVi/x54VjYU5Af1ildOG3OjbpvGoXG44M0O7nSarnfm7D5rX6x7/y
hGinA1ZbYvPbsCeavCh89XSQNnDY0QFasShsKm1NtrN9ArSQ4a2rdI31ZpXd
L6srfNHEWrHe2c7bjviybtk17/tEu0+zOu4P88r2A+wswN+X1fH+IhzrWi7y
2bxnflr8P7TBPsmGhfctss9vFmlxxf5LNxt2Ua32ZcJLBWu/i5e3SKwYd/gu
QJt7zrhD6slaJ+MY++yzXqyyx8n5m8YkiierWbj1KVbZ+/mkm9emHXnCjVX2
+97jyE/Ff+/rxVq63MGA+26+rMXFE50Xa8sSxgPblzWdcYx0bj9W+PnQOs5X
92FNviDJ8Rc9vFlHGLed0vmyGnfPV1TxYXXrODXsSHVP1l5z1i8oG3GZdU2w
/7ScG8+xThP3VXjriPsPa1jDSr+stTDpPtayXYwBquWsc0s22luk3k5W2e+X
Z70b8W89/Fhlv6dBM2KX+te6yhoWvfJ86ionWVuI6wcTq3HX+sewENYDbpHG
pBHrIueDnV+tDmF9vHRC556lYlmDDu4qW9Tdj3WauC7sx1pn1Z7912/9yio7
Z9lxv2U16zRx/TqA9XNSyt9aModRSy211FJLrU+xlP8r/1f+/9X4v2wfWvB+
6v/g/dT/4bqZ9lP7P3g/LXg/9X/wfur/4P1fi/+D99OC91P/B++n/g/eT/0f
vJ/6P3g/9X/ZfOk/3f/B+2nB+6n/g/dT/wfvp/4P3k/9Xzb/pvxf+b/y/7/v
/+D9tLLPp4D3U/8H76f+D95fYsqUgSlP2T+b/8vOCQLvp/4P3k/9H7yf+j94
P+0/3f/Bj/1fpvfu52LBr+F9CvV/2ec3wfup/4P30yr/V/6v/F/5/1e3lP+r
pZZaaqn1OZfyf+X/f8P/ZzQt4tT1ShAWvp+3fTf33lxcx4L/B3a49HzLWQsW
/H+f+OCyjgVvl+033mHKaOdeBaxY8H/Hfvc2LPj/iLbftFo334oF/7852hAf
HQv+L/v7LItuW61gZBgW/L/J5RPTfAcEY8GT04v9rGOw4P+COTJbsAnN/4P3
04L308rm/7u/K3FxU0cdC/6fSGxkoWPB/2/37Bp5OzwUC/7v/2qcm3b6Gjah
+X/wflrwflrwftr9dfzbPUtix4L//2g8/BbqWPD/lMJLIrAJ+f8o4+PqHjHY
hOb/wftpwftpwftpwftpwftpZfP/kRZjwysrFvx/9ait68P76Vjw/+S1fAum
HGfGgv8/3ZdiddZOFiz4/6aMyba8TWXFgv/HJWl0LPSGjgX/N05RaN7UigX/
l527IZv/l+3/Bt5PC95PC95PK5v/f3r8ZO2DE61Y8P+dBY2dSnQs+P+REOOk
ZisW/D/PpW6VNyS3YsH/XYxtMjbqWPD/YqWy35h7S8eC/3vHf5fS17Biwf83
FE30pFVnHQv+D+dS0/Opjbtqf9SKwn4u/0/TwPgvCcSC/x+vaZvVaWswFvy/
pdinJAwL/v/70+rxr+ihWPD/gVHP7z6YGIL92P7/1CvLovDzoVjw/63XerR0
a6pjwf8Xi4NfLFjwf9k+261anK7k7mbBgv9HhkxMFHPPjAUPhH0x6P4Yg+Jf
TXJdiMB+bP//bYV7J1tAEBb8f8qLy+Uin1mwCc3/y86nBu+nBe+nlc3/i6eD
VToW/H9/8ZFJvc+bseC6+7ShXXJ9b8aC//sPPtvi4bcWbELz/+D9tOD9tOD9
tLL5/8xN70Vme2fGgv+P79yz1Il2Fiz4v3i45IzAfmz/DzKYNVcYFvx/7Btj
5z0LNqH5f9ncAng/LXg/rWz+/3L39avM081Y8P+yFSZc3XHMjAX/fx7/U8jk
HIr90v6/OIWxMVgoFvx//2m3Gdp4Cxb8f/CuO9tiXMxY8P8KE0tuXtTTggX/
twUYG7FasOD/cJ+G3q+pLS5wLFjw/3zpjSdeMxb8/1Wv/vcX/WjBgv+fq7+7
e4ufw7DK/5X/K/9X/q+WWmqppdYnWsr/lf9/wvl/6v/g/dT/wdept8v2G//Q
+X/q/+D91P9lfx/Z/roJzf9T/wfvp/6f0Pz/X/V/2RwdeD/1f/B+6v/g/eLy
18/M5v+p/yc0//93/T+h+X/q/+D9x06EH92cSWf+v8c4VrpUDJv/p/4P3h/Z
JqjYN131L+7/4P113La3Gu5pY/P/1P/B+6n/g/dT/wfvp/4P3k/9H7yf+j94
P/V/2bkbCc3/fyr/B+8vahwX0sHG5v+p/4P3U/8H76f+D95P/R+8n/o/eD/1
f/B+6v/g/dT/wfup/4P3/9zQvHruN1Y1/y/xf6uxK/yhSDb/X+I34wM/Zjb/
T/0fvJ/6v2yfbfB+6v/gf9T/Zftjg/f3TVe9Uet6+ieb/4++bN05YM01Nv9P
/T+h+f+/6//g/bTg/dT/wXGp/4P3U/8H76f+Lzsn6GP5P3i/rcX1rj8/09n8
P/V/8H7q/+CI0+JfPX54YPlk8//0PCDwfur/snnyj+X/4P2jc/305mcvnc3/
U//HeX/i/7LHydc6/0/9H7yf+j94P/V/8H7q/7LPa4D3U/8H76f+D95P/V/N
/yv/V/6v/F8ttdRSS60vvGSvRy/uPpjYsj3vR3r92iJcf4ZG26T72V2h9S6y
yva7iJuTb9U3y/xYm9hKjBrk5s5rvB3M5cKaVFyQerD2+v67Tpe7R7Iap69m
aWZj9Zk89+jxMTdYB6Y89UeTpNdZyxqc1zGa1Th9acPCK6zv+312nz28/+q9
WzXaLcET1tsyb2OV3Q9yXBfOZ00zos2G9hddWGXnAJqcH0RbH/G2t2zfuL2r
L6u4zIwLZJWdEwrnMdLK9luQ7ZciO99Wuh/Cf851pA0X54/5s8rmJCO7zfJf
NdmGjf+7Jy8yPFgzTm3LVd2CDdi2NP4tepg2s6NxoR3IeijfgjY355lYyzWt
lX7ffX9WcaxgHk/WUfeMG0nurL/tK7o7bdZwbPXn2Y9k3emrGYfyXTdbsf1O
tk/jUTlIm3Aj264kSa5jy40zoCBC21nGODDQgr1ZdkiLlEPCtAsC8oNYH7ZY
NLbYCD/W5uJ8cl/WFZ0P9G7U8DKr7Ly/HeL3IALbwBhTa23SnMQ5jdewbWLC
99wbGqQNy/Imd6PEFuykRDH3UmphWmz9DQd2elmwhjK5+4drVbrGbphuN2PT
zHG6NTVZmFbt+EqPs9fM2Aw10zV8+ixU6t5wXiWtbB8kOJ+Ttu2tu017zvFi
NY/NmK71Lj9W4y5T6sf+rFGOAWFW2f4zPcV1PG8f8XiJwoKnOf44G9bxexei
ZVhpnOwbi3XcxwnT5jeqrp/ubcfCucy7t1ZpMKfFNaw4nnBukPT3tKr5/rBq
o0ysRfoUqrR+K+/ZPm27VgzwZ308x/2wx7dBrDHOxs5F/qyNfzNOeuaV7bPU
IL/zuJmn/VkfLcnYY3Zl3useu6Z078wL59DSyu4LlBX+dJ7V4aMXWNuL8/rO
sE4Q51KeY3XcBzjL6jjH+xRr8kGLXHokusS6LumlNN+kvsIqu68xuU39+JcC
L1b369XaJLrpx2q8yp+64sMqO+fd89tMtcZqJtaLmzrOn9uVt4FHQO3XB71Y
o8QTox+r7HnSca77RdaB8c+6nZ23screj8nmKGTPq3A+Kz2ndWPu441XlLRj
fzVXeJTPN0Rr/ke6Mqv22LBh5wx4DdZKFlpbdvqBGKz309/0N9eDtbxtsxy6
cdzEKtv/pOS+2il61ndjDTKe9jN4ssrOb3U8/4Vj4bzdvDVP9jw/woadmqNq
gXEdg7WlUXdqN7VZsY7P5QRpGcR5yJHYI89W7G58x1/6PuqxcdtyJa/scRVn
bKe2wI+1YvMUyXtcO8PaPMLsemAdr2w/ouamlVkeDvdlHbs2e74eJcOxJUPe
7jzu46s9Ce5dY+VNG9ZxTmiI1kmAtB17d4hx0GyIlm6fcQPfjv35mXHDOlQr
LG4YRWHdmg6uXD9foPTfm1+Ap4lVdv5p6ipZfj5WyI/VdXDmCsWXubIWFU68
nfV2/It8YFMn1oF/9OhbeN0VVtl+PgWvGDtK+bK29ZjYxbWIiXWb2IDQh9Xx
/O3FCudL02ZqUuh6v/S8bZ9Ui3/n5846Y9z1Vk6trrA63tefZ50m/u/HWR3n
2x9lddz3O8l6eNk6n9bux1jN4vVtKavsuskk5kq2arTGXdf1Y02sWYd5XF3U
PpxVNs920H1ntj5TPFkHnsqd5LeC51kPV7m1JbOfK2vNIt/WeZMxhFV2vvBM
MTASwPpnrHHhrLOmF+fMB7JKv295xyzcMmuFRntR3OecxTptTZJumYrM5n1f
51eurpZaaqmlllp/fSn/V/6v/P+z+z94/xDxAQUdvwbvp/4P3i8+JpAz9ov7
P3g/LXg/9X/wfur/4P3BbqYxKV7Zv7j/g/fTgvenzD03/6tXVvwavH/jwW/d
Utjt+DV4/w+Re9sPOBiLX4P3D3jwqH59dzt+Dd4/qPn2EVMu2f+1/i+bpwXv
p/4P3k/9H7yf+j94P63yf+X/yv8/nf+D91P/B++n/g/eT/0fvJ/2S/k/eD8t
eD/1f/B+6v/g/bT/dP8Hd79pXXfy/gQLfg3eT/0fvJ/6P3g/9X/wfpd2rW8U
7GjFr+HfQ6v8X/m/8n/l/2qppZZaaqn1r17K/5X//w3/HyAGnAOx4P9NhZeH
YeG6dcWG1Q0nJ7Zgwf+PFZ5VqWQ3Cxb8v1dwpR9en7Jiwf+HinlrOxb8v/+r
2g/ePtKx4P+y/ZZl+6XvE+9/I7Dg/7L9kH/p1vx1hxNmLPh/c7FBhI5NaP4f
vJ9WNv+/tcup8XHHrFjw/yoXjA0odCz4v/j47olILPi/++JTGdsFh2DB/ycG
5W5z5FgMNqH5f/B+WvB+Wun8/1xjw2/b/+t//D/60pQ//9hqwSbk//siRk4t
HBeABf93y/jyXscxZuzXOv8P593Sc2/Tiw2vdCz4P+x/RPdB6r7E2JgkDAv+
X/FGSN4cu81Y8P+w7wxBs2DB/0+KDYt0LPh/y2H9yh+qYsWC/8O+M3T/mcUP
4pavL2/FJjT/D95PC95PC95PK5v/l/2eThYbIFmw4P+PYg7Etf5Bx4L/1zKO
ez6oY8H/xcPP04oF//ebP6Bp+K86Fvw/6R1jQzUdC/4vO2dhhjY+1ZVtOhb8
v92F0vtTvo7Agv8LvswVif1c/v/kQuLbg3aasOD/55fVjcta1x8L/t/Jd1St
5C9NWPD/4ssyuUxNZ8KC/1t764eONAzAfqj/i7/eXDMW/L/tnkG9k1y0YMH/
661v8ueDyhYs+P9qsYGYGQv+f6XCztu17BYs+v9vjZZffWj5f/2P/zuZ/brX
czJjwf879XA/M/GIBQv+3zX+p7bmt3Dsh/p/0u4T892L9cfC+zFjN6EcS81Y
8H/Z8yp4Py14Py14P61s/n9E6K5CE/LqWPD/FGI/pDBsQv6/MrWxI54ZC/6v
1Vk75UQtCzah+X/wflrwflrZ/H+H0cYGdRYsvI8S293cNGPB/4tXK7PgedII
7Mf2f69+LoMOVw3Dgv+P3pYoSPvZgk1o/h+8nxa8nxa8n/Z95//Fdk65dCz4
/9q2Tzc9fGzGgv/bxfNiOPZz+f/Y3Bef1bgcigX/fyCev8Ox4P+Ox0s4Fvzf
aXL1KYVmhmHB/38t4/vbnQOhWPB//1WTbzdZGY4F/x8UcKBu5ZbhWPB/Y7fP
JblDsMr/lf8r/1dLLbXUUkutr3wp/1f+/wnn/+l1K3g/9X/wfur/4P3U/8H7
qf+D91P/l+23LNsvHbx/9rf+JxdaLX95/p/6PzgidUXZPsky/wfvpwXvp/4P
3k/9H7zfOJUi7JzO5v8z9jQE3szm/6n/JzT//1f9H7yfFuf+if+DY8n8/6hX
UMoHvS1s/j9Vqj989h6IYvP/1KnA+xMn9nx89I6Fzf/TgvfTgvfTgvfTJjT/
T/0fvJ/6v+wcBPD+HjHTXE7azWz+n/o/eD/1f/B+6v/g/dT/ZfvPg/dT/09o
/v/v+n9C8//09xS8n/o/eD/1f/B+6v/g/dT/wfup/4P3U/+XnbMA3k/9H7w/
/GnBN1d66Wz+v93y4d8fGan/6+f/Ha8j0Wz+n/o/eD/1f/B+6v/g/dT/wWWZ
/8PcP/F/8H7q/+D91P8/1/w/9X/Z8+rH8v+E5v+p/8v2PwfvD3EKznNi/zU2
/0/9H7yf+j94/9x+02xXoywf7P/g/dX22fMVOauz+X/6Pgq8n/q/7HH1sef/
6XkE4P3U/2Vz+B/L/8H7aWWfOwDvp/4P3k/9/582/58qY9ikfuEWNv8/N7h4
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
7Tet1s0PxIL/x19Epk8SYsF+6Pw/uD/1/8g2QcW+6apjE5r/j9lWde+0InYs
+H+bo9m+XatbseD/ZQ0+zq1jwf8zJU/2wlo3AgvPDw5OCsaC/yfzKbD919IW
LLhNoYDBZ1s81LHg/2euGhue6Fj4fflu+O+7twRYsOD/DUca33gdC/7/55Vx
xYPXWrEJzf+D99OC99OC99PK5v9fR17M5nRUx4L/B9Vx295quI4F/5ftI93g
6bPQkmUtWPCT/afdZmjjLVjw/4U5jJ3ILFi4fpedCzCv9ez4p0gdC/4vO3eg
xFyPzK42HQv+v/vPGQ/qTozEfmn/37Uy/7YfKvphwf9z3mprrr3dHwv+v89U
OP6RGY0F/89XfuiRxA1DseD/heI8v5tYJRSbkP/Hf7OXPmwRggX/n5zm/JyS
jSzYD53/l52j/b7z/+92ZXef8NiCBf/Pv/CErU9jHfux/T9f+m5n6kabseD/
R2tMjX8KN2Op/9OC99OC99PK5v+3XuvR0q2pjv1Q//9jVbUBvaoFYsH/jWeD
NkEWbELz/+D9tOD9tLL5f9m5El2L5R9c95EZC++Hd5Ut6p4nbQT2Y/u/Y7+k
ECz4v+x1RDb/L3vfDt5PC95PC95PK5v/N6YSFhTSseD/svOnjN2E2k22YMH/
ZeclfWr/vyD2AwvDgv8PEc8H4Vjw/2YV3F5X3BWOBf93vJ+NwCr/V/6v/F8t
tdRSSy21/iVL+b/y/y8w/79rxbndNWvpbP6f+j94P/V/cG7q3rL9seF6l/o/
+CX1TPD+0WKDXZ3N/88yGCf+fTOd/6f+D95P/R+8n1bm/+D9tLLvA3g/9f8P
nf+n/i/7fr6v/4P304L3U/8H76f+D47V+lzfk+3TWNj8v8ngmtbRbP6f+j94
v9i+uqj1L8///9X9f2Sf7wDvp/4P3k/9H7yf+j88H1TPvmT70SQ6m/83VGDz
2hg2/0/dBryf+r/s9wW8n/o/eD/1f/B+6v/g/YZqbHTVP7r/g/fTgvdT/wfv
p/4v20cavIT6P3g/9X+4Xqf+LzsXALyf+r/s3AHwfur/svMF/q/M/9c5XD9R
/dlmNv9f/7tHJadMMTP/d/zeRbP5/xLGx7NSmdn8P/V/nPfvGnk7vJX+l+f/
aROa///hyo/Jag7S2fw/9X/w/k/l/+D91P/B+z+V/4P3Fzn3y4DX261s/l/m
/477R5a/PP9/x7X9cevbKDb/T/0fvN8yPjpp0hWWD/Z/8P4sdXaU7hFoZfP/
1P/h/S/1f/D+meLAH8snm/83/m05q5nZ/D99HQHvp/3U/g/eX6Re5toR1XQ2
/0/9X3b+FHg/9f9/2vx/8GHjHb5Fzf8r/1f+r5Zaaqmlllpq/ff1vp4vW+I6
r7X2lytbaWJWFUixVaN1vO/zZB2/2E8cRUY7u/LSjtZhAaxNslc5/+tkX9aC
a8tOP9DJjfW7PHdyBj80sf7sOAiO9W1vY6LPynqllyFi11k7bonb+2p6LKvp
UuiSK0XtrJVTO6Ve8jqMNan4Pjmx9srSMemUeXNZ84rzxBaxmoX3r2Z1eNtJ
1iW+afYUjt7H6jjX7hKr/6rJt5us9Gddvdxp2TofE2tn45jbdr6scM4trWz/
Ddnnu+E8PdrXRZcect/pwfq8x4ZXET/5scJ5obSyeUW3HccG7igQi/W5Xb5S
vbNhWhbTi/3+C8xYeH8u28dD9vl32T4JsnMzHedde7HK9pcQD4ssNqxxquIP
24O0FaXanvdwisUOejvMvDAsXNt6I83Tn4aZsfqOxJsqZg6V7mcC52fSyvbl
OCLc0ZUVz9kknS/+AtHY4sfmHcv+S6DW6Pb+4iOTmrGO8yJDpPdxxHF9Oa6y
OrzTl3X/z5amzkMCWeFcVtqK9c523nbEl3XeyJVzqjw1sXYzju1c4s7quiXv
1JpNPFnX3e11IdjNxLqn7cZTp4f5sPYSBw37ssr2KZLtC7TSAc6sFfI2HpCi
fSQ2UNyX9Neelc0w0GS1Ycsku1thXc0QbUaH0M73r8diG7SckDmiQYTW/I90
ZVbtMWOr3k6Wbu+CUDwnnDbXswEzDp41sYZerfSL5UEAq+z+rMMVPFhfn2pW
9IcOfqyO+8kBrBn+ND64wLs3efncv40KZG13ofT+lK8DWDu9LB/VbZY/q2xe
unXfqVN9EruwOs4nPMiaKPOr9m1aHmKtWa7DHWftKKvsvMg1xsvtKh/W6O43
vEaM9med+EvB8WcWB7A65qF5hbL+4cZqKjcjQ9sRrqwDc2eLHv2jF2tH8f0L
x95eXSbn0d/8NOOUz/RtrNimxtNAlkBtUfoVS2Zst2G7uRl3koKl57/0Eeeo
R2HhXOylb95U+q45r2PemrfDZkOG/VnPdklxYMIuV1bHebaHWR3nbLuzdn3o
VKBDI1/WfOL+WBh21puOOeoH+mgNJyfeaztrw3qu9z1++W6wNr9Rdf10bzsW
zu+u/OvT+Deigax1Dk78bvFqX9asKf3urC7jzZo3fM6kX6udYnXMC7iwvhYH
HfuzOvsNfNi5tg9r3TOPdoft1rGXsjkd3efqr80xXm1P2rAtdgRPWG8L1kKi
V55PXSUGO+7QpBHzRgZL75vM6Zy8yRRvH1bjboB7nC+r7P1M6g3pa/zZ9Cxr
t0pV4t9BXmSV3dd+IlyW9+3D2X1O3IvEbhQH5QZoI2slf9mkpg1bMHdIpwV3
grQhJZ+PXt3ahv1BPCEG/+fzWjbsypa9j8/PFqx9N7FKq8pPrNiOjhcM7bHn
keXvrurY4tXKLHieNEALGjqn3q7nEdgxtYc8zl/BX/Mx51oesI1Xtr8TPH5p
jbtwHi08WKOWP84ys9hJ1rLFl2VymbqFNa9xObHkKGtK8XbKhTX+ST1DuV4+
rKuEc/MuEu/HPVlniTfeV1in7X+43iXZGdb2Yt7HmXXatPJvhv56mdVx7vEl
VncxMLCPteyqPfuv31rPer/mtHvjZx1idVzHOLNu+27W9adeV1nhnHDacWuz
5+tR0p/VdeH8glfu+7GWXdj9XYmLvqxNxsbePDH2IKuphs+F7zc4scqezwWL
pzOxyn4usvuqjjkXM6vj+duZVXo9vi2frXL+pRqreH4awTrt1JVcDTeOYpXN
Ab63M6illlpqqaWWWn9/Kf9X/q/8/5P5v2xeEbyf+j96/4AU7ZcPt3+1/g/e
T/0fvJ/6P3g/7Zfyf/B+WvD+cTNP+5e/blP+/5n9H7z/xyJOXa8s1PFr8H7q
/+D91P/B+ycLcLIr/1f+/1H8H7yfFryf+j94P/V/2eeDwPtp/yn+Dz568c79
TO2rW/Br8H7q/+D9/1T/B++n/g/eT/0fvD+HgHzb/xn/B+83XqU3ROj4NXg/
9X/wfur/4P3U/8H7qf+D91P/B++nVf6v/F/5v/J/tdRSSy211PpXL+X/yv8/
o/+Xu7K6unfXSCz4v7gMLKljwf/HvjmU6NeuFiz4f5ULxgeidSz4v2z/7dHi
+i8cC/4fLt5fh2Hhejn6snXngDUhWPD/3OKD9hYs+P/kTRmTbXlrwVL/p0Xv
J5XN/8P+HXQfD/jcO/38+/v6v/ODaOujDWYs+L9sf2nwflrwflrZ/L9sP/PV
AhzMWPD/tcKnw7Dg/6fGxx37s1gQFv3/t0bLrz60/L9+4Pw/nN9Mz3E+9I25
fZJsMVjwf/Ex/EEWLPh/5ZgFo3v+asWC/7dbPvz7IyN1LPj/ndpNbSVGWbDg
/3GbDwedPhOBBf9ftPDuqR3fh2DB/y9N+fOPrTdCsOD/B3Z6lbpbVMeC/6ea
OeP1g7wWLPj/+M49S51oZ8GC/8vOKZCdC7Cvac5vjpbRsQnN/4P304L308rm
//u/qv3g7SMdC/5/r1irxREFdCz4f+Wnxk5TUVjwf9n5C0/ExlQhWPD/mJyl
w9zXWbDg/7d7PDFnsOpY8P+4JI3i/0gdC/5/vFzF6EtTrFjw/1SLyu/4vb4V
C/5/smjL4uYfI7Ff2v+/yVq8QUz5a1jwf0Nls5WwYMH/W0anPVZjqo4F/8/V
/0Cqn7+3YsH/k4unoUhsQv7fpHG3TvvfBGLB/8W2a6vN2ITm/8H7acH7aWX7
v8nm/4uVyn5j7i0dC140fMDr7bfCdCz4v9ierHUk9kP9P8NKY+esECz4/9N9
KVZn7WTBJjT/D95PC95P+2rID2sKDrViwf/vr32RbsAQC/ZD/d+xb2AgFvz/
2v6ZHWu207Hg/4KhM1uw1P9pwftpZfP/cF4yPTd5umtO87aqFiz4/yirsTNb
OPZj+7/sXJuuOyYv79NdxyY0/w/eTwveTwveTwveTwveTyub/3fLvW/17VU6
Fvwf9nWi+zvBfSx6P0v5v/J/5f/K/9VSSy211FLrH7mU/yv//4rm/6n/g/dT
/wfvp/4v239btr8rXB+L7f9vmtn8/+YJ7yY+KW1m8//U/8H7/67/y/bnlO3j
Ldv/9kPn/6n/y/aXfl//T2j+n/o/eD/1f9m+3OD9WXclSVLmXjSf/yf+D94/
NqUh2FY2/0/7ofP/1P/B+6n/g/dT/wfvp/4P3l/wer/0m+vobP7fcYxCDJv/
N54Fl3Uys/l/6v/g/dT/wfup/8vOKZCdCwDeT/0fvJ/2ff0fvJ8WvJ/6P3g/
9X/w/mYZTiQbU9vK5v/p+Qvg/fu0oV1yfW9m8//U/8H7qf+D91P/B++n/g/e
T/0fvH/BnxXPOv2uf3H/T2j+n/o/eD/1f/B+6v/g/capERl99L88/7977Pid
ZVyi2fw/9X/w/p8yFcl8f4flo/s/eL/+sErpwm91Nv9P/R+8n/o/eP+3b6MK
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
FHSfiuyJWlZa8sCMBf/3EZ+fDseC/+df3X/hi0FBWPD/ngLSLdiE5v/B+2nf
d/6/bolNxfrds2DB/w8LMNSx4P+yffK7f1e3d5oR4Vjw/+FzU6/fXyccC/4v
2/8/uvG8yQ1LB2PB/x1/rzAs+P+BzMbOFBYs+L/T5OpTCs0Mw4L/a/7tniW5
E4IF/58XsrhX6RwhWPB/2fkOsvl/mduD99OC99PK5v+XnTXEVseC/6cX/wMd
Cw4/Z2mdmbkHRGAT8v/mb04fzn8/EAvOvG7QmbhnZSOw4P+yf++81rMXj1uk
Y8H/rb31Q0ca6ljw/6UTjI2aIrGfy/+PegWlfBD/94WC/3sb2w1ktWDB/4dN
fva8ZhEdC/6/Y69z/K+gBQuv7/m2OsX/Klqw4P+yx4/M/2U/F9k5Mh3u5qp+
Z7COTWj+H9yf+r/s/IL3nf8PXT/WNH+AjgX/L+3i0zDrMAsW/H9kjx8epNoR
gf1Q/79i8GxJCzah+X/ZudXg4rSy+X/jn2rX34L96P4vOS+mlNgAyoKl/k8r
+++Szf9vWLNvXNRmCxb8v/r86oXqNLNgwf9L3/sj/qU4HPux/X+N3iz+oWnB
gv9rddZOOVHLgk1o/h+8nxa8nxa8nxa8nxa8n1Y2/39yoTXVm/FWLPj/mD+S
Tb2bQceC/ydO7Pn46B0LFvzfsZ9NOFb5v/J/5f/K/9VSSy211FLrH7GU/yv/
/x/ra53/Z/vD/8f7O/UwTiKwsPn/lVkeDt80VGfz/9SxwfvTpzMuXGPY/D/1
f/B+6v/g/XnLpXAu2lL/YP8H76cF76f+L9uf/0Pn/6n/JzT//1f9H7zft9Cw
EXpHO5v/p/4P3k/9H7w/S6XHc9wPW9j8//Qr0yMml7nG5v+p/4P3TzJ+3U7q
Cfo/eD9tQvP/1P/B+6n/y/bJl+0bD94/INLYYNjyl+f/a47b4en+6Npnn/+P
S/rnQSdzDJv/p/4vm9/+WP4v+xwBeD/1f3B36vDg/Y8MpvhBZ/5fP3XnIp3H
RrP5//0lQt7uPB7N5v/fNBuyvtYrC5v/p/9e8H7q/+D91P/B+ycGnuoYdk7/
aub/qf+D91P/h9dz6v/g/dT/ZZ8fAe+3PtpQNNGTGDb/T38usnNkwPup/yc0
//9X9/8B78+a90W58b11Nv/fqvPg6O43rGz+n/o/eD/1/489/0/9X7Y///v6
P3i/cQpyUKSVzf9/LP+3iN+XCD7/T/wfvP/v+j94Py14P/V/8H7q/x97/t9L
fF4vms3/U/8H76f+j95P+4X8P6H5f+r/4P3U/8H7qf+r+X/l/8r/lf+rpZZa
aqml1j9yfTT/N/65Gtp/7387X1jyv5fdFxDnC/XiFecNbmYdXm1UOksvd9Yk
BbXYls2DWYt1Md54B7IWTDkuZa89JtYmBWcMqbLHi9Vx7p8L6/nz3/z+i5c/
q1nMi+usxmmEPg3jWEf/aMiIlfVUyu2lXoRZWHd1i+s/bm0Ea1ZxA+Iwq+zH
ez+0ZNkfw1ZptHWEdy5nlZ2HlVec67WANUic8+nEWlEcDOfG2mtUsnKnZriz
Gu+u27T0Y/1FzEn7s+7P0Pji7QWerO0t2zdu7+rLKtsnxPH95n3XotKSB3GR
2C15stcbXiBAc+ofEX8FZcYm2bw27cgTIVqOI1l3bkoZzPrbvqK702b1ZxXH
jLrzOrzNl9XsvOb5n0Mvsb50MQTHm3XiY48Wawv5s06ZZ4CJjq1xQvwTmnGV
mnOyHQvnkRmntuXxNmO3HA46fSYg9L3P6W7mPCQwQ00Ta/UBvap5PXFnhfNy
aR3nuEZg4dw3P3HjyIaN8RUX2NrhObNLWA7asfD3d+xTYMbG/yFtuviFasML
iBNGWeE8SdoG+Z3HzTzNe79S33JNa/FG6Yu2tUxlYvV0Kp3sbgVPVoc/ubI2
1yI37bjgzrpwUCbfMs4+rC3XzfeKcXZndZyf7MLaf/Xe9PqVy6yVd58ovzbU
i3Xaq4WFF9sjsXnFAdgB2qOb3ZfEVrVhi0ycPcstNkhrbtzOzBCLDT+6OdPg
dWFaUbHhhB27NGOP+IdWiCZuH6aPwcLzf8W8jeMvnQNZZfuryPbncZzH7s7a
pLtxI+Yia+fViZ9la+HLKrtvaNw9WdPGn9X49ECGgSbWCuKcSd4tzSLMrgc8
WWXnMybaaztbUj/KKnOSTafzDBz/1pVVdr6z7Pf6YQvjBqsfq+z5eemM7alv
WEysGdqOWJGvljfrhg6FFk0Lv8p66o8mSUOHm1hTaWuyne0TwArnSNO6X6/W
JtFNP1Y4T5s2zmJ8B/1Y4feAVrbfHZxLT9vvpBB1Vtn8QxPj40I+zqwzUmxz
f/vWk9XxuDaxnhQ3UnXs4Q32Sakf+2s/X6x+ad8QGxZ+H9uJc4BjsI+/KRBx
a0ywFtY32fxNp/1Yvfu5DDpc1cQq80ZXv7Tf5zvpxOq4v+HLCuei084b0DT8
V89ILJw/a0p2efQruxVrOdii2f06QdoC47jQTdewJcvYomuGB0mf52X7XMme
/2Xve2uuanX1UN/DrM7ifcol1oHG030uX9a+SS7uTV6ed9XvG+4XP2bBws9l
qni9t2Edn18J0TIk2/I2VTM7VnwM5rtQLe2FW4XzbrFhe4gbfMHaCZd2rW8U
vIaF83+fiMdFNHZFYIqFAw8FaqPE51sCWGWPk3riBdqL9duoARUnlvRjTW6L
uz1tcADrY3Ee8iXWRJOelG4yej/rEnEe72nW+2cDX0dePMXa2niaXvcnq+wc
9sPPVuxufMeJtai4vjnKKrsuMAmIXsFaVbzf386adZjH1UXtT7GuS3opzTep
g1nXi8+/BbDKnq9k7x/SnRw8PGvvvax5z5dqnCb/flY4z5z27cw6UUk2e7B6
7rZ2Kp/Sh3VzpUlL1w4MYXU1jnvP7MO6P3ZOvlXfXGaVzUGNFQ/4GNYA8Tmx
ANay4ue5nFV6/S6+T4M02mni+nsIa6IJdddZD3fiVUsttdRSSy21vv6l/F/5
v/L/T+b/4P2CMUJ1/Bq83/LmevCZvPZ/nP+D91P/B++n/g9eTvul/B+8nxa8
n/o//H2p/4P3j+ju9LTMAbvy/7/p/+Ca9zO1rz4vWMevwfup/4P3U/8H76f+
L3v+V/6v/F/5/6fzf/B+6v/w+0f9H7yf9mvzf/D+x55Hlr+7quPX4P3U/8H7
nzb8/ly+8rb/M/4PPwfq/+D91P/B+6n/g/dT/wfv/25ilVaVn1jxa/D+4lnz
rKiy0ar8X/m/8n/l/2qppZZaaqml1v+2lP8r//8H+v+S6xtjY5KHYMH/HZ4d
jk3I/4+frH1wYvx1JxT8/1jhWZVKdrNgwZdk+4SfPXLb9s5Jx37o/P+w33dv
CfjRhgX/32Rsi9NGx4L/T7VdjZq3V8d+qP/3iJnmctJuxoL/G7tltOqsY6n/
04L308rm/7d79Hkx5rWOBf9/IDZAsGDB//eJ66QILDjhm5+9bg6sE4IF/79T
u6mtxCgLNqH5f/B+Wtn9C9n8f5Y6O0r3CLRiwf+v7Z/ZsWY7HQv+v6N1oGvy
aZFY8P82fadO9UkciQUXqmHs4uIbjk3I/x3nUAZhwf+T+87d2KFQCBb837Gf
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
1tkHuiN5f0/eOSUtuT7ji+R1+LHk62w9Uj035IvM+CZwvEkx7M3g458znhOQ
81PWuxypHofk3U8S9r2z7i4yen2z3VFIl8Qrawe3CUcufe3/26GqOiTvdVqB
Of2ODnQLRyrbs/2XxiD3Las0UDodjBxbYnD2lZttkNz317z9vP+1/w/E/tf3
5eK6gBgxYsSIEfOvHtH/Rf8X/f+X6//Q+99eynWw5BCJ/hp6P9v/ofez/R96
P+s/1f955yeh97P9H3o/2/95ewFE//+2/g+9f+eLh3uPNDLSX0PvZ/s/9H62
/0PvZ/s/9P4PW9335U1IFv1f9H/R/39A/4fezwq9n+3/vJ+7FP3/5+z/0PuH
kRcEEv019H62/0Pvz2qlfGc0iv4v+r/o/6L/ixEjRowYMWL+l0b0f9H/f6H+
T26r0T+aCv0/rl9EzSzDZSr0/3E3t5Qq1l2mQv9PbZGWw+yikQr9v/3dV+f1
52Uq9P9FS/LUOuYlU6H/N53YsEfbQjIV+n8B/2YRcYESFfp/V31x7YcrMVTo
/6bXEmxn3YigQv+vO7V8qYT5EjWz8//Q+1mh97Pyzv9vUPL6fpkKHeOozaVF
8SckKvT/D6QHxFDh71k/pu7+jg6RVOj/vPty887/Q+9nhd7Pyrsv0Ny2OT92
a5NMhf4fcmL8iVoBEhX6P+++/ep/r6fC+8oyR50GzffUU6H/n3xT2SZwQxwV
+v/mufs3NH+rp/6o/v96uGnh+dbhVOj/p1sWWJ6lk0zN7Pw/9H5W6P2s0PtZ
eef/D3e7/KKZv5EK/d/FIS35q71Mhf4/cufqdoULGqnQ/6t+qTXizIo46rf2
/4GbK4992zmSCv3f8jfT6UOdYqn/dP8fSJ54wqnQ/3n3t19RwHVDnS4SFfo/
uYyYT6ZC/z806lyXTSWMVOj/dY1LOnxNkKnQ/3nPY+r90vRU6H7THbJ27pMQ
TYX+v7ZCUL7EhhIV+n9y2LaGmu0SFfp/F+nTmjhJokL/T1ul3DAkhppZ/x8+
SDa1sYqhQv9fcbxIDtsvEhX6P29PTae376LrNJCo0P8/3y1WLqCDRIX+X7ia
3ZsAhzhqZv1fuWnQlilhVOj/E/Ynla2nN1AzO/8PvZ+Vd/7/lrLeJb9Mhd7u
Q+67o6d+a/9Xrjr2PBVOhf7/tF2P5NrzJCr0f97fh9w2sZiRCv2/X4v7hkVL
ZCr0/9lpJ5f5z5Ko0P/X59Hd3maUqND/r7rsWvxqYhz1W/v/owJvR8zMF0mF
/u+0uvH4KYMkKvT/akPM9tbeJFEzO/8PvZ+Vd/5/1NfabscHy1To/1mzBrx2
fCpRof9/yHHbc0BfiQr9Pwd5oRtDhf7Pex64R+7Dp6eK/i/6v+j/ov+LESNG
jBgxYv7LiP4v+v8v1P+h97cbtC881zYDOv/P9n/o/Wz/h97P9n/o/Wz/h97P
9n/o/Wz/h97P9n/o/QOzldrZzllC5/+nxisf4ER0/p/tZtD7Wf9s/4feX/D+
k2rmtsno/D/b/6H3s/2f9/eE3r8zV3ejz+IkdP6f7f/Q+/tfmDY+m5v03fs/
9H62/0PvZ/s/77798D7yuOmgjP9oQOf/26U86re8k4TO/5uQ4Cej8//sfbP/
6fP/bP/P7Pz/X+3/0PtZofez/R96P9v/ofez/R96fwcSxuS/7fx/yr3d8U/b
yf94/4fe79gmed2Qkwno/D/b/6H3s/0fej/b/6H3s/2f9n6m//OeH6Dz/T5W
WfgtofP/ZA24zoDO/7P9H3o/2/+h97P9H/oo20szO/+f4L7y8vaTEjr/z/Z/
3p4a6P1s/4fez/Z/6P0tL6VUrO4io/5/kPwcTQI6/98sYFf5AnXj0fl/tv9D
78/4YNasW1rKtP9D7++cdqXW3OzJ6Pw/29uh9xd5rrmemEP6287/s/2f9/eB
3s/2f+j9bP+H3s/2f+j9bP//3uf/u7UtdCldl4jO/7P9n/d4zuz8P2tm5//Z
/g+9n+3/0PvZ/s/bL8N7HhDn/0X/F/1f9H8xYsSIESNGzN84vNchf/b1yVvl
dUdPLGesyX8/XcOqvu4+ibRImHpofk4fpFxTWdwaiYQ9kKzqXq8A5HvSj92R
vJ+jVzuHjJyR8a7QrHMq8mnKxCtnJhuRI+LSYvrkSUFuJS+8seq+LAOS93PW
JknPTTU2F5EGsm8Nq16f2Y/ctNtibfkpp5C8fmVGLhDYIc03Vfr99+nnkOlk
j991pFOM44milgHIAeR8mw45Y7bVyFfFQ5A5yQUXHTLv4a5d3o0MQy7eGUpS
NWvJ9rlrtgjQIrvc35jxEQlBtu91zbzaEC3S5oRPkzwPfJG8+0LwzlWSNaX7
kqmpSTlDNh2L1OQiP1dgoKq9MZq7X3ucGt6QsJeSleSRi0HI9Nql1u0o5IWE
fYmsKf7nVo4aGkPN17zEuBtVQzVe5IJPMtXffME223URmlkkPKRQy14IfifH
R2sqr5ne/EIZifog8q558Fy9pjO5kBSBDDqmXNAIRfIePzMiFmd8JgKRdZR/
3j4tEvZOs8LeVFbe/VLU/a5eSN6e3yb2WQwDs2HbNBz01EnjieTti1zeWVnA
GkctU6LIqv11wzQ9TuVd9+CtkRr5wDDdb3yEprpfhYJ7fFKoOxvnXlMuq17T
nfSsVGpYubTbsSVjNQMatKsxu1USFfaK8u4zM+jE2usVt+qQvK9f9XyzFulH
HkdeSHW/oiMye3ZlY7En8sJt5eRqAJL3/aUs2T/shuR1JD9yvfoO8j3Zg+qM
7H14S2CSkx+S93FwMyhXNoOR6s+laJGlXSb0H94kDJn2cUyWtzewvPuEOFQe
1OX44gDkjI737h3d5o3sVkX5gg5Eeg+8afzSS4sMX6R7Pq4KlteddpEefw9Z
Y3mfpcsiXJG81wNuxwdv2TRci3yf7WnIifGhSKXWVngahDT1UjbVapHFC5c+
MmCEP9LixZdXj0e5Ic1G3m2fMNUfuZh0shhqg21K4Q3RbJyj/Ccjtc+6Witu
zI/4z/f5MKR6HTIUqb6+8EdOJfvY/ZCvyR5UFyTvnMC2+WOWPzEGIDcMzdlt
ZVAw0uLa0rw7D4Ygufen+s8+albYa80Ke+NZ1e+rnsg65OcobiFLksuubkjY
l8tqobzs2BWCNF3tlKtd41Dk0IXKBcAwJO9+X/HK1RN9EDIfWZDqj9x0z6TS
whcByIHS6WOnh4cgeb+PnZ+y6fsOkrf3XD2PcB9p2vPq3dpWzsixymXvIruQ
vK/3gDxF2y7UaJG819sDq9Tc8NVci6xELkhhea8f2gwISBxw3BWp7hm2R6qv
Q92Qyqmk/Ud9kUWVy12FQpHNTI5amht1yIs5G5W3mheO5P17ybr6YmFI3l7d
ZrsHG2fuiUbyHocj7XY3zXhuR+796lvrfst45Ja9eZaEDcTy7sNpTvYbH0Wq
70dXI83JeYq1SP77aU63/7OKESNGjBgxYsT82RH9X/R/0f9/+v7PO1cJvZ/t
/9D7m3d+0rXBwZSftv9D72eF3s/2f+j9bP+H3j+g1NLEaV9SRP//i/0fej8r
9H62/0PvZ/s/9H62/0PvH369TusPq5JF/xf9X/T/H9D/ofezQu8X/V/0f9H/
Rf8X/V/0fzFixIgRI0bMLzqi/4v+/xP3/9Zl3hzb/jGKCv1/c1/lxkoyFfp/
qy2tqlr0lKjQb43j5esOnWUq9P/Jv7d78eWVTIV+WOZt1k0R3kYq9P80csMY
mQr9X3k3NGCyRIX+T7J42Vgq9P/aK1dONXWOpEL/590Xmnf+H3o/K+/8/0LT
sRfMrIxU6P+7xu0tVmOZTIX+f9dXuSGPTIX+T3JkaT0V+v9Qr+q7eoSEU6H/
e5/uMyugjkTN7Pw/9H5W6P2svPP/a+7oGj3Il0yF/h8+yP29rYtEhf5fjHQX
PRUePwdKDpm2ZEI0Ffr/tq4n4vcNi6XC+/epMx2naGrGU6H/B49Y4vI6Xxz1
R/X/zz7eXmMmhVOh/79Kuvqwb3GZmtn5f+j9rND7WaH3s/LO//PuM5/nS3zV
oltlKvR/3tdvSdKnY6nf2v/HN0jp0NwxnAr9P+OLtUR8gWjqP93/Ny43NH5V
MYoK/b/NQo322SeJCh+HneRGaBIV+n+VB5MKnbCQqdD/Z+b7bbFdkkyF/h9V
O7D3lwpGKvR/3n3CW7p1nts/SzQ1s/6/1iI+24lD0VTo/x76N/ezpklU6P/+
j7J1uREtUb93/5/86fQT/eNoKrweUJ5s8prHUqH/k9ugHJeo0P8Hzfc0CzSR
qND/p70c2q7c/Vgq9H/lWa3u/Cgq9P+v50r7LXmto0L/n5hjy/E7FQzUzM7/
Q+9nrbL47s7CH2Qq9P/yXbLmX3ZUokL/r0BuSGOgfu/+X/VhQN6lzaOp0P9X
e5U1nGohUaH/Z3zwzKZMl6jQ/3n7KVya77mb0FWiQv9Xn/9iqdD/y8/zuKyt
Fkv91v4/vWK3oCz1wqjQ/5W7UJaqLVGh/9uRv5hEhf6v3MSu/x6JCv0/3yNJ
69HGSIX+z9v3cZDcUNFAhe46eXV3j1vWUVTo9pW3l0lq2y6aKvq/6P+i/4v+
L0aMGDFixIj5CUf0f9H/f+L+D70/pIrpItOxBnT+n+3/0GvZ/g+9n+3/0AvZ
fgi9n+3/0PvZ/g+9n+3/0PutByolU0Ln/7deOXRr68okdP6f7f/Q+1l5/R96
Pyv0frb/Q+9n+z/0frb/Q++Pi1qa8ZAyoPP/Ti87JAbvTUDn/9n+D72/0ifl
RsDSN/d/6P2s0PvZ/g+9n+3/vMcP9H5y++t9BnT+/22rUcW2FZTR+f/k3x4M
H/dORuf/i3t3z9FmmvzDz/+PfGMobKyVgM7/s/0fev9T5zP5e8fL373/Q+9n
5d1nHno/2/95X7/Qudnu/auf/39w8ffVix4kofP/7McBej/b/6H3s/0fej/b
/6H3s/2fd59w6P29Mn4XywkG1P8XfSn6+8B+iej8/9yM78a7rxvQ+X+2/0Pv
/7v6P++++vTcv1WXvb4vJXT+n+3/0PvZ/g+9X7nK27eDjM7/kzU6ZQ3o/P+Y
yKbFPznHofP/bP+H3j99t7LRQMq0/0PvZ/s/9H62/0Pv/7v6P/T+jnlf1Vm5
0oDO/7P9H3o/2/+5+yn+0/vZ/g+9/16lg5O3fZB++Pl/tv9D72f7P/R+tv9D
72f7P2/fB3RWtv9Dp5eHNDItV9mAzv97jDpywLDagPr/jWrrmtYZKYn+L/q/
6P+i/4sRI0aMGDFi/sn5s/2f9OaxWN6eI951gWb3iq/xmoHljBvpH4c1rCTf
FA1CHl5VpkXlRVFIzwVjDSn3dEjb9kqxCkZaLJl1f4Xkh1xk0fRRlHkgcnqi
h/HsFD3ycuqGigeyyMg7az8PLtPRiGw/07XEA9dUZBsnL6cenk+QKwLCT7/d
JCOb9MqVc3RiIHLowazvSv3misx402k2r4w7Ur3OYIe0u9or9c3kY0j1ffM1
pPr+wA45luy1O460K5XnkNzzKrLb5hWd6wX7IXn35zlHFpZh1fd5IchXu5QF
ZDpk47NpbVMeYdWPhxZJ3gYUwbaaMrZl4Bs/JOzrYyVvg0vHUacuVkKZTnMg
/3l32SKFSh4mb6M057fM+2hdSKI+S1UO2Os1W9KeXx82NgwJ+xJZi+XM8cHY
PgzJux/OQ3KO3x3ZK9bgdfVwIHL12I0mG/LEUDso6zO3hGjuhB2UUislU291
+1DN906Exvy2suAxhWpdSFnQq9cca2x3NGWZgRrTQrnxUTR3bx1vfxzvvhkr
Ruwo26mFH7JnY59PTc7pkOVI39UiO1VyWrT2jg6pfp1heXv6Isgi7DtIW+W2
PIG3kf3JAkxv5MeyK/IP2xaGrOhZrXbf1/FU9315E4LqhWtmHD31prKNkVoy
vkCf9mfDNS6/vcyTe3sK1amdEtqiNQtOTwopNTSVWvPxPpO6yvnj9et8UiMS
qeTHKgpGarKS/h2OVM9VhyEvbo1+PdwUa3WpxvmCJXXIAlmUzd/+SPXz6YRU
f77FDblsUoz/1wneSPW6ojtyrNTDaXq4A5LXqdz6uHx1WXYbGXHtXIMafveR
Xg3j3m1+F4qE5wlW9fk+BMnbZwr7n1nVn2vCljnqNGi+pxYJ+8NZeY9PPfk6
9kXyru/zemwvsufTD+nWutrZzpXvIfc5KhulHZDmyvHsLZ5I3n2K8sRPabK0
TigyKvfgURPcselksbwOmT1w2DVfi1BkVMJ+13zNfZHqXko/pEmLSAuf09FU
iyILUta7BGo6VByw4qJnMtU7ZfbIXp8iNeRl02Bsd31x7YcrOmRsvY9tt2UP
QBa9WsF9ZLMgZIOxx8ZGNr2F5L3eM5Ab3XkhV/TrOHtTvkAk7Itmffap5tuL
p4KQD/sW7/E8zh95JkvLVq1tA5BFb1vOKjneH6meg7iLrHJ6eb1pax2Rand3
Q8Zvvmjp+9kfmdS2XejmrFok7z5FsB+YNf7+jVsxjljYM8yahzw/+SNtz23O
b3I+AHklLN2n/CVfpPr15IFUvy6dkO+j6zTorj+H1L5QDhicRD78ah8wu8B5
pN/6WZMPXrRHZq+WOy5rq1BkxoPoyBULHXKd7sCKtG7eyKJlJ3UruNEHydvn
znvdW5icl3FDqnuzI5Hkck/ucCTvce7UZEJQnwkByNcrrLIVSPJB8u6LSE7d
tI1Grl64ZlD0UANy2eOVtgkfwpGLDpWuOLqODql+f45BVulx4K20OAH55onH
Frf6OmR6zoUZr0AuItX3r9ZIA/n8bESq//0cLHfPL6/fc95fixEjRowYMWLE
/N0j+r/o/6L///T9H7pdUcvDepM5Mv019H62/0Pvj65ofbLD65Sftv9D75/T
td/57FMl+mvo/Wz/h97P9n/o/cEB9zqeH5Ui+v9f7P/Q+1mh97P9H3o/2/+h
97P9H3r/k5g+eZr+liz6v+j/ov//gP4PvZ8Vej+r6P+i/4v+L/q/6P+i/4sR
I0aMGDFifpER/V/0///B/p9tfsyc0nWiqND/l8xW7lQQS4X+T25HUlKmQv+v
lX922sllEhX6f8zbKp+9x8pU6P8fSHCWqdD/J09/NG9ra5kK/X+bcjvcUIkK
/b9+t/ll32Y1UKH/D3NWfhJfomZ2/h96Pyvv/P/ZKkWq2b2RqdD/byk5Pb9M
hf6/oIl51ym54qmZ9f8Be2fld5gbRoX+/2rigPv1rhiomZ3/h97PCr2flXf+
v9X+x0GRM41U6P8xlVKOlH0SS4X+PzVeeaKLokL/Lz9y/MizUiQV+n+ObiuD
jtnIVOj/z2v22RlbWaZC/8/4s71yWsdRf1T/3zyiafN89hFU6KsJbWIiruc1
UjM7/w+9nxV6Pyv0flbe+X9pzfYrh24ZqdD/04sObLU5UqZC/2/6eoOfnb9M
hf4fr+/4Zk9CLPVX7/8dfE17dHOPoUL/h+uF7HXDZhFxgf5DJSr0/w1vIse3
3i9Tof/vfPFw75FGRir0f7snq3Low2Uq9P+ZK969b1NdpkL/j8na6kTTZTHU
zPq/ej0vkgr9f91g5Y4YcVTo/7z7sSt3RRtUNYr6vfs/b0/B5LJ9Ht4fEUOF
/q8+T8RQof/3m7hqVXDWOCr0f7mIcoOOGCr0/0s9V/++rVoSFfr/rKnjjnuH
JlEzO//P6//mbW6PcZ2TTIX+v+5wtWYmR2Uq9P8Sd5Q7dxmo37v/9xlqmTDq
UTgV+n/5aJf1vj2jqdD/z5tZBbY4rqdC/yf5uLieCl00YnC1V8sco6jQ/xte
b/7Etlg09Xv3f/X+O2FU6P+9X83ONsUrigr9v89vd5r6+UhU6P9wfyL2PkXk
dkybJCr0/yGjle8oEhX6f8HInot6puip0P9TwpXAHkUV/V/0f9H/Rf8XI0aM
GDFixPwPjej/ov//D/b/zM7/s/fnh97P9n/o/Wz/h97P9n/o/Wz/h97P9n/o
/Wz/h97P9n/o/Wz/553j5fV/6P2s0PvZ/g+9n+3/0Pst7Y/1WJgq/+Hz/47u
SmmOR+f/2f6f2fn/P9r/ofezQu9n+z/0/qM1TN70GSqj8//sfbOh96/copTk
JHT+n+3/0PvZ/g+9f41mcW7vUzLq/4lX1g5uM0D+287/PyILMxLR+X+2/0Pv
d3tv6/JopPG793/o/azQ+9n+D72f7f/Q+9n+D73/uLImoJ/8y/d/6P26j4WC
JnlK6Pw/2/+h97P9H3o/2/+h97P9H3o/2/+h97P9/3uf/yeZP0xG5/+VbQc1
30o/zfl/slZjl4TO/0eSG7hL6Pz/0O7Bk2tMlNH5/4on7Vve3C+h8/9s/4fe
z/Z/6P0NGi/xPXPD8IfP/7P9H3o/2/+h9/9d/f9bz/+vrRCUL7GhhM7/H7l6
NrDuMwM6/3/IQ1ncYfhpzv9H7fKu8aaTAZ3/Z/s/b08B9H62/0PvZ/s/9H6n
1Y3HTxkkifP/ov+L/i/6vxgxYsSIESPmV5j/up+oNZaz/9fa2btc52Pjkerr
o75Yzu/jtlh53bQYaVLs94H9eq9CmpKFeFeQTqFTXw5tF4ycun30xGqHI5FX
2zfrrfuoQ3byD2v36VogshdZaOWNrOkaMS7qsBY5IfprHrvzkcjmlQophRFJ
thnuf4B893TbqgXlniAbKbnnxANkxov3A5VzSUjY48p6bcJlzYxhwUjefQzU
/YR2SAuyX3Qv0ox8/m2RNmQf7FWkut/sJFLdF30EqXblu8iMN1Xlq2wPRJL1
djV0SN79W3j3x+C9fwkg7y+xjy97L6oV6Y9cQf4dgUh131ocFXpLydoXY/Kt
T6bO/aBsao3UnCTdN4nanuzLjtJUT1w1+l7eMOTHkxWTm1XSIb8OsW57tSg2
MVkphv5Idc+wL5J3v5GcTjV61zJI1N+KlDHp3VTL3WugbGOevkyinpW2tx1Y
P0ZDjuv3jkDyHuey1qPN1hOhSHWPrj8S9iuydj5W2PZslXAk7z5RgSb+O52L
hCN595sydB+Q8Sn1RarPZ/eQFzI+WjNdbyObFP/k3LOGDzKqV1zn+xt1yAfk
ug32+ZmLTp+2G6nlyZ7ccE3PcpOv5h6XQlU7ZPR/fo4ilUqe3abGaMqRvd+J
1HvDcl1dci5C0/dRlcGXbXRI3v2aLMPIMzWy76yAOpvraZFev4deXtw+AKnu
GfZA8vZLdnvvHmQo54mc03KemTTWCWlqd35/pVPnkOr127tIPemmd5BpZC/6
fSTsNWVdXHRhD+sDYUi1J2mR24I6Oc57jl0bJ9W8sCAMuZT8nBU2xG3egScN
tciJ2dwynsJCkLw+n6ZcVujhjoS9r6zw/MGafX/v8Te3+CMznowLyd4eyHSX
8E9xbs5I84J7fLY/d0VqWwffz3/UHbmEfLw9kLAXl/USuX4ejFS+WosPCkWa
KZc/S2JhvzprPeXpuIQ/cjy5HhWGPOZlWaxxLSzskWbl7evsVrq56/IVIUhe
9zYj+5mvINXXBfeQvcjn2Q1ZtJrdmwAHT6TpmI7FT0dgO5Hnb6z6PId1On1h
QNYbXsh8FZT/gRtS3fuKtVN+rCDUC9lirnJSxAep9/86YX9SEJJ3X6k9ZK91
MJL3vPGaLIoNQrqS65C+SPX1gjtS/f5/Gzkn2xSvkEsOSGuyX3oP0oJcv1qC
LBnmeXL90ltI9VyDB3LgZZt+u884IWGvMivvvn9jV/RNXHDtLFJLDg6cQPL2
XFcruvVSqHs0Un39jl10fdmczXMjkabpn3ekr/VH1jC3zXgqDUF6kSeEYOR6
sng3DOk2Qneyzr5E5IU2bS131ohB8q6bkB8/zKdFKj/VGl4jHhli9fTqzozX
B6z7lKfvUt5IO3JOZB+S9/ZX3d+7W8NqQq7jLcWSPc+jsX/6fTfn/bUYMWLE
iBEjRszfPaL/i/4v+v9P3/955y2h97P9H3q/ybHQ0vf8kn/a/g99ju3/vL0G
0PsbVZBn1B2VKvr/D+7/0PvZ/g+9n+3/0PvZ/g+9v52SeUsmi/4v+r/o/6L/
i/4v+r/o/6L/i/4vRowYMWLEiBHzd43o/6L//wv6/8a3rUYV2xZNhf4/eOH2
HKuexVKh//Pu3867P3aZ5RdGO4yQqdD/O8/tn6XPYZkK/X/EoaAnwa0MVOj/
X2u7HR+8xUDN7Pw/9H5W3vn/+eVGfB4XKFOh/48if6BMhf6v3ucjlgr9P9TW
91B29ygq9P+D83MecByZRIX+z7vfOK/X8e5rxDv/H3KpcFe3NCMV+v9d3wct
+5nIVHickx/X3x9Dhf7/THM9Mce0KCr0f3KbjmkSFfp/Vqsq5aOGGKnQ/3l7
ImrVT05oExNP/VH9f3nLUrUvxkRQof8HRpi+GL9ZpkL/V/c3yFS2/7NC72eF
3s/KO/9verruB/1umQr9H+7TxN6vaX+Jl7OOz5Cp0P+VLRD5XsdQof93qJOt
iiY1ivqr9H+SxQvFUKHjHVFuu2NmpEL/n+Zjc8KniUyF/n9u373zbdrKVOj/
Fcvmy/iWJVOh/5PLPfmNVOj/vjsGllqaKFGh/xcif46e+q39v+rDgLxLMx5f
IPR/9ft2DBWeT+QlHb4mbImi/tP931Bub9ip3VFU6P9N17dv/2WJngr9P6ls
Pb3fYYkK/Z9chtsqUaH/e5/uk/GIl6jQ/2cUt6kyI6+BCv2/0AmLWi3rG6nQ
/5V6fzRWpkL/b7NQucOSRIX+f5B8AzVQRf//a/3/U+oc9y5REVTo/+q/T0+F
/s/bK6G+DtVTof/znjdE/xf9X/R/0f/FiBEjRowYMb/giP4v+v+/oP9D719Q
+PKgoAsGdP4/rl9EzSzDZXT+n+3/vPtjQ+9n+z/0frb/Q+9n+z/0frb/Q+9n
5fV/6P2s0PvZ/g+9n+3/33r+n+3/vPuN/9n+D72fFXo/2//hcc32f+j9NrJy
Yl1C5//J7V5LGND5f7b/Q+9n+z9vTwT0fu9rX4uN7WNE/Z/dN/G9z//HKl+2
JxLR+X+2/0Pv/7v6P/R+Vuj9bP/n7WuA3s/2f+j9myZZJ/vGS/+a8/8ZT75m
U6ZL6Pw/2/+h97P9H3o/2/+h97P9H3o/2/+h97P9H3p/i/pb32fvL/3rz/9X
IDdkN6Dz/wHK7f0rSOj8P9v/ofez/R96P9v/ofez/R96P9v/ofez/R96P9v/
ofeL/v/Pnv9n90pA7+/09l10nQaSOP8v+r/o/yai/4sRI0aMGDFixHz34b3O
4V0X4OwXtibXAaYgeX+sujfPXsPqMkHZLKhDZun0WG56LwqZ93DXLu9GhiG9
Qwvmr3hbhzyW8bc1c9MieR3D3Kir3nySD9Kk4/qHI3wkZP/HygLPVGSeu0Pa
Onk9RM7L0dB5jU0asol51ym5BhqRuivxrRfERiJ5/9421fNYfC7igxxK3ldd
QJqQfZ6nkbx9f7zrCC2ChhfxKH0LWadzp7pTyzsjp64tkvEK3glpR65v3EN2
W9XQZt7JQCTvPj9pB+uXdbQKRcLeS1bY68tar+G1sHSfEOTuJUPH1L0VR814
MBe6lK7T1BsdPr1it2TqkTFzWrfJEanZF55r29Tr4Uje/T3aHOjje30itsHg
/o6l8vgjefv+3md7GnJifCjyyccxWd7eiKXCn1uw/oELVx4Yqcp/279ThOZm
9Uf1cw5IpV5+ecQzR5kYzcetyiZaA3Xfoylxe19H0/2frLy9dcdTk3KGbApG
Fu1W9cGkQqFI7vOGY33Lh/mx6+82q+ueDTsmb/vxBeZgec8bbuTCUQCyyiEl
UPggXV2zbJwd6I68tHpb1xPxXkjvgeTKIrI6WViK9SUL1uOpylWHcvfDNPdL
9nLWBidTyWVPM/g5ilRqOfKJidG0SMthdnFrElV/77F7VZ9Iug+ZNbfGppTL
hDAk7HdlHZs/7xCPUYHI0WSBqjfS4oFjl/qNPJEXyD5hD2Q+5bc74oOsYrrI
dOwFN6T6NHoDGV96orHo1ftIPbl+chu5qaRdb7vHd5Bq9/JB8j4+vMdbq/el
HUqeDUHy7v9zpm+4V07rcCTsp2XVOr1IML4KQu5bNzPLsdAAZEnT0KcH67sg
2wwISBxw3BW58lbb7qsa+iFtyV5iD6S6N94Jab3oQR/7PjeRamfC7vr8uWne
Xg5ItetfRKrPQ67IBsrT4JNAJK/TKj+9tPtBMFK5erxpuBY59oKZVWCLEOSa
sRtNNuTRIe1ch8843z8YOdm5fDarKiFI9fMThOTd1055sl+T6o7kvX5Q9wOf
Q6r9+wqyind6heyyK5J3XfXLWov4bCf8kTdWZp8fMycAyfv38q5nLehhfWBP
L2wt8hcIRBZ2v1kmYrsPspPyZdzXDal2dA9kzo/d2ly57oMka9PzeCG1ozrY
X/joglSf/xyQu2yyjSxa/SxS3TttgzQnP/d1Dqn+9xeQm8h1gFPI9OnKF84t
JO8ciJZ839qHNO9f4vqjm3ZI/fkt8z5auyNtlMuEhb2RMyIWN3vcOhC5jRys
iEL+1nTXi4d745DKKY79dcOQecl1JC0y9pjGu90gLyTvdXtL+c74p2Niker1
5zikut8+Esnb6819PRNQvGZSsh5JXg1Oi0b6kfcBd5ANjk1fn3D5ONJWOYZV
7BTSmlwntEKanFKuU+1GWsRuTFpYZA5S7O0VI0aMGDFixIjJZET/F/1f9P+/
3P+h9y8Ndx6svyfTX0Pv/9n7P+9cMfR+tv9D72f7P/T+WpVDWwffTxH9/wf3
f+j9rND72f4PvZ/t/9D7e203y/jMJ4v+L/q/6P+i/4v+L/q/6P+i/4v+L0aM
GDFixIgR8786ov+L/v8L9f9o36azpRexVOj/gz82ih+5LoYK/X9ZQPjpt5ti
qdD/hzkvfnjjskSF/n/ljs8azWKJmtn5f+j9rLVKVtjX/JiRCv2fd3/vo+S+
DrFU6P9LhnlV39Ujigr93y6LYWC2UtFU6P+jZ0e1r31comZ2/h96Pyv0flbe
+f95Hpe11cJkKvT/VltaVbXoKVGh/1+vuLXf4816KvR/cruYzRIV+n/bsZ2W
H7smU+F5w5Cr8drFvWQq9P9K224lT+gqU6H/32850m530zjqj+r/TTIerWGN
I6jQ/z30b+5nTZOo0P9fJV192Le4TM3s/D/0flbo/ay88/8ZD/rc3qdkKvT/
5N8eDB/3TqZC/y9PPuGxVOjbZjdtl05cEE2F/l/w/pNq5rYR1F+l/88o8bl8
l6yRVOj/yt1Zar6VqPDxqTegstfWqjIVHm+z004u858lUaH/8+7/7xC1zm7D
eiMV+j/5sO6XqND//fIUbbtQo6eK/v9/XUxuoBRNhf4P93Vi7++0atpMxyka
iUr7v1WXvb4vpf/f//T/xcq3jwESFfr/ycTRvX16yFTo//kSG9asW1qiQv93
jpd3nOotUaH/T3fI2rlPQjRV9H/R/0X/F/1f9H8xYsSIESNGjJh/yYj+L/r/
L9T/eff5h94/omj1YulnJHT+f+aKd+/bVJfR+X+2/0PvZ/v/t57/Z/s/7xw+
9P6VHzwaxr2T0Pn/p57P7+Q2NaDz/6Y2Vv06zjag8/9s/8/s/P8f7f/Q+1mh
97P9H3o/2/+h9+eqER56q7qEzv+z/R+eJ9j+D72f7f/Q+9n+D72/4I3Wq7ZY
yaj/sz32R53/Z/s/9H62/0Pv33e+69NCVY3f3P+h97NC72f7P/R+tv9Dz2b7
NvR+kpePGv415/+DOpec6e+biM7/sx8f3uMNej/b/3n3/4fez/Z/6P1s/6e9
/+jBziuySqL/c87/PxnQuaWVmwGd/2f7P/R+1P/h3D/T/6H3s/0fej/b/6H3
s/0fej/b/8X5f9H/Rf8X/V/0fzFixIgRI0aMmF98SNevrcFyXi+R938jsGTP
0jQs539v0aKkz7WvC7G5tf335F6LJGt6izkgycs7My1S7WQRSNgTy8r7OX0z
svfSH+nyRVmo6oVc79sztEE5PbLF5N/bvfhiRI62f1v/6sxU5PSMj14p80fI
GusPV2tmkoa87mtRYfPGFOTpLC1btbaNRSrv/nNrw5C8fWQLyF5oB6Sh6b3i
a7yOIm2n3X34rsEapIHsa72OPDqo6g7rmNtIi1mVM94630VOJd3CFTmWPACs
kdumFQ2p73QP6fEhx23PAVqkW+tqZztXDkZ+9FQWrgUhYQ8ta87kh2nWlmHI
tXd0jR7kM1DPddlUoufAKE3dgi2lQVPDkbz728CeQNYCc/odHejmiYS9kax6
su8uFPl6crkb8qFY6v4WWSePidBqdhTat2vN6WTqSJ8X677cjdSQyzDlJOrk
GhO31F+o15C8uSMCOWyQbGpjpUPy/r28+xQVjOy5qGeKFlkiddinT1rs8j5L
l0WU1yFhXzQr7z4bQZM8p9m10CJrPN5nUreqP5LX09Tu6IHsRJ4XbyKztjrR
dNlufySvP6iPozhqsKHc3rBTOk35fg43Ct43UpWKWvJVuGbKi1cdO/qlUAts
sH+yKodeQ/7Vtw3Uq2HpPuUvRWtW2SZ8GJAWjoQ9wKxkHXPuEOSmeyaVFr4I
QJaML9Cn/VlP5MD79a6YfvJAWpC92T5Ida+yL1LdT+6OXGLR9FGU+V1kxoPI
bF4ZdySvX/G6N68n876/8O77RHLwcWzBvudOzOwThoy32uc3JBnrp6zbfhyK
5P3+PqTrBCB5fU/dX41V93U7I/c5jty5up0Dch35vuqEVL//uCCbPMhXZ4qz
K/I9ef52QarPZzeRo3eltkjL4YbsRfZJhiB59/OpotwGLX8Qsv+TZz3GbAjE
bng9Z+q4ECTv8bAgZb3LkeqByKhZfZsPTw1CrujXcfamfIHIh8PHvbuUyxc5
luwZdkBuqtPlYvUOZ5G7lJcX/T2QVWo9+fAxZxDy5W87FtacE4ocRr6fa5G8
PbAWRZR/eSDSbHLO5zb7fJAXRj6cvOjQHSTv9c9A6fSx08NdkW+lxQnZs3sh
edcBXz/x2OJW3x6pft3fQF4h52huI+3I9Y1LWM5+1fScC09PCrmInPGb6fSh
Tg5I3v5f9TrDFey2hprt084g1XM9J5HqXuirSN71RHXvtBbJ27c7+rdxfXdp
QpAbi5MXBsiAIyE3PZ5FIq+MIw94JOxFZ31dMSQqLMUHOXLIlc89pwcifXUx
WSLPxCGzNxi4yXVSPHLd+H5vWr4PQCYmDz2Y9Z0/suCKye28YmKRrT0KZnwl
6JFR5Dq2L7IvuT5mg2xBzvucRtpkdy+QJd9ZpPr+YA+S97bVmrwOmqRh5b4/
FXt7xYgRI0aMGDFi1BH9X/R/0f9/eP+H3s/6s/V/6P2XepTN4lhfpr+G3s/2
f+j9yld5GZNU1P/XkOsdyaL//+D+D72fFXo/2/+h97P9H3r/7YN77fccThH9
X/R/0f9F/xf9X/R/0f9F/xf9X4wYMWLEiBEj5mcf0f9F//8X9/9K5H4zsVTo
/xa9rplXG6KnQv8fnWTteTvFQIX+byP3LDf5qkSF/j/edqeX50eZmtn5/7c3
b7e7ttRIhf7Pu799z8Y+n5qci6FC/5+S2vHo1bPhVOj/M4rbVJmR10CF/n9g
49H0Wjckambn/6H3s/LO/0P3Z/t/vmHb+vdZJ1Oh//P+vbw9BQ9Kts9ds4VM
hf4/vWK3oCz1ZCr0/3JRQ7Y+HShTof9bVV2rbbgmlgr930i+PmKp/3T/Hxf4
eKrFjigq9P+nzmfy946XqZmd/4fezwq9n5V3/v/El9w9r941UqH/m56u+0G/
W6ZC/yefpgA99Vv7f+4djc5s7BhO/d7932rlVFPn7Voq9P/EK2sHtxkQRv3e
/d+1btcClcpGUOH7C2/vw41bMY4nispU6PNTBz8r1+qpTIX+33vmpEbXmxup
0P/7X5g2PpubRIX+z/v9f7b+r1+uLGzRUr93/9+5aIflUj8dFfp/jmk7PEeb
xFCh/5sHz9XnNY+lQv+vWcmy/Ss/AxX6f5OMR1eZ8wYq9P83fYZaJoySqND/
eY8H5W5tljsNVOj/geT5SU+F/l8+2iXjpUo0VfR/0f9F/xf9X/R/MWLEiBEj
RoyYX2xE/xf9/1/c/zM7/9/33sTbAwtI6Pw/2/+h97P9H3o/2/+h9zv2S4q5
8DwZnf9n+z/v/vbQ+yPtlIIqofP/vkXHPG4wPQGd/2f7P/R+tv9D72fl9X/o
/ayZnf9n+z/v38vbUwC9n+3/0PvZ/k/P+zP9H3r/85p9dsZWltH5f/Y+29D7
u0if1sRJEur/Sp0PKWD4287/kz+2pgGd/2f7P/R+n/KXDqYdkL+5/0PvZ4Xe
z/Z/6P1s/4fe79J8z92ErpI4/885/19u5PiRZ6UEdP6f7b3Q49k+D72f7f/Q
+9n+D72f7f+83/9n6///9Pl/x8AI0xfjJXz+n7mfP/R+tv9D72f7P/R+tv/z
Hg/Q+9n+L87/i/4v+r/o/6L/i/4vRowYMWLEiBHzf4bX///r/t8/YTPlffkM
7H/9/81Bpl9oe2ritOtI2AvKyuuWXbLmz/gdtcg7ZBFrMPLo1gaxe3ZiP5VX
/p9ByDglV+3VI5W6uGuxEal2vhTkKJdz0R12PUTOIgs3HyN3Ns69plzWh8iZ
j6PXF1udhCTrCGtGIJuub9/+yxIt8uNJZe+WO5J3XYD3cOPtoePtj+N1UXVv
211kX9LhLiN5e/FMB72f+uCCD3JLgUknX7sGI2FPJqu+ToPu+uJapPLupvBU
bJTydrcclnedosGLITGVUgKRcz4o5dcbqb5fDELqDigbKGOocP1Ct3DGm411
jVS4TlQ+SNksmUK1am2sMMo3SmM/Obbex7YGarYThwrOvRWlifZtOlt6EYZM
crJ5f3mGDsm7/1LZG/Kh/m9DkOGLdM/HVdEiYW8q656E/i2rxGFhrybr8Jf2
lQd1waa1sX6+eF0o0svWfFWbbgHIsuRAdxDySvtmvXUf3ZF+62dNPnjRHulW
yt7xkpc78kvR3wf26x2KzFYg6UDlXDrk7iXKQtE4KuynrnRw8rYP05Kp68gD
I1KzoIhZ33MnUqi1Ah5l63IjWqNZ4zyjRf5EatKA4+Vvdo3QaAe8y/Y0JBQZ
0OFRxkMGy7u/VqWrPnFVrrsheXt4l+SpdczL0hvZ5G6v7Wb1fZDqzyG4IbXv
u0bbR95H9uperdfYJ97IG0+7f9zq7oUsr6x73OWJVPvWPWQT8vzqhswTP6XJ
0jqhSN5+yZ2ks4YhJ7b5mHwuCKvctat3Uy2Sd/8r9XJgIDKIXF9yRxrI1zeW
9+81Vy7bbfFE8j7+vPvqWIZdVb6ikFV2poS/qO2PjHhgmO433gupvi5wQ/Ke
byvFbFi2vKU/0q9Xk9rvCgQjeftka5jb9tLEhSBjyF5THXLZ7kNTBz8LRsav
Gn0vb1gQkncdTb0OfB1ZgywKt0OucNv0ttUobyR5VgnRIQ0LlSeSUORK8vNX
HkhTr7bphz64IW8oVz3230batAoaXsTjEnLowu05Vj07hVT3w9sjea8z1es8
rkjltMm+YR5I3uuWGuRChiOSt8/ajRwsOYY0Wz2mUs4re5F2ZG/5GWS6dtqQ
ASWxvD2/6cp68YtXkHUutcs1puMtJG/fseVSv9zXOwQim52/1ehQNLZ44dJH
BozwR94i1zEikCPtdjfNeA2A7EDOjwQiu1pNOe3qqEPyXnfxns9LksXToUje
OZz0nl7WC9dEIl3I5zMYOaVw9tbZG0Qgea+LVpVpUXnR4EhkwrPTnVwrRSOt
rRt9nrHcA8l9v5bqIDUZug3LeR/H2+drTa5fTUH+yLe8YsSIESNGjBgx/+oR
/V/0f9H//zX9n7e/AHo/2/+h97P9H3q/9PlB5F3zFNH/f/L+D71/abjzYP09
mf4aej/b/6H3s/0fej+r6P+i/4v+L/q/6P+i/4v+L/q/6P9ixIgRI0aMGDE/
6Yj+L/q/6P/IszeDj38+o6dC/6940r7lzf0SFfp/UCfHec+1EhX6/z0SViUq
9P+eB0fE94uQqND/eXsK3me82y3qFE2F/l+y9sWYfOsjqNCjxrVqkP4y0UDN
7Pw/7z5R0PtZeef/exa+lWNBOyMV+n/olik9YpbLVOj/cN8l9v5LU+L2vi6x
VqLC+1x/kqElKvR/jfbZp5pvJSr0/5d5Z208n/H+G4T+v3PN6XyPJD0V+v/2
6q+Trj7UU3/W/k9u53RIokL/H3dzS6li3WVqZuf/ofezQu9n5Z3/H5it1M52
zhIV+r93aMH8FW/HUH/W/r+vzlPP53d0VOj/OQYod5qIoEJ/blnVomf3ahHU
793/J1RteuTkLokK/T/l3u74p+1kKvT/86s8+j95JlOh/+/pZeMWVdtIhf6f
06lG71oGiQr9H+57xd7/ann9EKunV6Op39r/P6bfnZU1axgV/r1z+mfpc3hL
OBX6P+/j/6KYc5MJQdFU6P+BJv47nYvEUX9U/39xeHTe9uOjqND/97R/mPEQ
k6jQ/y3PPT2V5GmgQv+f327660qNY6jQ/1tGnXWz6hJHhf6v3rdMTxX9X/R/
0f9F/xf9X4wYMWLEiBEjRsz/c0T/F/1f9P8/ff6f7f/Q+9n+D72f7f/Q+9n+
D+8729c+XnPScwmd/79Sa272IFcDOv+/eJhX9V09EtH5f7b/8/YX/Nn+D72f
FXo/2/+h97P9n7d/Ad7Xsv0fej/b/6H3s/0fen/NY16WxRrL6Pz/YiWHD5DQ
+f+3l3IdLDlEQv3/SNvfu588J6H+v3uwceaeIYa/rf/bPirwdsTMeHT+n+3/
0PvZ/p/Z+f8/2v+h95Pbkz8yovP/bP+H3l941f66/V0l1P/Z/Rri/P//Pf/P
9n/o/Wz/h97P9n/o/Wz/h97P9n/e/gvo/c+uvZ7k5Gz44ef/J63u7nHLOhGd
/2fvqw+9f3+Jl7OOz5B/+Pn/i8kudeQiBnT+n+3/0PvZ/g+937JZx4oDVkjo
/H8v8gmRxfl/0f9F/xf9X/R/MWLEiBEjRowYMX9u/uv+355Y8r5nNJbzOlDt
VXOR3P1NnOHtgVI7zXXkhqE5u60MCkY2SOnQ3DEwAtma7K0KR5J68FGHjChy
Mk+Fp0HINmSPlh+yQ4cJ8y1rhyOPNyl28P5cCdl3WVLI+64PkNaFni68U+sh
snoei89FDjxGroh62HnyqUfI7t3c+214bUAW6jLipX3lSOT6u83qumfTIZV3
bUcWapHqHjkPpPr+cgOW9NGjSMOoR4Fz5p9EmpEDno7IfY+UYnwbaU26ggNy
avlSCfO7X0by9lQuiGtV0PB7MBL2x7Lyzjnz9h76Xp9o1qqLFvl6hVW2Akk+
yPfB0prtV/yRvP2JRXPm+GBsH0u9Ef3o0tgVWo3Dpj7m+48mUZUaUig6UtN5
RdaLyS4GKnTgtI9jsry9EYbk3aeCd18OL+WyXLFg5Mqu792DDFje+1+SiXdp
kdY59OE9CumQV0w/FW44NhjZi+y180PW6dyp7tTy/kheZ+Dd92NdnFTzwgIP
pOlqp1ztGl9Hdhsw90OZEo5Ip9MXBmS94YWEvbusscc03u0GxVOXzq6y+O7O
MI05WWhopK7+fVu1nSnhmtgVykHvFOrrozVM3vTRa07mXffgbWAStT3Ztxul
sa1QOuOfHoacWXfUrLlddchW70s7lDwbguT9u9THxT0kb6+uac+rd2tbOSPH
lhicfeVmJ+SOtgPrx9T1Rk6cemft58GByCsz36ZVXx+A/FRj93W/s/7IFsem
r0+47IrkXdcgWfthCNItqnZg7y+hSPU6iRaZQJ4vdUh1n60Wyfu6uOZ3ttSE
lQFI5+3dskfP0iKnLlauSOmQyYdvpy955I9sMUK5EqpDqteBw5Cwr5jV4oFj
l/qNwpGvSccNRarXu7yRvL2o6nVUF+Sng1HNlr/1RJacsLJ0eI0g5OPL3otq
RfojedcN1Z4dgOR1PPX65H2kbXvlZMA9pLZ680kHOvkilWfdcnvDkLzPu7ov
1wOZz+78/kqnbiEbkK+D48iHX+0DZhc4j4wnj1935BWyn9wXqXnx5dXjUVpk
JLnOE4G0uLY0786DIUh1jzRWvf7gi+Q9b/P2qKp70Y8jteYLttmu24e0jVxy
JLnYKaTJUOu2V4vaIw1FulV9MAnby2l6eOE2bki/u0sdLo7xRXYr3dx1+YoQ
JO95pkGo/GDjBi2Sd39C3n0UP7RRXtGGI9+Q/ck6JO/zNZQscA9Eeikvy8oG
I3eTnw/UIodsfTrwUuNo5IHhi4d8bBSPnLp99MRqhyORV8j1mQgkebtyTI/s
dc282hCzcGQL8nNBnkhr8r7qCJY8vnYgzckLxbVI7vu+D8r7xYlY3vku3vtK
MWLEiBEjRowYMT9mRP8X/V/0/39N/4fezwq9f/OIps3z2SfTX/PuAy/6//9W
/4fezwq9n+3/0PvZ/g+93+RYaOl7fsmi/4v+L/q/6P+i/4v+L/q/6P+i/4sR
I0aMGDFixPzsI/q/6P+i///h/l/mqNOg+Z56KvR/K/L7xVKh/48iXU1Phf4/
fJBsamMVQ/3W/j+y2LaCAUeiqND/t5VJatsuVKJ+7/P/JDtWMFKh/8P9Kdj7
VMD9ONj7cugsXX57mUeiQv/XWBxaeautRIX+z9sLkO/N23mNBsdSof8nNX5V
MSQqlgr9X32c6qn/a/2f5LwKEVTo5Kan637Q75apmZ3/h97PCr2flXf+v0G7
GrNbRctU6P/FvbvnaDNNpv6s/b/6b94ps0dGUKH/7xn/vmDWudFU6P/NJh3o
VMI0mvq9+/+jTU+23FwlUaH/m1VJNSnhLVGh/5MPRzmZCv2/d0LBG61XyVTo
cjsX7bBc6idRof+T29uVk6jwdbHNdl3RspMMVOj/bRYqd9ySqNCBi1oe1pvM
kanQ/0sV675F0hio0P8/xSmvDGQq9H/lUVr4g0yF/t//wrTx2dwkKvR/k0oL
XxwebaRC/4/J2upE02Ux1O/d/0ct2/DIzS2cCv0/bczwuLSYaCr0/0EZj7qS
dlFU6P+z8jvM3RIVTRX9X/R/0f9F/xf9X4wYMWLEiBEjRsx3GdH/Rf8X/f+7
nf9/XrPPztjKMjr/z97nHHp/gvvKy9tPSn/5/H/iyfBr5xoY0Pl/tv9D729V
etdpx2wyOv/PyrsPPPR+tv/z7lPNuy839H62/0PvZ/s/by8A9P5bhTYbYvPL
6Py/ecNcTjV6y7/c+f8j1/L45EpJQOf/2f4Pvb/c5Ku5x+U3fnP/z+z8P9v/
offz+v/sNOXG0tI/3v9/1vP/bP+H3s/2f+j9bP+HDsf2f+j9bP+HrwO2/0Pv
Z/s/dF+2/0PvZ/s/9H62/0PvZ/s/9H62/0PvZ/s/9H62/0PvP2pzaVH8CUmc
/xf9X/R/0f9F/xf9X4wYMWLEiBEjRowy75XXZa01SF6357yusyavE2chua8n
lyj7oIYg/+zeKLXvntKwBpw3DmlkGowcPu7dpVwH9cjjdypMXfwlAnlpep33
8w9qkY1r7SnquQq7b93MLMdCA5B7Ksyvfu5SMHLVlZdHPHPEIYPmzC/UZYSM
/O2M8gYwBXlHU2RByvo0pMUrv4fHez5G7u/okP/NWxmpvs9LRIbn2jb1engk
0mbz5JTEk+FI3n0hllg0fRRlfhc5h/SDU0gz0g8OIN1u3IpxPHEGmbZKCb/2
yBZKRil9C2lHrvOcRKp7Ly8j2wwISBxw3BX5umJIVFiKD3LoSeUzFIhU/75e
yE1Wl2qcL+iE5PXngn3PnZjZJwxZjJz7x1Yk+zbDkXYlLM7UG40la6fv6JDD
yM8z/D/k3I+Id18OdS+rFlnFdJHp2AvYLvc37rZYG4JUv479kPscR+5c3c4D
2cKQPrPlPDekmXKZreR9pLJVuNYeL6Rp+ucd6Wv9kft6j7+5pZQ3Un3ffwNZ
UvkyO+6IVPcfeiHVv68WeVtZ89o9jqpEiZHrdJo5/bP0ObzFSIXPe9m5o+zf
1k+hLl2/zic1IkqTquTUIinU/HmHeIw6EqW51vyJbbHQeKqyfXZP7nDu82F/
/6XDvKpjGwzu71gqjz9S7/91wv4kF+TI2mmj3xgckG59XL66LDuPXKesVyzn
hNwRUuBCtYQAJOx/Zj11tN3YTsuDkQ3GHhsb2dQHyds/HrS8snOclRfSpkA+
F5fmYciDe+33HA7WInnXYWuSfa3Y9iQcYXl9b+Lo2VHta2N3VH+ddPWhFln8
tHJFPBTJ66uTyvZ5eH+EDqleDwlFwv5w1qz1tuzNsyQMWf/59uRZ73RI2KPO
OpQ8Tzgh1X3v95FmWfIVOzXbGcm7vsO7blXtS60RZ1Z4Ih+XzvslvqoXkvf9
wo28IPFFwp5zVt7eXvX6uS9yYqPrGV/pN5FtyLkJR6R6vesacs7AwI69l5xF
8n7/izkblbeaF46cdSOoZbbAGGT/J896jNkQiJw3uviL3Gc8kFvSnl8fNhYr
k17ujhzrMKLWxol3kUvO1vcM7uyEtJtwWTNj2D3k2A1HtjaI9UDyPv7qfuZQ
5O2rr0xck3RIXt8+fuZ+yV7OWuTgVXqHVqWxvOft9KYTG/Zoq0Pyvo/zzpPw
vr/Ps94qn8kagvRqGPdu87tQZOEGv5/akKhFtr5FTmAgv8w0bNMPi0SWSB32
6ZNWi4yXdygb1pFhbQ/ecN8ch9z6PnvGhyoG+Sy96MBWmyORoyuetG950xuZ
nr/FihE7jiJ5vd323Ob8Jue3IM290ytkl3cgTW5bzio5fimW+z6Rc36M1//F
iBEjRowYMWLE/Jwj+r/o/6L/i/4v+v8v0f+h92+93MTFfqNMfw2fZ7b/Q+9n
+z/0frb/Q+9nFf1f9H/R/0X/F/1f9H/R/0X//1veq4oRI0aMGDFixIj56yP6
v+j/ov//9P1/dUqd6Am20VTo/1MHPyvX6qlMhf5vaX+sx8JUmQr9n3cOvEWr
1raHFxip0P/XaBbn9j4lU6H/5xu2rX+fdTIV+j9vHwHcj4O9L8cScn+aWCp0
g3XNdg82zoylQh/IViDpQOVcMdR/uv9PqHZ4//KNUVTo/5cGBV3o1j+C+q39
v3QWx/qWDxOo0P9XHC+Sw/aLRM3s/D/vug/0flbo/ay88/9LO07UT8whU+H5
0OHdvvNdn8ZQ/+n+rzx7FG8STYX+v530bD0V+r/9ilYrq67VU7+1/3dOu1Jr
bvYIKvT/y00rXhknyVTo/8p3mb51ZCr0/7u+yg1wZCr0/wXbc6x6VlimQv+3
HqgUT4kK/f8F+QKUqND/P+S47Tmgr0SF/l+9Q7F2sS1lKvT/akPM9tbeJFGh
/6cf+mA2ZbpEhf6/x0W5I55Mhf5founrDX52EhX6f+iWKT1ilstU6P/jOhsO
bspipEL/31nuYqOXLnFU0f9F/xf9X/R/0f9F/xcjRowYMWLEiBFjIvq/6P+i
//8P9H/o/em5z+x55WBA5//Z/g+9n+3/vHPg0PvZ/g+9n+3/0PvZ/s/bR8C7
Lzd0grSQE+NP1JLR+f95jZQwLP9rzv9veFz17tl5enT+n+3/0PvZ/p/Z+f+/
2v+h9+dqvHZxrx5GdP6f7f/QjXIX0S+bFCP94/3/Zz3/z/Z/6P1s/4fez/Z/
6P1s/4fez/Z/6P1s/4fez/Z/6P1s/4fez/Z/6P1s/4fez/Z/6P1s/4fez/Z/
6P1s/4fe/77qeLdW7rLo/6L/i/4v+r/o/6L/ixEjRowYMWLEiPlvw7suQKyN
5e174nR+/p/LeZ3J+/uQ15vWyPdkb9hpJHl7YOaPzPmxW5sr16OQd78MsW57
NQJZk4TNcKTLBGWjqg7J2+tnobxN2hWCzHjTc7xJsWjki7MFHKPWGZB+St4q
+RBZ6mHlF3auj5FTrs0a8SBLGrLr5hWd6wU/RGYj/SMJqflc5MDwxdFIhz2H
g/v6RSAzPqjF4y5iYR8s61DSj+2QJqkOUpOh25Bm5PO/C2lB9kjvR/qRN7yX
kOo+QwekgewnPIhsQD7/e5Gb6nS5WL3DWSTvegSvIymny3vfDUCq5+B1SGey
GBZ7enj5eR6XtUh1D2EI0mvblire6aHIZ7E3shfspEN6D7ypbEZEFozsuahn
CvYJuT6jQybXnjfNxyYUeSZLy1atbQOQLuuVwHsPqa/3se227JeQS/LUOuZl
eROp7rP1QJL13jZeyOSJV85Mbox1Ic8TWGVb5cE0HyRvT+K2oE6O855rkXmL
nZpdyjeOejl1Q8UDWcI0s4/PeBy9PoFaYE6/owPdwjUO/x97bx0XZb7/72O3
Yq2tqNiFuTboWmt3B66tq2t3YHdjK6KgYCMYKKgg3TN0KTCgYrN24s+559zz
+3zned4ex0WXZZ/XH5/rcT5nzzAME/d9ve6d1/jYz795itY205e6P04LNy0n
LUxP0XruuYXT18+IMG3XLn3+tiZ3tXav5j2g7O3o/7wPJWi9Yu69Xud7RQj3
FUrrY8ui88dPaLKgbgi4i7R41AMs2v+ued0fBC8etqV8h+bOYM9c5YY0nuoD
tkwoXz/a1x98O2Xwnuyv/cAvpP2T7uAU6f3gMlje163rEhtPhrhHKcCl01ea
xecIAYu+/+fIp2kd1zqin28rPnJ1MyV4VIF2vxWejhbt9xTt3zyQUrJY2QNx
WsudTfrYK5qgdQ5j07s9u0eYviu/uNCQTaHgpqvVzzQFuF+H8BV3tyvBn0Jj
x4csDQWL5krHTWr6VipyEyxtuT3qDjbeZ7L8zCBv8PwSc7pa7L4J3qvOrIeu
gdNcwz7EuV0Ba+aHF8B5peOOS2DDvtMtK7dxBYs685so9ULVS2D1dMUvvyf4
0OdPSUM3BfiF1B0DwaL3q72HvZvkv+cDFu359ZX23NqCnduqB0Y+4LxXn7W/
HeQBtijXvOrcgV5g0efO604zL7+vqQSLPr/m7itbeWRdJfiQ9IcLBYu6t2if
8i7NBQZg0ffmiV7vor9LMen5gjbZNOJTHbdgsGZugxa9/zRp7zr4qGMwWDM3
CwHLe+B13V9aZO8L1szBwsHSn6FPDFj+PNR1+c/v9qU+BoNFn0fDvdUHohHg
cz26pZmViAFrPhd9wJ7WRstad7kKdpOOUzaDRde9aM5vpqMFPd9EmsNvAwuv
1xLBfb6EEEIIIVkb9n/2f/Z/9n/2/0zZ/0V9Q+79E+7+cvDMsWTtf5Z7v27/
l3u/bv+Xe79u/5d7/5H7hV8Nm5rC/v8v7/+i62zl3q9r9n/2f/Z/9n/2f/Z/
QgghhBCSiWD/Z/9n/880/b/e2+jttatGaS33/9EXN5Qp+atKa7n/uzo+Svl0
XqW13P/Pq7+2oJxKa7n/u/68w+VW5ySt5f6/Xan+F9uTtJb7v/qkf8MEldZy
/78Z/fJG9kdJWsv95J70hQAqreUO01XqxHFay/2/j9T5YrT+Uf3fpG3NP1pG
hWot938z9ddCFQ3XWu7/oeYzrJslhGkt9//r9ToXrlI+XGu5/zd36zijb7YE
reX+P7qlSdqz24lay93muOU1u9ZtVFp/6/X/cu/Xtdz7dS33fl2Lrv9fs7pO
0tkeyVrL/b9DNvtlN/smay33//HS977EaJ3V+//wkpuK+B+I1Fru/w9mqb9B
Q6W13P/v1Gs9cuGaJK3l/i/6/n+Ts6Gfn0oqreUeGPPK+KOXuUpruf8XudBq
2YYlKq3l/t/zlvr/o9Ja7v9DbRfvHDNCpfW3Xv9/q3VM+LkCyVpr5wBpLtOy
Z1dpLff/9b1Xb527RaW13P/Ns7260LdDvNbs/+z/7P/s/+z/7P+EEEIIIeQb
YP9n/2f/zzT9X+793sXfPR04OxGu/9ft/3Lv1+3/cu/X7f9y79ft/3Lv1+3/
cu/X7f9yL9Ht/3J30e3/cu8foF5fMFkF1/8PuTIv9cKppCx3/b9u/5c7jW7/
l3u/bv+Xe8alI7dH9vRWwfX/us6o/v+/rv/X7f9y79ft/7z+//+9/l+3/8u9
X7f/i77/X+5/uv1f7v26/V/u/br9X+79uv1f7v26/V/u/UvXl3bo6aCC6/9H
u7V0PzklBa7/1+3/cu/X7f9y79ft/3LvV3/7/8Ocyez/7P/s/+z/7P/s/4QQ
QgghJCMR9X9990N9sfP/l9sXUfJ9/z49l5nqWiGdR1qCLaQ9kHvB8dLPv4A2
PrdNER0I3p/TvXC2ghFg19unVw5sHQaWTmP2KsFVznjHGZ9TgOdKe3EDwKmd
Ag42dggE13pgaVCvWgy42SL1gXoy+MXBmgYve6WCa19Yf6HsH8lgzd48FbjF
64uX2569D9bsFUwCf9i8cf0N/0hw8eoOL/0dw8BGfUudu39RAS4dX7hXu2Me
4ObSHkIbsGguYCF1miVgs7AKjy7H2oM1veQC2MRrT8vAoTbg6dJ12BfBovmC
ptMcB7sOyXNm/nFPcOKc4oa9j4eAf0vq6jwlLBQs7wHWtbT2d4oCPP5KxRxL
jIPBj/Y0KO+0JATsFlknoGc6WvR9PtJ649JKsLxHVNfDXY9Htd/mC9bsD3QD
azKKC9hztnninWvu4OjmHR92NvEBGzdpZnepkR/4p2JlD/Qbhh784YPCcGYA
uODPpUZfqBYClt4O+ijByt2LH3XZhS63Y6r95T1xWstzxvbH3/RdOyRZa8+n
V/PlrRlmerZAnew3OqRoLe83n7rWzjr01xStyzmWPmaVN8K0lDTovKP1H2V8
ir97Gmlazj7otSo+QWuXBY4nRpWKNJ001WmCaa1wsKibiR4H81IDcy5d7wsW
dc4Pz1aPufTUCWwhzSUugsPnq69UvwpO/LXfjLflLoN9pV8QLdobK9oH6uvl
OWrcRk+w6HVX4/aykdcKhIJFezmlsaghOvekLR4jDZTgcgedB8zyUIA/P6gV
CvkqwT23zKk1/TB6hflagzX50d0Vu0o9mxYMbj1C/S9ABIBFn4OWq6ZmOxTi
Dx5weOW5yhuVYNFeXdE+6Pl/GM9z2XoTnNj02k8rPF3Bmv2r58DmqYW2j965
Giz63DHvZDVv/7KNYINo9fv9GrDDPPV1E3vAbtK8ej/YIOFpXtO9+8Bm0t54
F7Bov3l30zgr2xvO4LQjC/2mnTgNnij93sfAmq55CBwvzZfOg/sb11rzycgN
LOr8iY2fVw6ODAVr5oQhYFH3dkl9bVJsogJsMP3k8k2dQ8CieUEJ9drgoiHg
1CTFzdYb0ZYLq/RPsgkCS29PZQPAwW4zdz9sqAAv7awemAaBNX9/P/CbHI+D
D/8WAg6bq3w62lgBFvVz9adzpceBYNH3iTV/lMvwxMYosPTo7UJ7SHNatPrT
cPu9ILCb1cAN64YqwI3Ua4MPR4HPum6b93xsGLh1P//b/ayCwZr3oatg0XUp
1u22Ns634gxY2OFFvV10PiX998PQ0n9vjhaex+l5/kUIIYQQQrI27P/s/+z/
7P/s/39r/5d7fxvzDosOnVVp/7Pc+3X7v9z7dfu/3Pt1+7/c+3X7v9z720x5
UaWxMoX9n/2f/Z/9n/2f/Z/9n/2fEEIIIYRkNdj/2f/Z/zNN/9c8j2K0lvu/
5vtp4rWW+//sJkadJ+SJ11ru/x+7TTnQ5n2S1nKHvBKv2nK0Z5LWcv8fVqJG
yTTbJK21/b/MeaeTnjH/v//T/0Xf5x8f/cvLHbditZb7/yPpe4BitJb7/5ZN
T67YForU+lv7v/vEbm3n2oZqLff/IP9rv9iNiNBa7v8TpRCUqLXc/6XT+/KJ
Wsv9f+7UoSvyHE3UWu7/VT6Yj0/bkqS13L3Dzbxtek1TaS33f1913t2m0vp/
Xf8v935dy71f13Lv17Xc+3Utuv6/xJ0X2arGJmst9/9yi+xHOg5TaS33/zt+
x5eOGByjdVbv/x22f/zYtEC41nL/F73uZlUY9nF0gEpruf/nKx69cFxMktZy
/+/xLH++zUFJWsv9P/k31TnHjiqt5f4/dfHrN61rqLSW+/+yFJ/49SdUWsv9
f83LiN9a7VJpLfd/6eunuqq0lvv/rKMG4aajk7SW+//Z1UYN8zgnai33/xVx
SbXsZ8dqLX8Onvj8qdGnXpTW7P/s/+z/7P/s/+z/hBBCCCHkB8D+z/7P/p9p
+v//uv6/6GGz2i0aJMP1/5PPH+o6564Krv/X7ZBy79ft/3Lvh/7/n95vaHzX
oJRXElz/r/t9/nLvt1Lnuz6qf+z1/7r9X+79uv1f7ty6/V/u/br9X+79uv3/
f13//736//+6/l+3/8u9X7f/ix6HrNr//9f1/7qvO7n36/Z/uffr9n+59+v2
f7n36/Z/uffr9n+59+v2f7n36/Z/uffr9n+59+v2f7n36/Z/+XNPWvtSQcXr
/9n/2f/Z/9n/2f8JIYQQQkhm5IvHj3rsEdb3dgTHvWZSN5qPlva+rgaLfq1t
6ss1ux811bW0Tri4N9i2d5hnboswcLl6sz6fokWCvUKKFKp8WQk2tzdcEtA8
GFyxzK1Zv5YLBL9wXNfLaBc6YFHVK3FLwsGGSealXdKjwKeKdXZ7tDEWbC/d
YRX4z3YLwq4MTAX3l3rGQ3DhRdk6PFDdAQ84tbfPdttosOjx1Mwx0MWkhc4K
cPwTmw7Xq/iAc+7q+dvFDVfAidL8xxIsep6I9gs3n2DeIuClPbjgwaKtTnV1
BQvPE6XbGwdWtAq6UejgebCmX/qADXd4b35aMQTsb5c8qFHeIHCXZQ33zjwS
AE7Z9vsv164FgkXdXhq/lQgEi74/x7f9/SWtkm+AzaTFsm5g1xcFw5Yv9wFP
XuCb71z7APD8Zg9alXsZBNbMBwLAOyrNqnH8ZBBYtN8wRPo7KMHu0r8XgZb3
+ura4eCdhQVfKMHdfq3e3fzhLa3lfYiP0kr0b7n+ltabb77NddkjzHTmbPUE
8bbWRTsNe3a+aoTpu0bxw1cpb2stzzGNK0YO2vg4Xmt5jiDaIzwk7V79I4PR
6SXU89gQ8O9/LBn+/KdgsOh7osY2OvfzQ2svsKYvXgQbt13ef+bIS+CCJY/+
UcbHCVxT2teNHrntbvNHudzABzeaxO7Yeg1ct0iLpAETncAlpH2MV8DHh6eO
n7vPH7zjVt8WxnEKsNXdhNzB64LAok4l+p4uY6+0SjlVwWDRXlS3xLnz89cO
Ate1vH25cboS7Pja0q7zY7SoT4rm2ia77U/fe+gCLi/NK9zAv/fIO2WwsyPY
xPyQeUTT3WDR8UBa7jk244L3ga2l+fBmcJfshRYe/NUaPFH6+UfBvaWOvhes
6fGnwJp5shO4ibTP0wE8cWXxz88we7BofqHZ02sHVoxof97+3UGw5vNwFbj3
NP+66+s7gBWBa5sP6+YDbj9WfQ+Cwa2lf3HNF+x2ckrdN7N8wIt6LVgYXlEJ
PnqwrXmHRUHgYU1/Lni+oALc3idv1y7uSrDo+6z8pc+lELC8r1vXJ890v/ty
fBDYbP60G4uTfMGrfuvzssUbf7Do/hssfFm/y6xAsOj7xLYe7ZlP0Rd9Wjru
8wfH2G2Y+c5CCZa2creJAkeFdS3ap0AsOMfFtyMPvkeL+vzr4aG5a0yLAKes
GnSkhy1aNNfusn5xx/pBvmDRvFh0vCd6H7DYm2N4iRpzwKJ5n6j/W0jzvQlg
Yf8XIZoLEEIIIYQQ8ldg/2f/Z/9n/2f//yH9X+79upZ7v67l3j9J2aXz8EEp
2v8s+veYRP8eAfs/+z/7P/s/+z/7P/s/+z8hhBBCCPmXwv7P/s/+n+n7/4R5
6gIbo7Xc/ztKvSpaa7n/53zSeH/r3VFay/0/VPo+gGit5f4v+t7+6RNHW3mF
RGn9rf3for/6m6eUWv+v/l9yyqfQ2PFRWsv9/8Dns2ZDt2it5f7/5OyLcc5X
ErWW+3+HV6+j6pokaS33/8pHzre4uCtJa7n/dw7MVn/DTpXWcv9v5/LcLtpO
pbXc/49bXrNr3Ualtdz/L0tfkKXS+u++/t9xfGz9d21StJb7/6bqW++E/Zms
tdz/rZ8PsSm1L0lruf+33NCymlm3JK3l/i/aE5FV+7/T8K3L2xaL0lru/88K
TFtrZx2rtdz/1d+S9WB9tNZy//84yKLNmRIxWsv9f6D0h43RWu7/f24rPnJ1
sxit5f4/cM7mXMuexGot9/8b0vdnRGst9/9N0vMrTmv2f/Z/9n/2f/Z/9n9C
CCGEEJKFYf9n/2f/z/T9P6Ov/9/X95XVsxeJcP1/9UGGO+usS8py1//r9n+5
9+v2f7n36/Z/uffr9n+59+v2f7n36/Z/ufdHuBgFzYhOhuv/jxcprRxpl/yX
r/9vf/xN37VDkuH6f93+L/d+3f4v937d/i/3ft3+z+v//9/r/2sdUn8Tuwqu
/89TMyzkUo0kuP6/vkdQx9JTk+D6f909HXLvtx+l/mBMguv/4/qE18o2VAXX
/29V//qGSXD9v/o/HfJUQf9vcfJO5RquKuj/pmb7ll5qk8T+z/7P/s/+z/7P
/k8IIYQQQv6N6Lt/6q36vLO/qa6Fx8+i42HBvi03qc8tBxtJfWglOK9nm7R9
bx3A2zw93k0+HwT2kfZAhoN/G34saXOb/+L/7HHVdVBihZ2hR5Vgef+qrjVr
6rzA4/ecKKryCgVPlK4XTwLHOLYsu80mGdw7f9Mevxukgme9syj6eM4D8OUr
eW3qvU0Fb6nxIuFMaiJY9DhorotVgI+b1PStVCQULO/D1PXSS21+XdbQF6w5
/74Ktp6k3hS4AiyaWxmpM2mdfeB10l5Ke7Bor7Fm7+t5sKY/OXy1Nd36Brjs
z9cXLbbyAHua+6+eNt4HLNpb7bxvxPFO63zAFR+Xj3i2zQNs2He6ZeU2ruC0
pmMbdm3jDm7i0n2zYQNvcO9Pq45F3vICZ295uOnC7X5ghfOft5KfB4L/WFfw
wGkzJVjK6/0U4JcPb25wa6AEi16nVWtWztW5TCh4U+fD8ZZD0O6WBW4F1g8D
i95PbF5W3RuwJgy8/4n5jQhvBdhz0wZjr7QQsOj7iETfX/TkQ61XJ44GgkXd
zPb1403LZgeBU6V9yO5gzfvZDbCleoxXxgss6vmauZk7WL3l83C8J1j9bN9z
wh387kjllGZV0KLbbz7j1N01lb3B5aUngB+4tbOnc1ePALCmywaCRXs5L0gL
x4PA6m2khyv5g0X7x5/EXshZpIMSXHpeiTldLbzBoveZ0tL7ihPY0MFuV5Wj
u9GCvbq9YxM9z+w/BU71O750xOAj4JyFE3ZXzXP+q50m7WPfDTZ8POdq7dKH
wW9mNhrY1+kEuHng0OI3yx4Hi7r9XmkudwxsJs2T94LTWls8nbfqMFj0+SKa
l4n2WZv3GN17m+l18NgcbidyNwoGhxaNUv8rWOBH0t7gQPDnG6tovDkAbNS3
1Ln7FxVgK1OvtgMsw8BN2rsOPuoYDBZdR9G/t3rzui94S5v+DWLqeYFDKzy6
HFvaH5yy/3La/Pt+4Ktbi73dMNwf3F+63sEX3Pfhk66j1gSA5b3cuhZ9H9eO
5+oLQiLAH650q/nTgBCw6HqJtT/dHfLhgwKcECwtVgbXemBpUK9aDPihoVvv
yu8iwRM3jxxbfX8EOGxTQ9PNk8LBFqefHfDIFQA+LR3vXwYbSXPX9WDR6YVF
tfiLk/JtMdW15jxgBthMOg+YBdbs8Z6LFpy/GMxX399BaGnO1uG/mHt7CSGE
EELIPxD2f/Z/9n/2f/Z/9n/2f/Z/9n/2f/Z/9n/2f/Z/QgghhBCS9WD/Z/9n
/2f//879f3TAg4lmWyK1lvu/b/4SbeaYRmst9/89M48ciBmn0lru/+3qWNUa
9zRJa7n/D7VdvHPMCJXWcv/3rnhyz6PdKq3l1+nMm6cU1UNVWsv9v1roZNce
z1Ray/3f7Y216/3hyVrL/b/DdvUXlKVoLb+fNKxVr+z9dclay/3/zLGAek9q
qrSW+/92ZZs9F9yTtJb7v2gfgWh/wQHphhO1lvu/5nvOYrSW+39j6ftLorVm
/2f/Z/9n/2f/Z/9n/2f/J4QQQgghWQz2f/Z/9n/2/7/5+n/Lg3s6Ls6eBNf/
6/Z/uffr9n+59+v2f/l1qdv/5d6v2//l3q/b/+Xer9v/5fcP3f4v937d/i/3
ft3+L/d+3f4v2kcg2l8g937d/s/r/9n/2f/Z/9n/2f/Z/9n/CSGEEEII+UuI
jocFnV94O4Ljc2vpfGIt2EDa3zUSLNoPq9kz6QEetebARpPYULBL+iCLNmfC
wdaVyrafVjUU3O9G/dN5P6A1/V4JFu1p7WK8YsrP9gHg06Ol8A6uMaZa0wNH
EsHFLuWa3XZKCvi81bk/3JIegrs+jSvzKfUBWNMvk8GTSgQ3cK5wGzzjbblS
xZdFgDXdTgk+8mlax7WOCnDtFg02vskZChbtr1QV71Lt3jh3sNG6Ku/fTzkO
Npf2VK8Dm0nXQ1uARXstp0vnqWfBml5ijZZ+/hqwaJ+dw9Kcs2Km7wcbSufT
J8AW0pzkJNjT2mhZ6y5XwZr5zE3wZGm/qxdY1FFXNds+MHnqTXDh6X0O9nfz
AKdeNDS+a+ADjvb7NGZXQiB47Mg/ItvVCQbXLbNqS1FLBdjn3FjDlp3Qz7cV
H7m6mRJ8X+rc6MQ5xQ17Hw8BNx/Wbc+weCVY3j+s67qR6ccuBgWDRfsl1203
W1lxQihY3u+q6wtR90+aL1aALRdW6Z9kEwR+Ic1J3MGanu0KNm7SzO5SIz+w
c4zT4RKT/cHlhzSeWurjdfB8dZ7efRPcSNqz6gG2XDU126GQq+C8y53ztG18
A1xQ6tNuYLcLlz7fswtgk9mNXbpvdgCnjD1tO77xBbDFsC3lOzS3B/eWPn+s
wKJ9r5qOtR1scmjK6lunrMCaOd5lsGZedxqc+um8/x+F7cCa55Ej2NxxWO21
Y13A0fXftdmU8yR4b0t1SEeL7r+1tL/aFhwt7TU9DzaXPt4cwevqdjpRo/1F
sGifb6I0f1gOFs2FRXuEm0t7753Ams//m+DSU/18tvT3A4vmROucLs6+4hUE
Fr2ux7gfdln1mxLco3g5g55NFeA2RU+mKYOV4CK9jx+e2isULO/B1rWoSxt0
eKBqes0brNi9+FGXXe5g0efOijxHfdPT/cEVdky1v7wnDGxle6N09ysK8HCH
7U3D5irBTwYUqd/wbCi4hPrPUD4CPLD684VOhWPBojmgaB6a0KZtyPrsCrCo
q4vmC0cLrLr3KiAK/Mw17EOcWwz4hvQ+Fw5+JM0BvMGi16Noj7amr69BS8cj
k9Ci8wXpeH8s2Ew6LpsPFv7zorlARp2nEEIIIYQQ8m+G/Z/9n/2f/Z/9n/2f
/Z/9n/2f/Z/9n/2f/Z8QQgghhJCsB/s/+z/7P/u/nv2///qq5q86Rmgt9//u
Uq+K1lru/5r+FK213P9ftRxRclMRldZy//9lTY+B1qlJWsv9P+aV8Ucvc5XW
cv8PN/O26TVNpbXc/6MLqP9ySVrL/f9DnLrYqrSW+3/nwGz1N+xUaS33/zn7
ylYeWTdGa7n/F/ZrFh4XkKS13P9TbwxTHqkbr7Xc/4tVd3jp7xintdz/S+TO
9Ta5XazW7P/s/+z/7P/s/+z/7P/s/4QQQgghhGQI7P/s/+z/7P8ZfP1/pFE5
u4kfE+H6f+lr/3snwfX/uv1f7v26/V/u/br9X+79uv1f7v26/V/u/br9X+79
uv1f7v0PktVfUJ0E1//r9n+59xvPc9la7K0Krv9vcfJO5RquKl7/z/7P/s/+
z/7P/s/+z/5PCCGEEELI90V0XC3Yx6r37WfQeYHBiRTXuqqdYN+By6IdW54E
x0v7vjzBg941ih++Sgm2q36r7NjkcLCN1DnQmv2uYWDReaJ1yRBLx9ee4Dv3
+yzq4BcKnl5k8fi2njHgRb0WLAyvmASusWD1Ku+7KeDkSiN8Bi5LBS+TzlMf
gu8m5A5ed+gOWLP3Lx4s6gmi70VpZnBwslGyEuxQysy2/sgwcOA4j0kOzRXg
6Pbb9uYY7gm2mHuv1/leF8ETpf59DGyuPr0sbgEWPZ0TpeeRrSlY6nN7wCbS
+etOsGZeYQ82293L59xYa7CJNMfYBtbMx46Bp2+I3Gpe/xRYsz/zErh1hRs7
2qU6g42lrnYF3N+41ppPRm7g9u3HzJpcxwPc/dfq3c0feoHlPbe6Fu1bbLq6
Xbv0+QqwqCNp9qaGgEXfU3Tw3ZzRHRN9wKL9zr7S4M8T7NZxRt9svfzB/ufr
53rSGJ37XZfWp895g0+3a9ZT+c4drKjx87jdHS6DX0jzEHfw4NxdlgYe8gWn
KSYN6lfaE2wbMf9ASklHsP2Z7ndfjj8DFu1dtZZ6+R708fWFDOw2gEXPc8Pl
o6rkPr0TnNj02k8rPDeBt0UoLcofOgTu3clq3v5lp8ClpbctB7CvNOc8D3aQ
/g5HwE2658k98rYL+OCAalssYi6D90r7z4+C30j7co+jpT3J58Gi/eaiv6Ol
0/Cty9uiNZ+rNmDNzzkC1uxv3wF2k/ZgHwZr5gaWYNG8YGm1lYqGK26CfV0W
OJ4Y5QOW3l6LK8CrXZrVc8+hBI8r30v9r+iAI/MNHDHGPQQs2odb4kwl9+HN
0Dsqzapx/GQQuPwF1b6+r4LBpn+mP38wQgHudGPtdrOVwWDN694H/GLxkhyF
E7zB664ZVJnzpz/YaGlUDzMzP/D+XYvW9nTxB4u+x0zeZ65r0RyzwusJK866
KsCHYv3VI2Jw/PoTk30+xoBXrPjwp9GkePAoe8MlAc1vgydK1zsEg1dJe559
wY/2NCjvtCQE3DOfou+OfGFgx0IvX81sFAkOdpu5+2FDBTh6bK4NVldvgEV7
ukV7vUXXJ4iutxFaz/25FtJxxzi0dHvTwF8+H/kv5x0ZdT5CCCGEEELIvxn2
f/Z/9n/2f/Z/9n/2f/Z/9n/2f/Z/9n/2f0IIIYQQQrIe7P/s/+z/7P/fuf/n
6ld/dmOXcK3l/i9lzZ+itZb7/4gC7X4rPD1Ga7n/75I6ZazWcv9PD40dH7I0
Vmu5/2u+RypGa7n/i/YUnKmj/mKfCK3l/v/413cb3S3DtJb7v2fbAZZhecK1
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
B/Z/9n/2f/Z/9n/2f/Z/9n/2f/Z/9n/2f0IIIYQQQkjWg/2f/Z/9n/2f/Z/9
n/2f/Z/9n/2f/Z/9nxBCCCGEEJL1YP9n/2f/Z/9n/2f/Z/9n/2f/Z/9n/2f/
J4QQQggh34a+x2mEZAZEz8+36vOP/mjBXED4zwvOR9zKnHc66TkDbBGhXvy6
BKyZJ1iArSe5pL42WQEW3o50v8aCU9UZffB58CNDt96V33mD/5TCQii4RR+D
B4cdwsF9xi5bFpQ9DCzlgzKhYJP3R9fcNvQD9/606ljkLS/w0sBDe0/OjQfn
jT1k6tX2DnjgrubZx48KBxvOLLc979lbYM0+wLvgoMQKO0OPJoE1c4Z4cEWp
O4aBRfslyx10HjDLQwEW7QFsuyln2RfNw8Cvxle4oNoXChbtQ9T0Ei+w5aqp
2Q6FXAVreuQJsGjPtfD1KNjTl9hUvSfwINjk0JTVt05ZgTU9YxNYs0/7Mniv
NDC6ChbN0UTzBc1exPPg7rbqjdcXwV2kfao2YFEPN5H27m4D783pXjhbwWNg
hTQ/OQIW7cnVzCHRmp50BKzZe3wc3CV7oc/vUA5gzVzCFvxmZqOBfZ1OgEW/
l2Y/sx3YZHZjl+6bHcCiuYxofiqaw2o6+kFwf+Naaz4ZOYDzjvrlJ5twJ/Dp
ds16Kt+dB4v2Vlsf9m6S/94esGZudgDsK81vbcGaPeSO4CY/fbjSreYlsGb+
cxOs2YccCH7daebl9zWV4PSpiZuih0SAt1Y40eiZaxh4w6On54aYh4IdF7dc
Wm2lAmwiBdhg8KqPA8v9EhYEFt1/0Z7c4xeDrD7aor1CihSqfFkJntIj75TB
zqFg5e7Fj7rsUoIHS4vvg8Ga9ycfsHPbswsKbEWHqse3pf3BmvdjP3DBdr8V
nt4nEDx4T/bXZXoEg2e3nfKiSmMleG/hgq6uP4eCNa8DBTh//IQmC+qGgAtu
+7C3VcMI8LOf61dPrx0Hnm5ZuU35odFg0dzc/6daCSmDo8A1xz2t1WtrLLhA
new3OhSMBl+S5mPhYGNp4W8g2Pb1403LZl8Di+Z3om4vmrNr5vNbwdOveFXo
eGgH2ELyTIF/AwuPe0Xd/nsfnxNCCCGEkL8X9n/yT4T9n/2f/Z/9n/2f/Z/9
n/2f/Z/9n/2f/Z8QQgghhHwZ9n/yT4T9n/2f/Z/9n/2f/Z/9n/2f/Z/9n/2f
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
KFi0xznx134z3paLAn/+P6WKL4sAi/ZQWymWXT76Swy4Tqu3y04/iwOPa6Se
fESA1UO2hitCwdMb1BhTrWkAuOaLhDOpvS+BraUnmC1Y9Dmo78e76HNWtM9X
092ngIU/4IvH1//lOFna6zsJLPx99dw7zONwQgghhBBC/gbY/3neQTI/7P/s
/+z/7P/s/+z/7P/s/+z/hBBCCCGEEH1h/+d5B8n8sP+z/7P/s/+z/7P/s/+z
/7P/E0IIIYQQQvSF/Z/nHSTzw/7P/s/+z/7P/s/+z/7P/s/+TwghhBBCCNEX
fc8LMqrbf+8+L9r/xb1gJDMgev4LEHZ10f5fEaI5gmAuILwd0dxBdDuSzcEW
0s+fBhY9Ppoushqs6RML0Ho+Dm69XD+5LrQDm6248nvzQpfA/S8mp3dXeIE9
G8a9Xv86BCzaDyvabyvqWhXXVXn/fkokWFoXulcJDix4u2Gtev7gifPSS7zv
rwTP6h/wS8/5EeAzU189qrE6FuwmhUoVOHbH1gonGqH7G9da88koEbxKuXvx
oy53wOqtuzuNUsGvZqg3raaA1X+FXaVUYO+uk5v9UjkZPOv9nQI+vyeAY5wO
l5i8Pxps3HX3q6R5t8A9928ISHCOBm+T9nBGgAfn7rI08FA0eNW9VwGltsSA
b3Sc0Tdbr1jwdfWa3gHo3gsTgt90jgL3b7k+ovb4cLDo+dDg6eaUaa/RzRap
X/hhYNFe1CFp9+ofGRwOnrSy+OdXbDR4Tfvjb/qujQFnG9q10ejscWDRHmFp
fGioANu+frxp2ewg8Nqf7g758EEBbnzsUZs795Xgz3dqyJT20WBfny39yyy4
DXYOmfhscNtbYNHfd/sKm4L3kxLBNQ1e9ho8+Rb44EaTzy+1ILD/T7USUgZH
gTcUHnfkxfVb4BfZqsY+nB0BfjraWGHtEwMWPf87Hipmfcw4DJx0tke3NLNw
sOh5IprPah6/a2Ajr7RKOVVWYAdpP/YRsJH0ubEeLPx80fPzTvjPC49P/6br
ZIR7ePW8n0QDHx9CCCGEEJIZYP9n/yc/HvZ/9n/2f/Z/9n/2f/Z/9n/2/6wN
Hx9CCCGEEJIZYP9n/yc/HvZ/9n/2f/Z/9n/2f/Z/9n/2/6wNHx9CCCGEEJIZ
YP9n/yc/HvZ/9n/2f/Z/9n/2f/Z/9n/2/6wNHx9CCCGEEJKZ0fe8459yfPtP
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
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAwAIodtRY
    "], {{0, 256}, {1024, 0}}, {0., 1.},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Real", ColorSpace -> "RGB", Interleaving -> False],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{1024, 256},
  PlotRange->{{0, 1024}, {0, 256}}]], "Output",
 CellChangeTimes->{
  3.760325762137991*^9, 3.760325792430735*^9, {3.760325829902781*^9, 
   3.760325837193933*^9}, 3.760325883445005*^9, 3.760325952333424*^9, 
   3.760326018865844*^9, {3.7603260994076*^9, 3.760326130539612*^9}, {
   3.7603262524771*^9, 3.760326265853806*^9}, {3.760326487921932*^9, 
   3.760326500909292*^9}, {3.7603265555235767`*^9, 3.7603265744856253`*^9}, 
   3.7603272322938128`*^9, 3.76038994523943*^9, 3.7603901477637987`*^9, {
   3.760390561843461*^9, 3.7603905877295847`*^9}, {3.76039091888945*^9, 
   3.760390923373721*^9}, 3.761274676550712*^9, 3.7612749851718187`*^9, {
   3.761275026569936*^9, 3.76127503939608*^9}, 3.761286360193124*^9, {
   3.7612895331228533`*^9, 3.761289584361298*^9}, 3.761290297135253*^9, 
   3.761290392546471*^9, {3.7612904446558027`*^9, 3.7612905022452917`*^9}, 
   3.761290658408166*^9, {3.761290738204204*^9, 3.7612907508001947`*^9}, {
   3.7612908039675198`*^9, 3.7612908068609743`*^9}, {3.761290912461597*^9, 
   3.7612909662301607`*^9}, 3.761291285532124*^9, 3.761291941560176*^9, 
   3.76129229319986*^9, 3.761292355942408*^9, 3.761342191594537*^9, 
   3.761343826987145*^9, 3.761345328852043*^9, {3.7613455261555023`*^9, 
   3.761345539362816*^9}, {3.7613460291317244`*^9, 3.761346092600499*^9}},
 CellLabel->"Out[82]=",ExpressionUUID->"2410c520-ea85-4d5f-a2c4-886488468cfb"]
}, Open  ]],

Cell[TextData[StyleBox["(* WM (True)     -      WM (ForkNet)      -        GM \
(True)       -        GM (ForkNet) *)",
 FontColor->RGBColor[1, 0, 0]]], "Input",
 CellChangeTimes->{{3.761285320312067*^9, 3.761285320312737*^9}, {
  3.761285350998035*^9, 3.761285359988879*^9}, {3.761285390181212*^9, 
  3.761285439013756*^9}, {3.761285618106595*^9, 3.761285622085277*^9}, {
  3.761287218016406*^9, 3.7612872242532797`*^9}},
 CellLabel->"In[52]:=",ExpressionUUID->"7e1ffdab-b43c-4173-b7a2-3e64b1c4bf57"]
},
WindowSize->{1346, 792},
WindowMargins->{{96, Automatic}, {-21, Automatic}},
FrontEndVersion->"11.3 for Linux x86 (64-bit) (March 6, 2018)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 5385, 99, 489, "Input",ExpressionUUID->"31ab4f15-a564-4379-aefb-635198957c4a"],
Cell[5946, 121, 1399, 42, 31, "Input",ExpressionUUID->"01d0cbb4-b87c-499c-9627-f4fe1ee2a535"],
Cell[7348, 165, 1997, 30, 31, "Input",ExpressionUUID->"19bf18a9-4a02-4073-bb97-9344b4bb5fe8"],
Cell[9348, 197, 350, 8, 31, "Input",ExpressionUUID->"9dcd62c5-15ab-48b8-9119-ad743d62527e"],
Cell[9701, 207, 1653, 28, 31, "Input",ExpressionUUID->"40d3c13f-f9e8-4df4-98ba-3b66cbd95bbb"],
Cell[11357, 237, 532, 13, 31, "Input",ExpressionUUID->"5c1a61d2-be85-4f4c-a6df-bf26a68d0c78"],
Cell[11892, 252, 1009, 36, 31, "Input",ExpressionUUID->"770dfb72-c407-41bf-8fae-2b849abb648d"],
Cell[CellGroupData[{
Cell[12926, 292, 1152, 21, 55, "Input",ExpressionUUID->"e7109a96-6ed4-4fef-ace3-b4d8683ee8cb"],
Cell[14081, 315, 733, 16, 25, "Print",ExpressionUUID->"cb2e8f5b-32ee-4c8d-8651-e80c5fbe2181"]
}, Open  ]],
Cell[CellGroupData[{
Cell[14851, 336, 572, 13, 31, "Input",ExpressionUUID->"a8a8228e-d60c-4fd9-88db-364653aa7362"],
Cell[15426, 351, 711, 16, 25, "Print",ExpressionUUID->"0d8f0502-61ff-44f9-aed6-b1fb8b848fa7"]
}, Open  ]],
Cell[16152, 370, 355, 8, 31, "Input",ExpressionUUID->"90ee4cd3-6bf6-498e-95ab-23fb1fa454e3"],
Cell[16510, 380, 548, 11, 31, "Input",ExpressionUUID->"6dc56c54-8f5d-42b0-8ce1-6cb60fbb4259"],
Cell[17061, 393, 547, 11, 31, "Input",ExpressionUUID->"9cd0de19-6e9b-4cc8-9497-5ecb4a403ea8"],
Cell[17611, 406, 310, 6, 31, "Input",ExpressionUUID->"d9b50d74-06b3-4ee3-a18f-5a334ef0d6dd"],
Cell[17924, 414, 475, 10, 31, "Input",ExpressionUUID->"8ada1602-9534-48d1-9946-a5b32567d09a"],
Cell[18402, 426, 1028, 20, 31, "Input",ExpressionUUID->"33e0d287-d599-49d3-b23f-7ac8815928e8"],
Cell[19433, 448, 594, 15, 31, "Input",ExpressionUUID->"384f51e6-b757-4e32-9c5b-ae8246b1c113"],
Cell[20030, 465, 592, 15, 31, "Input",ExpressionUUID->"301c04c9-4ac2-4c28-8b31-6e3038f4a20b"],
Cell[20625, 482, 334, 9, 31, "Input",ExpressionUUID->"98157c25-6aa1-426f-8404-bfd7d8c13271"],
Cell[20962, 493, 310, 7, 31, "Input",ExpressionUUID->"b09c3920-4d3b-4f8c-a27f-244cadb7ca06"],
Cell[21275, 502, 1047, 34, 31, "Input",ExpressionUUID->"6d2b4912-fc26-4cef-abc6-045a30dd3625"],
Cell[22325, 538, 553, 10, 31, "Input",ExpressionUUID->"0179a921-4b73-494a-af12-32452fef2bd3"],
Cell[22881, 550, 236, 4, 31, "Input",ExpressionUUID->"c511a134-5acf-4cd6-af91-39c150b17639"],
Cell[23120, 556, 599, 13, 31, "Input",ExpressionUUID->"be5b521f-30ba-4d7a-b740-46526839d30c"],
Cell[23722, 571, 428, 8, 31, "Input",ExpressionUUID->"4518c605-7189-429e-9dec-4ba48ab5231b"],
Cell[24153, 581, 882, 18, 31, "Input",ExpressionUUID->"d02c9aca-cf40-428b-a381-c5cd1e1b308b"],
Cell[25038, 601, 816, 17, 31, "Input",ExpressionUUID->"c03f909f-484d-484d-aba1-3f414ba87195"],
Cell[25857, 620, 262, 5, 31, "Input",ExpressionUUID->"bc5aa311-ad28-4cc3-ba3d-318d5de2f6e8"],
Cell[26122, 627, 498, 11, 31, "Input",ExpressionUUID->"91fc435c-d86d-4d51-9a40-62f9900431a7"],
Cell[26623, 640, 1482, 27, 31, "Input",ExpressionUUID->"83a7aeb6-123d-4bb3-a5db-fb1c84c71597"],
Cell[28108, 669, 1462, 26, 31, "Input",ExpressionUUID->"f90b4ec9-4e85-4567-a977-b3f9e6f13bc8"],
Cell[29573, 697, 850, 17, 31, "Input",ExpressionUUID->"f41a683b-40bf-4d66-af32-637df5b081aa"],
Cell[30426, 716, 279, 6, 31, "Input",ExpressionUUID->"5f00e1f0-0a78-4caa-b170-9e48a8770cde"],
Cell[30708, 724, 667, 13, 31, "Input",ExpressionUUID->"7e8d7991-7e4f-4bca-b882-344f0eab7721"],
Cell[31378, 739, 666, 13, 31, "Input",ExpressionUUID->"e1213eae-82e3-4d84-92e5-47e92c753f13"],
Cell[32047, 754, 742, 14, 31, "Input",ExpressionUUID->"225623e1-9a79-4f0b-ab39-6df3dec00873"],
Cell[32792, 770, 672, 13, 31, "Input",ExpressionUUID->"e08c641e-8f5f-4798-9545-d7ceaa3a48f1"],
Cell[33467, 785, 385, 7, 31, "Input",ExpressionUUID->"57ddec21-50b7-42f0-a67e-7e31f116e1c6"],
Cell[CellGroupData[{
Cell[33877, 796, 678, 11, 31, "Input",ExpressionUUID->"07c5e4ae-a7f4-4fd6-90cb-81e4b7bd83c7"],
Cell[34558, 809, 432627, 8346, 77, "Output",ExpressionUUID->"d1ef199d-12c1-4076-9b5e-edf23e2077dd"]
}, Open  ]],
Cell[467200, 9158, 279, 5, 31, "Input",ExpressionUUID->"4663d994-23dd-44ef-97d9-3ede55ce38f6"],
Cell[467482, 9165, 4773, 88, 239, "Input",ExpressionUUID->"92efc98e-0825-4e84-932e-7ecfaf7b1271"],
Cell[472258, 9255, 353, 7, 31, "Input",ExpressionUUID->"6f91c3ee-3611-4932-a89d-1601171796a7"],
Cell[CellGroupData[{
Cell[472636, 9266, 2181, 49, 124, "Input",ExpressionUUID->"8463af53-db9d-4849-ae46-c2a96a34f072"],
Cell[474820, 9317, 18316, 367, 246, "Output",ExpressionUUID->"7fe658a7-64a5-4980-a007-1f5614820cd3"]
}, Open  ]],
Cell[493151, 9687, 371, 8, 31, "Input",ExpressionUUID->"0324feec-e347-4a21-8fa0-d1799385b9c4"],
Cell[493525, 9697, 582, 11, 31, "Input",ExpressionUUID->"bc5b22f1-826f-44f6-bc0f-f106aee7f95f"],
Cell[494110, 9710, 260, 6, 31, "Input",ExpressionUUID->"858236d6-d2bd-4c37-b622-d10f21debbe8"],
Cell[494373, 9718, 318, 7, 31, "Input",ExpressionUUID->"d1b33c75-4e08-4acf-b6e6-8d2a8361e3b0"],
Cell[494694, 9727, 786, 15, 31, "Input",ExpressionUUID->"b86be700-98bd-48b2-b088-116f6fce051a"],
Cell[495483, 9744, 676, 14, 31, "Input",ExpressionUUID->"7defed12-c732-41ab-971f-26b78af0980c"],
Cell[CellGroupData[{
Cell[496184, 9762, 385, 7, 31, "Input",ExpressionUUID->"36823706-ce80-4016-838d-738be7c6ffb1"],
Cell[496572, 9771, 517478, 8484, 306, "Output",ExpressionUUID->"2410c520-ea85-4d5f-a2c4-886488468cfb"]
}, Open  ]],
Cell[1014065, 18258, 501, 7, 31, "Input",ExpressionUUID->"7e1ffdab-b43c-4173-b7a2-3e64b1c4bf57"]
}
]
*)

