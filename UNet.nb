(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    700046,      12564]
NotebookOptionsPosition[    694708,      12490]
NotebookOutlinePosition[    695043,      12505]
CellTagsIndexPosition[    695000,      12502]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[TextData[{
 StyleBox["(*",
  FontFamily->"Source Code Pro",
  FontWeight->"Bold",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox["\n", "Title",
  FontFamily->"Utopia",
  FontColor->RGBColor[0.5, 0, 0.5]],
 StyleBox["U-Net", "Title",
  FontFamily->"Utopia",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox[" ", "Title",
  FontFamily->"Utopia",
  FontColor->RGBColor[1, 0.5, 0]],
 StyleBox[" ", "Title",
  FontFamily->"Utopia",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox[" ",
  FontFamily->"Source Code Pro",
  FontSize->32,
  FontWeight->"Bold"],
 "\n",
 StyleBox["By Essam Rashed (essam.rashed@nitech.ac.jp), NITech, Nagoya, JP \n\
For any questions, please cnotact using the above e-mail address or \
(essam.rashed@gmial.com)\nThis code aims at mapping MRI 2D image with \
segmented labels of different anatomical structure. \nThis implementation is \
for U-Net (N=2) to segment MRI images of GM & WM. \nIt is aimed to be a \
platform for further extensions and improvements.\nThis code is compatable \
with Mathematica 11.3 and byond and tested over Windows 10 and Ubuntu 16.04\n\
More details are in our paper mentioned below. If you are using this code, \
please refer to our paper.\n\n",
  FontFamily->"Source Code Pro",
  FontWeight->"Plain",
  FontColor->GrayLevel[0]],
 StyleBox["MRI data is available here: http://hdl.handle.net/1926/1687\n\n\
\[Rule] Input images are in MATLAB \"*.mat\" formats for easy use \n\[Rule] \
To Run Select Evaluation \[Rule] Evaluate Notebook \nInput: 256x256 (2D) MRI \
slices \nOutputs: 256x256 (2D) Label slices \n\n",
  FontFamily->"Source Code Pro",
  FontWeight->"Plain",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox["Reference:",
  FontFamily->"Source Code Pro",
  FontWeight->"Bold",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox["\nhttps://arxiv.org/abs/1505.04597\n* Please be aware that image \
size is not the same as the ones used in the original U-Net paper. You can \
easily change it to your preferences.\n",
  FontFamily->"Source Code Pro",
  FontWeight->"Plain",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox["*) ",
  FontFamily->"Source Code Pro",
  FontWeight->"Bold",
  FontColor->RGBColor[0, 0, 1]]
}], "Input",
 CellChangeTimes->{{3.74892351049205*^9, 3.74892369823372*^9}, {
   3.749167681856616*^9, 3.7491677446896267`*^9}, {3.7491679895634403`*^9, 
   3.749167990202631*^9}, {3.749171468044774*^9, 3.749171469531754*^9}, {
   3.749184281323601*^9, 3.749184301880286*^9}, {3.749241745645048*^9, 
   3.749241746204126*^9}, {3.749241795647564*^9, 3.749241835149988*^9}, {
   3.752815010011116*^9, 3.752815034168871*^9}, {3.752815671116115*^9, 
   3.752815690986676*^9}, {3.752875132909789*^9, 3.752875179897293*^9}, 
   3.752878850411211*^9, {3.752977471794961*^9, 3.752977515603724*^9}, {
   3.7533976562319107`*^9, 3.7533976583062897`*^9}, {3.753402776507723*^9, 
   3.7534028463113947`*^9}, 3.753402944523135*^9, {3.753403553377976*^9, 
   3.753403568355207*^9}, {3.7534037360367126`*^9, 3.753403736922435*^9}, {
   3.75349804148811*^9, 3.753498042233445*^9}, {3.7534984001899548`*^9, 
   3.753498425386454*^9}, {3.753512429196314*^9, 3.753512630317462*^9}, {
   3.753753109329463*^9, 3.7537532279275503`*^9}, {3.7537532756270313`*^9, 
   3.7537532949083557`*^9}, {3.7537534043470087`*^9, 
   3.7537534604591913`*^9}, {3.753753544341243*^9, 3.753753552220665*^9}, {
   3.753753602504183*^9, 3.753753727602655*^9}, 3.753753801942245*^9, {
   3.753753868348963*^9, 3.753753877456559*^9}, {3.753753926031163*^9, 
   3.7537539278047132`*^9}, {3.753754161066535*^9, 3.753754173358058*^9}, {
   3.7537544834884157`*^9, 3.7537544998567877`*^9}, {3.753754810619499*^9, 
   3.7537548608030653`*^9}, {3.7537549086448383`*^9, 3.753754914275263*^9}, {
   3.753755003747654*^9, 3.753755060211144*^9}, {3.75375515535425*^9, 
   3.7537551618054323`*^9}, {3.753756318125739*^9, 3.753756345513481*^9}, {
   3.755899941795198*^9, 3.755900022504961*^9}, {3.755900170302047*^9, 
   3.755900192447057*^9}, {3.755900267193136*^9, 3.755900296043651*^9}, {
   3.755912251982359*^9, 3.755912298775446*^9}, {3.756161909875474*^9, 
   3.756162043735346*^9}, {3.756435197017518*^9, 3.756435217352363*^9}, {
   3.756513371489191*^9, 3.75651340964776*^9}, {3.756592099069408*^9, 
   3.756592118044404*^9}, {3.757043511133102*^9, 3.7570435558685637`*^9}, {
   3.757043733692625*^9, 3.757043781387183*^9}, 3.757112344631073*^9, {
   3.757112624430728*^9, 3.757112644950506*^9}, {3.757203502504942*^9, 
   3.757203602013139*^9}, {3.75721417513311*^9, 3.757214201979862*^9}, {
   3.757560964023637*^9, 3.757560991457918*^9}, {3.757567476577846*^9, 
   3.757567477878076*^9}, {3.75762433206194*^9, 3.75762438167341*^9}, {
   3.757624461262907*^9, 3.757624512160347*^9}, {3.7577117325242443`*^9, 
   3.757711759015335*^9}, {3.759794651011661*^9, 3.7597946523698263`*^9}, {
   3.760321121969858*^9, 3.760321140446681*^9}, {3.7603211723438797`*^9, 
   3.7603212739022703`*^9}, {3.760322220873266*^9, 3.7603222216085653`*^9}, {
   3.76032687286239*^9, 3.760326929197287*^9}, {3.760388739238215*^9, 
   3.76038897319781*^9}, {3.760389025965158*^9, 3.760389126318343*^9}, {
   3.760390944810182*^9, 3.760390946875651*^9}, {3.761273225649816*^9, 
   3.7612732259381113`*^9}, {3.761274088642989*^9, 3.761274109005501*^9}, {
   3.76128347051156*^9, 3.7612835063816137`*^9}, {3.7612878929827003`*^9, 
   3.76128795857215*^9}, 3.7612902292317867`*^9},
 CellLabel->"In[1]:=",ExpressionUUID->"31ab4f15-a564-4379-aefb-635198957c4a"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
   RowBox[{"Experiment", " ", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Parameters", " ", "--"}], "--"}], "--"}], "--"}],
                     "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
                    "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
                 "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], "--"}], 
          "--"}], "--"}], "--"}], "--"}], "--"}], "--"}]}], "-"}], 
  "*)"}]], "Input",
 CellChangeTimes->{{3.753752314801449*^9, 3.753752330657073*^9}, {
  3.756162095056327*^9, 3.756162098368149*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"01d0cbb4-b87c-499c-9627-f4fe1ee2a535"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"NIter", "=", "100"}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Training", " ", "Iterations"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.753751603214044*^9, 3.753751622479108*^9}, {
   3.7537516640141077`*^9, 3.753751669858054*^9}, {3.753753957011574*^9, 
   3.753753974573078*^9}, 3.75590723233488*^9, {3.756162084972871*^9, 
   3.756162085688817*^9}, 3.756175089935894*^9, {3.7561786608977633`*^9, 
   3.7561786615510387`*^9}, 3.7570434815170307`*^9, 3.7576539168595667`*^9, {
   3.75765538571122*^9, 3.7576553903827677`*^9}, 3.7578216692019777`*^9, 
   3.757829894226021*^9, 3.7578318382521276`*^9, 3.757907151340994*^9, 
   3.757916060335773*^9, 3.759124105727275*^9, 3.759182180946722*^9, 
   3.75953695440657*^9, 3.7595506544243593`*^9, {3.75961395954538*^9, 
   3.7596139622296257`*^9}, {3.75961625062604*^9, 3.759616256848761*^9}, 
   3.759617160923605*^9, 3.75961747413923*^9, {3.759617807532545*^9, 
   3.759617809866475*^9}, 3.760219644369536*^9, 3.7602220705293217`*^9, 
   3.760222442867589*^9, 3.7602233514108686`*^9, {3.7602260154485617`*^9, 
   3.7602260188455353`*^9}, {3.760226903743425*^9, 3.7602269051134853`*^9}, {
   3.760227324015276*^9, 3.760227324788589*^9}, 3.760227969305378*^9, 
   3.760229117370069*^9, {3.76023126921902*^9, 3.7602312697232523`*^9}, 
   3.760234693538568*^9, 3.76023593888446*^9, 3.7602364554459352`*^9, 
   3.760236973526524*^9, {3.760238612328189*^9, 3.7602386394941893`*^9}, {
   3.7602391705049667`*^9, 3.7602391710223083`*^9}, 3.760240901674025*^9, 
   3.7602429379051037`*^9, {3.760323937803195*^9, 3.7603239408441763`*^9}, 
   3.76032523136285*^9, 3.760326171529458*^9, 3.7603265151560907`*^9, {
   3.760389733047159*^9, 3.760389737743833*^9}, 3.761286836777031*^9, 
   3.7612871740557127`*^9, 3.7612897120175056`*^9, 3.7612924191186028`*^9},
 CellLabel->"In[3]:=",ExpressionUUID->"19bf18a9-4a02-4073-bb97-9344b4bb5fe8"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"BS", "=", "4"}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Batch", " ", "Size"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.760326173914192*^9, 3.760326174286371*^9}, 
   3.760326510252033*^9, 3.760389736179883*^9},
 CellLabel->"In[4]:=",ExpressionUUID->"9dcd62c5-15ab-48b8-9119-ad743d62527e"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Dir", "=", "\"\<axial\>\""}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Slicing", " ", "direction", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"axial", "/", "sagittal"}], "/", "coronal"}]}]}], 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.75731533174929*^9, 3.757315354497697*^9}, 
   3.7573161526135197`*^9, 3.757317240109387*^9, {3.757558300960265*^9, 
   3.7575583013737917`*^9}, {3.757565133703865*^9, 3.7575651381523323`*^9}, 
   3.757625343905033*^9, 3.757653921068493*^9, 3.757728814643424*^9, 
   3.757815996225774*^9, 3.757821676596262*^9, 3.7578299010476723`*^9, 
   3.757888255111807*^9, 3.757907237437831*^9, 3.7579267524056873`*^9, 
   3.7579734800729713`*^9, {3.759182100923773*^9, 3.7591821031936703`*^9}, {
   3.7591937382589703`*^9, 3.7591937401252747`*^9}, 3.75920145292104*^9, 
   3.759210937994485*^9, 3.7592152035758753`*^9, {3.7594398789416533`*^9, 
   3.759439879259081*^9}, {3.759443106842037*^9, 3.7594431106815*^9}, 
   3.7594583038448563`*^9, 3.759463543245269*^9, 3.759465973988454*^9, 
   3.75946739805961*^9, 3.759536950241076*^9, 3.759537614674099*^9, 
   3.759543452242025*^9, 3.759550657635111*^9, 3.759617803308627*^9, 
   3.759641151152114*^9, 3.759729310795908*^9, 3.759806526757729*^9, 
   3.7600713111293488`*^9, 3.760134155380975*^9, 3.760159556268723*^9, 
   3.7602196051398487`*^9, 3.760249742015395*^9, 3.7603044132317123`*^9, 
   3.760318896334034*^9, 3.76031904697558*^9, {3.7603213195196447`*^9, 
   3.760321336816771*^9}, {3.76134587220792*^9, 3.761345873132666*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"40d3c13f-f9e8-4df4-98ba-3b66cbd95bbb"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"TrainingPercentage", "=", "0.9"}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "%", " ", "of", " ", "data", " ", "used", " ", "for", " ", "training"}], 
    " ", "-", " ", 
    RowBox[{"remaining", " ", "are", " ", "for", " ", "validation"}]}], 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.760321823185313*^9, 3.760321862719727*^9}, {
  3.7603891577890177`*^9, 3.7603891642690477`*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"5c1a61d2-be85-4f4c-a6df-bf26a68d0c78"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", 
              RowBox[{"--", 
               RowBox[{"--", 
                RowBox[{"--", "LOAD"}]}]}]}]}]}]}]}]}]}]}], " ", "DATA"}], 
     " ", "&"}], " ", 
    RowBox[{
     RowBox[{
      RowBox[{"Preprocessing", "--"}], "--"}], "--"}]}], "-", 
   RowBox[{"--", 
    RowBox[{"--", 
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", 
              RowBox[{"--", 
               RowBox[{"--", "--"}]}]}]}]}]}]}]}]}]}]}]}]}]}], 
  "*)"}]], "Input",
 CellChangeTimes->{3.749180760399023*^9},
 CellLabel->"In[7]:=",ExpressionUUID->"770dfb72-c407-41bf-8fae-2b849abb648d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"NetworkName", "=", 
   RowBox[{
   "\"\</home/essam/Github/ForkNet/Results/UNet_\>\"", "<>", "Dir", "<>", 
    "\"\<_\>\"", "<>", 
    RowBox[{"ToString", "[", "NIter", "]"}], "<>", "\"\<_\>\"", "<>", 
    RowBox[{"ToString", "[", "BS", "]"}], "<>", "\"\<.wlnet\>\""}]}], ";", 
  " ", 
  RowBox[{"Print", "[", 
   RowBox[{"Style", "[", 
    RowBox[{
     RowBox[{"\"\<NetworkName >>> \>\"", "<>", "NetworkName"}], ",", "Red"}], 
    "]"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.757315454225069*^9, 3.7573156229651814`*^9}, 
   3.757315679899254*^9, {3.759107412138389*^9, 3.759107446734747*^9}, {
   3.759109256697713*^9, 3.7591092589194803`*^9}, 3.759707739424911*^9, {
   3.760219635395721*^9, 3.760219635968523*^9}, {3.760249729162218*^9, 
   3.760249729606773*^9}, {3.760321401127873*^9, 3.7603214505584173`*^9}, {
   3.7603216445756483`*^9, 3.760321661864923*^9}, 3.760323255720003*^9, 
   3.76032715567583*^9, 3.761271398045005*^9, {3.761288094715885*^9, 
   3.761288148199875*^9}, {3.76134026341358*^9, 3.76134026451414*^9}, 
   3.761345881395412*^9},
 CellLabel->"In[8]:=",ExpressionUUID->"e7109a96-6ed4-4fef-ace3-b4d8683ee8cb"],

Cell[BoxData[
 StyleBox["\<\"NetworkName >>> \
/home/essam/Github/ForkNet/Results/UNet_axial_100_4.wlnet\"\>",
  StripOnInput->False,
  LineColor->RGBColor[1, 0, 0],
  FrontFaceColor->RGBColor[1, 0, 0],
  BackFaceColor->RGBColor[1, 0, 0],
  GraphicsColor->RGBColor[1, 0, 0],
  FontColor->RGBColor[1, 0, 0]]], "Print",
 CellChangeTimes->{{3.761288120796712*^9, 3.7612881486284246`*^9}, 
   3.76128961141074*^9, 3.7612897152099943`*^9, 3.7612923994500313`*^9, 
   3.761292448628416*^9, 3.761342214258315*^9, 3.7613444755787582`*^9, 
   3.761344932042471*^9, 3.761345212561009*^9, 3.761346119984825*^9},
 CellLabel->
  "During evaluation of \
In[8]:=",ExpressionUUID->"3886db21-b772-47e3-92d4-1a5a23728469"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
  "NetworkArch", "=", "\"\</home/essam/Github/ForkNet/Arch/UNet_N_2.nb\>\""}],
   ";", 
  RowBox[{"Print", "[", 
   RowBox[{"Style", "[", 
    RowBox[{
     RowBox[{"\"\<NetworkArch >>> \>\"", "<>", "NetworkArch"}], ",", "Red"}], 
    "]"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.760321951585156*^9, 3.760321992224265*^9}, 
   3.7603232648906517`*^9, {3.760323952892601*^9, 3.760323965188011*^9}, 
   3.760327155693222*^9, 3.761271282664702*^9, {3.7612881560402*^9, 
   3.761288167973072*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"a8a8228e-d60c-4fd9-88db-364653aa7362"],

Cell[BoxData[
 StyleBox["\<\"NetworkArch >>> \
/home/essam/Github/ForkNet/Arch/UNet_N_2.nb\"\>",
  StripOnInput->False,
  LineColor->RGBColor[1, 0, 0],
  FrontFaceColor->RGBColor[1, 0, 0],
  BackFaceColor->RGBColor[1, 0, 0],
  GraphicsColor->RGBColor[1, 0, 0],
  FontColor->RGBColor[1, 0, 0]]], "Print",
 CellChangeTimes->{3.761288168491403*^9, 3.761289611465281*^9, 
  3.761289715246936*^9, 3.761292399487227*^9, 3.761292448662835*^9, 
  3.761342214314467*^9, 3.7613444756206408`*^9, 3.761344932063159*^9, 
  3.761345212599242*^9, 3.761346120016614*^9},
 CellLabel->
  "During evaluation of \
In[9]:=",ExpressionUUID->"38ebbf87-1568-4029-9082-ca8e0139f68d"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
  "TestName", "=", "\"\</home/essam/Github/ForkNet/Test/UNet_Test.nb\>\""}], 
  ";"}]], "Input",
 CellChangeTimes->{
  3.761275226310267*^9, {3.76128817706325*^9, 3.7612881968535957`*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"478b055a-2a08-4709-8e48-aa1841a8b1ce"],

Cell[BoxData[
 RowBox[{
  RowBox[{"LossName", "=", 
   RowBox[{
   "\"\</home/essam/Github/ForkNet/Results/UNet_Loss_\>\"", "<>", "Dir", 
    "<>", "\"\<_\>\"", "<>", 
    RowBox[{"ToString", "[", "NIter", "]"}], "<>", "\"\<_\>\"", "<>", 
    RowBox[{"ToString", "[", "BS", "]"}], "<>", "\"\<.txt\>\""}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.761271417030663*^9, 3.761271431015026*^9}, {
   3.761340251202756*^9, 3.7613402521938257`*^9}, 3.761345885022541*^9},
 CellLabel->"In[11]:=",ExpressionUUID->"6dc56c54-8f5d-42b0-8ce1-6cb60fbb4259"],

Cell[BoxData[
 RowBox[{
  RowBox[{"VLossName", "=", 
   RowBox[{
   "\"\</home/essam/Github/ForkNet/Results/UNet_VLoss_\>\"", "<>", "Dir", 
    "<>", "\"\<_\>\"", "<>", 
    RowBox[{"ToString", "[", "NIter", "]"}], "<>", "\"\<_\>\"", "<>", 
    RowBox[{"ToString", "[", "BS", "]"}], "<>", "\"\<.txt\>\""}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.761271421287302*^9, 3.761271426837261*^9}, {
   3.761340255492568*^9, 3.7613402565139217`*^9}, 3.761345888226903*^9},
 CellLabel->"In[12]:=",ExpressionUUID->"9cd0de19-6e9b-4cc8-9497-5ecb4a403ea8"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
   RowBox[{"Lodaind", " ", "data"}], "..."}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.757316191093004*^9, 3.757316204323451*^9}, {
  3.7603266400435057`*^9, 3.760326640426508*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"d9b50d74-06b3-4ee3-a18f-5a334ef0d6dd"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
   RowBox[{
    RowBox[{
    "This", " ", "is", " ", "just", " ", "a", " ", "sample", " ", "data", " ",
      "of", " ", "single", " ", "MRI", " ", "image"}], "..."}], " ", "Add", 
   " ", "more", " ", "data", " ", "for", " ", "effective", " ", "training"}], 
  " ", "*)"}]], "Input",
 CellChangeTimes->{{3.760389871251978*^9, 3.760389898879882*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"8ada1602-9534-48d1-9946-a5b32567d09a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ana", " ", "=", 
    RowBox[{"Flatten", "[", 
     RowBox[{
      RowBox[{
      "Import", "[", "\"\</home/essam/Github/ForkNet/NAMIC/case01015.mat\>\"",
        "]"}], ",", "1"}], "]"}]}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"anatomical", " ", "volume"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.757315639858612*^9, 3.757315715296424*^9}, 
   3.757316095363429*^9, {3.7591821597251368`*^9, 3.759182164363336*^9}, {
   3.759182764965914*^9, 3.7591827691318274`*^9}, 3.759182832542677*^9, {
   3.759192511835094*^9, 3.759192515579267*^9}, {3.759707387212988*^9, 
   3.75970741784568*^9}, 3.760321634784123*^9, 3.760321678016632*^9, {
   3.7603217141922693`*^9, 3.7603217671202707`*^9}, {3.760323999235259*^9, 
   3.7603239996258993`*^9}, {3.7603240449708548`*^9, 3.760324076730708*^9}, 
   3.7603271557023373`*^9, {3.760389913794135*^9, 3.760389929024085*^9}, 
   3.7612898655668097`*^9},
 CellLabel->"In[15]:=",ExpressionUUID->"33e0d287-d599-49d3-b23f-7ac8815928e8"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c"}], "}"}], "=", 
   RowBox[{"Dimensions", "[", "ana", "]"}]}], ";"}]], "Input",
 CellLabel->"In[16]:=",ExpressionUUID->"2252ba20-1eed-4040-9794-9591ea450c10"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"msk1", " ", "=", 
    RowBox[{"Flatten", "[", 
     RowBox[{
      RowBox[{
      "Import", "[", 
       "\"\</home/essam/Github/ForkNet/NAMIC/case01015_WM.mat\>\"", "]"}], 
      ",", "1"}], "]"}]}], ";"}], "  ", 
  RowBox[{"(*", " ", 
   RowBox[{"labels", " ", "\"\<1\>\""}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7603240737147493`*^9, 3.760324106876334*^9}, 
   3.760327155706843*^9, {3.760389925169396*^9, 3.760389943136485*^9}, 
   3.761289867089961*^9},
 CellLabel->"In[17]:=",ExpressionUUID->"384f51e6-b757-4e32-9c5b-ae8246b1c113"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"msk2", " ", "=", 
    RowBox[{"Flatten", "[", 
     RowBox[{
      RowBox[{
      "Import", "[", 
       "\"\</home/essam/Github/ForkNet/NAMIC/case01015_GM.mat\>\"", "]"}], 
      ",", "1"}], "]"}]}], ";"}], "   ", 
  RowBox[{"(*", " ", 
   RowBox[{"labels", " ", "\"\<2\>\""}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7603241104153214`*^9, 3.760324110683144*^9}, 
   3.7603271557096*^9, {3.76038994600191*^9, 3.760389953745668*^9}, 
   3.761289868402259*^9},
 CellLabel->"In[18]:=",ExpressionUUID->"301c04c9-4ac2-4c28-8b31-6e3038f4a20b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"msk", "=", 
   RowBox[{"ArrayReshape", "[", 
    RowBox[{
     RowBox[{"Riffle", "[", 
      RowBox[{"msk1", ",", "msk2"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"a", ",", "2", ",", "b", ",", "c"}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.761271162439699*^9, 3.7612711708578663`*^9}, {
  3.761273316316018*^9, 3.761273370033139*^9}, {3.761344960550565*^9, 
  3.761344969396164*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"5db6f669-9b75-43b4-8701-f07f7de2c94f"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.760325401637219*^9, 3.76032540880276*^9}, 
   3.7613449450464497`*^9},
 CellLabel->"In[20]:=",ExpressionUUID->"b09c3920-4d3b-4f8c-a27f-244cadb7ca06"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{
    RowBox[{"--", 
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", 
              RowBox[{"--", "Preparing"}]}]}]}]}]}]}]}]}]}]}], " ", "Data", 
    " ", "for", " ", "U"}], "-", 
   RowBox[{
    RowBox[{
     RowBox[{"Net", "--"}], "--"}], "--"}], "-", 
   RowBox[{"--", 
    RowBox[{"--", 
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", 
              RowBox[{"--", "-"}]}]}]}]}]}]}]}]}]}]}]}]}], "*)"}]], "Input",
 CellChangeTimes->{{3.753750063770671*^9, 3.7537501211806173`*^9}, 
   3.753750262107339*^9, 3.7537522140515327`*^9, {3.757316531849683*^9, 
   3.757316541892467*^9}, {3.7612836160123873`*^9, 3.761283616363945*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"6d2b4912-fc26-4cef-abc6-045a30dd3625"],

Cell[BoxData[
 RowBox[{
  RowBox[{"images", "=", 
   RowBox[{"Image3DSlices", "[", 
    RowBox[{"Image3D", "[", "ana", "]"}], "]"}]}], ";", 
  RowBox[{"Clear", "[", "ana", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.753482379695827*^9, 3.753482382108797*^9}, 
   3.753496457631076*^9, {3.7571128486309557`*^9, 3.757112852082877*^9}, {
   3.7571163861588*^9, 3.757116391596746*^9}, {3.757120642918284*^9, 
   3.757120648963847*^9}, {3.761344976741283*^9, 3.761344979669299*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"0179a921-4b73-494a-af12-32452fef2bd3"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{"Shuffling", "..."}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.7603892449578753`*^9, 3.760389251712009*^9}, {
  3.761273176421871*^9, 3.761273180041362*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"c511a134-5acf-4cd6-af91-39c150b17639"],

Cell[BoxData[
 RowBox[{
  RowBox[{"miximages", "=", 
   RowBox[{"RandomSample", "@", 
    RowBox[{"Thread", "[", 
     RowBox[{
      RowBox[{"Range", "@", 
       RowBox[{"Length", "@", "images"}]}], "\[Rule]", "images"}], "]"}]}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.753481501780724*^9, 3.7534815111758738`*^9}, {
   3.75349558108165*^9, 3.753495583675735*^9}, {3.7571128649378643`*^9, 
   3.757112869667398*^9}, {3.7571163972924137`*^9, 3.757116402319862*^9}, 
   3.761273160385625*^9, {3.7612835311160727`*^9, 3.761283531676141*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"86054257-ea16-4896-93c1-772981ae94b4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mixkeys", "=", 
   RowBox[{"Keys", "@", "miximages"}]}], ";"}]], "Input",
 CellChangeTimes->{
  3.753481516550537*^9, {3.753495587881756*^9, 3.753495589526662*^9}, {
   3.757112873222431*^9, 3.757112875941163*^9}, {3.7571164069246683`*^9, 
   3.757116408186287*^9}, 3.761273165421875*^9, {3.761283537996231*^9, 
   3.761283553902885*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"dedccdec-735d-440c-8498-ef704bbe0b2b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mixmasks", "=", 
   RowBox[{"Lookup", "[", 
    RowBox[{
     RowBox[{"<|", 
      RowBox[{"Thread", "[", 
       RowBox[{
        RowBox[{"Range", "@", 
         RowBox[{"Length", "@", "msk"}]}], "\[Rule]", "msk"}], "]"}], "|>"}], 
     ",", "mixkeys"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.752878040967293*^9, 3.752878046296371*^9}, 
   3.753481533254095*^9, {3.7534955984797573`*^9, 3.7534956161996737`*^9}, {
   3.753498557997745*^9, 3.753498562708634*^9}, {3.753500662108364*^9, 
   3.753500671281184*^9}, {3.753749611591693*^9, 3.753749619381564*^9}, 
   3.753749666358533*^9, {3.7571128785499983`*^9, 3.757112902883658*^9}, {
   3.757116396029681*^9, 3.757116432027082*^9}, {3.761271459488414*^9, 
   3.7612714676379633`*^9}, 3.761271637430287*^9, {3.7612835636458473`*^9, 
   3.761283579885729*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"d02c9aca-cf40-428b-a381-c5cd1e1b308b"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{"Splitting", "..."}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.760389260110467*^9, 3.7603892677897243`*^9}, 
   3.760389298029354*^9},
 CellLabel->"In[27]:=",ExpressionUUID->"bc5aa311-ad28-4cc3-ba3d-318d5de2f6e8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TrainPack", "=", 
   RowBox[{"Round", "[", 
    RowBox[{"TrainingPercentage", "*", "a"}], "]"}]}], ";", 
  RowBox[{"ValPack", "=", 
   RowBox[{"Round", "[", 
    RowBox[{"(", 
     RowBox[{"a", "-", "TrainPack"}], ")"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.755912599113283*^9, 3.755912609991191*^9}, 
   3.755918108569941*^9, 3.755919590421777*^9, 3.7603218764819937`*^9},
 CellLabel->"In[28]:=",ExpressionUUID->"91fc435c-d86d-4d51-9a40-62f9900431a7"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"MRId", ",", "MRIv"}], "}"}], "=", 
    RowBox[{"TakeList", "[", 
     RowBox[{
      RowBox[{"Values", "@", "miximages"}], ",", 
      RowBox[{"{", 
       RowBox[{"TrainPack", ",", "ValPack"}], "}"}]}], "]"}]}], ";"}], 
  " "}]], "Input",
 CellChangeTimes->{{3.7528154457126703`*^9, 3.752815470075314*^9}, 
   3.752818157500496*^9, {3.752875461292577*^9, 3.752875477848516*^9}, {
   3.752875547690523*^9, 3.752875566345916*^9}, {3.7528780014462957`*^9, 
   3.752878002084096*^9}, {3.7528780502762127`*^9, 3.752878060691414*^9}, {
   3.752977684341707*^9, 3.7529776935411177`*^9}, {3.7534036587241383`*^9, 
   3.753403665648405*^9}, 3.7534815358198147`*^9, {3.7535005917550783`*^9, 
   3.753500608058024*^9}, {3.75350207556746*^9, 3.753502092121217*^9}, {
   3.753581771691358*^9, 3.753581778997326*^9}, {3.753581838704852*^9, 
   3.753581846556364*^9}, {3.753582046285612*^9, 3.7535820682517843`*^9}, {
   3.7535981755963573`*^9, 3.753598192226454*^9}, {3.753655962915189*^9, 
   3.7536559769314537`*^9}, {3.755912618745088*^9, 3.755912624619495*^9}, {
   3.755918440280467*^9, 3.755918452238364*^9}, {3.755919628474609*^9, 
   3.7559196420205727`*^9}, {3.757112931461006*^9, 3.757112935734158*^9}, {
   3.7571164478240147`*^9, 3.757116449147376*^9}, 3.757117409576489*^9, {
   3.761283597956746*^9, 3.761283598491338*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"83a7aeb6-123d-4bb3-a5db-fb1c84c71597"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"mskd", ",", "mskv"}], "}"}], "=", 
   RowBox[{"TakeList", "[", 
    RowBox[{"mixmasks", ",", 
     RowBox[{"{", 
      RowBox[{"TrainPack", ",", "ValPack"}], "}"}]}], "]"}]}], ";"}]], "Input",\

 CellChangeTimes->{{3.75281547260376*^9, 3.752815499085526*^9}, 
   3.7528181620821342`*^9, {3.752875481529703*^9, 3.75287548820078*^9}, {
   3.752875552170867*^9, 3.7528755781379128`*^9}, {3.752876346925022*^9, 
   3.752876347373686*^9}, {3.752878072134039*^9, 3.7528780807461977`*^9}, {
   3.752977697818632*^9, 3.752977707682405*^9}, {3.753403674906399*^9, 
   3.753403680554628*^9}, 3.753481538371217*^9, {3.753500616682631*^9, 
   3.753500638057266*^9}, {3.753500678103979*^9, 3.753500705018426*^9}, 
   3.753502089130394*^9, 3.7535818195955477`*^9, {3.753581851435266*^9, 
   3.753581878940127*^9}, {3.753582036253097*^9, 3.7535820421544037`*^9}, {
   3.753582078923401*^9, 3.753582097139369*^9}, {3.75359819726332*^9, 
   3.75359823679392*^9}, 3.753655985188941*^9, {3.753749678040744*^9, 
   3.753749693721352*^9}, {3.7559126315137053`*^9, 3.755912642303982*^9}, {
   3.755918454858281*^9, 3.755918485699114*^9}, {3.75591963075141*^9, 
   3.755919645117401*^9}, {3.757112938452388*^9, 3.7571129494272127`*^9}, {
   3.757116450236703*^9, 3.7571164671315193`*^9}, 3.761271642279539*^9, {
   3.761271795449767*^9, 3.761271797019218*^9}, {3.761283603566894*^9, 
   3.761283606139592*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"f90b4ec9-4e85-4567-a977-b3f9e6f13bc8"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
   RowBox[{
    RowBox[{"prepare", " ", "for", " ", "U"}], "-", "Net"}], "..."}], " ", 
  "*)"}]], "Input",
 CellChangeTimes->{{3.760389283501782*^9, 3.7603892948762407`*^9}, {
  3.76128361114856*^9, 3.761283611531949*^9}},
 CellLabel->"In[31]:=",ExpressionUUID->"5f00e1f0-0a78-4caa-b170-9e48a8770cde"],

Cell[BoxData[
 RowBox[{
  RowBox[{"labelsd", "=", 
   RowBox[{"ArrayReshape", "[", 
    RowBox[{"mskd", ",", 
     RowBox[{"{", 
      RowBox[{"TrainPack", ",", "2", ",", "b", ",", "c"}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.75358215361521*^9, 3.753582174626883*^9}, 
   3.753598283468207*^9, {3.753656001986998*^9, 3.753656008913753*^9}, {
   3.7537497318318853`*^9, 3.7537497432112923`*^9}, {3.757112958213756*^9, 
   3.757112967171386*^9}, {3.7571164792664843`*^9, 3.757116488539526*^9}, 
   3.760323569009577*^9, {3.760323679435865*^9, 3.760323681224843*^9}, 
   3.761271248021206*^9, {3.761271798441081*^9, 3.7612718030797167`*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"7e8d7991-7e4f-4bca-b882-344f0eab7721"],

Cell[BoxData[
 RowBox[{
  RowBox[{"labelsv", "=", 
   RowBox[{"ArrayReshape", "[", 
    RowBox[{"mskv", ",", 
     RowBox[{"{", 
      RowBox[{"ValPack", ",", "2", ",", "b", ",", "c"}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.753582176395887*^9, 3.75358219004471*^9}, {
   3.753598294943326*^9, 3.753598295531052*^9}, {3.7535994393319407`*^9, 
   3.753599444193432*^9}, {3.7536560421983137`*^9, 3.7536560458908453`*^9}, {
   3.75374975583186*^9, 3.753749769385207*^9}, {3.757112961879262*^9, 
   3.7571129702945557`*^9}, {3.757116482711557*^9, 3.7571164923365*^9}, 
   3.7603235721408043`*^9, {3.7603236861758127`*^9, 3.760323686282442*^9}, 
   3.7612712547421503`*^9, {3.761271799522333*^9, 3.761271804003455*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"225623e1-9a79-4f0b-ab39-6df3dec00873"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{"load", " ", "ForkNet", " ", "architecture"}], " ", "*)"}]], "Input",\

 CellChangeTimes->{{3.749160460330285*^9, 3.749160463981484*^9}, {
   3.7537540070737457`*^9, 3.753754030573264*^9}, 3.753754070646834*^9, {
   3.760389369746538*^9, 3.760389398701849*^9}},
 CellLabel->"In[34]:=",ExpressionUUID->"57ddec21-50b7-42f0-a67e-7e31f116e1c6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"NotebookEvaluate", "[", "NetworkArch", "]"}], ";", "  ", 
  "UNET"}]], "Input",
 CellChangeTimes->{{3.756592081882153*^9, 3.756592083438553*^9}, {
   3.756593274266226*^9, 3.756593274870644*^9}, {3.756593375098868*^9, 
   3.756593404057249*^9}, {3.756593551963952*^9, 3.756593569543461*^9}, 
   3.7570433754330797`*^9, {3.7579800249668493`*^9, 3.757980026117722*^9}, {
   3.759124450802758*^9, 3.759124474239852*^9}, 3.76032200512215*^9, 
   3.760326748380355*^9, {3.760389404543086*^9, 3.760389416653879*^9}, 
   3.761283703715682*^9},
 CellLabel->"In[35]:=",ExpressionUUID->"07c5e4ae-a7f4-4fd6-90cb-81e4b7bd83c7"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.0149], {
                   GrayLevel[0.6], 
                   Thickness[0.03], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"2\"", "\"256\"", 
                    "\"256\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["22", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.0149], {
                   GrayLevel[0.6], 
                   Thickness[0.03], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    PaneBox[
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], {
                    
                    LineBox[{{-23., 
                    1.4083438190194562`*^-15}, {-22., \
-3.2387277635869947`*^-12}}], 
                    LineBox[CompressedData["
1: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
cg==
                    "]], 
                    
                    LineBox[{{-22., -3.2387277635869947`*^-12}, {-21., \
-0.563123432237886}}], 
                    LineBox[CompressedData["
1:eJxN1n9M1HUcx3FCuUMwQkS8kyOO48cdBwf346tTIubSispxLg2bkB0yrSlx
A5rxh6yU5qQUdNC0ZoYCCSqDLcQpCC9+ePyIa07MHYUEaJdYbqZUSmrxfX/+
4P3ZMfbc7j487v358r2L2up8c5uvj4/P4dkf+bdYyzH91sn8cL/Jzil1W/GT
BxIaJkQviZ9nP++VELq7hrrU5Nlr8kiQYmupzfqUUEe/BOUN0ZFh8gskHKqp
o14/U2ufqZXgLv6WGsONj3IOS+jMPkVddHLNM/t2S9hur6feTktC9/oGanq5
XcKewNPU5TdXzj4kZBpFR+vkJWF1o3j+eUdgqyNQQmqV2O+1b6ZnHzZk/CL+
/tgNedlQWC68hZq+Ak2fDWdPnKBWZDX7ZTXbMKM6zjw2VNyvYB4bArQHmMeG
uoNlzGND9gv7qVvJY4MtXvTr5LFCv6mMeaxIufw581iRV1TBPFa051QxjxU9
4+L9PiKPFelvNzOPFTejWpnHikMvtjGPFfYzncxjgW5nD/NY4F/iYh4LfCb6
mceCwCODzGNBr8nN5mPBlkY381gwPiCaODoL0kvdzGNB1cgQ85jRN/Q985gx
nj3IPLNdxj1muDa4mMeMdwovMY8ZJnUb85ihq7nA5mNGavAF5jGj2CG6Km2q
Mm0qGSOVF6nb2+SVjC2n26lpu/JkKGrFPANpg2QMfyLm6R6SVxIS7g1TT9MF
mYS/ezzUEfLbKUhC5ugo9ctr5ZWE9FXj1Du7wvK6wpIw9NMk9RfkMWESt5jH
hAO//0p9izwm9G/2Ui8kjwlHgrzMk4iHkxPMk4jWjePMk4hjH44xTyIaXhK+
PPIkYrRjhM0nASunrjNPAi52DTNPAnLTrzBPAqSSIeYxwtXdwTxGNE2JedNx
Fxix6c556lfIY0R77znmMWK0uIW6kjzxuKBoYZ54bMxvYZ54nG06xzzx6B4U
+xNnyABHVjf1A/IY8J37MvMYkJEzQE2ctQaYwtzsvAzY8McVNh89Om5eYx49
Ch97mEePHStusOtHj/rDE2w+cXC9cY/NJw72o9PME4ejuQ/ZecWhrvFfNp84
FOx6yjyx8Onwcc55YpHxqa9zzhMLx8A855wnFtaD851znhiYrokWnhhUe0SL
6ycGwZOihScGJfdEC08MvPP8nHOeaKzT+DFPNJpX+TFPNIKzRYvzikZ+qWhx
XjokqRXOufPSIe5V0WI+OjiKFMyjw8jXCubRodKlYJ4oHLyrYJ4o9IcomScK
a1YomScK/21Ssvlo8fiSks1Hi/s/K5lHi+p/lMyjhe8if+bRQm0QbSi5qi+5
Gglvqujij+QVifftovvl7TSRqH5X9FLa4HmUfyD6qy/lFYGBQ6Jv0z9IBDLP
iF5FN0QN/LyiP9svLw1+XL2AWv6032vSoLdtAfOE43pmAPOEwz8kkHnCsfmu
aBV5luGH2wup36P78zLkzg+iXr7rz5nfnl2Gc/rnqJ82p6uLL6qxNSWYulce
R54aO1IXUe85lfWgR6fGoCmEOi13adPHYyrsC1pM/RfNW4VjY6Lr5advU2Hh
8VDqzKOLIwLMKnjWLaEW339UeHJH9P8pP1Kd
                    "]], 
                    
                    LineBox[{{-21., -0.563123432237886}, {-20., \
-1.56312343236675}}], 
                    LineBox[CompressedData["
1:eJxN1XtIk3scx/Fpx4puVJjHsljn2ebu23OJ6ERo0IUukF2sNE03mxI2z1JL
9GQWXYysrVNmBZFWrJJKutCFqOwTiC3aCbqRf1RQx2MXosKiUE5wfL6/f74/
NsYbtt/zer7Pw57fikJLixMNBkPZwFv/FGsK+pNWXQ8n9t35MP5m9c+vGjK3
51Kn2AdlXe/R0NGbQ73d3bXN3aWhPlu0bJ2e7Itp2NG6ktpIP9Bw59MK6sX9
0az+qIbfraLxpK3Pv1/D5yXLqStPzkqor9XQ/Uc2dQktDcl1y6jp51ka9p1d
Sh35Z9rAS0ORUbRJ0peGvS+WUF/zDR94aRj5RvSClm/zW76p6PaK7796qS8V
4zpFV0y8Vz7xnoqjUXG8wXkXk/Iuqqh5wD0q5nWKefSRR8XOnDzmUVH3Lp95
VChVBcyjojnBxzwKOhv8zKOgdcwa5lEw51CAeRQcSy1hHgXzvpey+SiIrQ8y
j4LgmzJq4kgKlIUh5lEw4dx65pFhSaxgHhnZiyuZR0a0aQPzyEh9vJF5ZMQu
1DCPjHjsT+aR0XB1E5uPjISqWuaRoQ7bTH0w431jxnsv0ipE37qpLy/a20TT
dhEvxt8WPZw28MJzXPTfcX15ULtV7K+f3fwWD173ieNP0k+n3IN2s+g5s/Xl
wegE4V13NyV4N8WDrkg1dRN53Pj1YRXzuBFvF/PoJo8b331ifiPI48aRKyHm
ceH++WLmcSEzXsQ8LhhCPuZxYWiTuH+C5HEhN2M1m48TvaX5zOPEswn5zOOE
YVE+8zix4ZfVzONArNHPPA4cfis8dLnLHZj7UdyPc8njwLMTAeZxIHOoOJ9G
8tjRYCxmHjsuvw0wjx03fAHmsaO5QexPnLgNh6oLqb+Sx4b7WwqYxwaDVzRx
Ztswtb6AXS8bynYWsvlYcdrlZx4rXm9awzxWpFWWsPvHityxpWw+6ei+Vs3m
k46i0ZuZZ6B7trLrlY5/p+1g80lHz5BdzGPB2mW7mceCYNoe5rHgS+Fe5rHg
x+Qw85jxMzvMPGYMywuz+8eMMxvDzGPGo2iYecyofxdmHhMezIwwjwnH2iLM
Y8J/nn3sepnwoUO0RsuEQOgvanpcDDbBaNxPvSUnOmLGSwmPO0T76YQk1PgO
sP9/Ccm9opsv7XmeGZJwqqaR/X9IcP0Q/VT/uiqhtfQgtTO+e1RSqoTUp6LF
80tCndZE/T9SW47I
                    "]], 
                    
                    LineBox[{{-20., -1.56312343236675}, {-19., \
-2.563123432686352}}], 
                    LineBox[CompressedData["
1:eJxNlF1IFFEUxy2/HpSgD5ZaNEqJZvZzZqywSFMsS4NWLELYKLMPDBds66Ee
RCkq+gDLNHwpNnQfsrJ2/Fzd0v9KuhEKUUFCGFIRaD0oGqHi1s45L/dwh+HH
cO/9nXPvmc0V1aVnVsbFxRXFHuPNkYWcaO+XwisJmN4Qurw8p8F0lNkkx7t6
f2rIedhDfM0+ftU+rkF/302sbt21rvythvNzXcSbaIKG2gTmkkW/a9GvYTy+
kxgf2xdONsS+z+rEF1sKVtyo0eAdCxCfpYit3/ySeMGY7tKw4/oL4vrv2bGh
YeldO3FmhhEa/lUy95SnxIaGvBPMxb75It+8isF25q8TRqioO8LrXUiLeNMi
KmoO835J7kCiO6Ai+FT0UVF8k/OndFwqnpUFBR8VLWv6iUknQ4XcExJ8VOQX
vBZ8FPzuGxB8FEhmCD4K/p4KCz4KypqHBB8FWtqI4KPgz9KI4KNg+FJEqI8C
/92I4KPgXgFzU+5UY+6UE7cbef6rkBFO3K8bJqbl6p14kvyGOIUWcGLUyj5j
o0Y4EK3i/I3sinwOtG7k+qQb6XgdyDRz/fbtNcKBuuN8P6rCJk/Y5EDnrw7i
B+RjB8K64GNH2ySfxw/yscNzgDmVfOxIXngp+NgwsD0g+NhQcjog+Niwvysg
+NjwaAvv5yEfG0qDulAfK855OgQfKybzOwUfK4LZXYKPFbMl3YKPBbq3T/Cx
oKmB60XH7bWg7Rjfl0LysWDmQ0jwsaBynrmRfGSsDYcEHxkz2SHBR0bU3S/4
yMiz8P7bsoyQobdyf5uNdk+SMRRl39oyf+ruCQnfvJxPBR24hNXLnH+Y+lfC
wcdcH59+5/OeaglNbq7nEt1HCdMOPo9P1O4SDpm532yjt1YlrpcwmM79yP8f
Cbk7nxP/B+peSnE=
                    "]], 
                    
                    LineBox[{{-19., -2.563123432686352}, {-18., \
-3.5631234328796486`}}], 
                    LineBox[CompressedData["
1:eJxN0ksoRGEYBuBBJmVSIrcmuSbJOf8/NpLGghQLIzZiYxQ7CYkFcolITcRS
TTQlSWbczRl6yxTFQplcctko12ywYIrMfN/mvP2n09M5/9d7LpktHXWtkQaD
ITd0hM8cCwYXD24qh014TdX6fj8lPpbYSflRtp1Hie9V9mjh1UjhlcTcJlvm
lSQ2H0tAY2fQBomhQ3Zt0GULuiQCJ2ycr/7YZyS8AXb3YnnEeL+E5Z7dRpGw
PrNpu00i7Z3teCgOLQnjEzuLImG4YG83x4aWRIyXXe38qnJ+CaTPsu/vwhGo
sLO7zEed5iOB3hy2sckd3eQW8N7u6/oIeA59uj4CC3afro+A/00jZ1MfgZQW
TddHYN7vJc9ZX2atLyrqEtg+LRwVJTV7ZBrnCF3v2SXH0gAV8xM75CKKiuSJ
bTJ9LqOK+LEt8kCDy1R6p+B6epNspwEK2lc2dO9fwVlgnez0TF2WdSj4M63r
nk9BsN5DDoRvtyjwL7vJBaeTcdEpChrj2Pz/KDgYXiP/Ax6gJxo=
                    "]], 
                    
                    
                    LineBox[{{-18., -3.5631234328796486`}, {-17., \
-4.5631234327163375`}}], 
                    
                    LineBox[{{-17., -4.5631234327163375`}, {-16., \
-4.563123432441642}}], 
                    
                    LineBox[{{-16., -4.563123432441642}, {-15., \
-3.563123432439368}}], 
                    
                    LineBox[{{-15., -3.563123432439368}, {-14., \
-3.5631234325525147`}}], 
                    
                    LineBox[{{-14., -3.5631234325525147`}, {-13., \
-3.5631234334666138`}}], 
                    
                    LineBox[{{-13., -3.5631234334666138`}, {-12., \
-2.563123432343814}}], 
                    
                    LineBox[{{-12., -2.563123432343814}, {-11., \
-2.5631234332593342`}}], 
                    
                    LineBox[{{-11., -2.5631234332593342`}, {-10., \
-2.56312343319621}}], 
                    
                    LineBox[{{-10., -2.56312343319621}, {-9., \
-1.5631234332279003`}}], 
                    
                    LineBox[{{-9., -1.5631234332279003`}, {-8., \
-1.5631234331769117`}}], 
                    
                    LineBox[{{-8., -1.5631234331769117`}, {-7., \
-1.563123433111826}}], 
                    
                    LineBox[{{-7., -1.563123433111826}, {-6., \
-0.5631234330788569}}], 
                    
                    LineBox[{{-6., -0.5631234330788569}, {-5., \
-0.5631234330288631}}], 
                    
                    LineBox[{{-5., -0.5631234330288631}, {-4., \
-0.5631234332043673}}], 
                    
                    LineBox[{{-4., -0.5631234332043673}, {-3., \
-0.0026166670270411467`}}], 
                    
                    LineBox[{{-3., -0.0026166670270411467`}, {-2., \
-0.0026166671240729243`}}], 
                    
                    LineBox[{{-2., -0.0026166671240729243`}, {-1., \
-0.002616667124101407}}], 
                    
                    LineBox[{{-1., -0.002616667124101407}, \
{-1.6022465089998899`*^-19, -0.00261666712412989}}]}}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-22.4, -1.942673320624589*^-12}, {-0.25, 0}, 
                    Offset[8], {1., -3.2401361074060143`*^-12}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"1\"", "\"256\"", 
                    "\"256\""}, "RowWithSeparators"], LabelStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"1", "256", "256"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-16.544444444444444`, 
                    0.43687656803255254`}, {-0.25, 0}, 
                    Offset[8], {0.2888888888888914, 7.097356036211977*^-11}], 
                    
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"8\"", "\"128\"", 
                    "\"128\""}, "RowWithSeparators"], LabelStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"8", "128", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-21.4, -0.33787405934402703`}, {-0.25, 0}, 
                    Offset[8], {1., -0.5631234322346472}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"8\"", "\"128\"", 
                    "\"128\""}, "RowWithSeparators"], LabelStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"8", "128", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-16.822222222222223`, -0.5631234325224845}, \
{-0.25, 0}, 
                    Offset[8], {0.08888888888888857, 
                    1.3272938303998671`*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"16\"", "\"64\"", "\"64\""},
                     "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"16", "64", "64"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-20.4, -1.1631234323152044`}, {-0.25, 0}, 
                    Offset[8], {1., -1.000000000128864}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"16\"", "\"64\"", "\"64\""},
                     "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"16", "64", "64"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-16.955555555555556`, -1.5631234327155263`}, \
{-0.25, 0}, 
                    Offset[8], {
                    0.17777777777777715`, -3.849587315585268*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"32\"", "\"32\"", "\"32\""},
                     "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"32", "32", "32"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-19.4, -2.1631234325585114`}, {-0.25, 0}, 
                    Offset[8], {1., -1.0000000003196021`}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"32\"", "\"32\"", "\"32\""},
                     "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"32", "32", "32"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-17.133333333333333`, -2.563123432793298}, \
{-0.25, 0}, 
                    Offset[8], {
                    0.17777777777777715`, -9.283906976520484*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"16\"", "\"16\""},
                     "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"64", "16", "16"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-18.4, -3.1631234328023297`}, {-0.25, 0}, 
                    Offset[8], {1., -1.0000000001932965`}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"16\"", "\"16\""},
                     "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"64", "16", "16"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-16.355555555555554`, -3.563123432819641}, \
{-0.25, 0}, 
                    Offset[8], {0.08888888888888857, 
                    1.1148415524075972`*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"8\"", "\"8\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "8", "8"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-17.4, -4.163123432781662}, {-0.25, 0}, 
                    Offset[8], {1., -0.9999999998366889}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"8\"", "\"8\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "8", "8"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-16.4, -4.56312343255152}, {-0.25, 0}, 
                    Offset[8], {1., 2.7469582164485473`*^-10}], 
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"4\"", "\"4\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "4", "4"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-15.4, -3.9631234324402778`}, {-0.25, 0}, 
                    Offset[8], {1., 1.0000000000022737`}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"8\"", "\"8\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "8", "8"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-14.4, -3.563123432507256}, {-0.25, 0}, 
                    Offset[8], {1., -1.1314682524243835`*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"8\"", "\"8\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"256", "8", "8"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-13.4, -3.5631234331009742`}, {-0.25, 0}, 
                    Offset[8], {1., -9.140990187006537*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"8\"", "\"8\""}, 
                    "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"128", "8", "8"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-12.399999999999999`, -2.9631234327929343`}, \
{-0.25, 0}, 
                    Offset[8], {1., 1.0000000011227996`}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"16\"", "\"16\""},
                     "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"64", "16", "16"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-11.4, -2.563123432893126}, {-0.25, 0}, 
                    Offset[8], {1., -9.155201041721739*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], LabelStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"128", "16", "16"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-10.4, -2.5631234332214596`}, {-0.25, 0}, 
                    Offset[8], {1., 6.312417255571745*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"16\"", "\"16\""},
                     "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"64", "16", "16"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-9.399999999999999, -1.963123433215224}, {-0.25,
                     0}, 
                    Offset[8], {1., 0.9999999999683098}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"32\"", "\"32\"", "\"32\""},
                     "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"32", "32", "32"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-8.4, -1.5631234331973072`}, {-0.25, 0}, 
                    Offset[8], {1., 5.098854671814479*^-11}], 
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"32\"", "\"32\""},
                     "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"64", "32", "32"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-7.4, -1.5631234331378603`}, {-0.25, 0}, 
                    Offset[8], {1., 6.508571459562518*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"32\"", "\"32\"", "\"32\""},
                     "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"32", "32", "32"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-6.4, -0.9631234330920446}, {-0.25, 0}, 
                    Offset[8], {1., 1.0000000000329692`}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"16\"", "\"64\"", "\"64\""},
                     "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"16", "64", "64"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-5.4, -0.5631234330488607}, {-0.25, 0}, 
                    Offset[8], {1., 4.999378688808065*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"32\"", "\"64\"", "\"64\""},
                     "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"32", "64", "64"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-4.4, -0.5631234331341657}, {-0.25, 0}, 
                    Offset[8], {1., -1.755041667550472*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"16\"", "\"64\"", "\"64\""},
                     "RowWithSeparators"], LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    Row[{"16", "64", "64"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-3.4, -0.22681937349797163`}, {-0.25, 0}, 
                    Offset[8], {1., 0.5605067661773262}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"8\"", "\"128\"", 
                    "\"128\""}, "RowWithSeparators"], LabelStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"8", "128", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-2.4000000000000004`, -0.0026166670852602134`}, \
{-0.25, 0}, 
                    Offset[8], {1., -9.703177757808268*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"16\"", "\"128\"", 
                    "\"128\""}, "RowWithSeparators"], LabelStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"16", "128", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-1.4, -0.002616667124090014}, {-0.25, 0}, 
                    Offset[8], {1., -2.848285843293219*^-14}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"128\"", 
                    "\"128\""}, "RowWithSeparators"], LabelStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"2", "128", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-0.4, -0.0026166671241184968`}, {-0.25, 0}, 
                    Offset[8], {1., -2.848285843293219*^-14}], 
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"2\"", "\"256\"", 
                    "\"256\""}, "RowWithSeparators"], LabelStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"2", "256", "256"}, "\[Cross]"], "Tooltip"]& ]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-23., 1.4083438190194562`*^-15}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-22., -3.2387277635869947`*^-12}], 
                    Offset[{12, 12}, {-22., -3.2387277635869947`*^-12}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-22., -3.2387277635869947`*^-12}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"EncMod1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["EncMod1", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-3., -0.0026166670270411467`}], 
                    Offset[{10, 10}, {-3., -0.0026166670270411467`}]]}, 
                    InsetBox[
                    FormBox["\"C\"", TraditionalForm], 
                    Offset[{0, -1}, {-3., -0.0026166670270411467`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Concat1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"CatenateLayer", "[", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"8", ",", "128", ",", "128"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"8", ",", "128", ",", "128"}], "}"}]}], "}"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Concat1", Bold], 
                    Style[
                    HoldForm[
                    CatenateLayer[
                    "Inputs" -> {{8, 128, 128}, {8, 128, 128}}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-21., -0.563123432237886}], 
                    Offset[{12, 12}, {-21., -0.563123432237886}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-21., -0.563123432237886}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"EncMod2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["EncMod2", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-6., -0.5631234330788569}], 
                    Offset[{10, 10}, {-6., -0.5631234330788569}]]}, 
                    InsetBox[
                    FormBox["\"C\"", TraditionalForm], 
                    Offset[{0, -1}, {-6., -0.5631234330788569}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Concat2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"CatenateLayer", "[", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"16", ",", "64", ",", "64"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"16", ",", "64", ",", "64"}], "}"}]}], "}"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Concat2", Bold], 
                    Style[
                    HoldForm[
                    CatenateLayer["Inputs" -> {{16, 64, 64}, {16, 64, 64}}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-20., -1.56312343236675}], 
                    Offset[{12, 12}, {-20., -1.56312343236675}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-20., -1.56312343236675}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"EncMod3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["EncMod3", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-9., -1.5631234332279003`}], 
                    Offset[{10, 10}, {-9., -1.5631234332279003`}]]}, 
                    InsetBox[
                    FormBox["\"C\"", TraditionalForm], 
                    Offset[{0, -1}, {-9., -1.5631234332279003`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Concat3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"CatenateLayer", "[", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"32", ",", "32", ",", "32"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"32", ",", "32", ",", "32"}], "}"}]}], "}"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Concat3", Bold], 
                    Style[
                    HoldForm[
                    CatenateLayer["Inputs" -> {{32, 32, 32}, {32, 32, 32}}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-19., -2.563123432686352}], 
                    Offset[{12, 12}, {-19., -2.563123432686352}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-19., -2.563123432686352}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"EncMod4\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["EncMod4", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-12., -2.563123432343814}], 
                    Offset[{10, 10}, {-12., -2.563123432343814}]]}, 
                    InsetBox[
                    FormBox["\"C\"", TraditionalForm], 
                    Offset[{0, -1}, {-12., -2.563123432343814}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Concat4\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"CatenateLayer", "[", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"64", ",", "16", ",", "16"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"64", ",", "16", ",", "16"}], "}"}]}], "}"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Concat4", Bold], 
                    Style[
                    HoldForm[
                    CatenateLayer["Inputs" -> {{64, 16, 16}, {64, 16, 16}}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-18., -3.5631234328796486`}], 
                    Offset[{12, 12}, {-18., -3.5631234328796486`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-18., -3.5631234328796486`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"EncMod5\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["EncMod5", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 10), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-15., -3.563123432439368}], 
                    Offset[{10, 10}, {-15., -3.563123432439368}]]}, 
                    InsetBox[
                    FormBox["\"C\"", TraditionalForm], 
                    Offset[{0, -1}, {-15., -3.563123432439368}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Concat5\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"CatenateLayer", "[", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"128", ",", "8", ",", "8"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"128", ",", "8", ",", "8"}], "}"}]}], "}"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Concat5", Bold], 
                    Style[
                    HoldForm[
                    CatenateLayer["Inputs" -> {{128, 8, 8}, {128, 8, 8}}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 11), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-17., -4.5631234327163375`}], 
                    Offset[{12, 12}, {-17., -4.5631234327163375`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-17., -4.5631234327163375`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"EncMod6\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["EncMod6", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[2]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 12), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-16., -4.563123432441642}], 
                    Offset[{12, 12}, {-16., -4.563123432441642}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-16., -4.563123432441642}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"DecMod6\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["DecMod6", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[4]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 13), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-14., -3.5631234325525147`}], 
                    Offset[{12, 12}, {-14., -3.5631234325525147`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-14., -3.5631234325525147`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"ConvMod5\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "3", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["ConvMod5", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[3]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 14), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-13., -3.5631234334666138`}], 
                    Offset[{12, 12}, {-13., -3.5631234334666138`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-13., -3.5631234334666138`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"DecMod5\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["DecMod5", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[4]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 15), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-11., -2.5631234332593342`}], 
                    Offset[{12, 12}, {-11., -2.5631234332593342`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-11., -2.5631234332593342`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"ConvMod4\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "3", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["ConvMod4", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[3]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 16), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-10., -2.56312343319621}], 
                    Offset[{12, 12}, {-10., -2.56312343319621}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-10., -2.56312343319621}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"DecMod4\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["DecMod4", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[4]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 17), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-8., -1.5631234331769117`}], 
                    Offset[{12, 12}, {-8., -1.5631234331769117`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-8., -1.5631234331769117`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"ConvMod3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "3", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["ConvMod3", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[3]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 18), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-7., -1.563123433111826}], 
                    Offset[{12, 12}, {-7., -1.563123433111826}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-7., -1.563123433111826}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"DecMod3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["DecMod3", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[4]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 19), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-5., -0.5631234330288631}], 
                    Offset[{12, 12}, {-5., -0.5631234330288631}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-5., -0.5631234330288631}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"ConvMod2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "3", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["ConvMod2", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[3]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 20), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-4., -0.5631234332043673}], 
                    Offset[{12, 12}, {-4., -0.5631234332043673}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-4., -0.5631234332043673}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"DecMod2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["DecMod2", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[4]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 21), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-2., -0.0026166671240729243`}], 
                    Offset[{12, 12}, {-2., -0.0026166671240729243`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-2., -0.0026166671240729243`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"ConvMod1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "3", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["ConvMod1", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[3]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 22), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-1., -0.002616667124101407}], 
                    Offset[{12, 12}, {-1., -0.002616667124101407}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0., BaseStyle -> 
                    GrayLevel[0.4]], {-1., -0.002616667124101407}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"DecMod1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["DecMod1", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[4]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 23), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-1.6022465089998899`*^-19, -0.00261666712412989}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Output\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Output", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 24), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    Part[CompressedData["
1:eJxTTMoPSmViYGCQAGIQDQHmB7xccl9ei7tpA+GbHWiwyC/8XtOzF8LnOBDx
73hmT37qfgjf9MCX0EV50qyPoHyJA39fieYj+CYHfrFGbe9l+gnlKx2oM56K
xDc+YPtv+223RpYDEL7GATvLNUh8owN1i/YB+TxQvt6BfY3rkfiGB/433cld
7CAE5RscuH/qOhJf58C/lM1I6rUO1J29hMRXO2C37jSSfSpA804i8RUO1G2a
iORemQN1lr1IfJEDf7n5kfwrcOCfljoSn+HAs3+y5Yjw+rC/+L8cmJ8U67RX
din7HqAdYD4AON5/Mg==
                    "], 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 24, 20, 24, 20, 24, 20, 24, 20, 24, 20, 24, 24, 
                    24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, ImageSize -> {861., 221.00000002621115`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{28., 28.}, {28., 18.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Scrollbars -> {True, False}, ImageSizeAction -> 
                    "Scrollable", ImageSize -> {800, Automatic}]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "EncMod1"], 
                    NeuralNetworks`NetPath["Nodes", "Concat1"], 
                    NeuralNetworks`NetPath["Nodes", "EncMod2"], 
                    NeuralNetworks`NetPath["Nodes", "Concat2"], 
                    NeuralNetworks`NetPath["Nodes", "EncMod3"], 
                    NeuralNetworks`NetPath["Nodes", "Concat3"], 
                    NeuralNetworks`NetPath["Nodes", "EncMod4"], 
                    NeuralNetworks`NetPath["Nodes", "Concat4"], 
                    NeuralNetworks`NetPath["Nodes", "EncMod5"], 
                    NeuralNetworks`NetPath["Nodes", "Concat5"], 
                    NeuralNetworks`NetPath["Nodes", "EncMod6"], 
                    NeuralNetworks`NetPath["Nodes", "DecMod6"], 
                    NeuralNetworks`NetPath["Nodes", "ConvMod5"], 
                    NeuralNetworks`NetPath["Nodes", "DecMod5"], 
                    NeuralNetworks`NetPath["Nodes", "ConvMod4"], 
                    NeuralNetworks`NetPath["Nodes", "DecMod4"], 
                    NeuralNetworks`NetPath["Nodes", "ConvMod3"], 
                    NeuralNetworks`NetPath["Nodes", "DecMod3"], 
                    NeuralNetworks`NetPath["Nodes", "ConvMod2"], 
                    NeuralNetworks`NetPath["Nodes", "DecMod2"], 
                    NeuralNetworks`NetPath["Nodes", "ConvMod1"], 
                    NeuralNetworks`NetPath["Nodes", "DecMod1"], 
                    NeuralNetworks`NetPath["Outputs", "Output"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {256, 256}, "ColorSpace" -> "Grayscale", 
                    "ColorChannels" -> 1, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{1, 256, 256}, 
                    NeuralNetworks`RealT]]], 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 256, 256}, 
                    NeuralNetworks`RealT]], 
                    Association[
                    "EncMod1" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{8, 1, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 8, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {256, 256}, 
                    "$OutputSize" -> {256, 256}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 256, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{8, 256, 256}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT], 
                    "MovingMean" -> NeuralNetworks`TensorT[{8}, 
                    NeuralNetworks`RealT], "MovingVariance" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 8, 
                    "$SpatialDimensions" -> {256, 256}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{8, 256, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{8, 256, 256}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {8, 256, 256}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{8, 256, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{8, 256, 256}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 256, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{8, 256, 256}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 8, "$InputSize" -> {256, 256}, 
                    "$OutputSize" -> {128, 128}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{8, 256, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 256, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]]], "EncMod2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{16, 8, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 16, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 8, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 128}, 
                    "$OutputSize" -> {128, 128}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{16, 128, 128}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
                    "MovingVariance" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`RealT]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 16, 
                    "$SpatialDimensions" -> {128, 128}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{16, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{16, 128, 128}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {16, 128, 128}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{16, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{16, 128, 128}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{16, 128, 128}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 16, "$InputSize" -> {128, 128}, 
                    "$OutputSize" -> {64, 64}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{16, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]]], "EncMod3" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{32, 16, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 32, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 16, 
                    "$GroupNumber" -> 1, "$InputSize" -> {64, 64}, 
                    "$OutputSize" -> {64, 64}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 64, 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{32}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
                    "MovingVariance" -> NeuralNetworks`TensorT[{32}, 
                    NeuralNetworks`RealT]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 32, 
                    "$SpatialDimensions" -> {64, 64}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{32, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 64, 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {32, 64, 64}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{32, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 64, 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 64, 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 32, "$InputSize" -> {64, 64}, 
                    "$OutputSize" -> {32, 32}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{32, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]]], "EncMod4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{64, 32, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 32, 
                    "$GroupNumber" -> 1, "$InputSize" -> {32, 32}, 
                    "$OutputSize" -> {32, 32}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 32, 32}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {32, 32}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 32, 32}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 32, 32}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 32, 32}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 32, 32}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 64, "$InputSize" -> {32, 32}, 
                    "$OutputSize" -> {16, 16}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]]], "EncMod5" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{128, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 64, 
                    "$GroupNumber" -> 1, "$InputSize" -> {16, 16}, 
                    "$OutputSize" -> {16, 16}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 16, 16}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {16, 16}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 16, 16}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 16, 16}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 16, 16}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 128, "$InputSize" -> {16, 16}, 
                    "$OutputSize" -> {8, 8}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]]], "EncMod6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{256, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 8, 8}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 8, 8}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 8, 8}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 8, 8}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 256, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {4, 4}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 4, 4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 4, 4}, 
                    NeuralNetworks`RealT]]], "DecMod6" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{256, 128, 2, 2}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {4, 4}, "$OutputSize" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 4, 4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 4, 4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]]], "Concat5" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 8, 8}, 
                    NeuralNetworks`RealT]]], "ConvMod5" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{128, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]]], "DecMod5" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{128, 64, 2, 2}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 64, 
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {16, 16}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 16, 16}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 64, 
                    "$GroupNumber" -> 1, "$InputSize" -> {16, 16}, 
                    "$OutputSize" -> {16, 16}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {16, 16}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 16, 16}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]]], "Concat4" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 16, 16}, 
                    NeuralNetworks`RealT]]], "ConvMod4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{64, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 64, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {16, 16}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 16, 16}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]]], "DecMod4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{64, 32, 2, 2}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 32, 
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {32, 32}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{32}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 32, 
                    "$SpatialDimensions" -> {32, 32}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {32, 32, 32}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{32, 32, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 32, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 32, 
                    "$GroupNumber" -> 1, "$InputSize" -> {32, 32}, 
                    "$OutputSize" -> {32, 32}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{32}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
                    "MovingVariance" -> NeuralNetworks`TensorT[{32}, 
                    NeuralNetworks`RealT]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 32, 
                    "$SpatialDimensions" -> {32, 32}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {32, 32, 32}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]]], "Concat3" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 32, 32}, 
                    NeuralNetworks`RealT]]], "ConvMod3" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{32, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 32, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{32}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 32, 
                    "$SpatialDimensions" -> {32, 32}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {32, 32, 32}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]]], "DecMod3" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{32, 16, 2, 2}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 16, 
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Interleaving" -> False, 
                    "$InputChannels" -> 32, "$GroupNumber" -> 1, 
                    "$InputSize" -> {32, 32}, "$OutputSize" -> {64, 64}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 16, 
                    "$SpatialDimensions" -> {64, 64}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {16, 64, 64}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{16, 16, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 16, "KernelSize" -> {3, 3}, "Stride" -> 
                    {1, 1}, "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 16, "$GroupNumber" -> 1, 
                    "$InputSize" -> {64, 64}, "$OutputSize" -> {64, 64}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
                    "MovingVariance" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`RealT]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 16, 
                    "$SpatialDimensions" -> {64, 64}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {16, 64, 64}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{32, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]]], "Concat2" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{32, 64, 64}, 
                    NeuralNetworks`RealT]]], "ConvMod2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{16, 32, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 16, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 32, "$GroupNumber" -> 1, 
                    "$InputSize" -> {64, 64}, "$OutputSize" -> {64, 64}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{32, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 16, 
                    "$SpatialDimensions" -> {64, 64}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {16, 64, 64}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{32, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]]], "DecMod2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{16, 8, 2, 2}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 8, "KernelSize" -> {2, 2},
                     "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Interleaving" -> False, "$InputChannels" -> 16, 
                    "$GroupNumber" -> 1, "$InputSize" -> {64, 64}, 
                    "$OutputSize" -> {128, 128}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT], 
                    "MovingMean" -> NeuralNetworks`TensorT[{8}, 
                    NeuralNetworks`RealT], "MovingVariance" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 8, 
                    "$SpatialDimensions" -> {128, 128}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {8, 128, 128}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{8, 8, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 8, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 8, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 128}, 
                    "$OutputSize" -> {128, 128}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT], 
                    "MovingMean" -> NeuralNetworks`TensorT[{8}, 
                    NeuralNetworks`RealT], "MovingVariance" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 8, 
                    "$SpatialDimensions" -> {128, 128}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {8, 128, 128}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]]], "Concat1" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{8, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{16, 128, 128}, 
                    NeuralNetworks`RealT]]], "ConvMod1" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{2, 16, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 2, "KernelSize" -> {3, 3},
                     "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 16, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 128}, 
                    "$OutputSize" -> {128, 128}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{16, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 128, 128}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "MovingMean" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "MovingVariance" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 2, 
                    "$SpatialDimensions" -> {128, 128}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 128, 128}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {2, 128, 128}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 128, 128}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{16, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 128, 128}, 
                    NeuralNetworks`RealT]]], "DecMod1" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{2, 2, 2, 2}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 2, "KernelSize" -> {2, 2},
                     "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Interleaving" -> False, "$InputChannels" -> 2, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 128}, 
                    "$OutputSize" -> {256, 256}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 256, 256}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "MovingMean" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "MovingVariance" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 2, 
                    "$SpatialDimensions" -> {256, 256}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 256, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 256, 256}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {2, 256, 256}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 256, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 256, 256}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{2, 2, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 2, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 2, 
                    "$GroupNumber" -> 1, "$InputSize" -> {256, 256}, 
                    "$OutputSize" -> {256, 256}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 256, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 256, 256}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "MovingMean" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "MovingVariance" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 2, 
                    "$SpatialDimensions" -> {256, 256}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 256, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 256, 256}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {2, 256, 256}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 256, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 256, 256}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 256, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 256, 256}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2, 256, 256}, 
                    NeuralNetworks`RealT]]]]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"image\"", "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\"", 
                    "\"256\"", "\"256\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7612837350316143`*^9, 3.761285163561151*^9, 
  3.7612854730063467`*^9, 3.761287184843491*^9, 3.7612872570064087`*^9, 
  3.761289618941702*^9, 3.7612897229275293`*^9, 3.76129240883916*^9, 
  3.761292458036581*^9, 3.761342222380691*^9, 3.761344485137536*^9, 
  3.7613445436430817`*^9, 3.761344939547162*^9, 3.7613452221748037`*^9, 
  3.761346129422072*^9},
 CellLabel->"Out[35]=",ExpressionUUID->"12e25fcf-3ebb-450a-916c-3d854e95667f"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{"Training", "..."}], "*)"}]], "Input",
 CellChangeTimes->{{3.749180926839899*^9, 3.7491809291346083`*^9}, {
  3.760389421121057*^9, 3.760389428781856*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"4663d994-23dd-44ef-97d9-3ede55ce38f6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"logFile", "=", 
   RowBox[{"CreateTemporary", "[", "]"}]}], ";", " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "save", " ", "training", " ", "data", " ", "into", " ", "TMP", " ", 
    "file"}], " ", "*)"}], 
  RowBox[{"appendToLog", "=", 
   RowBox[{
    RowBox[{"PutAppend", "[", 
     RowBox[{
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<Batch\>\"", "\[Rule]", "#AbsoluteBatch"}], ",", 
        RowBox[{"\"\<Loss\>\"", "\[Rule]", "#RoundLoss"}], ",", 
        RowBox[{"\"\<VLoss\>\"", "\[Rule]", "#ValidationLoss"}]}], 
       RowBox[{"(*", 
        RowBox[{",", " ", 
         RowBox[{"\"\<Error\>\"", "\[Rule]", "#RoundErrorRate"}]}], "*)"}], 
       "|>"}], ",", "logFile"}], "]"}], "&"}]}], ";", 
  RowBox[{"TN", "=", 
   RowBox[{"NetTrain", "[", 
    RowBox[{"UNET", ",", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<Input\>\"", " ", "\[Rule]", "MRId"}], ",", 
       RowBox[{"\"\<Output\>\"", "\[Rule]", "labelsd"}]}], "|>"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"BatchSize", "\[Rule]", "BS"}], ",", "\[IndentingNewLine]", 
     RowBox[{"ValidationSet", "\[Rule]", " ", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<Input\>\"", " ", "\[Rule]", "MRIv"}], ",", 
        RowBox[{"\"\<Output\>\"", "\[Rule]", "labelsv"}]}], "|>"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"MaxTrainingRounds", "\[Rule]", "NIter"}], ",", " ", 
     "\[IndentingNewLine]", 
     RowBox[{"TargetDevice", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<GPU\>\"", ",", "3"}], "}"}]}], ",", " ", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
       "\"\<3\>\"", " ", "is", " ", "the", " ", "number", " ", "of", " ", 
        "available", " ", "GPU", " ", "cards"}], " ", "-", " ", 
       RowBox[{
       "remove", " ", "this", " ", "line", " ", "if", " ", "you", " ", "do", 
        " ", "the", " ", "computation", " ", "on", " ", "CPU"}]}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"TrainingProgressFunction", "\[Rule]", "appendToLog"}]}], 
    "\[IndentingNewLine]", " ", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7528923126840153`*^9, 3.752892323210475*^9}, {
   3.7534949571599894`*^9, 3.753494962711824*^9}, {3.753495854576621*^9, 
   3.7534958557532063`*^9}, 3.753497109836812*^9, {3.753498233963657*^9, 
   3.753498234491576*^9}, {3.753500758955188*^9, 3.753500770792852*^9}, {
   3.753500972496809*^9, 3.753500976450741*^9}, {3.753501545232807*^9, 
   3.7535015695158253`*^9}, {3.753501601620249*^9, 3.753501605142626*^9}, {
   3.753501678913107*^9, 3.753501683205841*^9}, {3.75350196716754*^9, 
   3.7535019824887466`*^9}, {3.7535020280454187`*^9, 
   3.7535020358839893`*^9}, {3.7535023091892023`*^9, 3.75350232646257*^9}, {
   3.753502469699752*^9, 3.753502484964128*^9}, {3.753502580803392*^9, 
   3.7535026112952423`*^9}, 3.753502648242688*^9, 3.7535047947060204`*^9, {
   3.7535059787924*^9, 3.7535059918714333`*^9}, {3.753509768638771*^9, 
   3.7535097750345497`*^9}, 3.753510727318572*^9, 3.7535780527641773`*^9, {
   3.7535793233272*^9, 3.753579324747533*^9}, {3.753581433325955*^9, 
   3.7535814427015553`*^9}, {3.7535814915951443`*^9, 
   3.7535815782852087`*^9}, {3.753581681731287*^9, 3.75358170761045*^9}, {
   3.75358192740876*^9, 3.753581928427945*^9}, {3.753582287357547*^9, 
   3.753582324829526*^9}, {3.753582856043832*^9, 3.753582856850296*^9}, {
   3.753583144086906*^9, 3.7535831441805*^9}, {3.753583811962327*^9, 
   3.753583821679089*^9}, 3.753585081843851*^9, {3.753585217702911*^9, 
   3.753585315205152*^9}, {3.7535862981574574`*^9, 3.7535863092440977`*^9}, {
   3.753588064603486*^9, 3.75358811296129*^9}, {3.753588538567254*^9, 
   3.753588558998933*^9}, 3.753600057529098*^9, {3.753656253046254*^9, 
   3.753656256357978*^9}, 3.753656372369419*^9, {3.7536678908917627`*^9, 
   3.753667891424721*^9}, 3.753741700972168*^9, 3.753742260176405*^9, {
   3.75374985420041*^9, 3.753749878472701*^9}, 3.753749943039747*^9, {
   3.753751646897501*^9, 3.7537516534877253`*^9}, {3.755908416631464*^9, 
   3.7559084182300367`*^9}, 3.7559127478040133`*^9, {3.757113021112555*^9, 
   3.7571130381977577`*^9}, {3.75711745176248*^9, 3.757117471207033*^9}, {
   3.759537146724524*^9, 3.7595371498762493`*^9}, {3.759709340095549*^9, 
   3.759709357534075*^9}, {3.759712567075432*^9, 3.759712577171317*^9}, {
   3.7603220262748747`*^9, 3.760322081260001*^9}, 3.7603262393637114`*^9, {
   3.7603886766359243`*^9, 3.760388688889381*^9}, {3.761271672904662*^9, 
   3.761271680480565*^9}, {3.761271724610413*^9, 3.761271726962151*^9}, {
   3.761271842444511*^9, 3.761271866397163*^9}, 3.76128365040738*^9, 
   3.761283719401421*^9, 3.761286805748682*^9},
 CellLabel->"In[37]:=",ExpressionUUID->"92efc98e-0825-4e84-932e-7ecfaf7b1271"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "Plot", " ", "training", " ", "loss", " ", "and", " ", "validation", " ", 
   "loss"}], "  ", "*)"}]], "Input",
 CellChangeTimes->{{3.760326775196933*^9, 3.76032679678047*^9}, {
  3.76038943955302*^9, 3.7603894470249643`*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"6f91c3ee-3611-4932-a89d-1601171796a7"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"dataset", "=", 
   RowBox[{"Dataset", "[", 
    RowBox[{"ReadList", "[", "logFile", "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"LossData", "=", 
   RowBox[{"dataset", "[", 
    RowBox[{"All", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Batch\>\"", ",", "\"\<Loss\>\""}], "}"}]}], "]"}]}], ";", 
  RowBox[{"VLossData", "=", 
   RowBox[{"dataset", "[", 
    RowBox[{"All", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Batch\>\"", ",", "\"\<VLoss\>\""}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"t1", "=", 
   RowBox[{"ListLinePlot", "[", 
    RowBox[{"LossData", ",", 
     RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
     RowBox[{"PlotLegends", "\[Rule]", 
      RowBox[{"{", "\"\<Training Loss\>\"", "}"}]}], ",", 
     RowBox[{"PlotStyle", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"Dashed", ",", " ", "Blue"}], "}"}]}]}], "]"}]}], ";", 
  RowBox[{"t2", "=", 
   RowBox[{"ListLinePlot", "[", 
    RowBox[{"VLossData", ",", 
     RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
     RowBox[{"PlotLegends", "\[Rule]", 
      RowBox[{"{", "\"\<Validation Loss\>\"", "}"}]}], ",", 
     RowBox[{"PlotStyle", "\[Rule]", 
      RowBox[{"{", "Red", "}"}]}]}], "]"}]}], ";", 
  RowBox[{"Show", "[", 
   RowBox[{"t1", ",", "t2"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.753583050935899*^9, 3.753583050936544*^9}, {
   3.7535835986916656`*^9, 3.753583619991453*^9}, {3.753584269645391*^9, 
   3.753584280176929*^9}, {3.75358484102571*^9, 3.753584871702133*^9}, {
   3.753584922801922*^9, 3.753584929359668*^9}, 3.753585194454074*^9, {
   3.753585346855797*^9, 3.753585383499215*^9}, {3.753585944572729*^9, 
   3.7535859970978813`*^9}, {3.753656384853303*^9, 3.7536563944233513`*^9}, {
   3.760235402284286*^9, 3.760235414059041*^9}, {3.760235690016433*^9, 
   3.760235789631219*^9}, {3.7603251277391653`*^9, 3.760325134608643*^9}, {
   3.760325854361216*^9, 3.7603258562163343`*^9}, 3.7603267658266993`*^9, {
   3.760326801728064*^9, 3.760326803070217*^9}, {3.760390394502181*^9, 
   3.760390454447524*^9}},
 CellLabel->"In[39]:=",ExpressionUUID->"8463af53-db9d-4849-ae46-c2a96a34f072"],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{{}, {{{}, {}, {
         Hue[0.67, 0.6, 0.6], 
         Directive[
          PointSize[
           NCache[
            Rational[1, 72], 0.013888888888888888`]], 
          AbsoluteThickness[1.6], 
          Dashing[{Small, Small}], 
          RGBColor[0, 0, 1]], 
         LineBox[CompressedData["
1:eJw11H9M1GUcB/BvTS8FMgR1SDmhNnShCBygYI6nUicqyMhfTGUnKipagZor
dHV4cPJD4e64E7njx/fuBPlxd37RITiVLhuzQWxXKWlRnCuITBGcpiu1Ps/u
/WW7sdfenx/P8/zxDc/+OGPXy4Ig7KQf/+/7W85251zcl/JeZ7LP68lJvz35
xQZnMXON6fV7mbJ3sv5vS/bEvi97L1MqK1+Jipf9EeXinKXzYXU+zdt/qStE
zg/x+SFBCjk/TE7suT5mRf4ZM88+4Pf0Oqw+wgT1z9PCS+X8c8rbe8yzYKZm
ygu1fn/HiqgvpHnLZkydqPPZfYzFKYd6g25a0F9E+UNjjsGM/mI6b0J2YlcN
+rWU13coHp5G/3EmCOL9oQJYKKX8H/uucJiVUT66IH+wGv3l9F6vvmm7CLtP
0PzA5JNfwEIF5dN/35wGs0rq3zPv7tuydeSiTREzYS/3N6ufD5/CfD31fzIl
5xocZqD5S7b26uV9BjrfyPDCxbCqiud3d/SjXjDSe3y9wqCHRSPN75Ju5cPM
RP0Rj6elwl4T5Utqly2S95+ifvtt/2B5fzXVJzzoeWzC/mraN9qZcBtWnabz
TqyxXIWFGqpXOJKcsMh97WBaA8zMvH9ysseI/dyPXkvTV2G/heYVWxXjBuyv
pbzrXVUK7K6l8x7t/OCYHvvryCUrf5wNC/XU/9KXrlYd9tfT/rE/69yV2N9A
867s+/5yBfY3UP3UTYN9J5GLVB/1h/bRCZ91Ir2H/xZhNewVqb59wOgs9zna
SvvnV8wMhtVWqv+h7Ia2zGePlfYZNZ45cJiNfGNh1LlSn/NsNG9v+f0C2M3z
Z/dilsKBdu7MiThYZaf5Wz6tmgFLdup//u8kRwnuf4bOE/A0cQOczu3pSW2A
xTPU/5clKxMe5567uHviOO7fSPWjfakLkOsa6T1sg6YLyL2NtC9+R3ooHN1E
eUbcA40W92+i82YZIkNhD/dhRURvMe5/ln8vmlYcgfPO0rxFV5tTYDfPV0Ze
SoIDmykvDA0OglXNlH93J2cWLDXTeTPSpCdFuH8L+UPd0Wjk6S10v1zNVy+Q
iy0073zHmLxvnOc3rwS8AbNWmi/duTyAel0r61+7TXpLhdzbSvUx2wrledFt
9P2SMtsdsJr710OuKNjTRvNebI0d0uD+DjqfTisOw3kOtnukOybFH/Vunh/I
XTUZDnTS/viBtX2oVznp/PuX/5QNS06qt4xo18GCi873rCNyO5zuYv0BWdL5
PFh00ff1VkFbBjzOPf2/sHdgdo4pD/qXbZyrSf4f3jbmFQ==
          
          "]]}}}, {}, {}, {}, {}}, {{}, {{{}, {}, {
         Hue[0.67, 0.6, 0.6], 
         Directive[
          PointSize[
           NCache[
            Rational[1, 72], 0.013888888888888888`]], 
          AbsoluteThickness[1.6], 
          RGBColor[1, 0, 0]], 
         LineBox[CompressedData["
1:eJw1k3tsS2EYxo8FiaUuC4tIGrqISyxhyUqGiC+CSki2YCSGHLugbGxs4rqc
oqsZZ919GDtdd2u7u+tioQwVkdjcwx9Kw8iCbi7BGN/rPKdJ2/zyfO/7PO/7
nRORuHNlSoggCMn8S//qZzHzZegj7z+tWqjyahYfHx92vlcBb2R6X4Zl7X2N
kzn3RQ90amwmffmWaxrvYG63e3j7ZbCUwXmGcVWTpmcyORCj91Vq+h7Gf8wr
j2n6Pp6nYuCpqOkHiHVihKZnU743sQmVKjOJxchJbcb4szhvYRl6n1M37ozK
3sO8v6C7boYuHKV8299/K0O9lfjjpmVgKYf6fy+WS1FvI//ox1FgIZfmGXG3
owT1x7mfqX9zIVjKY4GYUWm6VLD3BPVPTGNgQab+IaMjtPp8NldOcsyO1NhO
evbuF8Uq++2U/89MF1gqoPlGJJWADYW0T3OZUfMrpPqNtnvQxSKeR76w7g5Y
KKZ9m9piwUox3f+SFfPArITnCVwcCNf8S6jfjyO/iuBfSvUVrBdsKKM8i7be
AnvLeJ4rwUOtYLGc95vcY7ODhVOUt2vYfrByiva3IywbzE6zXXqTMbuxAP6n
6XkrF/vt8D9DfoNtCwrhX0H7ndOzT4Z/Bekfbgw9Cf+z5Ld+xpB8+J/jz0ug
Na8oD/7naD/tB5tPwL+SOEHsgO6vpP3POpSZC12h/Zh0/mMq2xU6P3h5Ptiv
kN+7KR9sKkc5qP7Bj+1gyUH7jvipA3c56Dxr9+Rgnip6vl6WZ4HTq+j9ykmO
BXur6PkKe9hjVXmMk/ZtLf0LFp2Ub5z5EbjFSflyX59HvVD9f96eNOhx1bT/
3tsWsEL6qEh58KjKwWp+/0+WPlDArIb23fw2BWyv+f/+O0NR76+hebuvfoEe
Vcv1Vqk5GSzV0v1M3Vp7BPMT27LuloMNdbSf8DUTwel1vJ9X+TIf7K2jPC3R
Pw9j/nqaxxpYAF2sJ/3l8z7oLfXU/+okP1hwcT18w96v4DgX16d9FD+DFRfP
233zwidw0EX73WbdD2Zunsdgr3bAz+7m5wuehcqYz0/cnXvwNs5HeXj/tamZ
k8CSh8/3O9g/HdzloX36Jo8HGxpon7OMXy2Yv4Hn/aZrC9Hmb+D36xz7yQ99
TCPXl+T33QCLxFMmFDwHtzTyvOzVSA9YaOLv15bU0A5wXBM/n9XZy7T5m/i8
9TMTOqEHiWNMCelg1sz5/bzllywL/wEsJvBU
          "]]}}}, {}, {}, {}, {}}}, {
    DisplayFunction -> Identity, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.05]}}, AxesOrigin -> {0, 0}, 
     PlotRange -> {{0, 4000.}, {0, 0.09085520629596432}}, PlotRangeClipping -> 
     True, ImagePadding -> All, DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
     Identity, Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           (Identity[#]& )[
            Part[#, 1]], 
           (Identity[#]& )[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           (Identity[#]& )[
            Part[#, 1]], 
           (Identity[#]& )[
            Part[#, 2]]}& )}}, 
     PlotRange -> {{0, 4000.}, {0, 0.09085520629596432}}, PlotRangeClipping -> 
     True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}],FormBox[
    TagBox[
     GridBox[{{
        FormBox[
         TemplateBox[{"\"Training Loss\""}, "LineLegend", 
          DisplayFunction -> (StyleBox[
            StyleBox[
             PaneBox[
              TagBox[
               GridBox[{{
                  TagBox[
                   GridBox[{{
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[
                    NCache[
                    Rational[1, 8], 0.125]], 
                    AbsoluteThickness[1.6], 
                    Dashing[{Small, Small}], 
                    RGBColor[0, 0, 1]], {
                    LineBox[{{0, 10}, {40, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[
                    NCache[
                    Rational[1, 8], 0.125]], 
                    AbsoluteThickness[1.6], 
                    Dashing[{Small, Small}], 
                    RGBColor[0, 0, 1]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {40, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
               "Grid"], Alignment -> Left, AppearanceElements -> None, 
              ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
              "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
            FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
            False]& ), InterpretationFunction :> (RowBox[{"LineLegend", "[", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{"Directive", "[", 
                   RowBox[{
                    RowBox[{"PointSize", "[", 
                    FractionBox["1", "72"], "]"}], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                    RowBox[{"Dashing", "[", 
                    RowBox[{"{", 
                    RowBox[{"Small", ",", "Small"}], "}"}], "]"}], ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 0, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> RGBColor[0., 0., 0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0", ",", "0", ",", "1"}], "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 0, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0, 0, 1], Editable -> False, Selectable -> 
                    False]}], "]"}], "}"}], ",", 
               RowBox[{"{", #, "}"}], ",", 
               RowBox[{"LegendMarkers", "\[Rule]", 
                 RowBox[{"{", 
                   RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], "}"}]}], ",", 
               
               RowBox[{"Joined", "\[Rule]", 
                 RowBox[{"{", "True", "}"}]}], ",", 
               RowBox[{"LabelStyle", "\[Rule]", 
                 RowBox[{"{", "}"}]}], ",", 
               RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
          Editable -> True], TraditionalForm]}, {
        FormBox[
         TemplateBox[{"\"Validation Loss\""}, "LineLegend", 
          DisplayFunction -> (StyleBox[
            StyleBox[
             PaneBox[
              TagBox[
               GridBox[{{
                  TagBox[
                   GridBox[{{
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[
                    NCache[
                    Rational[1, 4], 0.25]], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0, 0]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[
                    NCache[
                    Rational[1, 4], 0.25]], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0, 0]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
               "Grid"], Alignment -> Left, AppearanceElements -> None, 
              ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
              "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
            FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
            False]& ), InterpretationFunction :> (RowBox[{"LineLegend", "[", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{"Directive", "[", 
                   RowBox[{
                    RowBox[{"PointSize", "[", 
                    FractionBox["1", "72"], "]"}], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> RGBColor[0.6666666666666666, 0., 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1, 0, 0], Editable -> False, Selectable -> 
                    False]}], "]"}], "}"}], ",", 
               RowBox[{"{", #, "}"}], ",", 
               RowBox[{"LegendMarkers", "\[Rule]", 
                 RowBox[{"{", 
                   RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], "}"}]}], ",", 
               
               RowBox[{"Joined", "\[Rule]", 
                 RowBox[{"{", "True", "}"}]}], ",", 
               RowBox[{"LabelStyle", "\[Rule]", 
                 RowBox[{"{", "}"}]}], ",", 
               RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
          Editable -> True], TraditionalForm]}}, 
      GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False, 
      GridBoxItemSize -> {
       "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
      GridBoxSpacings -> {"Columns" -> {{0}}}], "Grid"], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.7602357448966427`*^9, 3.760235790370225*^9}, 
   3.760236442405459*^9, 3.76023695309197*^9, 3.76023735028689*^9, 
   3.7602389323317957`*^9, 3.76024079988767*^9, 3.760242703531268*^9, 
   3.760249078971464*^9, 3.7602543529568663`*^9, 3.7603079595111647`*^9, 
   3.760311349022674*^9, 3.76031564052209*^9, 3.7603188652110357`*^9, 
   3.760323291774818*^9, 3.760323489006207*^9, {3.7603235782245493`*^9, 
   3.7603236263712997`*^9}, {3.760323668388774*^9, 3.760323739973877*^9}, 
   3.760323798174107*^9, 3.7603238627505198`*^9, 3.760324105491992*^9, 
   3.7603241894122763`*^9, 3.760325160063527*^9, 3.760325252704458*^9, 
   3.760325308145815*^9, 3.7603253670811567`*^9, 3.760325436795684*^9, 
   3.760325829287436*^9, 3.760325882922559*^9, 3.7603259367872353`*^9, 
   3.7603262519544983`*^9, 3.760326487274822*^9, 3.760326554956208*^9, 
   3.7603267699443893`*^9, 3.760326806188572*^9, 3.760327231628027*^9, 
   3.760389944503501*^9, 3.760390147270236*^9, {3.7603903984346027`*^9, 
   3.760390455070693*^9}, 3.760390561314451*^9, 3.7612717529563723`*^9, 
   3.761271855126199*^9, 3.761271934797851*^9, 3.761273465316081*^9, 
   3.761274089218027*^9, 3.7612742808239803`*^9, 3.7612752097167253`*^9, 
   3.761283689114739*^9, 3.761283792600359*^9, 3.7612852179515247`*^9, 
   3.761285528801321*^9, 3.761287234026596*^9, 3.761287391275601*^9, 
   3.761289673243368*^9, 3.761289831645509*^9, 3.761292515251336*^9, 
   3.761342277667284*^9, 3.761344542247857*^9, 3.761344939812634*^9, 
   3.761345280849103*^9, 3.761346187295186*^9},
 CellLabel->"Out[41]=",ExpressionUUID->"250293f8-375b-416e-9f4c-7f05a664c88a"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
   RowBox[{
    RowBox[{"Save", " ", "trained", " ", "network"}], " ", "&"}], " ", "loss",
    " ", "data"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.760326826546832*^9, 3.760326846926167*^9}, {
  3.760389990775992*^9, 3.76039000116945*^9}},
 CellLabel->"In[42]:=",ExpressionUUID->"0324feec-e347-4a21-8fa0-d1799385b9c4"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Export", "[", 
    RowBox[{"NetworkName", ",", "TN"}], "]"}], ";"}], " "}]], "Input",
 CellChangeTimes->{
  3.753656422693387*^9, {3.753656509373851*^9, 3.753656513365068*^9}, {
   3.753747074455194*^9, 3.7537470881180353`*^9}, {3.7537499371459723`*^9, 
   3.7537499394478073`*^9}, 3.753751053070223*^9, {3.753751688366022*^9, 
   3.7537516913742113`*^9}, {3.753752124305316*^9, 3.7537521298396063`*^9}, {
   3.7603268168654623`*^9, 3.760326823749752*^9}},
 CellLabel->"In[43]:=",ExpressionUUID->"bc5b22f1-826f-44f6-bc0f-f106aee7f95f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Export", "[", 
   RowBox[{"LossName", ",", "LossData", ",", "\"\<Table\>\""}], "]"}], 
  ";"}]], "Input",
 CellChangeTimes->{3.76024969707056*^9},
 CellLabel->"In[44]:=",ExpressionUUID->"858236d6-d2bd-4c37-b622-d10f21debbe8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Export", "[", 
   RowBox[{"VLossName", ",", "VLossData", ",", "\"\<Table\>\""}], "]"}], 
  ";"}]], "Input",
 CellChangeTimes->{
  3.7602497005239162`*^9, {3.7603045400902567`*^9, 3.7603045459123287`*^9}},
 CellLabel->"In[45]:=",ExpressionUUID->"d1b33c75-4e08-4acf-b6e6-8d2a8361e3b0"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "Test", " ", "one", " ", "random", " ", "image", " ", "from", " ", "the", 
   " ", "validation", " ", "data", " ", 
   RowBox[{"(", 
    RowBox[{
    "\"\<Yellow\>\"", " ", "is", " ", "true", " ", "and", " ", "\"\<Red\>\"", 
     " ", "is", " ", "network", " ", "segmentation"}], " ", ")"}]}], 
  "*)"}]], "Input",
 CellChangeTimes->{{3.75954882085802*^9, 3.759548822578689*^9}, 
   3.759554466166265*^9, {3.760325066592903*^9, 3.760325075951737*^9}, {
   3.760326849405122*^9, 3.7603268503474894`*^9}, {3.760389453886512*^9, 
   3.7603894608939133`*^9}, {3.760390209332038*^9, 3.7603902262743607`*^9}, {
   3.761285513127323*^9, 3.761285522341035*^9}},
 CellLabel->"In[46]:=",ExpressionUUID->"b86be700-98bd-48b2-b088-116f6fce051a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"selectval", "=", 
   RowBox[{
    RowBox[{"RandomInteger", "[", 
     RowBox[{
      RowBox[{"Dimensions", "[", "MRIv", "]"}], "-", "1"}], "]"}], "+", 
    "1"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.760324964753759*^9, 3.760324973231522*^9}, 
   3.760325455973197*^9, {3.76032558857055*^9, 3.760325599427342*^9}, 
   3.760325688277672*^9, {3.760325759319414*^9, 3.760325789413406*^9}, 
   3.760325833720964*^9, {3.760325934537675*^9, 3.760325944775343*^9}, {
   3.760325976961053*^9, 3.760326015981525*^9}},
 CellLabel->"In[47]:=",ExpressionUUID->"7defed12-c732-41ab-971f-26b78af0980c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"NotebookEvaluate", "[", "TestName", "]"}], ";", 
  "DisplayResult"}]], "Input",
 CellChangeTimes->{{3.7603256544842453`*^9, 3.760325684356304*^9}, {
   3.760325726440309*^9, 3.760325756088546*^9}, 3.760327155747945*^9, 
   3.7612717405966663`*^9, {3.7612735772044783`*^9, 3.7612735830582037`*^9}, {
   3.76127512295044*^9, 3.761275126998844*^9}},
 CellLabel->"In[48]:=",ExpressionUUID->"36823706-ce80-4016-838d-738be7c6ffb1"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzs3QeUleXd/2vsJRbsNYqxESv2EhU01lix1wRRFEsUOzZEsWBs2FFBAbGg
gjQFFHFoUoWBaTB0xd571zPPs9f/XS5/3hy2jtKua+Wcz3tWyDCzp+39vVnn
3qjp+UeesXidOnUuWrbm/3XkqZftfeGFp15+1NLZ/0ezU8/decdmS9T8n3UW
q/l/lqxTJ/+/AQAAAAAAAAAAAAAAAAAAAAAAAAAAAACAufbIuttO22Tpiobz
+v0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAWYg3uPPF/9bZuONcFAAAAAADmf/Z/AAAAAABY+Nj/AQAAAABg
4WP/BwAAAACAhY+dH+Z/vk8BAAAAgGLZFWH+5/sUAAAAACiWXRHmf75PAQAA
AIBi2RVh/uf7FAAAAABIqa17ft0XDH8+318AAAAAQIr9HxZcvr8AAAAAgBT7
Pyy4fH8BAAAAACn2f1hw+f4CAAAAgEXHH73n1+r7uWfDX689E+ZK6vvoT/l7
fZ8CAAAAwJ/K/g+LDvs/AAAAACw67P+w6LD/AwAAAMCiw/4Piw77PwAAAACQ
MsfzgSL2+dpqse8nAAAAAAAQ2f8BAAAAAGDhY/8HAAAAAICFj/0fAAAAAAD+
fLW1n/+mt/8H7v+/6f2cB/ecAgAAAADAH8H+/7P30/4PAAAAAMBCwv7/s/fT
/g8AAAAAwELC/v+z99P+DwAAAADAQmJe3atb7P5fWx9Xbf15AAAAAACYn9n/
f9ufBwAAAACA+Zn9/7f9eQAAAAAAmJ/Z/3/bnwcAAAAAgN/jj96l/+h7dV97
f+iZk/ZrONf9o88Fin0c+HN4/BcO8+o+7jn+3JgH93oX+3Psj37c5tXjAH8m
v0cAAABYENn/7f+LAo//wsH+Pxfvj/0f/hB+jwAAALAgsv/b/xcFHv+Fg/1/
Lt4f+z/8IfweAQAAYEFk/7f/Lwo8/gsH+/9cvD/2f/hD+D0CAADA/CC1w2yT
9dDYBX33rq09/0/ZzewG84zHf+FQ7OcxdQ741CcTD23aJPb17L8/Jjb155dt
uPLlV50Qm3o/U2+/th6H1M/DOZ6HFvFz76UHWx6745Gxqcfhj/481tY5Tur3
4296/GuhAAAAACn2f/s/kcd/4WD/n/PjYP+3/wMAAAALN/u//Z/I479wsP/P
+XGw/9v/AQAAgIWb/d/+T+TxXzjY/+f8ONj/7f8AAADAwi21J6T2kzmeCxS7
q8yD3aPYHczewqKsVr/vauHnwxx/Lp0Sm+/NTWNTityrW+d/f7PQ5PtT7Llq
6hyh2J9Xicch9f63/uLes1o8dWZo8vFJSTwOrfPH76zQYt9O0Z/fIh+35OOw
9+517v70vNiUYu+dL/brPPXnU49PsecvAAAAwILL/m//hxT7v/3f/m//BwAA
ABZc9n/7P6TY/+3/9n/7PwAAALDgsv/b/yHF/m//t//b/wEAAID5X23t7fNq
Dy/2PsraehxgUZD6+p9XO2Gx97cmdvXUzlzSdeAyN+5ya2jy/UnsvSXj/7nB
f5a+PjT5doo9R0g9DqXZ33N6bLGfx9T9wsXu/In3M/lxpfbzxF7daP/zx5z4
14tCC/+7VrEpicet9Xpv9732sHNC5/z4/MquXuy5TKqpc6LU/p/6ekg9zr/p
XKnY+n26yPF5BwAAmLfs/7/tcYBFgf3f/m//t//b//k9fN4BAADmLfv/b3sc
YFFg/7f/2//t//Z/fg+fdwAAgHnL/v/bHgdYFNj/7f/2f/u//Z/fw+cdAADg
t5njTlDE6/Hf9Pb/wHOBYj+u1A5TWx9vbf15+Llivz7/6L839fWc2pmL3Y3n
+H1axPfRHO8z/ZVdOt9B/xtaMjD77y+MHVr+xpfL3Byb7/cXh7YevdJR90+5
Y+6bOHdI7eEl/Zp1v325VqHJ84LUvbSpz3tq987f3uWhda45e+DFd7cMrXfu
4DXPHXxjaPLzkvh7m+zwyqZHHnxtaL18n749NPV+Fj7uy0KTX1f5+3tpw1+2
U/55uCE0eS6QeHyS5wKpvb3Y76/Uzp86F0jt/6m3U+zbn+M5xa8U/kyevwEA
AAsK+7/9nwWX/d/+b/+3/9v/7f/8+Tx/AwAAFhT2f/s/Cy77v/3f/m//t//b
//nzef4GAAAsKOz/9n8WXPZ/+7/93/5v/7f/8+fz/A0AAJhXftP+XMQentrN
auv9/KNfT6U+3tT+UOw9lX80rzcXDrV1rpT6Pi327029/dTXf+rPp3a5xN+b
2s87LbZUl0lPXhea+j6d865+TWxiP0/tzyV3rtb06mZXhDbK5s4N2ob2/PCk
78dXtgtN3TPb9pTFLnx2QKfQ5H6eeJw75bv+7aEz8/f3f6Gpc426q2TuDE19
vpJfb4m9N/X5/bjjdQ++cdq9oak3X69lg8PLX7624S87c62DW/WafX9ok/zx
uzm03qHddv3u49hG+R5/S2jq+yJ5H3T++W8dOjN//K6LzT/uG0JTbz/5+Bd5
vpO8BznxcyZ1rpQ8byr2HCF1fpFqsT9Xi73/utjnP8X+vK2t81zPE/4cHmcA
AGBesf/Pxd9r/2ces//b/+3/9n/7v/3f/r/g8jgDAADziv1/Lv5e+z/zmP3f
/m//t//b/+3/9v8Fl8cZAACYV+z/c/H32v+Zx+z/9n/7v/3f/m//t/8vuDzO
AADA/Ca146XuDUztisXeu1dbO39tvS5OfVypx2F+u2fQ680/R7GPc219vxQr
9X1dbFP7fGJXn/M9ub+y7xV572dhj7wptPB92SI0de9tac8tG3240/2hJXlv
ir2h69/XOPOO0OQumt/L2ja0Ud+Rlw565MHQ1L5deFy7hna6aY9BK9TvFLvh
hOdeXfuJ0NSO3eT78ZV1W90emjof+frNimF9unQObVd59S0/TX4wdPaY1os3
PrdvaJ1s1l/1+dCWje/a7YAXnwttXTXqmCt37xPa9rYtTt3uoR6hT+af58dC
C3/PfaHJe3hX73HArCuuD03uzMWa43lZPH9J3V+cevOp79PUuVXyPOuEtS84
7aPrY/P36+rQ1DlC6vsx9fMw+XMmdS6Q2uFTnePj/ys/r4q9Zzz1/CH1c6/Y
t5O697m2zm0BAABYONj/C+z/zA37v/3f/m//t//b/+3/AAAALCjs/wX2f+aG
/d/+b/+3/9v/7f/2fwAAABYU9v8C+z9zw/5v/7f/2//t//Z/+z8AAADzm9RO
ntoxin2dWFuvH2tr/5/jfaOp1/upP5+6p6+I+/tq6+OldhV7flTsjpTaZ4r9
vpvj3xvf/9b5faTnxCZ2uSabH/fBO4fcGJp6GFL3vbbO98gLYvO/57LQ1NtP
3QPb6eTnntjhhCdD6//jkFPOu6ZTaJ0mR05fYuhDoUe0OeqlklO6hhb23XtC
U+cCqftYU/fkpvbzI/Jzg7tDG3U556Httukc2uCcSw75uEmP0NY1f/sa33YO
LfbzmLovuN6nX2/fqVHX0HOPXu6WyZ8PDP1+vc63Tr9veGiHd5f6sMsmQ0M7
dd/o+z1mDw6d9G77mYP3iH3/nUPW3H9q/9jG/Te44b1eoVfln8++oU1efm/2
U3t2D931k2eabzLz6dA9Zhx+2/3n9Q69fvsrTqp8t39oz8uWP/u+O54LLSk5
5Z7Tx/WKbXN5lx9v6xmaf9mt1SW0Rf591jk0dQ7VIN/v7wntlJ/b/C80ed90
Qur+4sL7dWdovXy/v32umzrvS/7cTuznqfOLwuPUMjR1/pj6eZs6L0idg6S+
H0u6Dlzmxl2uCi36vuNizwtSin3+80c/b5zfLKwfFwAAMP+z/9v/iez/9n/7
v/3f/m//t//b/2vLwvpxAQAA8z/7v/2fyP5v/7f/2//t//Z/+7/9v7YsrB8X
AAAw/7P/2/+J7P/2f/u//d/+b/+3/9v/a8vC+nEBAADzv2L3/9Q9d6kdsti9
vdhdPWWO78+v3N9XW/cDen23cCj2817kbl+Sv71LQovebVJNfZ8m3p/UDl/6
l6n7HfRmh9DUnp/a51P3cvb88KTvx1e2C210b8/2h47vGJrayRtdNvv64//T
LbT9A5kBoanddWp+r+kLoZ9v/MLz67w+JPSZbC6sOzJ05hJD11vpwfGh+Ry8
alno+7Of2rPjqImhP/a4++kvL64Mrf/ujGWbfR47+5Nmja6tH7vxlG9anT2w
PHTzN/ZsMHBWaeiF64+4YP0RE0Lv6FD3vS3LSkN7zV7r4Fa9ykOzFX31HlWh
+9yYXxwc2rPOgKqTD6wOPaxt9gX5K/1i8csa3zU59N6/Pr5Nv4aTQr9977KO
Jz9XFbreMUOa7rxnbOrzteZtS1712dkTQ8d/ddTrjz1UHrpam5LRnferDP0g
++ufKAs9MHuYDpgQulz242Cd0tAlG2cnK6NCh+T34g4LbTfi/prvzP6hF1c3
emLFi18IPbBkl2c3e/i50GVHvvTmPhP7hhbOH3qHtjjto9XLt3okNHWe1W6v
d+7e651HQ1uf/+9D99jywdDSY67c/e4b7gxtlO/uV8Ym7ulO7f+p+45TPz9T
5xTJn/8pqX0+dV9w6rw4cT6SOl/4bf8uoojnRUXeL+/51f8Pjw8AAJBi/7f/
E9n/7f/2f/u//d/+b/+3/y8oPD4AAECK/d/+T2T/t//b/+3/9n/7v/3f/r+g
8PgAAAAp9n/7P5H93/5v/7f/2//t//Z/+/+CwuMDAACLjtp6/p/ayYvdz4t9
nZjaLYt9PZh6vVxbb9/rrN+mtl7X19bnpcivw5J8P7s4NrWfFHkuULg/86zQ
5NtJ7D+Nsplpg7ahyftq8537wdDUfaCph7Ow99/V8Jc9MN/vu4feuv/igy7f
aXDoM2v1v+WusaNCv7l85OtjWk8M/SIf6itCp52zzSaHdpsUenHfk86a1i82
tRvn8+us6tDmvRu89sr0yaF7bLnucl+/WRH6WHY95/rloT1uX26DsatVhB66
5v5TJ/0j9rBuu3738TqVoS2z+XiHyaFLzP73RRudVR161PTsYCK2bW5SaD6z
rjs5NJ81N5gU2uHlVlWjjhkT+vFOa931+NFjQ/MPb6mK0J/67HT9IzdNDd1w
r6E96gyoCr31rrG7VXcvD52Wf11Xh271zfC7/rPV5NDzd23+47enVIW2XXPy
uK+OKgu9tX+vy5Y/uzK09KwlOu5cOit0o382u6nbmGmhE+54u/qMW6eErpi/
A9NCLyj9/osXD5se+nB+D/bM0P0PenP9D46tDr378aM7XP311NDtar6q//7k
5NCOo4a0Xe/KqtBbz33ru26fTAxdfMubah6pEaFTyx7Y6tb+g0Pb/+3AZZoc
OSj0kPxe7r6ha9f76sG/HNQntHBe1zu007B6PS9s3jn0iPx84KHQ1LlGg7KZ
R2/b4onQ1HlE4f7t2NS5Q72WDQ4vf/na0NS9yU3yXhuavO84cQ6SfF6XUuTz
w+Tvu2J5PgYAACxq7P/2//mZ/d/+b/+3/9v/7f/2f/u//R8AAOC3sf/b/+dn
9n/7v/3f/m//t//b/+3/9n8AAIDfxv5v/5+f2f/t//Z/+7/93/5v/7f/2/8B
AADm7I/epVP3shXbxOvN1F/bOn+dfU7DuW3y9WZt3StXW3s1BXP8vBTxeKZ2
idS5T+ocqsiv2+ROcs3ZAy++u21o6p7H1J7TOv/vm4WmHoYmYx9/6/YO7Rr+
ssV+WjpVXn3LT5P/1/CXLezWz4WuusuXh+396pDQJS9rfNduB4wJXWxGdiBS
Hnr+Y5fMeO2aytDUfakrl3QduMyNVaGDVqhfd/j+FaFXZjP9FeWhQ5vuvOdl
s2PzW2g3jF1qpzEjtvi8LLRxvf/dtsWpE0JL8wtSx4Xu+MkzzTeZOSa0cM9q
dWh+7LTGzNBnTrtumc/2nRb65A7ZAc2M0CeyGXeFKaEv1h/V4dFp1aFrb/rA
RX1Pmhx62hrfrnLKlKmhZ52TDXex2eq4Stey0H6f/VDe8p3K0Kln3Hpw1/sm
hu5W3b3vhydNDe3w7lIfdtnk9dB8Rv9gRmi3E/Y6tvOGs0LrrpAN6a+FHnLK
ede06xz75s3f7rLPOtNCd1gxu4F4QuglA37Y+8bR00NfyebmO98IXf6WyZ9P
vfP10PbP7b5ZywYzQlP3COc/VlapDn0oP4eZEnp6dh3vhq+HlmT/9ZWvhfbf
4Ib3GvefHlqx3eA2l3eJ/ejaWSsu8+qM0JvLj1zynTpTQx/NrgG+szq0+vPs
gG9a6Fc1P4U+7VUd+kHH6x5847SK0I93H3D24WdODO252cNr3Lbk2NBBJafc
c/q4waHts/l+lZdCC/cY9wpNnZPWOzQ7yHsg9Mk9s5OVp2MfW3biYu27hjbJ
fy+1CU2d/5bk52BXhM75+VUR/74i8fu0df4D9prQop8/AAAALKzs//b/BZH9
3/5v/7f/2//t//Z/+7/9HwAAYM7s//b/BZH93/5v/7f/2//t//Z/+7/9HwAA
YM7s//b/BZH93/5v/7f/2//t//Z/+7/9HwAAYM7+6P0/9XaK3VFTrwcTUq9D
Uztq8u9N7cPF3mdn/5+zOT4+v9Jaun85uZPnX4//jU39vamv58SfL+z0d4am
/t7W72y23bLP3Br6cb4/PRbac2j5G18u0y00n7PvLQn9tuvhNf8ZHfr27R3q
vrdlWeiMw2+7/7xVY69/89kZl1xYEbpJdk3mqpNDbzu4631/O7AqtP09X5V8
fGNZaHZat97b5aFfPP9MxXaDy0LzWX+XsaF7bJY94OND9zv779ddXKcyNHVe
sPWGT5fe8XZ16JPvN7hkwA+zQod8Uf/kO4ZUhA5bb6UHX25VFTow39FfC13s
kNFXNmlZFrrjNT/0uPvpV0Lz2W61saEd/nLQUVuMGxc6cvrfnzxhr1dCn89m
4sOHha6Yfx3NDL1zpeyBejO0zdaTrtt60muhhb1/dminm/YYtEL9maGLX/js
gHY7VoQul13/uU5p6JJDswd2XOjg0Z33e/6zaaFNj2s99ZxtZod+uPL2R1/a
/rXQAV8/0n2j76eGXn3jKYtd+Oys0B1yr4c+lv8cqgjd8f3l2135amy3fK+d
HXpv9m3T5s3Qna9/pOYRnBo6vV/2Do8N/fdi2QM7LDQ7DVl5+/LQpu9e+F2b
Fd4I3fZf27/VvN9robe/vmvNf6aH7v98dqAzK/TSCyseHnd67O59R1466JHq
0KU/7LLJRbdXhh5Y/9F+zbpPD72lz8qPnHrczNAbtr/ipMp3J4XetuRVn539
2uTQvtn10ntMD33thAkHluwyI7RO9bpDxv9zeug+Td4o/duUyaHHbNtirU0f
KAvNTn8+uGp86NianxJD9x4aOvWbVmcPvLhPaP7Tfmbf0LqnTLn1gptjU+cC
tfY8IfE8LXUOUvTzyfze4BNiU7/f/+jnzxR4PAEA4Pez/9v/5wf2f/u//d/+
b/+3/9v/7f8p9v9Fk8cTAAB+P/u//X9+YP+3/9v/7f/2f/u//d/+n2L/XzR5
PAEA4Pez/9v/5wf2f/u//d/+b/+3/9v/7f8p9v9Fk8cTAAB+v3n1+mWO5wLF
3sMb387M7FrQHa8Lbb1DdnPkBaHJ9zO186d2ZmpX6nEu/ecG/1n69NiU1J9P
fV3tvXuduz9tFZo6Lyjp16z77cu1Ck3dw1jYL9uFpnaV/NrXh4eHnnfFhyOX
6zUuNLXPD1x89r8v2mhy6GFN6x6/W99JoT/ufePolY6qCn3xoBUW3/KmytCl
Vs5uMJ0YesJ/Hlj6iSsmhGZr0tHbloY+9+FJ34+vjM3nzhvKQ/+Wmxha80GM
vHTQ+ND807nBzNArrlrniHr/eyN0g8e36ddwZGno+4OG/3TuihNCDzqs7Rf3
nvV26A75z7M3QnsN2n7Fw754LfTEbBZ89s3Qq/L9eHJo/4kvnP9JwzGhW+Xn
EqND85n19rLQNhfX2eyNPUtDm/fL3uD40FXyB3Z66P1TNjz9yfdnhubHGP+a
ElrY46eH9rvx48/ajagKbb3xPROm9K4MTd2//Mk6ly418qXK0GsXb3zu0ctN
Cd39v53Klt59Wmhqp82vmz2kOjT/cjlicuh/LtrorH8Nj/37zk9dP/zc6tDT
Hv3X8WMfrwod+0F2ADEpdJ91Xtr6nEumhj7731f673v25NAety+3wdjVKkIn
npddqD0+NHVe1qfBa69M//vM0ML/bkbocSOWrPlJUR16eI/qsge2mhrac0C7
HR97LXaNtk1rHpHY6dNyoXeNzW6Anh56zjab1PyknhK6XfZhPDk5NP9snlod
esPwc2t+Ik8OTX39pB6ftae3KP3+iymh/9nqm+F3/Wdq6HMnnTWt39czQlMf
b+Ge6urQ1Lnq7LUObtVr9ojQzbJruZcoCV17yWNX2rp399BG+fnMg6Gp++hL
8t8DrUMbrZedBN8SWvi9fV5o6/y/Pye0cD58VWjhnuEWsUX+u5Tk843UucMc
nxctQnv4ovbxAgDAH8H+b/+fn9n/7f/2f/u//d/+b/+3/9v/f/a8aBHawxe1
jxcAAP4I9n/7//zM/m//t//b/+3/9n/7v/3f/v+z50WL0B6+qH28AADwR7D/
2//nZ/Z/+7/93/5v/7f/2//t//b/nz0vWoT28EXt4wUAgJ+rrd3+j347xUq9
nkq9bkqcF5SMz/bdi0Nr7XXWovZ6pNjHIfX5Skl9XhLnL43yC0wvCi28Lm8S
m3j7hZ3gykR/ZU8oUv0HLup70lkvNfxlU7v9Mq/+5+X3ZleHrp3NK2tNCd1k
5kPHrTa+OrTkvdlP7dlxcujSXSY9ueqaZaGbXHT7pVt2HxPaN7v2svXY0GOW
u2Xy51MnhN6z1zt37/VOWWijoT3qDKgaG3rP6eMmnPfY8NAXzj78zN4NJoY2
WGL5fXs1rgh9o+ajGzVkUmjh8XgtdPQxV+5+9w3vhLZc/uz77jjm7dAf2/b4
7yv9y0PbH7j1fu1WKg0968dvT9n8uGmh+bHT6jNDnzi6w9VfrzAltFWzdTu8
u9T00NPW+HaVU6ZMDT1xr2M7bzihInTvD3da667Hy0N/+OLFw3pUl4VuOHa1
L86/fmLoiPwe4MrQbJ2+4sNJoV/ee1aLp9aKbXp19oFUhE46+cAHj7ygMnTz
4z5455A1Y2dekl38Wj7XvazxXbsd8GJF6K0/TV53yPiy0GOHNN15z8vKQ8d/
ddTrjz0U223VNfu8M6As9KDsy6KkPHTpk3oudVLPitDsq3rTrSpDd8yOq1cp
Dz3vhKdPu26ZstArV+9xwKwrykPHn37qsNteKgttOz67sLUi9Jxs1t8sNnUf
8b/zT1Bl6G7Ns2+EqtBi7/Veb0j2C70ytOOj0/713qCK0H7Z/6zN5NAL9ly+
6tEW00I3y39Ox2ZvbfhPU0NP/2j18q02nBJ60ldb/3jmOZNCP7yq4U7/fmFy
aOrtpL7+D8rPgStC//NCdiBbFZq8p7jLna3P//e00GU/2/eH9TpPDV09/4at
Di3c710ZWqd5dpH3qNCBszp9895lL4UW7pnvEzopv5f40dDUOULr/Pf85aGp
PT/1fCD57wcSzzdK8n9vcmFo6nlC4f06q2Fo4t8bFPs8BAAAWIDZ/+3/fyb7
v/3f/m//t//b/+3/9n/7v/0fAAD4c9j/7f9/Jvu//d/+b/+3/9v/7f/2f/u/
/R8AAPhz2P/t/38m+7/93/5v/7f/2//t//Z/+7/9HwAA+HMs6Lt06l7dYu/b
LfbP/6YuAI9nyhwfn9TXy688DqldPXVfc97/xqben9T9eom/N/W6OHXvc/K8
YKlsAL8vdq2f+ux0/bOhT15x7Yv1R40NzdbXWy+YHPrsZg+vcduSU0M/ubHN
m8/OqAjt0Te/0DB0QFU2hE4I3TC/CLIidPaY1os3Prc8dN9nnj2kzVGvhl6f
3+9aEpq677V79j97aWbo129WDOvTZVZoYfedGbrn7E+aNbp2Uujg0Z33e/6z
aaGPZrPUoVNDb7//vFXblLwWusPgNpd3+fGN0Oz05OBWs0JTe1fNX7LHlutO
Dj1y063OKLuoKvSN/D7M2NQeOGzvz6o+2n1y6MoPvtyqalRFaOsfetz99Jfl
od9s36nR6utVhK6a3yNdHpraD8+vefRGd45dLct+laGdz/jm+BtalYcOOuqI
Plc9MzF0+fyC44rQ519d+/4Dt45N3UubOo+oX3f4/vf2nBT67XuXdTz5uarQ
Psv/0LbHfytDs7V89R5VoQ3u+77pqG0r57rf1jwa+1bFrrn/1En/WKoiNLWH
d6yb3ZAdm633Rx1RFvr2d91qfmBODF13uew7syw09XlJnV9sfN77Ha97sCL0
on2yHyxloedn//Ubsand+IuDHvn8oEfKQ9u/MPXHev+sCE09Pp981m7E/YtV
hO5XtfNpJ/8ttv09X5V8fGNZaOpxXmqnMSO2+Dy29K+7bVR5XGXoEtn10rdM
Ds2Pf5aaEvqX/IGtDh1W/saXy6wTe2/27rapDE19PZy3Q3aQNCE0dX40c9lm
nz//TEXoivk3Wmno3+7Ydonl950Qmvr62Tc7Fm07MXT9badtsvS1w0Pr/e+2
LU7d7unQTic/98QOJ7QPrdNx59Kzlugemz+/aBeaune4Sf48ok1o0f8uInVP
ceL8ovUX2S/QM0OTb7/Ye4oBAID5h/3f/j837P/2f/u//d/+b/+3/9v/7f/2
f/s/AAAsWOz/9v+5Yf+3/9v/7f/2f/u//d/+b/+3/9v/AQBgwWL/t//PDfu/
/d/+b/+3/9v/7f/2f/u//d/+DwAAC5ba2v+LfTt/9E6ev15p2jA0dT9s4nVN
8v7fhfV1UK1+PcTPb/L1ZuLxTN6jl9j/k/f0pb7ezh285rmDLw1tl79f98de
+eoNXf/+WOiOJ6x9wWkfDQu9qduYD1bevjz06acy1aEXH3BY2y/unRy62vj/
7b/4oNj9zs4u0KwMTe2oT3bK/o9xoffm9+VWhKbu823xScOT/vn1qNAlZv/7
oo3Oqg5dLD9oeC102xZrbfrARbNDj/i26+Hfdp0Rmrr3ts+xI5Zc+c3JoR+N
XK7XoO2nhab2/wPrP9qvWffpobv/t1PZ0rtPC019vrrv07DLOQ9NCC3cQ/tK
6FW7333DKrvEnpzP60NCs1sp1932pdCuNe/t7csNCs3e2/926hN6dH7fcq/Q
XfP7VPuFlm5+9cTNr+4dutWGT5fe8fYLoVPzezX7hLbLZrtevUK75t/Hz4Wu
/fqq3R5btndotka++ezLoW/XOWT0lU1Ghi79YZeaL+FXQt+uPuPWg7vG7n/Q
m+t/cOzo0L47Xf/ITXuMC117yWNX2rr3q6HHZ9es7j829J7dDnjx3spXQ/tv
cMN7jfuPC117i38ccsp540Mb50PlhNB8ju8zMbRs5tE132oVoS9m83ezqtDy
7MulrDL0sPHZEF0Vmvq+mPTR7gPOPrwqNHWuses+67y09TkVod2bZzdwl4Vu
/Nzqe+9eJ7bw9R77QXZs80TsrvkBa3noCxtvPuzb0bGLZV9eLctC1710qZEv
vTkxdK0+7wzYePPy0NQ53T0TpvQ+dkR56EHLNDly+hJloc/vvlnLBoeXh6bu
p/6kycNPXrNxeWjh53Fs4ZghNj92rV8Zml+HvGd1aEV2zLDFlNDUueT2+fn/
q6FH3JYd1JaGPt/kLzX/qQxNPW5Ds2u5Z5eHjszPA18Jbb9YdtDfu8h2CU39
+4HW+TnJ9aHJf/+QeD6TOhdIvp1i/z1G3kNji33+T+1a0P/dEQAAtcv+b///
Ofu//d/+b/+3/9v/7f/2f/u//d/+v+Cy/wMA8HP2f/v/z9n/7f/2f/u//d/+
b/+3/9v/7f/2/wWX/R8AgJ+z/9v/f87+b/+3/9v/7f/2f/u//d/+b/+3/y+4
7P8AAAu3efV8r5b24aJfF6T+/Bxfj8z9vbSF/fis0IX29Uux5zLF/vnUuUni
9Wbq8S+5oevf1zjzjtBG+f/uttAm34+vrNvq4dDWVaOOuXL3R0Pfb5wtbr1C
t/3X9m817zcx9InB3f49c5vq0DM33GtojzqTQ9/IZvF/VYSesW6Hd5f6cGLo
ruvveM0PPcpC85n+kvGhN2XXAF8yMfTdzbZb9pn1R4c+/NETrxy8y+TQetmM
W10Zumw2lwydEvrd6B13rfjL+6HH5N4IvfTubCGdFpqNVS+vUh26/krZIDY5
NPV4bp5fcDkxtN5qe7Tf/N3xoV+v8OLis/89NLTFl7N2eH/5nqF1833lvtDU
3tJzy0Yf7rRWl9B2lVff8tPkB0MbZf+zDdqGNsjPl+4JPSI/H3sotHV+0fCD
odntqDfu8kzoHjMOv+3+83qHNt9v48VmDHwq9Iiaz/56K8W2za7PfKhHaJ19
bhy90lH9Qnvm91Q/H1qaP1BPhH7/xYuH9ajuE/p1lrIBofd8usHa01v0DK2b
32PcN7Rki883fuH5B0ILn/9OoSX5fnZJaOH+3sdD2/XvddnyZ8cW3t9uoYXz
hO6h9T79evtOjbqGtsiO6757PLTwc65PaN3tj760/QsDQ4/I991hoWNX++L8
67cfHdr3pLOm9ft6fOjE/LxoYujbG2UXuZaHpu4x7/fZD+Ut34nNj1ePjs1/
7A6oCr0qO75dI/Zf2THPibF7Nv5p//qPxn7Q4JIBP+xdGfrUrt99vM6lFaGH
tjnqpZJTykNTO/yJT5923TKfxa5Z76sH/3JQWWjqvOO8E7L/YWzh53FF6GP5
129szTfr/VM2LA99f9Dwn85dcUJos/zge2Jo6p7lH9brfOv0+ypCU3t+6rzg
hOwYaeey0PzY7JrS0Ac2f3fGss3KQ69q0nLo3p9VhaYen32avFH6tymjQvuu
/Mipx7UeGNo2fwCfDS383mgVWvh3E5eFfpxdg33avaGd8nPg20OTe36R/14i
9f7UyQ/oTw9tnT9OzWIXtefb84pzAQCAhYP93/7/e9j/7f/2f/u//d/+b/+3
/9v/7f/2/4WP/R8AYOFg/7f//x72f/u//d/+b/+3/9v/7f/2f/u//X/hY/8H
AFg42P/t/7+H/d/+b/+3/9v/7f/2f/u//d/+b/9f+Nj/AQAWLMXuscW+nVp9
f2rhPtkid+OiH4fUPWipv3dBf/6c34d8ZMPQ1OOQ+njz3feW2MTrvjrXnD3w
4rtbxmbXjt7ZJrRw3/L1oQ2ePGGvYzs/Etopf3/vDR14bzaoDgjdI78WcXzo
xdWNnljx4urQtae3KP3+iymhx16ZXdhaFbrlutmNm+WhTbd76OF/XDgxtHCf
5LDQshfO/6ThSWWhI+/PLhCcFDpr8B6Nf9p/ZugF+cWL00KH5I/r7ND8etRL
Xw/dqvt3a/7UpyK0cH/j66FD8ntZZ4Rul836oyeFvnLuFR+OXG5CaId8HxoW
mro39vjd+o68dNCzoal7wEtWqF93+P6PhabeTmG/7x3a+pnswt+nQ9ut1vTq
Zus+E1qn486lZy3RPTRbcVdf77nQ/tn1yUcODm0/ZcPTn3y/JPT7ms/OTte/
HNoum4PXHB/aLft22nBC6IB9swumS0NH9s/+j2Ghx499/K3bO5SEpvbDPZba
acyILWIbTNtk6WvvLQtd94jsotsJoePWvv/ArfcrDe3V/tDxf91tQmj+bf/y
4NgjD16l6xIloc27377cBmP7hO5a81nruHNJaKPLZl9//H8GxNZ8tdz1eN/Q
40//x4zDb+sX2vOy5c++747nQgvn1Z1Cs6/ee3s+GZo6v6if76Cxqb2uyQ6v
bHrkwdeGtsi/nx4IrZvvlw+HzhyY/f7pHZp/ejZ6PrR5i6fW6n9L79D1t82+
MJ4L7Tu0vOYn0YDQ0vzA6IXQ7JRnndeHhObXkB8+OnSDx7fp13Bkaejb33Wr
+URMDF2+16DtVzysInRq9u3aIPbfmx/3wTuHVIbmx3vrTQqdtl92UXVl6GHd
sgOI2C8Wv6zxXbtVhX6T/7ypCD0jVxmaur849f170T7PPHtIm9jUPcWpc6LU
fcob5udgsan7r3vNXuvgVr3KQ1PnLGfk3/ex6+VfdxWhp43a9r7vm04OXWyz
N/ZsMHBC6Nc1vz3/cchLoamndR/n50VdG/6yhZ9DPUMLz/uaxiae7zXKv8Cu
DG2d95zY/BzgzNDU88PC9/11oam3n/x3PszZgv76BQBgUWP/t///HvZ/+7/9
3/5v/7f/2//t//Z/+7/9f9GxoL9+AQBY1Nj/7f+/h/3f/m//t//b/+3/9n/7
v/3f/m//X3Qs6K9fAAAWNfZ/+//vYf+3/9v/7f/2f/u//d/+b/+3/9v/Fx0L
+usXAIBFTW3t6vNKsecXc9yli73/91f+3tSfn1evL4r9PP6mj+u/ic79x1t4
PXdTw1829Xmpl+9q18bmO9DtoYXzgfahhftvHw3dccyILT7feHToYfnrxSmh
Syy/b6/Gm04NffCBzOTQHgfMumL1HlWh7bPZ/cmJoR9n1+jePCH05UfW3Xba
JpWhnW7aY9AK9UtDUzvPhHyvei30gPPHnPjX1WaHFvaeN0Pz2zBPfjv0832z
mxffDF3miSuufbH+5NBp52yzyaHdJoWW5+cAY0ILO2i30MLH3Sm0sGf0Da2b
70zPhS551Wdnv3ZCr9AhbS7v8uNtJaF75Ac0w0MnZfP6Ba+E/rh3dm/tiNAd
cmWhr6/a7bFlJ84KzW5hPvH010O3PqPsogMOmxn60bWzVlzm1Rmhl7+TXeg8
NTS1Q26SzZqrTg5daeveHT96ojI0O63o8G5F6BbXXVxnszdeDT391GG3vXRU
Sehpj/7r+LGPV4Xu8tT1w8+9YnroFVetc0S9/00LPXqLcXtddWPs9Gm52H5f
P9J9o6mhU2+94ObyI8tDZ49pvXjjc2NPzPf4qtDTdt6z5it4Uuint2z68vGf
TgnNr/+cGrvj+8u3u/LVitAtsw/vlAmhJduveNgXi48IfeWu/2z1zfAhoatn
1/Re8WLo2837TXzh/MGht577Vs1XTO/QBudccsjHTXqEps65Uvcvt89/vnYL
Te2Wb1/4XZsV7u0emrqvuXAe0i40dY/2zDuzd/h/oanfR6lz6uTv68R5zcer
l2+14dM9Q1vk5yq9Qhvk988PCS0/tGnd43cbFprfnlx3XGjNF9cNXf9eEfr8
EzvUPCJloan75VP3Gn9x0COfH/RI7Kq7fHnY3q9ODF1p1lsb3bFtWWj9Yd9m
N8qHpu47Tp3LrHlb9ptgYmjh3Ls8dNX8PvDYT/Jj7IrQ6s+n1nzFvBpa+Hk/
IbRt0+wHYGXoWtkx7SNVoV+0G3H/YktNDF2ycXYx94DQwo5+V2ink5+r+Yw+
GZr6sm2Uf39c3PCXLXy9x7bOv04viE2cCxR7L3Dqzxf9OgIAAOZn9n/7/9z8
efu//d/+b/+3/9v/7f/2f/u//d/+b/8HAGDBYv+3/8/Nn7f/2//t//Z/+7/9
3/5v/7f/2//t//Z/AAAWLPZ/+//c/Hn7v/3f/m//t//b/+3/9n/7v/3f/m//
BwDgz1Fb+/z8tvMXex6RuH8zeS9tsTt/sbv9/PZ4Fvv+J/58p3yHvi60pOvA
ZW7c5arQ5OujxP28hf3+ztBG2Xy/QdvQSd+0OnvgxY+GFvby3qEN8o+je2jH
/N7X8tDjTvxq6x/PnBL6Zfbycq1JoYsdMvrKJi3LQrdtsdamD1xUHnp9NhMf
URmaf3hrjwvt3XjTrc4oGxp6VTavrFEV2ji7vvTUWaGFPeP10E+bNbq2/s7v
hj69Z8dRQ9q+HprdPjysz2uhffL7MGeFHrRMdqFzWWj9h9e4bcmrhoYWPj8d
Q1P3inbacMJzr67dL7T5fhsvNmPgU6Ef5/dwdgmd9G77mYP3GBz69VGvP/bQ
sNLQZjd1G/PByhNDP3jnkDX3nzopNLU/H1j/0X7Nuk8P7ZtdPzmsOvSnc1ec
9dZGM0JbZMcze8wMXX2P9pu/O2NSaLN8Ry8Nvfj27ALfV0K/z+b+pj1DS/8y
db+D3uwQmvox83b1Gbce3PXxhr/srtl1yI+8ENp/9+wm3b6hhZ14UOiGY1f7
4vzrJ4au/ObN3+6yz+TQ0ctlF6dOD61zQPaJmBb6RTbDXV0RmtoPy49c8p06
h1SHrr7eMUOa7jwt9N+HZidGk0L3Weelrc+5ZGroo5OeXHXNPpNDS/+3/+KD
Lh8ees9e79y91zt9QnfNf94MCj2+c/YN1T80v+500wGh/W/8+LN2I/qFtszP
kZ4J7fR5NuQ+G7r2uYPXPHfw46HvN+6/wQ3v9QptctFGZ/1r+IDQwrnu0NAj
sllz8rDQ7Pbwt/87KrTeatk3zsuhB97bs/2h418KTd0jnL23jfv3CG1xTbvO
vYf2DS38/QNCU+cjuzb/8dtTNu8Xmvr+rZP9mlz18dB2/XtdtvzZsQeW7PLs
Zg8/F3r09CWGrrfSC6GF85mS0MLn85XQsbtVd+/74YuhTd/NDmiGhy43cbH2
93xVGjq75qd0vZ4TQw/Nfhr/oyK0/KIDDmv7RWx+bHZDeej5q7YpGd25IjT1
e3/c0zefud/GE0K3zC+GLgvNToe/nBWb+nv3/fryka+PKQ09sOajuPes2JL3
Zj+1Z8fJof2eqdhucJvY1ONwdPbrsF5JaOE+7S6hqfP31L/HSP67jsS/P2my
f/YPFdqEFs4HLgtNPh9OvV6orX9Xs6j5ox8HjzMAsLCy/9v/54b93/5v/7f/
2//t//Z/+7/93/5v/7f/zyv2fwCA38b+b/+fG/Z/+7/93/5v/7f/2//t//Z/
+7/93/4/r9j/AQB+G/u//X9u2P/t//Z/+7/93/5v/7f/2//t//Z/+/+8Yv8H
APhtFtbnOXPc+3/leXixO39tvT/zyh/8cSXvX1s9u6H2+tjU66nXs73/mNBG
+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
/9v/7f/2f/u//X/he/0LAGD/t//b/+3/9n/7v/3f/m//t//b/+3/9n/7v/1/
4Xv9CwBg/7f/2//t//Z/+7/93/5v/7f/2//t//Z/+7/9f+F7/QsAsKg9z6mt
57fFPu+dV49z6u9N3CPWOn88moUm337ifuTU65GZ2fVyp90QmrovMvU669Yl
r/rs7NcGhK6fvbz8ZmRoPutfXhF6YHYdb/fpoY+e89B229xZHbr0SdlQXBF6
TH6Bb1nojPx13sTQbAVdvUdV6Ak3tNq3auey0CcfW3biYu2Hha696QMX9T1p
cuh72Ux87xux7bOLFD8K/bDLJhfdful7oUfmFxBPCs1u09u5dHJoyy2zF9RD
Q2eudXCrXrPvD22QXU/Y+ZHQ/getsPiWNz0emtqrW9x+ac3f9Hjo2S2eWqv/
LUNCn6z5qjj+hnGhnbO0Kg/dMD+Pis2vKx49JnTVU7JBe1ho8/2yk4AXQlP3
Dr/97IxLLqzoEZqdkvTp0iu0cG7wfGjz/KBqUOgr517x4cjlBoe+3bzfxBfO
j921+Y/fnrL5iNDl8/tvYwv3Er8U2n6x7MCud+jq3bIv7P6hhfPAvqGp+2FT
92/WP/mOIV/UHxhauE/15dAGmxzabdfvSkJ3zO+3HBqauvd5+Xy3Gxqa+vpc
OjvOXHNo6IEX/3eHVzYdEprPoJ1jU/eZtj7o8pVXOH9k6I4nZMP+sNArRr4+
pvXig0Prvnnzt7vsMyA2O255YWDoVTVfXb0GDQnNZ9a3XwhN3vedOL9on+9n
o0N/vC1b3mNT5yapHXVmfq77YGi951bfe/c6j8YmzrUL50KdQlPf74XvjyGh
qfujO33z3mUdTx4eulx+kFQaevv9563apqQ6dNqP9f7Z7KZZoe81zn4RTAh9
ND+Amxx6xLddD/+264zQx6b9671Bw2Prnf7k+w0umRX6zn9PePq066pCx17Z
pOXQvYeG7nXZ7OuP/8+o0AtvLq/5UT0zdOtJ19X8Z1poo+zTXzU2dPyE8x67
ZMbE0CN/2r/mmURFaJNht7101BFDQxvNOPy2+8+7K/TjJg8/ec3GXUNT96q3
zf99xLOhhXuw7wtN/d7pmR/kvRTa5IGln7ji2jGhS2XffrtMDG3w94+unbVi
Vejj2fXwF04KLc2Oq1ePTZ0jrNfh3aU+7FIeOjU7Tj4ytjS7PnmnqtCt81+U
1aFjs4f16Mmh3Z/NHpDS0JJZ2Xda99DU0+eW+Xl414a/bOoe8yPy88x7Qwvn
M4+GNsr//cWVoa3zv+f60OTz/PwTcXrDX7bo1wsLinn17+IWtdfjAMCfb1F7
vmH/t//b/+3/9n/7v/3f/m//t//b/+3/9n/7/8/Z/wGAhdWi9nzD/m//t//b
/+3/9n/7v/3f/m//t//b/+3/9v+fs/8DAAurRe35hv3f/m//t//b/+3/9n/7
v/3f/m//t//b/+3/P2f/BwAWdPPq+cz8ptjHYUG53yp1rpHq61mPiU3d55t6
O4nXBam33+T77ILU20ML96F1Ce1Z8yr75ANfCB27464Vf5laEXrciGwIqg7N
r3tcvyo0v8bvrsmhP5a3fGez7SaFtikZ3Xm/58tCm33+/DMV200IXeni6kZP
rFgemjpfuHbqOdtscujk0MLfPzN0/F5X3XjKYu+Gvv1dt08mHhp7X8/2h47/
6zuhH7/69M1n7vd6aPMNs+FrVGijfEfpFpq6h7dw32yv0J7ZtcrLPBCaeh2d
Hw9s2Ct0Ut1WG3z69ZDQJWs+m7sdMCZ0YH4B5fjQwj3AY0JLjv/0lk1f7h/a
ttuYD1bevm/o1G9anT3w4qGhw/b+rOqj3UeFnn7y355bfe/RoaXff/HiYT1i
N8n3xaGh7adsePqT75eE3podd+00OLTdttkFi7G7fnnY3q9+Gpt/+z04JHTk
FtmNiQNCW1eNOubK3fuE9rxs+bPvu+O50LZ7N3mj9G8vhhbu634ptNGN2cD1
YmjhfssXQo/fLbug8+XQ1F6detwK542jQrfIzydLQ/OZr8/Y0Jnb/Gv7t5qP
CG3Z8eTnnthhVGjhnuFxod9/vM6lS418NfSH7Nu+aWlo4b7u2AffOG2Nb1d5
NXSPpXYaM2KLYaGF+377hqbOlaZPy7wauvNadz1+dIfYL7Nj47VGhrZ/IDMg
dKtTt3vo4X8MCe2QXZfb8ZXQ1Pdjaufco3E25I4ILZxDvhDa6fODHvn8oGdD
C/cPPxPavOazucHYR0NT5wUl+T3bT4XWzX+RdQltmZ/b9ArNfy1d/EJoaX6B
8qDQuvl5Zt/Qeqvt0X7zd18OzX+MnlQS+vFO2Sd6YOjEza+u+c+Q0MK99/1D
++++WcsGh/cNrV/z/y5/uXNo4dyyX2jhfuNhoSP773v236+LPSP//AwNzWfl
tYaEFvbmfqGp+1hH1vy0vPuGzqFv5+fnT4S22+udu/d659HQwvOp3qElXbPf
fB1CU08zW+f78TkNf9nU12HqHCp1XnB+/omoCv37zk9dP/zc6tB62TFhdWVo
6j7i55/Y4YS1LygLbdglewI2IfTSCyseHnd67Hr5vfQVoTdl/2xlw+mhu1Vk
F4hXhhbOJ18I/Tp7unD3k6GFr4t2oanzx9b5v+u5PLTweb4qNPn8P/97moQm
9//En5/zv79aCF+HLqwfFwAw/7P/F9j/7f/2f/u//d/+b/+3/9v/7f/2f/u/
/d/+/0dYWD8uAGD+Z/8vsP/b/+3/9n/7v/3/d+z/991xzNsHXFz1f/1/+//l
+Z465f/6Z+3/r+b//0ub/H/9f/v/IbvcXPMIVv9f/9/+P2pI2/WufKL6/2r/
t//b/+3/9n/7v/2/Fi2sHxcAMP+z/xfY/+3/9n/7v/3f/u/f//v3//Z/+7/9
3/5v/7f//xEW1o8LAJj/LWr7f219vAvK45Pa81P3/CZexyXffv464NCGofl9
v01DU69bG2TzVr/eoVPXHTL+nxuMD+3d8aMnXjm4KvTc/OOYHHraznteNvv6
SaEvP7JuzSu0ytALnx3QbsfHJobmM/GLFaFV72YX5k4I3bdX4023OqMsdOPz
3u943YMVoVtcl11kOS00u3X0kZtmh7bLrrNd863QVl+v8OLis98MLdzHOyv0
zh0fq3nFVRWa3Rbae+iw0Lo1ryLv/vTh0E7ZdX3NO4em7sds/c5m2y37TIfQ
kjaXd/nxtp6hLU77aPXyrV4OTd2D2T+boY8cHHpyNkuVDwkt+fjGNm8++3Jo
6l7dq/L78fqGjsvPW4aEFnbQYaGFr/choYV/n10SmrqHMb+GuX+P0Ivze4+f
D23ybnYB9HOh729ZNvPobUtC1z9mSNOd9xwRulV+4PJyaPPsmuR9+4UWdusB
oc9kc0Dd/qGF+3KfD22xwyubHnlwr9AOdd+reY/7hhbu/e4fmtoVV8+/rsf9
f+y9CZzN5fv/T2VNZc9OJWlRKhWlDtooiVKUlEofihBCKVnLVimUbI2dbMNg
xj5mGGMwyzmzb2bmnDNDqY8UUeR/ruvdff9/3/v1vZvyFTO6rofH5/n59vFt
5pzz3u7ndZ37BRxJ2uh4IjBx0KMdxh9LAnJMY/Vk4CrSglWSgNPYz3mAHA9c
xQ1cRDrpAQ+Q45ZTkG/Qaf86shO1T+oiK8ccfPO55UjnfXIDH0q5+9UXrt0F
3LKZai8whftybiBZ4gNlk4DluJGaALT1uWx9iqUfXDctISMC6PSv1gKD1/3Q
7VTcBuCKNmQGdwB/ZT8XDaxYgQxmDHDy5/tapK/cCew5usxPD53eDOy6b3HB
J7ODgU4u6GLgAL4fLkMGPuUqLZcCU0lH5q8AlviAXscM4EhuDM0D9uDfdxbQ
9nNt/SNuc6ZHAm19nPn1E9bvr7EbOJiDzncBw063/jDmykhgWT5xQoHc3ntu
DXDA8dw7D5cPAtr6FCPpsFsbBRzcZsXq9mNCgCfK1LzpvvZbgU37vN3+SI9t
QCfnfDGQ26V1FwCH8XPNImAr9t9rgM71eDFwKbX5O24E2q7bNfruqN53x2Jg
5Xuo0RwB7NRg4sc3vZwAtF3fUukytD4RmMTB4qnAnTR2UDMd+DzFn1dNBL4X
eJqtdE8U8OQdQa2q1k4Cro8esu3rWgeAd724qV2FSzKAV+YWXPPpbR6grc+e
E3iq9L86Duicr+OBQdxnmAhsQPH2RyYAK/Ln8wWwFd0m680ABrHXHwdsxXny
g4G2dcp5XEEV7Sou61ApKSkpKSmpolPi/8X/i/8X/y/+X/y/+H/x/+L/xf+L
/xf/L/5f/L/4/6JfxWUdKiUlJSUlJVV0Svy/+H/x/+L/xf+L/xf/D0xfSYI3
TVP5f8fX+jSV/7/30c3Tk9/3ayr/723+SeCPX1P5/8WdZ79/ooJfU/l/2n2l
U99sTeX/M0jbfZGpqfz/T7St2I4sTeX/6Wyq83y2pvL/l/G+Gj5N5cd4G5RK
Pk3l/3t0GZnZ59ZsTeX/r+X9JLI0lf8/eoIEV5Km8v9N2Eemair/T+/WpDNe
TeX/P75+e9ejkw5oiv8X/y/+X/y/+H/x/1Ilis86VEpKSkpKSqrolPh/8f/i
/8X/i/8X/y/+HzitLgVV5MH8v+n9Tf9vzv+b3t/0/+b8/1e3TA5bM9QH8//V
fq3UPWOyF+b/r7mWygfz//cdePLjL/v5YP7f9P6m/zfn/znWoqsP5v9bXJPc
ZfEOL8z/O3kLB2D+n0+Dgbkw/296f8V+zy1/dXQZv8z/i/8X/y/+X/y/+H/x
//9vFZd1qJSUlJSUlFTRqeLu/8+pz/9f8nyLS1/A9nPZV/VD8nP6EKCTA/Y6
0HkeHwsM57y4gUAnh3MOcNrRejWyB4QDt1zie3HQNWnAib0evq7kgUxgk/94
Bj3aIRX48Bs3jh5cIhno5OmlAG3rsivL7H9p+3eJwA/q0URrPJBj0ursBLbq
9uCJd6I9QEqT3PjGAWD4CApCzQN+WIkWvH7g1BYkHLOAseMoYO4AcGyF6XUX
35oC7MjiaAXQyZ+cDWzM679lwHBed34FtPkQmx+w5YQOi6Qgzhhgb/r4x+8C
HvyEzG8I0Mm1WwHcElhl3/zRBmCJdGo8bQNybOfXO4G29bjjk0KANt+1kNfH
64E2z+Pk6EYCf6cf8/RuYM+PKJg4Amjrm3Ab6cVIYNVli8q6S4YB206nIOmt
wK6kvx/ZArTl81Y91n/sHe9uBu6sfeXM7SNCgbbcVVt/ZyHnbMcAbf27V3gO
PhF480fV02J/8QBt+/Asq1w95NBGZPVHMlPvK5UEvPZTCmJOAEbw64gDDpmx
KfP3Bh5gp7SXvx34G5LbIV2TgDaf1p0bgkinTxUP/LHH3KUfXJcIdHw88mq+
LyUDu6+ngM4EoO3+0rHX2qZ5UduAIzc33jN7wVagk1u+EWjrTx1Z0bthzqxQ
ILdRe4UBZ3B+8lag418jgdw+8kYDH2mXX+f7Z2OArBFv2w/M5L5rDLB01fGv
LHgsGpi4vVLMwTf3AFdx3yMK+An/wvuBjZ56vNLCS+OBKybQDT0OeOe73ZK/
nREPtOWxtucDzw1sRlq5UiKwJPdz3EBubycmAW3PA7U6knBOAIbfcUWHY5fs
Bjbnhns48KFJfQt+W7YDOP4OeuFLgWHuTf1/dG0GTvn+PdddL8YAOz9DtQs4
rNHl1/U7vBIYHkmiewIwmLkMOL57yYGrNwYDD64+8PbApFXAIGr3PrcU2J6f
O7YAbXn0Nfh5dhXQ8frrgOHcyIwG2nLSX+S+WTKwQc+lh5u+nQacw32nZOC2
8O7TesYmADt3DHlvRZs4oO159XjjFz6NOJYDfPoteqBKB07j58H9wMkf3/Ty
7bO2AUvEP1jvpdI9gbZc4AE8R/AFsEQber5YAnRex5dAW861NS/YNndk48Va
xX39LiUlJSUlJXX+q7g/P4j///OfK/5f/L/4f/H/4v/F/4v/F/8v/l/8v/h/
8f/i/y+OKu7rdykpKSkpKanzX8X9+UH8/5//XPH/4v/F/4v/F///p/7/mgdf
C7zyFE3l/4++1mpU47t9msr/O77Qp6n8vz/+2oyTI3yayv+rfXjM/XgWfnFt
2zI9fJrK/z8fXKpbcCm/pvL/g+rQCZihqfz/Gvpr3dI1lf+fyPsD+TSV/w9c
hLx7R/o0lf+/gveT8Gsq/2/LCxjBG/v4NJX/P8ZeKk9T+f/orflt3NN8msr/
f3/VHZ2HzPBpKv9PNsw1P0dT/L/4f/H/4v/F/4v/F/9foviv36WkpKSkpKTO
fxX35wfx/3/+c8X/i/8X/y/+X/z/Wc3/m97f9P/m/L/p/U3/b87/m97f9P/m
/H9u59sGXH29F+b/R7Z756oK/fNg/t/0/qb/N+f/Te9v+n9z/t/0/qb/N+f/
Te9v+n9z/p8vl16/zP+L/xf/L/5f/L/4f/H//28V9/W7lJSUlJSUlNS/rf7u
cxr7v4ddQFv/wvb8bHvetlQrzgEe7jJp873VOadyB7BOsw9Or5qaAUyL/eVp
7yLkXfQ/L08Gjs3nhSRw+A/R5dZscwPdJWdM+yU8Hngl6ctBCUCyTz9flw5M
5vzDTOCReze+8WQvN5CXH3VzgCldFu9Y9uJBoOM5coCfs8DMAKZVa/DLzMvT
gKyNquwD2vIfbeu1cO4bfAp0Pv9JQFvOoJOLuAO4cjWZ7nhg1THhMfMejgKW
/mF+w0GfIG15iOG8zl4DZL3aLRzYjPtaO4FvPLYr7aO4cGAqH6ebgc3XkXHb
BByc3mrJFYORTt7jBmBL9sZrgXSW1fQip00Muerrl0OBl7GI2Aq0vd6eL+/8
eOvT4cDeA765OmzSWqDNt/z80Ona8yZvA9r6GiUotrnyBuAJzk0NAzr+chNw
CqHWFqDtc6d0whrZ8cBV15xq6fsxCXgJB4IjbfPq5TioN0czcnzt4UuCkl3X
ZZwMvJJEoC2ncv2oDoEzLQEYFEuf0H6gk4PtBgZ5St/7ZpAHeF3JA1tmDksG
Pvv8L01+75WjqTwYa/qfszQ3kIZ/y+OilOeUu7M0y3FgtttViXODczQT+ccm
Q16yYkM6DZ5NAW7JDTr53dD9QNt5avvcG/Lr2wAcVoo6FWuBnfkD3AHk2NHb
9wLzorJvXPpcLLDx3d+M3dU3BjiSG2rbgEupnTZjHdDJR90AzKT2ZL3tQNt5
bXt/bHnrOVlUW4HrOCA7Ali5OwWs7wT2oB/fMRJIv+1LpXcCnRzmCKDNZzr9
hO3AtoPfvDPq+gig7XPpnH1pZO0rkc51dD/wu06UvJ4AnLb8+OBGl3uAtvxf
5/q3GDiMc+YXAkdy8PRyoO1zv/vqzxd3nr0faOsT7aPHoE1RQFvu9rrA3afL
yC3AvoGrd43LNgDpLlCtwW5gGbpMlE4HmjniirY84vF8XKwCHgkc1fWXhwPL
cq74DuCYwSUa+e+PB3Jbq2kacPVU+qAzgNRtv6NzMtA5X+OAoR8e+WnK7hRg
28YLQl9bmQ2c//vHHR/pnwGk7kmn6zOB1O3yH08BNqAxl1brgI0r7npkevBS
oPP+BQOncI79AmA4n9/TgCV6PBU40yYhbesUW46wl46kZ5DFvcTzS0lJSUlJ
SUkVrxL/L/5f/L/4f/H/F4X/t+1Xr3y/yeLi/21zsMr3m1S+36T2/SbF/4v/
F/8v/l/8v/h/8f9/vcT/S0lJSUlJSUkVrxL/L/5f/L/4f/H/F9T/87YdL2do
Kv/faG61jy97z6+p/L+zL4tf82zn/3PeJXHn01T+n7ehyfJpKv/v7MOTqan8
/9e88VSapvL/zn5XWZrK/9NVot3TPk3l/3OvoI1N/Jrna/7/XtqW4n2/pvL/
m6bQjjk5muL/xf+L/xf/L/5f/P//uk4R/y/+X0pKSkpKSkqqKJf4f/H/4v/F
/4v/v6D+Pz654oh6R/Ng/t/0/qb/N+f/bfvVO7EBfpj/N72/6f//6vz/CQ4y
yIX5/zoUh5Dihfl/0/ub/t+c//+9AQUj+2H+n+zZ3Pt8MP/veHEvzP9vZI/v
h/l/0/sX1fn/ttxgyRL/L/5f/L/4f/H/4v8vbIn/l5KSkpKSkrpYy+a3i8u/
/1yV7XnP1heweX7OSRsB7HEnBeSNAjb15HS+bcASYNvwe1Y3mrsLaFunZLFI
SgPWH0cr5CTgvMnZX6y/NxnY2bto1s4G8cCWjYY1fTIxDmj7fQ6VaB8zvEcO
8Gle3+cBHa/sB75zqNHtZVf4gCHP7r7sqvw04HcHaCXpAzq5iDlAx++6gTbv
ajt8enw78LcxFRa5TB6ZM3qm/9XpwKD6Cev311gCtPn28hxsuhtI6ZDJFWOB
B/n9jgbacglt/pk109FtQCdnbwfQ6RftAubkfbDhwyORwK7z6IVHAyeRXu8S
DzzJ+apu4MuXb+hx+YZ4ILdbvtwLbMrCcA/QyaGNBLJmnb8DubnDqnTPRmBH
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
UFd0MLBiJao1wK497ws8yS0BDjiee+fh8sHAR7hvFgPs9kuT33v1SQVSuvyg
R7OBgYO3TrMPsoC2fedK8QBMPLA+N1aSgJ/vo85wNvAJbpwlA61zCDxPMQPo
HO/BQNuyKZxfxkiXyQZ8XH8IHMlzUq8BpS/wR9nWobZ5s7/7vsn7LCUlJSUl
JWUr8f/i/8X/i/8X/y/+vwj4f+X7TSrfb9L0/orK95ssav5f+X6TyvebVL7f
pPh/8f/i/8X/i/8X/y/+vxiU+H8pKSkpKSmpC1Xi/8X/i/8X//8P+/90D21s
kqGp/P9rtWZ/W+qHTE3l//ew58vSVP6fbGeZmj5N5flt/9x9w/uBPz5N5f+X
LSrrLjkjW1P5/1K84UiWpvj/f8b/0+5h2yv5NAub/7f5f9P7F+b/77iTyq+p
/H/MM8PvnTouQ/Ns/X9burw+mqGp/D+dlTNyvJqFzf/b/L9t/v/2sivqPN/T
r6n8/1rf1Y+PWJOteb78/1ell7w7KvD6FJX/f5b9U56m8v+f3nZp+YfWeDWV
/+fT9TqfpvL/tKtMl8VeTeX/H+T9urI0xf+L/xf/L/5f/L/4/yJV4v+lpKSk
pKSkLlSJ/xf/L/5f/P8Fmv93+gFemP939tv2wvy/6fdN/2/+c9P7K9r2Y6fU
g8/3eWX+/zz5f3P+f4MrumPay76/PP9v8//mvj+m/z/f8/+m9y9s/t/c90cx
6D/0BubD/L/p/Yvq/L/p/U3/b87/m97f9P8y/y/+X/y/+H/x/+L/i1WJ/5eS
kpKSkpL6p+vf9jxge702z8/rth5Ii/8feWz66wO+GQpswGJrFJB17dqVQNuc
p5OLmw5sTTGQixOBc8h25iAzKYbtqmRgq6veea9mx3hgd/Z2bmAm4SkfsH9z
2oGjAFjx65e7jMz0Ap38t4PAXPZPh4BfTfsl/MiH3wGrkgadnQdsP+bpreHd
dwLDOJd4CXDGV1TLgM7n9hlwSkcSlXOAw+ZQoNtGYPPjHVrvP7oDmHw5maB9
wJ0h8z8b2T8W2LDkgS0zh0UBnXzIxcAV3P+JBAaz0IsBtqSY0rXhwDY9/PHX
ZuwB3sxizQOcQ1rzkkSgzcvdSfF+zyA5/vN0AvCKDscuGdrJDfyUhSfSti/Q
E0d6zF36AZJSKZN2Irc9TabDDfwyo37PpYfjgRQ2+HPmDqAtP9SW/2vz8PHs
xUOATu7feqCTLx0KnMYNshBgCf4CxAagk88ZBnTyjZcDbV5xBsW4PhULvO2x
Owp6h7qBl9Dh/my25loa7/Z4XLfPmnvfwDb5mjtrXzlz+4gUF8cGP12gmX9/
0y25QWmu/twXSAKeDBylvhc9wBmDqLOyGxgfeFer9VoNZF3VcQ/QOe8TgG9c
Oufu+NdzNMdSnGnHZFf/D6bMWxuZq/kxXW4vS3M9RZp1ejJwWeXqIYc2eoAN
qrScccO3ccAhB0gkhgNtfajoIdu+rnXbVuAt9ZfHf3pwE5Bjew/tAc4oSQeS
G0jp5MMiE4CTz6TViojzAG3HCWvKUQnAcq/9vGFFErIy3+B2Am3n0c5eqdUa
/LIJaMvVXceNyY3AIE/pe98MCgF27LW2aV7UNuCRUblXlNm/HRix7MWcWx+L
AFb/tVLglewA0tnTrHI4MJXvP1uA40dQIwY5w/9qtV8rbQUO5jx5ZFlul64D
5pSlD2I9kKcFXkU6+dobgbbj0PZ79uQg8O1IDt7dC5xI3YFrkc51dAnQeR78
CEkx5ismIymWPuMDYFO+PywBVr6HLiARwOBGc6t9fNk+4PP09aKfEoFZj323
bdeZTKDTV0kF3kaXs7QE4Ofcl84Eth+xxnf14/nA6fQYNyYZOLAOBdEmAG35
0QtDX1v5SbltwCDO110KLMF9+FlAW9697T5FR1H3jEzgCP4iYzbwK75vpAB5
XOadJKDtuX16Xbqj5ABjl0/o9fB1uUBuV/+0H2hbNjnH42yXyfC4B+u9VHow
0Hact+L7/3BgCS/57GeQF+v69O/m/NrWoX/67/kblJKSkpKSkvr31L/teUD8
v/h/8f/i/8X/XxT+X/l+k6b3V1S+32RR8//K95tUvt+k+H/x/+L/xf+L/xf/
L/6/GJT4fykpKSkpKakLVf+25wHx/+L/xf//Y/7/nVGbG++ZnaWp/P/h8mTK
sjWV/2/39c+BP15N5f9p15qvV3o1lf93vJ1XU/n/Z5tVPrJ/uVdT+f8vecMX
r6by/7ZcgCG8f49PU/n/zM9IXPg0lf+vkFtwzae3ZWmK//+/+X/W9ivSNJVX
Yd2Z7dUsbP7f9P6F+X/a3eKXp/2ayv/ztmK5WZpn6//nNxz0yZCbUzSV/+/D
+y15Nc92/n8YH/h+TeX/T3IeQLbmhfb/vB3G6RxN5f/r8Mfj1VT+f8jApLmx
Pb2ayv9X4/3AfJrK/9uOk2t5IyGvpvh/8f/i/8X/i/8X/39BSvy/lJSUlJSU
1IWqf9vzgPh/8f/i/4vM/L/p/U3/b87/m97f9P/m/L/p/U3/b87/m97f9P8y
/39h5v9Nn6t4493fjN3V1wfz/zb/b+77Y/r/8z3/b3r/wub/qz+SmXpfqYJi
O/9ven/T/5vz/6b3N/2/Of9vO05M7y/+X/y/+H/x/+L/xf9fkBL/LyUlJSUl
JXWh6lw9J5yrv/9PP5/Y/v22vGNbX8DCIPYWo4FOnttS4OHAqqrvFQlAx/tm
Am35vLwsrJ8IdJecMe2X8HhgW4r7fTQBGPkKCcZEIKWPHducDWwXfs/qRnP9
QP83JDoOAm9cQAuxQ8Ce/62aeEv974C3PjzlyvCFPmB+/LUZJ0ekAzk+sM5O
oO1w4Bjd2UEuk9b1CD93jwQuXVQ28NYuBFpzTn1ju770VTJwKOclJgHXXUWN
kn3A8d1LBo6AcOCWdhQQGQUcsPf5ulVaRgOP0Nu9PBzoeOWdQFtuMmvB1CTg
INJ4LyciWch6gC2S6IBPBtr2aeF4wl88wK+eiKNIUOCqa0619P2YBJzMgXqJ
wJIsHj3AedSWiHADJ4XQBxQPtOV+Rn/+0i0nd60FOn4iDFiRfeQ64DDOp10D
bPYjdXo2A23ni81//vwQBVhvAzrr/nXA3gMoOXkt0DlekIPTWy25YvAm4AmK
aZyyF/jaR8v2fn+VG/hCPxqQ92vWjqBfKNn1BXuag5qf3PTy7bPmZvyRO5qr
efuW3KCT36W4/C8Ouub1x5KAS9+lL7jsA45c0cY1v89y4NgKZGR2A49N2f1l
yVJuIFncl7bnaNK3Blb+luyilNWuLXI1qVs857/23PZ7KMa1agLQyV/dAez9
8HUlD2zZBDyY/p/Jjy/cALT1rQZcff1Xg9btBT43jkSxB2jzh77mn3ibf5Kl
OW358cGNLve4QsqfHr/qzWTgGBZZHuCxDSuSbt+BNHO+FZc+98Cz8+rvAD60
hhpMIUDb+2DL1bXlcdv6g3W+f/b5X5rEAt+9i07keODSKAqwRnalOORLYoE2
v+2m2+ob+4BNOVd6L7BEb+po7QEu5PvALmCDfVWO9R8bAbT1HXiM4IZQYFt+
7lgP7LH9O983968ETg5bM7T8GxuAbTn3dROwhrfyskVl1wKrspjdAxzZ/8Un
Wt4cAwznvtA3wGDuw08FhnGeahDQ9nqdfPIdwFv7vN3+SI9Y4KmYZs2TLt8H
XLqXBjCigKMy+9za8Ik0YJsP6YnTC/xpDZ2YfuBxigPvlg9s8duRmkNKpQJH
dyBRnA2krv+EXklA275hfJjeFwccO5MaQGuA1nUEP/cNcJl0cu8jgXd0HjJj
U2YssOVAeuDxAG1zBU6/cRfwCZ5nSQQuoDjzz9KBVagNfF0K0OmTJgAr8jzF
fCBNQYTMnwe0zcnY8q9tOcLhfJ14G9iKxmvqDgKes3ViUSvb+tTWL7CV+H8p
KSkpKSkp8f/i/8X/i/8X/y/+/yL0/8r7Kyrfb1L5fpMXyv8r329S+X6TF6v/
V77fpPh/8f/i/8X/i/8X/y/+X/y/lJSUlJSU1N8o8f/i/8X/i///m/5/Ut+C
35b9mKmp/P+v97SpubVJjqby/2V5YejTVP5/wqo3o8Ie8mkq/394KG2U5NdU
/t+2T7ufP3+fpvL/tNvIqql+TeX/efuD9/yayv9/kfz+pDNpPk3l/2n13cbl
01T+/0fSDQ9naYr//2f8/+O8P0SqpvL/l3Tq27ncJK+m8v+m9y/M/9vm/5tx
YMUBzbP1/7x9VK1kTeX/Y54Zfu/UcV7Ns53/5+3G6vo1L7T/d5irqfz/qbjk
iiPq+TSV/6dNejb192oWNv/v7GPk11T+/7Pv33Pd9aJPU/n/mINvPrf8VZ9m
UfX/vB3PWx5N5f95m7+ZaZrK/++JGF97+JJ0TeX/f3nau2jWznRN5f9/q34m
5K6xaZrK/zs+NVVT+X86KjqFpWoq/9+b3+BUTfH/4v/F/4v/F///D5X4fykp
KSkpKalzVeL/xf+L/xf/f47m/2mX8kf6+2H+3/T+pv835/9N72/6f3P+3/T+
pv835/9N72/6f3P+3/T+ikEUq+rzyvx/EZv/t/l/c98fRdaU7+Sf9/l/0/sr
0q7+h0rkw/w/XaVz380v8vP/pvc3/b85/296f8Va7Fl9f3n+3/T+pv+X+X+Z
/xf/L/5f/L/4/2JV4v+lpKSkpKSk/um6UP7/XJUln9f6c1uTkO8HHMn5jK8D
S9Cy/LMxwI7zKOhtBtDxssFAmmr0Ns8G9uWfkwYcHxd8c6sfkoCZFC/aFHkL
i4s4YDn619WMB+YFnfxu6JxMIGumJflAx1v4gaVYTBUAv3idBOB3wFIUx5jr
B3bh9y8VOIzzx1YAnT7Mm0DHO84HNuX342ug7bByfNg3LpMjNzfeM3vBfiB/
nJ94gI5PTQQ6HiwBOJ7z03YDbXnBPSt2bbEuOgpo8ypN2QdsQ7IH3Q2MYj/t
Bn7TnBbsSUDb/jwcV/xsIrABxTSmJwO/jyRhkgJ8bFfaR3HBOZoPk5bOTv4j
XzpHM55Ol7tSXF9tyvy9wYMHNNs1ocZSoqv8mm13XNEhCWjmiSpWb/DLzMvb
eYC2z8XJN14LdDzEdmCryFUlNqZsAdryQyfz9zEigKz1m8UBx3M/xQN8hisJ
2IjX8QnAEvy57QRSemP+6u3AAWRZb0E2j3/90jl3BwMp7TXvuR3AoFq3ZTUs
nQDk2Nojfk11/HC76OGDmjTVXG9chmsZ+61k4AdvbBk8tUYisDHnDscAnf5e
KPABin2tvRdYmuKTq3uAzrx7jqbqD/5YkxKqkaybr04CVqxAyesxQKcvsRno
5HmGAdvy+bQYaMsL7ndn1PVPPZ4AtOXIO/nbWZoq/5e11A35mh8/vvCLa9ti
rrNieb4Pe4Bk235vgOx+LQm6eGAPavPs2gjkWPSZa4HOzw8F/mflJ+Xq7YsE
OrmyccAx7B0TgLZ9kGyecwzHsrqByz64blpCBvIh/iJXArASF/Jmapvd5wZO
G1fpnuMdEoBXcCB4PNCWQ+30T3YDbf1u23WmM39hYhOwOTeGQ4ArSONWDAPa
+jhhp1t/GHNlCDDnVrpB7AYOG0qF7HFDl+8PtV8MtOX/Or45CGjrC7hveD/w
JwLYma/ru4AVrut3eM7oGKBzP3EDV6d7vrplcipwc/8fXd0ezAGWrXnTfe27
ZwOncP8uBmh7HlhMYxbTUoDN6euHfZKAm6ZQcrkHmLi9UszBN/cAu/Lz5lKg
8z2x2cBW80mwrwHaPt/goeXf+OLT9UDbc28EH9cHgLEPvPdh95Ju4Gsv7/x4
69PxwMAPpyh54CMbfjqdOCwNuL3r0UnXb08F7gyZ/9nI/tuAzvuxAuh8P20q
0Dl+pwCd3OBeQGe+YCzwb68T/64/v1DF65gnXMB/Ov9X+gVSUlJSUlL/nhL/
L/5f/D+U+P+i6f+V7zepfL9J5ftNiv+/uPy/efwo32+yqPl/2/eDLlb/X4f1
vVd7f9P/K+8v/l/8v/h/8f/i/8X/i/8X/y8lJSUlJSV1Dkv8v/h/8f9Q4v8d
VmPPnaWp/P+vu+i/HNBU/t+2Pz/tItVhlU9T+X/b/DYvF6vka57r+X+y6DVv
8msq/99rbdO8qGyvpvL/r7HPy9K80P5/+oMk7jyayv83odOgbrqm8v/TalwW
ODN9msr/O/kNfk3l/98uFb01v02mZtHw/16DCVZfZPP/DXmDHb+m8v+xvIF6
tubZ+n/ezqBiqqby/0+xj/RpFjb/33bmU28dD1wXFZX/v5b03MwDmufL//O2
O1FuTeX/Sy+hDZG8msr/n/m1+w1dvvdqFjb/b3p/RbLNA9vkayr/z9smtfdp
Kv9PP73SwizN8+X/L/HRhlGJmsr/B365mOE98jSV/+fTc6RXU/l/tQ+SuR/S
kIG0kZpXU/n/SgsvDdxBvZrK/zd8YlngiuzVVP6fNXdXr6by/6l8gfdqKv/v
v5/uBF5N5f9rdmww8eObvJrK//O2ZTUyNJX/P/DF+nsbDUvXFP8v/l/8v/h/
8f9Gif+XkpKSkpKS+qdL/L/4f/H/UOL/z27+37Y/v+n9Tf9vrvdN76/4Y2A1
2vWoH+b/Q1nM58P8v+PdfTD/b3p/0/8X1/l/Pr075sH8v+n9Tf9fPOb/vTD/
b/NF5r4/pv8/3/P/pvdXnHwmrVZE4Dpqzv+b3v9Cz/+zpm6XBfP/pvc3/b85
/2/O/Rfm/23z/6b3V5xIqOI77/P/9GndeTgb5v9N72/6f3P+35aDYHp/0/+b
8/+m9zf9vzn/b3p/0/+b8/+m91d8lu/beTL/L/5f/L/4f/H/f7fE/0tJSUlJ
SUkVtft7UXtOsORz2XKUnOfHwcC/mwPLOjM9BGjzRYGH+hpfts0CPkFP4/cl
Afs8SSYyGUipvkc+9AA78fM1MqJlpzOPNEY6+YE5wCs30wTjIeArPID5LTCR
dEKLw8AoGs+++SCwZCMyCglAJ99sEfBIj7lLP7huIdDxu0uAR+aMnul/dRHQ
R5r5p2BgWRpvdq8Dzt7ZIHhg7zVAmyfkd29WCnAu/fhqMcBmd1JFAptTXHSN
bcAp89ZGJvqjgE6fZzuQLPaNSzcCnXzCTUBKBe0Utg14GQcT7wXacqVtuXLX
cT6eB9iuTI+nsi9FPnMbJYkij3MebI7mnLtJHCe7ri89avqDk/I1l7PPSbXO
V2+/44oOxy5JAZ7m3FI3kGMyaycA+XQttQsYfRMZ/43AzFoUUBsHPMzH6S4g
xwy/EgW0/Z4l2VMi+z23/NXRZTzAJ/iEQtquJ7HLJ/R6+LoE4AqK/R6/F0hp
j8nfRgPjWVhtA77HubfrgL5Xq/1aqfteYA0OKPdrOudFsqsk5+LmaYY8u/uy
q/LTrNdbm+86Vf1MyF1jtwMHc07vBmBDFiZxQDOnVjGUtMuhZGDk+NrDlwQh
bfvA2PKaT3De5gbgeG58rAParj/tSceXiQdSF2bU9CxNjneu7HFNf+DQ1AcO
ZWk6+bkenRtu5odvJ31ZrUAzl9oa16fpz9OkbZ8f536VAHT6PnuBthxVpy+6
CtiK8043A1nT1I0H2vbh4cNyEfKGy0nAIm3XWyeHE5lBWjYMWZn7BcgvM2iQ
IB54GzcSkLZc+Pvad+/3wZQEoM1bHvZ9E7hSIDkOPD0eaDsOYwNPU00eRg4g
DX1iD9DJt18HbH/PhNY9/MHA3tzPCQHa8tBtvt2Wwx7N+eDzgLbHXltf7xJq
p1WOAjrPTeuA+6j9OSQa6PQ9EoG1qA2Z7wa+8u3A38ZUSAL2ocejy5KBkz/f
1yJ9ZSLw3auocRkLvJra1d4k4Obpye9POpMGTP3vvRvfeDIF2J4bZgeANOUS
9XgKsPnxDq33H90BbMYXrjBgD37d64E51CZvNhroPLeGAi/Z9k7giTwVGObe
1P9HVwbwI+6PxQNt+4yV4b5tLvDVu+8f6hubA7Tt62jrazjP0QuBzvP4dKBt
nsfWLyjB942HkbbiuarnXEApp4raul5KSkpKSurfXOL//7zE/4v/F///r/H/
yvebVL7fpG1/dfH/F5f/N/2w8v0mxf+fW/+vfL9J5ftNmt5fUfl+k+L/xf+L
/8cS/y/+X/y/+P9zVkVtXS8lJSUlJfVvLvH/f17i/8X/i/8vMv5/UJ3db9XZ
naGp/P/ANitWtx+Tpan8/89Tdn9ZspRPU/n/kwuf/HXhkz7Nwub/bf7fNv+/
qtHcah9flq+p/H/gPwKv0Kt5of0/vepB65I0lf+3/Z5xtI1OvFdT+f/S974Z
5Cnt01T+n/VNG5+m8v+83U8ln6a6nrAGqurVVP6f5O6gR1M1z9b/Z9IY+YNx
msr/t8uv8/2zz+dqKv9v88O2+f+32RP7Nc+1/2cNUS1dU/n/z3h/C5+m8v+O
R/FrKv/v6HK/5vny/3Q1qFXOramuP2/zfj95mmc7/296/8L8v+37HWqfH3O/
n+68cVKG5rn2/87+Lgmayv+zdv8sT1P5f9s+/GVf+3nDiiSvpvL/vP2P26up
/D8fFo28mup6G/hlO/Xt7NVU/p+sXdeXvJrK/wcufqWXvOvVVP6fjq7/nMzT
VP6/V/0HIleV8Goq/8+H8SavpvL/b/L+T15N5f9DVyTdvmOMV1P5/11n+l6R
W+DVVP7/Jv4LGZrK/8+6nd7ZdE3x/+L/xf+L/xf//3+soraul5KSkpKS+jeX
+P8/L/H/4v/F/xcZ/2+b/88tuCbw33ww/296f9P/m/P/9OlPS/DD/L+574+i
bX910/ub/r+oz//bfk/T+5v+35z/N72/6f+Lyvy/6f0L8//LOI+ioMjM/5ve
3/T/5vy/6f0v9Py/6f0Vyf62q+D7y/P/f9f/2z5f2z7///T8/22ci5IB8/+m
9zf9vzn/b3p/0/+b8/+m9zf9vzn/b3p/0/+b8/+m9zf9vzn/b3p/0/+b8/+m
9zf9vzn/v7UJveF5MP9vOw5Da9I7lyf+X/y/+H/x/1ji//+8itq6XkpKSkpK
6t9cttwiuV87Zcv/tfQFRrJPGgtsVfvgulEdJgGd59DuQF4+TVsD9F/9+Ig1
vhRgl+d/afJ7rwwgx63NTAI6+WmpwOq/VuqeMTkBOILXf3uBtn0ktlBsbVYe
cI2Pf2HglNkVv7vZcxDorLuRtjxc2/scxH59HrBG3x3V++5YDIzn9X0QMJz0
zNCVwCPs43cDbblp1Vh8IB/iSgTewuuhSGCJdBK8q4A96Md0jAQeZz8XBZx2
tF6N7AHBwLAPj/w0ZXcocNicF9YvuXMjsEQbElahSEveZSuKx64XBqT0x5dv
3wx08jwjgGXZP8cAOcYzZi+wFudLJgBt+6iUq7evyrH+2Zoq76/eS6Wrjn8l
R/P7pm9vPN062VWF/x+RZo6p4hpall/tBiaSVluzGzjjK6qNQPoUnquxAxg+
5p35v38cDHQ+z93A58aNeCjlbg/QdjzT6nvaxCxN5f97dBmZ2efWbM3KMQff
fG65x7UtvPu0nrEJQNv+JBy/WgXJsdY/xgFtObmDe5Mp3wWsOKLe0RN3pGuO
zr2izP6X4lyUBl7n+XxNuppXXZXi4tN+Tq7m4HXdXs8KTbXmVt/D+cPxQOfy
Fwqsyrnx24C217uSLsezEoBz6DKakwi8mQOjPUBbv6kZNxw3A6dNDLnq65dD
gbZ9bGye3HY80NlRaWGWpvLwZE3jr/VrDuLPMcn1n1ajGt/9Tb5mE/q6SIdU
15WBT3P7d7ma+9hrp7kiXyEBlQg8Qjqvlxto6z924IZQFLDxC59GHGu8BRjE
J2YYcGIvCoLfBwxczOiKBmStXDVbU+UUmzncik35exRIp6+eCBw+igLoPX+Z
HCtbPxHovO/Ilb9Rwwu5gcYXmiQBzZxgxcPbyPQnAA9+wg8SwCNLoh6/Z0IC
0OnDI/l29RSS2yy3IzvzFwu2Ag+Srp2+EliW2tKRm5H8eYYAG3PjIxg4hQ7H
NTuAfHt7GdmYG7FrgLZ81aDQ11Z+Um4V0Pa86vQBdgKd82AfsDOf4PFA2/20
BT32eVOBTn53OrDfB9zhA+7dTQ30ZOB0vp6lAI9yznUacCU99nXxAG3zM06f
PQ3YjC94icAalz17ZZO1+4E9eWBgM9B5HpwLPFGGgpK3Aq39zcCrqBKXDqzX
4prkLosTgA9zrnsyMJ/76l7gicBqpU/ZA8DKR/Yvn9ArCWi7rnIcePBSYEV+
Y+cDcz6r8sr7r80Eho9beGO1Xp8CS/BAznikrWx5u7Z5MCkpKSkpKSmpf7rE
//95if8X/y/+/1/v/5XvN6l8v8l/m/+37f+vfL/Joub/le83aXp/ReX7TYr/
P7f+3zaHb3p/0/8r76/IX4drUqC9/8Xi/5XvNyn+X/y/+H/x/+L/xf9LSUlJ
SUlJSf2PEv//5yX+X/y/+P+Lzv87Xtyrqfy/bR/1vzv/z9sHLPJrKl9Rmr8H
79W80P5/efynB9P/k6yp/P8p3u/Hp6n8f0neJyBP82zn/1e9GRX20BteTeV7
bfuTV+PrkFdT+f9L6eMcnq6pfPgP3eg3T9VU/t/xxkmahc3/m96/sPn/RTfS
mezXPNf+3/Z6F90a6oru6NXU/r/ax5e995Pv/+cf/v8d9rVZmufa/9v2sa9x
E4nKXE3l/23Hg23+3/T+iqb3L2z+f8022pjLp6n8v7OflldT+X9b/si58v/O
55yqqfx/g19mXt7uaZ9mYfP/01gM+jSV/+ddp57waSr/32Jd9JBtX/s0lf+/
gj2ZT1N5fts/523Xpvo0lf9P5hPLp6n8fyM+v32ayv87x6NfU/l/2s0vN8ir
qfx/VN93f4gu59VU/j8y0X+8TE2fpvL/fBo/6tVU/n8ubctyj1dT+X9nP6UM
TfH/4v/F/4v/F/8vJSUlJSUlVexK/P+fl/h/8f/i/y86/2+b/7fto87bS7/j
+8vz/6b3N/1/UZ//N72/6f/N49m2/z/tTr+9qw/m/03Pa/p/c/7f9P5nO//v
fC4HYP5/daluwaW65cH8v83/T2Avm3/e5/9vZM+XB6/X9P7g/4vI/L/p/U3/
bx4P5tz/2fp/c+6/sPl/0/uf6/n/XW9RAyED/P8dBfSJ5sL8v+n9FR2v6YP5
f9P7m/7fnP83vb/p/805f9s/N72/6f/N+X/T+5v+35z/N72/6f/N+X/T+5v+
35z/N72/4s0nd33+0i1emf8X/y/+X/y/+H8pKSkpKSmp4lsXa27v3y1bH8Ti
+Xvw8/sY4Mhj018f8M1QYCvOr/scOIz7AwuBtnzY9903BP5kAVmPvZUGnP1t
qR/mN/QAbd+LN/PtFMNHpOx5ZngMkPXulxnA53veF3iFBcA4zuX7Flg+ZcGA
+8sXAPc9X7dKyxkpQNvHaHtud/L0FgCb8uDkNKCTz7kWyG2PWTuAHMM2fT+w
H2mJNbHAXqSlxicBbfmnqewtlwMdDxQJbEPjzRl7gEH1KRk6FOjk9H4DtOV+
po5uEvgTBnRyldcDoz9/6ZaTu9YCF/aZdfutn20Cckzd1WuBAzhXbRmwL+f+
bQA6uaAhwJ4fUSBpBPAj0t9fJgCnJWSsfXZ3ItBZv+Zovnfv1HGV7kl2zXzq
reO5d+Zqqj5dOQ7QdANtOXrUvap9cCfQyU9eBZwctmZo+Tc2AJ1+VCjQ8cqx
wIhlL+bc+pgbyfmT2ZqD2qxY3X6M54/Xma+pPEng/zhcfkqOpspT3sGeNVtz
UNLc2J4vY+614rQHDk194JAHGLTymlMtfQlAM39UsTv3Q5CHh1IDK0tTXSfL
82B4gebgwFl6bHqai+OZ5+Vqcgzv9lRXffoY6iUBnb5WNNDJaVwLdPpv4UC6
2tx+awLQyaH2AKf3jE3otygJGPRzu69/bhcHtHmVYG7YbQKG8+sOA74wsUHd
ke32AG3HudMvytKsT1+zGet2fUC3mXv9mi9SV6Bfkut9DgbO13TuLymupzhY
Nl+TvpWz4LFUF6NrrqZzvUp1/YfvAx6gbb8aM19csSl7na1AW05lg8Bd7IZv
twOTuyzesezFeGC9xdTgSddU92W+Hd7g06zOjQKPy0Oxnd1yNJ89+OjgN+9M
dj0bQSdcIpDber2RZj664uljmzusSkfacldtHs/ZXytbk2/7KR4XxwiPytHs
v4iSeZNdb1DX7PUczbHUxuyY7OJ44a4HNG+uRVfWRNec909U2HwJ0umPuIEl
D9AJmAiM4vuVG7iU2gat44EvBJ6+JiRGACuwd1wL7D3gm6vDJiFP8Nu6DGjr
xy3lPuBGIMckz4sA8tu0MxIYRu3ME6uBTZc+98Cz874GBnMe+yzggL10ZC4F
2uYHVq2jb2xFAc08ZsW2gykR2g1c9OSvC5/8NRFovc9eQ428RKDtOGldtfYz
Ea8kA6/lcgNtx+FM7tunAbu3pTtpApBvGzVigeXoMahmPNDp4+0ETuH75wJg
eK/Uag1++QZo66f/wDndaUBbP8U5vjxAjqludgB4F+ce5wB7TX48cASkArty
I3M1kA+j5GCgrT+Sw3nU04DOPBfSuq60zYlZ1onWvsBFsb4uxr+/lJSUlJTU
xVTi/50S/y/+X/y/+P+/6f+V7zdp+55Ocff/yvebtM1JKt9vUvl+kxfK/9uu
k6b3V1S+36T4/7Pz/8r3mzS9v6Ly/SZN76+ofL/J4uL/bfdl0/srat9vsoj5
f+X7TSrfb1L5fpPK95sU/y/+X/y/+H/x/xe4ivvvLyUlJSUldTGV+H+nxP+L
/xf//6/3/ynvTzqTVitTU/n/WkNKRW/N92me7fx/53K0gYNX80L7//SVtBJO
01T+v2leVPaNS72ahc3/2/z/353//yTiWOMXPvVpKv/P2x4N9Wkq/1+/59LD
Td/2air/35UHh72ayv/TrgKuq7yahc3/m96/sPn/fpVpY4oDmufa/3/C+3lk
aCr/z9v8vOHTVP7/6Ik7glpVzdE8X/7/Pb4vpWgq/0931bojvZqFzf+b3r8w
/296/8Lm/2l3i2te92kq/2/br/6f9v/30TZDa/M0C5v/N71/YfP/w+n2s82n
qfw/xzSE+jSV/z+5kMSpT1P5fzoLXh/g01T+/4tkunD6NJX/78r7h/k1z9f8
P8e1jPVpKu/KmvUrr6byuvGn6IX4NJX/D1zsL7sq36sp/l/8v/h/8f/i//9i
FfffX0pKSkpK6mIq8f9Oif8X/y/+/1/v/23z/6b3V6RUgllz/TD/36bm1iZ9
3s6H+X/T+19o/2+b/wfv/wcn8EbtPpj/N/f9UeRtoBP8MP9fll+3D+b/Te9v
+n9z/t/0/qb/N+f/Te+vOHc0veE+uE7a/P/qjRQAkf+Pzf8fnEovMAv8P5+W
tbww/296/ws9/5+/+sDbA5NyYP7f9P6Fzf+fK/9vm/83vb/p//+p+f//UNxL
iSyr/zfn/53cmzy4L9v8/7u8H78f5v9N72/6f3P+3/T+pv835/9N72/6f3P+
/z5+DvLB/H8Z3v/eD/P/Tn6IH+b/X6tFZ6wP5v9N72/6f9Prmt7f9P8y/y/+
X/y/+H/x/3+zivvvLyUlJSUldTGVzXuf1b+nGN/fbTlN7MP6AcN5/nXwX6bN
/zu+NgT4Hq/TI4DLeV2VAWzOwjEJ+PPpxGGHGiUAl9KY3LhY5GEKME0Arp66
/PjgRhnAuIR+tDIH1uFBvIPAG+/+Zuyuvt8C503O/mL9vcnAIM53HQ20ef6K
nI83FWj79zTe+WtMs+brgY43igY6uZB7gCPbvXNVhf7RQCcPczdwMum6vD3A
8IW08lkB7NiXzPFOYIe4ui2uSd4N7LH9O983928FDuBB7HBgPAv23UDH88UA
nTzMCKDjTzYhe1JQbAiQrP7ni9cBHb8bAnT8+RrgTl6nbgI6ryMUWJViZkuG
AVuxT90BXNp5dmDFvhdoW+9zLGK9XE3WfRtTrHmjGR4y3AlA1r3looG+vRRg
ug5oy2t2fFUEcBnp+Qw30Ja72jHt5W8H/ubXvGTGtF/CjyS7WB9/na/5GB3+
zVNd0V76xfI1WVPNSnEdKEtJmQc0nT5RkiuTNNlTiUDb7+nkPyOH8u+bpaly
hD8aQ2Y6U7P58Q6t9x9NcAUu0oEz3K85Z0HWY99tS3I9Gfhf15Qv0DzD/YM0
l38sdRhSgLbfcyDFve7eARzGAagrgbZcYI75nJIAdHK8k4EcG7nQA7R5obDT
rT+MuTLkLzOVPXkE0MwhVjz9yp7bvjiVqbmSc7XdLta0d/g0T1ag4EmPawIH
d+Zrclzwb8ku1vaPFWjeuIDOtLQ/vndRoHk/N5LT/7iu5Gre/mTi9koxqa5V
pPurJAFP0tclaiNXcPBzHLAVn95bgJknR7yxZXAIcDb3waKAd3KwbgKwRPuY
4T2GZWnytlTH3K7wSiTE/Zo5fD4ludpz0GqOZrunKYA22bq/TcuB1MjzAG3H
z+HA3WTOHjfQlgdq5gEr5rw9MGlubLbmlIPp/5n8eKKL4+2fztHc/nWt27Ia
Jrvu498rR/OGLt8fal892fp9gZD3qEOfo3l13x3V++5Idn11w7eBS08i8Bm+
nyQAl5Hmro98aBINBiBt92Vb3q7tOTCYA4yXAXfWvnLm9hGhwGAWmxuAFStR
rQE+9XmLRzdPjwKu45+zB2jrVzr9zKXAHJ6D+Bh4eA41XNcDB/zo6vbgiT3A
U4GnsqTL9wEX8g02Fsht4Y37gXX4wTIG2PTG/47KvSIF6OSfJwGn0duUvB9J
t9XP44D1+QtYiUCO0Z2YDLQ9J9jyi5/j/poHGNGy05lHGiNbRdMdPAI4hYOe
VwI7zqNBkRlA2/Ohi69/mUDnPE8Ezt5OA0V7gR/Sy3g1E1hhet3Ft4YeAHI7
8BHkLXwhiQQ667N1wB48wLMI6MwHLQS24vmvQcBwalekvg10zr/PgK143fkx
0Okb9EDyv+9hZHGv4u4TpKSkpKSkinKJ/3dK/L/4f/H/4v/Pkf9Xvt/kxeL/
lfc3/b/y/orK95tUvt/kufL/yvebVL7fpOn9Tf+vvL/4//+b/1e+36Tp/U3/
r7y/6f+V9zf9v/L+isr3mywu/l/5fpOm91dUvt9kUfP/yvebVL7fpPL9Jm15
Acr3mxT/L/5f/L/4f/H/RbSKu0+QkpKSkpIqyiX+3ynx/+L/xf+L/7f4f9aL
5VI1lf/vwRvceDULm/93vJ1PU63reRuh+zI1z5f/b/jEsua/HfFqKl89kU6b
Kj5N5f9N769oev/C/L9t/n/b0x1D3lvh01T+3/Z71iHtleLVPNv5f9P7K5re
X9HJP8jXVP7/BHvrLM1z7f+dzyNTU/n/BaQ5+udoni//v3k6bfji0VT+fxHv
O+LVLGz+3/T+iqb3VzS9v6Lp/Qub/1/M57FfU/n/x8LvWd1o7gHNc+3/nX2x
kjSV/3f2ffJqFjb/b3r/wub/bfvb065eb9zo01T+/0562c/4NNXxs+tM3yty
C7yayv9n30gbwng1lf/nbZKm+jQv9Py/4319msr/O/smejWV/2+4aUNNb2Wv
pvL/zn4wmZri/8X/i/8X/y/+//9Yxd0nSElJSUlJFeUS/++U+H/x/+L/xf9b
/L+zjsyF+X/T+yvysv+lfJj/N72/YuA/xnZ9yXve5/9Nn276f3P+/1z5f9bZ
V/th/t/0/qb/N39P0/sr0m7pZd3evzz/f7b+X+b///f5f9P7KzZi3+mF+f9/
2v/b5v9N76+4b3HBJ7Mr+v+x+X/apf/pm3Jg/t/0/orOfdgL8/82/2+b/7ft
b296f9P/m8eP6f1N/2/O/5veX9E5X30w/39bVsPSo6b7/7H5f9P7m/7fnP83
vb/M/4v/F/8v/l/8/z9Uxd0nSElJSUlJFYWy3U9t/v/v3n8v1vv1VlrfPOUC
slceA+zBC9IPgSU4yHIGcCTpobUbgGSVa3rdwPdrdmww8eN0oJPr5wa25aC+
eKAtH9bJC00GbqK4y8Ne4ITaJPYPAdM/iiPTCgxdQcInF2h7+xvwev1Dl0lb
flYOryPHAZv2ebv9kR6rgFVpu4iHo4A9eI5wLzCRdNX8WGDQRy23VWgcjzz5
3dA5L+wC1mHBsR7YvPfvv3a/YTeQnuqrNUA25/y3bUDWkUtigMM5rywROI9/
ryTgiyUHrt44JRHY77nlr44u40HeSYYoAdiMc9uigR1rU6LtZqDNY9s8v+Nd
dgB70rJ5bBjwsk7UQNkI5LbE08FAW77ntada+n58LR4Y6t7U/0dXjmb9GtkD
4k8luZ5ggYAcw3GkbuALp+KSK46IBZb4hBbmm4C2vONbOKdxO/AV+rrBQDfQ
liv6C7WLpvg1O5CWr5nsmn6KBrrzNT+m9l2jVFd5FpUFmio/99X/Vk28pX6O
5tBOJJ6SXGR3q5/J0rxhLiXbelxP8no6S7MkaYaZblc5DvjM1nSuSx7XmKe3
hneflq3ZjMVloovH4/f6NNXxTCnYX7Yt0LyUj4c0F59+XQo0b+dc5DTXs8Mp
6DkFGESasnQCsELjirsemR4O9H2wIXBkBwOPUBus8wrgCu737gWaOc2KmZ9V
eeX912KAze6kigTacr2dPudG4EiKmV2wH2jLr6zWizph6ZpRaXRjiNf52mbO
9qbrbtj5a0y+ZtIt9ZfHf2rPleB42kG5mleRZu5pz2U++Q79G9zA2zgPFxl9
2VX5E37dDTxRpuZN97XfCqxI7ak964Gf7/6yZKn50cAo9uoJQJXvbOY82/IR
bmV/nqN5ZZO1c/67JNk1nHOBPcBS9DLucQOvpRjUhxKAdBeu3hdp5hMr0rs9
7rsEoNMHQ6rz26TNczr7Ph3QVJ8vj/33ydGklPc7Oie7UjnPMxHo9B/dwFKH
6JsX8cBJ1M7vgoyf+Mgl297ZBTzC/nsOcCzn0K4B2vrXSzngeQvQ+R5CBJBS
mNf9sBlYg6/rIUBnTmQH0LluxgBtx3lq7C9PexctB3L8+/x5QPcN7wf+RACb
cgM4HEhHddTju4ENubEVBezKjb1w4AaKgX/LA7yKBzBSgD8/dLr2vMmxQL79
t0oAfvUEN4CAtv4U3x6CU4HUJbw7Pg3Ygm9QKcDkubGBR5gs4AM8b5AG7Mpe
PxrYMfvSyNpXfgMM4n7LKqDTz9kFnEmP0ZtTgWvpMcXjAb7LF/gEoLPOSAOu
TqfBiRzgh9xwPAB0+ma7gaeWkV8PBgbtbBA8sPc8oPPcuhxo8/Ph7SpccvNH
XwAb0OXvrdlA6/qan0O7I/90vX8RrtOlpKSkpKSksMT/n12J/xf/L/5f/P/f
9P/K95u8WPy/8v6KyvebNL2/ovL9JsnCVW3t095f0eYD+fLxjk97f0Xl+02a
3l9R+X6TpvcX//9/8//0pYRvZ+Rp76+ofL9J0/sr2r5XksIeN197/4vF/yvf
b9KWj6B8v8mL1f/bPl/l+02K/xf/L/5f/L/4/4tknS4lJSUlJSWFJf7/7Er8
v/j/Yuj/+Wv8ySmayv8HXtyGn05nayr/HziIbnr5dr+m8v+2eemt+W3c0yZm
aSr/T9PWPWMzNC92/9/j8g2BP3mahc3/v8376Pg1lf/nv9YtS/N8+f8Sjfz3
N93i1VT+//m6VVrOuMGnqfy/6f0L8/+m97/Q8/+2fpbN/5veX/E33n8iX1P5
/yNLoh6/Z0KG5sXi/0vyPk/xmsr/N92SG7ik5Woq///+GtqxyKtZ2Py/zf+b
3r8w/2+b/+ft9ir7NZUf5u30I72ayv/T7hPD783SPNf+n3aNqJqYrKn8v7Pf
j1ezMP9v2x/JNv/P/9pOPk3l/928MZ1XU/n/3M70Tno1lf8PnkEC06up/H9o
Tdp5K09T+X+62yQO82oq/z+enxe8msr/x7HX9Gqq850vf/V8mmc7/8+HaZZP
U/l/3rYqzaup/L+bD/w8TeX/M1otuWJwerqm+H/x/+L/xf+L/5eSkpKSkpK6
4CX+/+xK/L/4/2Lo/23z/2S/xoT7YP7f9P6m/zd9Ke1O7Cntg/l/Xs419l50
8/+BxeigRztkWv2/Of/v5FD6Yf7f9P6KlRZe2vTG/3rP+/y/6f1N/2/O/58r
/2+b/zfn/gub/zfn/gub/z/X/v/fPv9ven/T/5vz/+bc/7n2/+bcf2Hz/6b3
V+y1tmngk/b+Y/P/zT44vWrq8hyY/ze9v7n/z1/1/7b5f9P7m/7fnP83vb/p
/835f9P7m/7fnP83vb/p/83z3fT+imZfR7EhvyF+mP83vb/p/835f9P7y/y/
+H/x/+L/xf9LSUlJSUlJFdk6V/6/uDw/WH7Pkfz89RqS/XEvoC3/18lleh/Y
g33nKKCT2/YVsBU/d28Ednn+lya/98oAfsEL7zSgbf+QdymGs3cs8KibAh/3
ALtNbFB3ZLs04Jz3T1AiI9BZf38H9Df/xNv8E2TV2s9EvHL3fqDtY2zFz9GT
XCbjnyHh9hmwPQ/8rgM25ADCSOCpIzWHlIreD+zEQjwB2JliFD/cD2zFLyQK
acm3XVyWjMJuoOPPtgJzsqiQEyl+8sA+oC0n7uo0WoAnAc1cRsUfOeAW6fgW
D3ARxRXXSQQevIbEEZLjJ5u5gVF93/0hulwC8I7OlEQbC3TyjfcDD34yu+J3
N0cC95H2a41sSTHGa8OBR2hMfTnS9nv2vZUERY7meG5/JbkqH9m/fEIvZCee
a/cAOfZ4aixwfGtq2G0GsobI3gDsfbJr4MwMBa7r9npW6Ik4YArnuLqBPE78
oF+zNvetklzjKt1zvEPrAs2+ZV1XvfNemots4ZpOBZrh9LHMSbPmCNjmtJ2c
wGxNlRM6gGNufZqt+fxKdAUOosBb69d0ci2TXakvU5BfvmYVzn1OdbHt/zlf
swVdrrypf8yR52tu5+BTzIlUdHKHE4A23x7N1601wJE8d74AWJG0bJuNwPHd
qZERDmQt3iUEuJRe9ox1QCfncD2Q49gbRQNb8gflBm7ifOAszTcGfHN12CS3
znc2c55XNaJGT77mdoq3vSTFVfYnOoLzNQfspc5U6h/fD/Frciz2iWSrB5tM
7cAf3cDb2PcmAM3cYkW+670YCSxx9ZmQu8auRlK8beXFQNv76XxvJAHIbdsY
r+anEccav/Cp23Vt2zI9nsr2ay6m2NsNya6fJl2/vevRHM3pnDuf4qr3EiXZ
e4AH6d14wg3k2N6jscCFFI+9Kw7YkgOekbbr9kDewCge+AHFfL7gBg6hl/dh
PLAWjUHclAC07Xe0ks8DZHXus7iBtjmKjtxQR9py2/mytXAxcAr3f8KAv9Jl
OiUKeNPowSUa+fcD6bfNey4BaNunK5pin0fvBDrXmxDgQe5XbAU6ffgYoHO8
bAPGs9dfC2zAOe9fAZ05msVA2/06esi2r2vdthUYP27hjdV6bQdGfU5BvW7g
eK5UoG0fKls++0dj8lcfeNsNfN75AhBQXRdN2vLrbftxfUO31SFJwOv4+dcD
nMwHzB5g4KJVPeQQklLUD765EdiWnzsWA6fwg8AaoG0ftvncOEwFOrnkbuDM
r6jSgH34OSwD2HIGBX8nARd9QVdUN9DJ3Q0C+iiGpu86oG1d4/QHZrlMOjnA
84DWda6X1q/PuIAX6fr9Qv9aUlJSUlJSxarE/4v/F/8v/l/8/3nx/8r3m7xY
/L/y/qb/V97f9P/K+5v+3/wegW2Od0ZJEqc+7f1N/6+8v+n/lfc3/b/y/qb/
V97f9P/K+4v//2v+X/l+k6b3N/2/8v6m/1fe3/T/yvv/W/y/8v6m/1feX1H5
fpPi/8X/i/8X/y/+X/x/cVy/X+hfS0pKSkpKqliV+H/x/+L/Lzr/76ynUzWV
/y+9/6Xt3/l8msr/Z5wc8caWwX5N5f/57Zjq01T+P5o3+PdpKv/vuuvFTe0q
+DSV/5/fZ9btt37m01T+/yEWTT5N5f9Z08/xair/X/XXSt0zJmdoKq/emzfU
T9NUHom3ybgmTfNc+3/WMYHzSVH5/7V8Hns1C5v/Z31zt19T+f95HtpRKUvz
fPn/+2l7glF5msr/b56e/P6kM15N5f9N769oen9F0/sr2vYRsu3TYpv/N72/
oun9FU3vr2h6f0XT+ysW8PGbr6n8v+NdvJoXi/8/ygdSjqby1d+/R1cAr2Zh
8/82r2V6f0XT+yua3l+xD7/x+ZrK/09/kDYE82oq/1/AFxKv5vny/7b389Hc
d6uuetSrqfy/6f0VTe9f2Px/Nl9ffZrK//Pbssyrqfz/tLqLbw115Wkq/7+R
NPHgPE3l/w/QyxiWp6n8P8d635unqa7b5XhjnTxN5f95m6E1Xk3l/8ufHr/q
zag8TeX/X1hPG7Z4NZX/t+UdLN5BG2T5NJX/5+1Cwryayv8P5gtjnqby/1/z
/l4ZmufL//eMTei36O00TeX/uY2ZmaEp/l/8v/h/8f8Xy/r9Qv9aUlJSUlJS
xarE/4v/F/9/0fl/2/y/6f1N/2/O/5ve3/T/5vy/6f1N/2/O/5ve3/T/5vy/
6dMv9Pw/TYGv65YF8/+237Pqsf5j73jXD/P/pvdXJEu2vZLvvM//m96/sPn/
C+X/zbn/ouL//y3z/6anNv2/Of8/bhedCF6Y//+n/b9t/t/0/qb/P9/z/7b3
0/T+Z+v/bfP/pvc3/b85/296f9P/m/P/pvc3/b953Ta9v+n/zfl/0/ub/t+c
/7flHZje3/T/5vy/6f0VaTf7WTvzzvv8P+3e3+1Ursz/i/8X/y/+X/y/lJSU
lJSU1F+vs/L//8vfL2pl+/1teb7xDwaWwj2BrZ6jB/LBwHDOYfsIWKLHU9mX
Rk4CniDtOnUp8FR18gRxwNY/pfz33o3pwCvLkNhNBLJGfNgDdHJd9wJtuXU3
cy7oAaAt53fWU28dz73zMJDjTo9lAG0f10j2he+4/iqPcB7yfCDHUQ7dClzH
nnYPkHaRCLkrEbi1CQUExwOdnMCdwCCKSasRCizRu0/gN94DdHxkFLAOva0n
w4D3cq5vLDBz7bO7L7sqGWjLRY1o2enMI42Rtn17XpxGE4ZJQGdflETgrbzf
ywFNZ1470dXnRhIUScBj7b7+ud3XicBt1HaY6AFuuJeFEnDy55RoiGzKG9Z4
gFfmksFFOjmECcApvOFIHLB7Bi3M3cAFHIyYo3m8P29UY829rTWkVPTWfDew
DQdzxgGb16EE0UhgAz7RdgHDOXB2PdCWD2vm/iryNi3v+TVXXUMJh0muH7pR
MudBzQcolrZ2hiu/zvfPPv9LgWYTim89mO76fHHn2e+fyNccR+/Ot6ku1rVd
CjRV3q7t71Oq5l0/5mt+f6g9JSq7WDd8UaDZjfOM0128bUxIgSbr3pfTXawV
w/I1u1G7tU+qzvk1836n8+BtEtB2PDu5l3uBzfh+sg7YlPNm1wKncQMoBGjL
kX+P2lo/hQJLcJ7qWuCwQ41uL7tiC9B2PQzmnMYsTY7L7ujRubpmvi7d3b7+
KF/T8aKpLkoP/+mhAk0nFz7NFXbi65XXnMrXjKf416OprqxQ+ge5mn3ynkto
G57ieoX7FUnA547SILwbuJt9ZyLwwI1040sAXjbn7vjXL90KbBt+z+pGcxcB
w+PoOWId8A6eF9gPDFpJJ1QCsA4dxut9ml+Rpnot0cXjBZXyNTkusk6KizV6
iVxNJ9cyxXpeL6PbfP0EoJOPGg80884VZ99OLwQ5mR47ZsUC+1G7dA3yNOdt
xgOd93s/cDAHme8Dvsz57PHA2d+W+mF+Qw+Q0sCbLXIDbfsdrZhADXcktx0+
3wNs/AJ1brYAj9O4ydXRQKfPHA+s1qv+A5GrkO/eRUnYyCF0G+6ZAGxEbe3X
9wNtzzOtODh1M9Dx0DuAdWi84/7dQI6rf34/sCdfQMKBTu7xEiTFOQ9ZCmy8
89fAFXs9cEZG/Z5LD4cDU76dkbOjZQLQdt3jx6NmcUC+7Q1PATam0/XnZGAr
nqNwA8fwARwPfKQd3UljgM68wV6g0/9yA6c8c/DRwW96gNxOrrkf2IbGCzL2
ACPGvDP/94/jgU7e8gZgMD8gTAG2Hfxm4BK2Fmhb16zmB5BM4ESeg8gAzuNB
jRTgq3tu++LUK2nAH+gwmpEOfGkTBfWmAMPr0aDCXGBHnj9aCAzj1x0EbBr4
6XtuWwy0zrPZ5ta4L9ED+Xf7BVJSUlJSUlIXX4n/F/8v/l/8/zny/8r3m7xY
/f8Z0tTfe8H/K99v8mLx/8r7Kyrfb9L0/orK35s0vb+i7e+b3l9R+X6TpvdX
VL7fpOn9xf//Tyrfb9I2z2l6f0Xl+02a3l9R+X6TF6v/V77fpOn9FZXvNyn+
X/y/+H/x/+L/xf+L/5eSkpKSkvqXlvh/8f/i/4u8/3+TtrX/NE1T+X/enmei
X1P5f9Zn7/g0lf9fQ4fp1T5N5f9t+/Z/wN/792sq/8/bDG3xaRY2/8/bXlT3
ayr/z1rT7dNUvnQ1C0mfpvL/33D5NJX//4K2qU/zaSr/z7t8POHTVP4/hf5a
LZ+m8v/8te3OXk3l/3kXhbZ5mqb/N/sAtvn/8qSfevg1lf/vcymJrCzN8+X/
2fKtT9FU/v959uU+TeUJTe9fmP83vX9h/t/0/oX5f9P7F+b/Te9fmP83vb8i
ydQ9z/g1lf+3Hc/Fxf+v5A1oEjSV/+ftEn7L0yxs/t/m/03vX5j/N71/YfP/
fNqW82sq///eh7QhkldT+X86WO4rdUDzXPt/5/eI01T+n37aXXtzNZX/JxvZ
9G2vZmH+3/T+hc3/287rhnT7rOzVVP5/CTNDU/n/AfwvTtdU/v/bbbRBVoam
8v/VWFunaSr/z/o4I01T+f/290xo3cOfrqn8f+CgDtzg0jSV/3fui7mayv/z
bTI7T1P5/7mjZ/pfrebTVP6/7Gs/b1iR5NVU/t+Wd0Ddl4WXpmuerf9/nN/Y
ZE3l/528mTxN5f/TWy25YnB6nqby/6ybl6RrKv+/k4NxMjTF/4v/F/8v/l/8
v5SUlJSU1L+wxP+L/xf/X+T9v23+3/T+pv835/9N72/6f3P+3/T+pv835/9Z
p37r+8vz/6YnNf2/Of9ven/T/5vz/6b3N/2/Of9ven/T///V/X8e25X2UVyw
H+b/Te+v2L3tzMCZ4y3y8//i//+n//+3zP+b3l9xZH8y+L6/PP9/rvy/bf7f
9P6m/y8q8/+m9zf9/1+d/7f5f9v8v+n9Tf9vzv8P5wtfHsz/92CPngfz/xwX
EJ0H8/9rm9KJnAfz/9/d7MnpfFsezP93eKVi1xbr8mD+n29jkbkw/296f9P/
m/P/pvc3/b85/2/LO9jU/0dXtwfz/vL8P7+Mipng//cfXVP+9PgcmP83vb/p
/835f76sT8+D+f+J/EUpr8z/i/8X/y/+X/y/lJSUlJTUxVR/9z7+dz0/5+U+
jCxqxevpJ1xAisXaMQRp+fu2vGDneWoK0JZLGzy0/BtffLoe+PuqqcuPD04G
8ja/9yLdnJPmBjo+E/khxZK9ug94Xb/Dc0bPTAI6ua8+YIn0WhFxD/4AdDyE
D+jkRi4C2vovU9jfzgSOZP80GRge3n1az9g1QMfrbwTa1i/NOIA1BWj7vnxX
FoxbgB3Z328AOn4lEmjzSNHZJJqigA9xJQJtOaq1WWgkAm9l/52jeWWTtXP+
uyTZNfe+gW1WrM7VVB61Y9/O5Sal5WvydisrUl2Hy08Zvn9cvmYLipUrlfpH
HyBfU+Wl8uHl92vev41MRbJrNudI52t+FVh1dzqT7Jox7ZfwIx/6NT+7Mnzh
ljLJrsDBEviE/Joq19W2L/3QGZsyf2+QozlnAYmbJNeY8Jh5D2/wAG3n17Rx
le453iEBePoVWjBmaq7kvov7j35FjuYtHPyc7HqC13+JwI+O/DRl95cJwGAO
sN4PXMdBihHAFeyXooHhXUl4hgGXfkCiOALoXETjgRNoe/yHfJqDAkdL+zEe
1021yp3IT8rXDK1Jybeprp9Ia60q0HR8RbqLLFXwjAJNxyOn/+FNCzSPvtZq
VOO70/+4PhVoLuH8znQXf2w/FWhyfGpuuuvJ1mTUCjTP9KK+W5qL435n5GuG
sJdMdbWpSWYnX9N/9eMj1vhSrP/c1geZU5GMZiLQfS0lb+8DsvaqGwJ8gftI
a4GtuFG3Bkgp8C2u2QC05TOGuclcbgaOPE03oJ3ApRRD2zoe6OSJZ2mqXN0N
3FfxacaxyFP7d+Vr7mMhneK6ky8kBZpO7ni6i/Vc0wLNGpzDnfZHPnaO5lNn
Hmm8INSea9kvisS+G1iav4/kAdr2Y3HyVNf8ZTrXzZ1AJ/cyAfg6f6EhQ1Pl
2Nq+x0Rd+5GZfk2n75Ps4ljcIzma/ZvTzlopkNeuGFvjy7ZNHo4H3n3/UN/Y
rnFA+lZB+5i9wPEUp1o/Fmg7fr7kDxaZSY8X9eKA2Zx7vx94im4/0Uhb39zJ
HY4H2o6HoaX4iAQ6eSexwArtnr4p9oF9wH1VSMzGAG37C9n2g1o44P7yKQvi
getoe62WsUCbp6Wno5o37QU6OdUbgKs+KVdvX5VdwH0U89E6Eth7Jf2FEKDt
/LLti1V2UtrPmZ+FAHtTXMjp5cABNIVSPgjo5KxuBtr66RXYl0cAL6M246Q9
wEv4gSUZ+CqfOKnAGf0qBx49EoCvcd8jHmj73G3Pq3P4uSoRaMunTh3dJPAH
yfHq+buAtrzgx3jjv91A530NAY7nhcZq4NL7qYOyHDiQUpJviQPOLL3k3VGb
U4Gnj23usCrdA2x11Tvv1ewYDyxfj87MROADdPl7KReY/lFc8M2tsoFh3AdY
BbStBwfwhm7zgOG8jpkAtPl/29yatS9gWy9LX0BKSkpKSqrol/h/p8T/i/8X
/w9Uvt+kbR910/ub/l95f9P/K+9v+n/l/U3/r7y/6f+V9zf9v/L+ilYf+4fv
N/l3/X9N9nBe8P/87YPt/x97bwJvY9n9/yua1FMqlSJpRFRKSlI3pSfNUklJ
IRWNSCpNlKlSSQgRSoUQDsfMMR9n3Gfae5/ROXu4D1FpTlG/vdZ91npe37X+
138jdOhaL6/n3SMde7jH97Xu9Qmz9yeS75c8VPw/eX/p/8n7S/9P3l/6f/L+
0v+T95f+n7y/9P/k/aX/J+8v/T95f+n/ye9L/y9/3/p/j+T7JaX3l/6fvL/0
/+T9pf8n708k3y95sPt/8v2SpueYpPcnku+XtP7f+n/r/63/t/7f+n/r/23Z
smXLlq1DpKz/98r6f+v/D0L/n/DyzOucT/KY5P974xyCCJP8/69wWzsiyiT/
782hiTD3tv9fen+i9P5E6f2J0vsTpfcnSu9PlN4/nv839f+//83LTrMHI0zy
/1ed7b/381VhpvT/ch1gT/v/cSzC3AiT/L+3vxYxD5T/x7Eu23OY5P9RC74R
YnoHVZ/y/kTp/YnS+xOl9ydK70+U3p8ovT9Ren+i9P5E6ffj0fS8yUT4vz9G
/sdK6v93tYbBHVlM8v8PjQNhsolJ/v9T9EwhZrz+f+n9idL7E6X3J0rvH6//
H8d4VY0wyf+vuKtd7JBaxDxQ/h+mLQW+y2WS//feR5gZr//flGMuvX+8/n8H
54tEmOT/6+LcngIm+f+vcT5PAZP8/4snHBf7kUEm+f8PHmq8Y93IfCb5f5h2
9dHaAiZtPzD9bckzhUzy/3hZcFIBk/z/tTjIKZ9J/j99MPxF+Uzy/57XDDHJ
/9/VD04IISb5f5jWWPv4CJO2h2NhuXtqmEn+/5apY85pe1SISf5/JL7/Mib5
/+txflsZk/y/KV/AlAcBq567ckNM8sDL8PMKMcn/n3QiVCHT+n/r/63/t/7f
+n9btmzZsmXrECjr/72y/t/6/4PQ/5v6/6X3l/5f9v9L70/0o8CLqv5/0xz1
g93/133oyJrDukVV/7/0/tL/7+78H9n3H6//X3p/4gf488KVvv/f+v//6///
Lf3/0vsTR1//9pPlf4RV///+9v+m/n/p/YlDcH8KV5r+f+n9iQ8s+KLpfbXC
qv9/T/2/qf9fen+it7+GVP//RHxBIdX/j3EXz5Wp/n9M/6keUv3/pu0HY4R2
hFT/Pxy1P705pPr/N1Q7wX3z9zLV/48a+ucy1f8vvb/0/7L/X3p/6f9l/7/0
/tL/y/5/6f2l/5f9/6Y8COn9pf+X/f+X3gF7fsj2/1v/b/2/9f/W/9uyZcuW
LVuHUu2V/z+I838Nr8d0XTQAr/efUDRdF3VBH/OGYg28//hAEwOzpivWxMET
yYongF7vHlQcC7Fv07IVFwy8PfaKsxRRr49OV2yJA0oyFS+GGLMuJYqeF9+i
OPrLX/pecOxWRfzXOzIUTV/XALyun+RI4u11w9GK3v3WPEWTt+w+dHrqNydo
pm248Kdzl6xXPAK0xUs+xcjDp/x+YudUxQuvvrXz068lKaZh7twixQno/+Yr
ermyqxQh9TC5X4biINDEo3IVvXkmmnPvPL/xozmlzJNPTdiy+NxARX+/+z+i
3wk6t6MYLGf++Q6YyALn0Zxnb7x9WDnzouGL5j5fvcA5Fn2Gy3weyzwv3TSP
HabA3JZZzqSctQ2gh7qUM78FXb8k33nug1rVOhxfzrz5uMMbDT0134liTl05
E+zLQ43zHVwO6VfOTIB4ZDffGQabxWVlTFqnOArzukuZKy+DxLyAA6tpqzNL
mZSzOQa0xaJSZvENILj9Tq9UEJtBxSmP7ug4+NVcRdP+PvNhEBrpihiD+dgi
xcm4IyxVbIBziuYqngHa7+jViuvh4yjPUsSv87Qo09tP85z7v4QX5jJrthxb
/+tNQePv07wpOXfqyE5zjug0p5z5FMRS31/ggL2sf285k3KBB7lfbXquTzmz
BwaN5juQ9rp4hMvEw3ztoIPpw4+6zIUohgNO7M3E3pHLXDMbEnGDzo5JINxc
ZnvYnZ4NOM+AppmSp5iDgaA5irVwnXm94lRcT16g6M1B0kzCPPNZiqMg5rTX
HMW2uH8sVvwd8+eTFT1vnaX44NOvjZgyr5hJedm4O70ZYR7fF5JJcytygKNM
Wl/Gw1B9l/kOCtSAc9VTk3OObFHO9NYp8p2fMD/ZZd6MDedBB1/GmlxFb25Y
juKdGHyfpTgTfVKqomndpO2u2lOGl3yu6Hm4JMXtzU4b+fndaYoYu3iKT3EO
LtwUMimvFtJyP746wkyEZYLeOc57mNsZZXofQ56DMfMvusxLl8GGEnAwhrND
rmL20589tymUqWjKAzXNtzH9+bcwMD5N8QwMVPUpQnr7/G9TFXFzSkhTLPgJ
ksvTFbvgcyypisuWQmnejesCPsVHYRlyRq7iG6BHg9mKfd7MbV9ti0/RdL0E
dvTXizQ/g+WFLtmKplzUqxc/fsdj83yKubAs/UmGYh08kaUpbsbrx+WKY8dB
LVbcPrPHeaUfLVScBo+TtFusiJcRjycq4nJX11WKbc6FLTVZ0cu1XqjonT8/
UewBp+m3NU25wG3xumS54jz0tesUM/D5k0zF7rgukao4Hj+/jYoXvg6Bv+mK
2H7RI1fRy4HPUTTlhi/D3Opkxe1D3oidSdcpmvKIc2A5a1KWonfcSVOcPR9W
yNYreuv/KYrJ/VZMOuOS5YqTFz4y691jZisW5YxrPHzRKkXvOcwcxW0r4MIv
SzERA87XK3qnw6Di0bFvs/aUIkVT/0AvPFDPVzStc3mfxwxF37FFsSvOCYqm
PqtWeP/6rKLpvjgJP9dXFQ/kLb4tW7Zs2bJlK05Z/2/9v/X//3r/T75fUnp/
Ivl+Sen9ieT7JU3z0k392NL7Myt8v6T0/kTy/ZLk+yVNzymQ75ck3y9Jvl/y
UPf/5P2J5PUlpfcnmp43kd6fSL5fUnp/Ivl+Sen9ieT7JaX3/7f6f/L9ktL7
E03Pl0nvTyTfLym9/6Hu/8n3S5Lvl5Ten0i+X9L6f+v/rf+3/t/6f+v/rf+3
ZcuWLVu2DpGy/t/6f+v/D1r/j7p/RT6T/D9Mh2mdHmGS/4/dZN97cmaEGbf/
X3j/eP5fev94/t90v2Py/8r7x/H/0vvvrf/f3/3/3v2fyyT/P7lVzdr3rI4w
yf9vfhe2jGLmgfL/RX/Wu/6RoTlM8v9N4W0/H2aS/5feP57/N9Hk/6X3j+f/
pfeP5/+l94/n/6X3J8a2uYxf74oyyf+DnWtfUsz8p/1/NzyA+Jjk/725X6VM
8v/tbzlxatUmYWa8/n/p/eP5f+n94/l/6f2JR6Y/tHJrJMIk/w9Hwbf+G2GS
//fmphQy97X/9+axZDPJ/+NuP7aMSf5/Fc5fCTHj9f+b/L/0/vH8v28nDL6I
MMn/e/NnCpjk/6/DeTX5zIPN/+PH9HAZk/y/lx9QxiT//2JyOHXA4WEm+X8c
gxKMMMn/w17S8Lswk/y/N08oxCT/7809CjHpegmmLY04PsQk/4/jhxLCTPL/
N/Z9qun68yNM8v/ecTTEJP+Psdu5+Uzr/63/t/7f+n/r/23ZsmXLlq1DoKz/
t/7f+v+D1v+b+v+l95f+X/b/47jPmq7u//+X+X8594d4Sa/Tzh/3rKv6/2fj
YHdX9f/jGNYT3d3u/5feX/p/2f9fB7RFIFzp+/+t//+//v9g7f+X3l/6f9n/
7+XJRPRzAP+Q/zf1/0vvT3wBB9mHK03/v/T+RBxPXxLa7f7/vfX/sv8fx/e/
FFL9/5Bq3m1jmfL5pvn2pj9/GQb8lin/X/TExefdNj30t/3/YLyOKDP6f9n/
L72/9P+y/196f+n/Zf+/9P7S/8vrJen9pf+X/f/S+0v/L/v/1+XDQPKQ7f+3
/t/6f+v/rf+3ZcuWLVu2bO1+VbY8IFMeMd5Q36NozPM1XC8lxe4iX3mkv+IA
FIK9FW+FceXROYpNIN7vzjzFLQWPDr9lql9xwtp6c/r0yFLE24bamjfjDXaK
Yuavd4U/+yhX0cvJDCmaPP9PcDk73FXE29ykJEXT11WKn994R3Ly0JYrjmsw
QvE4DC5crvgAjAk5IlVx/gmTut47IE2xVkkv386fU3ebphxM0zqO6X5k2WgI
Ml6s2Bx0Rqc0xcfxfjRbcTj2necoevNSNjET0yG4Mc+BFL+rby1n4rLJyHwH
7v5+SnSZzdAbB50UbFx1mb80eOC91T8HHUxJG+cyvTy4oHH+/xgcSFHOfAcF
Yr5zbYcpZ2UtCDEvOgsnsTivgXasVcaMbYSxLTHgPAP66TW/4g3QnlpF8/Jt
1Ue8lJ6nmHZ587xjizRHY4Clpvc5ag6DOLdvNSFts8OGXMVjcEEnWxGX31Zm
KX4GMZnX5ih6/j5VsQj3myWKwzDfe5lil4/hP5yraNrO6x8LxjZbER8HuDPC
fGng0gYbJ+Q4qKEnuszz6q/9PeXyoPMa/jyX+VDpxbFDU9AJdoUVSpd5Mu5H
QQdjL/9ymXUwHzTojNgMB0aXOSARxH3AwdjPZ1xm37N73rwuP+CgnmjiMr38
wdj9N+4QLrNxTundl/QKOLi71nWZPvh6mwWcw25NeanLC6XMhOq7hs1+ym88
nnvP7WQqtsKcwMWKHWF3SF+k+CTokpcXKzaose6/o+csUvTWwTYqNsJ58dmK
AQxkzVGUubDEtzHXt4jZEv9FdsX6aoTZ6KdzlySenuOcgjnnUebw81d2/OHt
PAd1w8ku8xvQ3vUCDsabh1zmSsynDlZ42VJmAzxw+Y37l8xzJT7g/3ps6ao0
RS/fdY2i5wXnKW7HHWe+4tEtILggRTF20n7/m5czFXtgAHmGIsa9dyhkvocL
xj7n9mHQwBBhUn7lQsxtjjIz34JEjTwHl6sLXaa3nQSda2F5o3Yps/GsP079
KyFP5fUSvVzoVEVIYx9yZZpigytmDFr3ZIqi54M3KJrO4y/g+WSDYhO8sFmt
uL1mbuOzvkxSNH0vnc+BYGifYjksw7+vadqPUjHnNkdR5mET75kAAayaTXFh
WNN03of08GV9NWH1rW+BT5G2I8nhJWMWtLggWdF0vvCOiwsVG+OC6BpFL8c5
WRG27ilnrVJsgrmjyxVN3hjjkRenK553G6z8L1b08lTfV6wy8Qpfz6qzFD2P
nqDYCp+HWaloWkcw8VS8QMrWhN12eJaiaR6UyW+/9G3yMXNXZCv+PGLDh4cd
oSnzv4l3t0t4eeZ1mYoyF5xoygvG+POf0hR34MJbtmLzd8OxX8mKeBkwNVGx
17v9Gs36Y4yit96eqJiPJ6h8xaX4QGRAcSgGCvkU78XzdlDRlFP/LL4uv2K7
zDOvOtu/ULHKaX8lNBv0lWJS5vV1HzpyqqJpO/fut95SNN0Xez9vkOKBvMW3
ZcuWLVu2bP3DZf2/9f/W/1ca/0++X5J8v6T0/tL/k/eX/p+8v/T/sv9fen8i
6tdfy9n7Ey+49OiZde532fsTvfk7Uev/K6n/J+8v/T95f+n/yftL/0/eX/p/
8v7S/5P3l/6fvb/w/+T9pf8n7y/9P3l/Ivl+yX+b/yffLym9v/T/5P2l/yfv
L/0/eX+i1ycbZe9/qPt/k6eV3l/6f/L+0v+T9yeS75e0/t/6f+v/rf+3/t/6
f+v/bdmyZcuWLVv/p6z/t/7f+v+/7f+f7A83YkEm+f/B6+B3wkzy/6fgfWGE
Ga//3+T/pfcnSu9PlN6faJr/I73/3vb/k/+X6wCQXnzrG1Em+f+eVeGGPcok
/78AB0BEmeT/YdrOxnuiTPL/qLc6RZnk/2v+/Mygy/pHmeT/z+h3RPJyN8Ik
/4+3tUVhJvnJ5+CPXVfEJP//Y+LMvEtXFTMPlP+vgTtULpO2cxwDlB1mkv+X
3p8ovT9Ren+i9P5E6f2J0vsTlfevoPT+ROn9idL7x+v/93IaoswD5f/vy4JJ
QD4m+X9vvn8pk/x/9Jomy8omh5nkLa9Gfx9hkv+HKVs3HRdhxuv/l96fKL0/
UXp/ovT+8fr/TfvXvQ/BgJdC5oHy/7Aa+vKQAJM8887pMEcwxCT/j+MFa4SY
8fr/pfcnSu9PlN4/Xv9/71/Kmm6rHmKS/8fT/7lB5sHm/03fy6t1f/jtsskh
Jvn/638D8Rhikv837UfNUmGQYIRJ/n/09bCnhJnk//t3gg0vzCT/37N44W+T
ZoWZ5P9N532YLtXrmgiT/D+OT9oeYpL/N21X1v9b/2/9v/X/1v/bsmXLli1b
toxl/b/1/9b/77f+f+n9pf+XfYCeb4uq/n859+ef9v+y758o+/4P1Pwf6f2l
/5f9/9L7S/8v+/+llyR2wwHZ4UrT/4+adOAmtZ1L7/9v9f+m/n/p/Str/7/0
ldL/y/5/6f2J32D+Rlj1/+9v/y/7/qX/l/vXXTivPVRp+v+l95f+X/b/j0Ev
GFJ92vvK/0fxwYCo6v+X3p+4q/WQlOPvKlP9/97+V1bp/T8ejquVqe9Fen/p
/2X/v2k/kt5f+n/Z/y+9v/T/sv/fdN6X3l/6f9v/b/2/9f/W/1v/b8uWLVu2
bB1Ctb89fGXz/KYy5RzhfcMrivXQtw1U3NP8X5PHhjS9y09KUvwS7/eDimu6
wRVzrqIpl+o6uB3/MFXxCogVnJCu+JQnShSvGDRpaMsVEcVkiMVN3KJ4DlZI
0ZQravq6uuzM9Nd49WNH0vNkXyl+ApfRtTYoTsCcx2zFHhAruCxF8ZydLSPf
P+JTbLsUhHymIsYx1tugOAgHiyQpDmsNSX5LFWG1onP9DYoyX5M4dwUEzmYr
tpl7JySPKr6DXm0TE+NVj85zfoV2zafLmJTze/6RA0df/7bLpO3wDcwTdpmP
DYdgTvPcddRYTjnzv4k/7sp9Id9BvdIixDwf77vzneB3LRY/fkdA0fNtOYoy
n5LYpPi82CvPUXwtsPGel1pomnJs2+KCl+YRJ0BiZbaizHckZmZBUKYm3h47
mveB1uyoOapWtQ7HX6S5+mdYiFmnaPLDXk7mUkVf/Vey678yT7HlnXBDukHR
NL+iTezur+awCHPz2e9dUrV6rvMm5nm6zL7zO/UsXhh0GqFfLGdC+mN+1wLn
uQ/gDZYzKcf5+jZQLnPLU/d9+fDrAQfjateXMqt7wto5D2+cS5m/dxz8apuA
3/hczOyzYcffxHxwFCz85DmX4HYUZa6cdEbsH/1Ow40TPi2+uZR5OMRInuR3
Wn8LQa65ivX8936+anqGIsbi9l2iiBrLP0fRlO98La4bbFQ0+R+ZM0308nyz
FVvB1/N1EXM77KaPZTuFoFfGFDExlvDkbAfjRZtEmJR37K0rRZln4cJqngOL
fo8OjzLp8+x674CiJy52mefhQlrAGYlBh6XM3GdvvH3Yz3nO0+sXtXm8Ybbi
eBTc6YreOupqRW+deY5iO8w//FLxZfRnqxUbo8DMVNwEOvUFn+J9+MFkKe7A
HPhC5nT0ollOE8y7DjNXT3+w9OKbs43z/70ceJeZgP9hsCIPuZSJ8fFv+Y3H
w7SHVm6NzEhXNPX/t19Ud/DWO5MV64Fub7VWsQsG+K5RnHMrnImWa2LO6gLF
y3Ew2VxFjP3evFZx56ngzzIV/4MLJT7Fn2Jnty0XZCl6x8FsRdPxH1LCb0jM
UTSt78h8X6Jp/5X5vkTT9Q9eHmxbrjjgXNgBExV3bj+93xHJ6YqvwTLzA9mK
3nWipnc16FOch5c1axRxM1o0W3EmXr8sUhwDMb1nblTc9jwEga9RNOWoDoC2
mP6DFFvB5emk8YpdYPe4Zrliq0+e+OjSi+cqdsfntdYrejm36YomD99xQ7XY
lUqK4mV435OuaJp/Ncj9atNzffIUTX0U7WJH/dD6DMVv8HPNUSw6Y3Xm9XUz
FU3rp6br8/6Y071K0bQu06oFJKsvUjTlR2efAytqaYrQ7fBpcYGit53mKA5/
58Kul36Uoeg9b1mg+Ce0X/T1K5ry6LfDcnt4pKK3fU1RrIfX4+MUTf1sVfDB
3Bc0cTu6TdOWLVu2bNmytf/K+n+vrP+3/v9f7P/J90uS75c0bYfk+yVNc9fJ
90uGmkLjfTl7f+v/D03/T96fSL5fUnp/Ivl+Sen9ieT7Jb33F2XvTzTlYnjb
RZS9P5F8vyT5aclD1f+T75ck3y8pvT+RfL+k9P5E8v2S5PslD1X/T75fkny/
pGn+P/l+SfL9ktb/W/9v/b/1/9b/W/9v/b8tW7Zs2bJVScv6f6+s/7f+/yD0
/97XUMgk/18F54wXM8n///BIq4ENrogw97b/f0/9v2nuisn/m/r/Wx4BkxJc
Jvl/mO5f+/gIk/x/O3wwvIRJ/t/LCShhkv/P7N517TvLi5nk/73n6YuY5P8/
fPqkN5JSCpnku+7GeQxFTPL/3lygYib5f9Q93YqZ5P8nwfiG1UVM8j84vqew
iPlP+3/U1nf7meT/TfOrpfeP5/+l94/n/6X3P1D9/yb/b+r/7zXosv6d/BHm
gfL/3tisUib5/6+qLA480DbCJP+PY0RWR5jk/1vc2vnp10aEmXvb/y+9fzz/
b1pPMfl/U/8/HIU2fBhmkv+vM+CmF084Lp+5r/3/cDxQ5zDJ/9//60V/PvZE
iEn+fwXOMQoxyf/j6adVmBmv/9/k/03zf0z+39T//yP67DCTjofePI985qHi
/2MXTYVndQ8xyf9jPE16iEn+/yY8PoWZ5P9719kQ+xVmkv//Fb+/MJOO/zjm
6cEIk/w/5TvLnOcb+z7VdP35ESb5f9P+uy5/aOacRiEm+f9eb+a2r7algLm3
/j99MAyGymeS/8/A814Rk/x/bwz2LmJa/2/9v/X/1v/bsmXLli1btvairP/3
yvp/6/8PQv9v6v/H8bW7wqr/X3p/4tOgR4+K6v7/qyEh1/3b/f976v9l33+8
/n/p/Ym+nSBAIqr/Hy30bRHV/3/Ciy+f3q5eRPX/N0UPFFb9/9JzEfF2cVJY
9f+fOLVqk4bfhVX//5W/3N46/Yew6v+X3of48hAYGBs+4P3/H2C+Qb7y/5Nw
4Eqp6v83za/+p/y/qf9f9v3H6/+Xff/x/L+pX116/wPt/2X/v/T+0v/L/n/p
DYne8T682/3/+9v/m/r/pff/p/v/pfeX/l/2/0vvv7f9/3vq/039/6bj4XWP
DJ2e+k3ZIdf/L72/9P+y/196f+n/Zf+/6fgvvb/0/7L/X3p/6f/l/iu9/77u
/3/3mLppJ/9cpvr/4SzQZm5Y9f97uQFh2/9v/b/1/9b/27Jly5YtW7b+Th0s
fn5/F77vaxzJAXi//sTuEzR64WuK3jrACEUvb+pzxTaYH+dTNPkxrw8vR3EE
xEGdmqnoedEURa9fM1sx5RgwyCWK91zS67Tzx4UVJ4P2OnKL4ls417tI8WgU
QZ8qVukCZvcjxY5pn5e/O2GyYgRzCZcqmp5nh7vfKfNyFFuhCPYpNsXgPU3U
Mx1XKx757SfnPfvuesWpcBn9/hLFbY0gSDRJcQLmzKYqXoIiNEuxD/oETZNn
OwyfE9D8CQNhNzE/u+P3qXf8nuv0rArBdlEm5eTW6v3wdzVzXeZIiIP7JMjz
fORcn3UJn7w/4JnNzK23nvrfomCh8xrmx5Yxv3oKxFy+0xW9To7i1ThAxKfY
B/sUNdu1Tv9hbvV0xSGYc5umaPIAl+MLXK9Ya9HbI9OuSlHchu8vVfEX1DQb
FXGZ8OQ0RT96BU2T5zfl3E3GdbCFipHYXfCdT85XTJtyQ+KPuzQX/TZp1tk7
0xS9vNMi5hleILDjrwHJmRHm8UelP7Rya67zRX8IAnaZXxXkjGs8PGjcrkzz
ye/ED6qUSXl5d+BxupR5O2yGp/ud6rgQpjkR4i1LcxV3wNtrqenNUSllkq+e
dtKpCVsWlzIPxwO0X+U9E3+DePW1PsVgBgSvL1Xs2B2SeL9QfBIeb6m2XtF0
3PNyKTVnXefE7vyzFCfiemkREw8bayiHOsqcAR9zvzzHj8stUebx+CCG34EU
1D7XuUzPnwScZrie7DLTvjnhsrv7BZ1XMGDYZd6P7zfgDMb91WU+Ebovq21S
wDkZc7dLmcEH2o5v39vvTMfnZ7IVTceBIO5nyxRNeZFFmKeaoHjcTXddmHFt
mmIA4oRbZilmgK49V/NazFkuYm7/Yv0tV75JeeBh5qw8OOFlO78dt/TwyINR
Ju0XOF6rmcuknMrpuL1GmZRb7T3n4zKvwfW+gLPixWbfz+yRq7gd/1ya4gNv
1TtzwE0bFUux4WG1YpMxO7ttvCRRMSmp86juGXMVvbziaYqm9Zp6cJrsPVPR
y0tfqlgPg2I3KprWNU7EylI8F4N3cxWL8DmZbEXTebAb5l7kKq7GBdkcRYy7
/iRL0eRXfW2TrvzqggzFo/G6bKliPTz+rVM0bc9gU2uV+BRfL/tP7AyRqeit
f2Upbsb1/WxF7/muVMXSyTu2Pj9xmSJeNvXWxLfxc6oiLpN2W6/o5VEvVeyL
x4lERVN/S+nE18dHHx6s6MPj4jRFr01nlaLpc/DWZ9Yr/nbU6RdefWu64qiH
Gu9YNzJT0dSvgrcrv2UqennOQcXxjYcvmvt8gaJpvmVil2Njv9YrHj3kyjqX
v5auaJqL5a1fb1TEGPikJMXm30MQ+ZeK3n6gWd4DrhCyFOGs9EtZjuLloNFP
zFU0zVf8FdpJ5hYodvu6zx9vHJen6B1HP1dsu6v2lOElmlVwvT1RE73+MMUk
7EcYoFgF84Fv0LRewpYtW7Zs2dp/Zc+zXln/b/2/9f+K5PslyfdLSj8r/b/s
55fen0i+X9L6/4PL/5Pvl5TeX/p/8v7S/8vtSnp/ovSbRPL9kvvK/xv71St8
v+TB7v/79cn7OKN7mL2/9P/k/aX/J+8v/T95f+n/yftL/0/eX/p/8v5E8v2S
B7v/J98vKb2/9P9yv5DeX/p/8v7S/5P3t/7f+n/r/63/t/7f+n/r/23ZsmXL
lq1KXvY865X1/9b/H0L+fxXOdShikv+nnE2Zt+nNFYgw4/X/m/y/9LNE0zwf
6f3j9f/Pweehi5nkPYbDuIpmhUzr/w+s/58J+uawfGa8/n/p/YnS+xNN25Vp
Psme9v97x60ok/3/KRD4EPkfK/z/LXigiDD3tv//jH5HJC93I8x97f8Hbb1z
Ud3BeUzy/7hZPxBh0nFvHPqVCJP8/2cXw4ElzIzX/y+9P1F6f6L0/kTp/YnS
+xOl94/X/38eHofCTPL/I3HgVZC5r/0/6vjY9ksk/w92/tmzw0zy/7Ev6ZwF
NcPMeP3/0vsTpfcnSu9PlN6fKL0/8eKbLyvvsTDCJP8PR62WY8uYh4r/h6lc
D5aWMsn/e/Ptypjk/4On1Pt1/LFhJvn/UhiTVBZhkv9fju8jzCT/jzEWjSJM
Og8eBuO7xkeY5P/nNmr1bbPTIkzy/3hYvzvMJP/v+dcQc2/9P46jGpjHJP9v
2p59uDAcYpL//wp0eacQk/z/LXi8KWSS/7/yTRicWMS0/t/6f+v/rf+3ZcuW
LVu2bFWx/p/K+n/r/w8h/z+s9ktfTH40rPr/pfeX/l/2/+M41ypR1f8v5/7s
a/+/p/3/32yB/zBk+//3s/8/EQdNFyj//yqMjV5dpvr/USMODav+//3t/02e
c3/3/3ueK6r6/+Eo2uePqOr/l95/X/t/jLeuVqr6/6X3l/5f9v9L70+Uff+V
1f+b+v+l9/+n+/+l95f+X/ZL34jz9cOq//+f9v+y/196/0PN/8v+f+n9pf+X
/f/S+0v/L/v/pfeX/l/2/0vvL/2/7P+X3n9v/T8uCx5eqvr/Tduz9P7S/9v+
f+v/rf+3/t+WLVu2bNmy9TfKnme9MuQQDcA8zJ6Kph/TBfOOBjqSk/G6ZrCi
52MSFV+AOMZxfsUp89bkRn8JKHp9TtmKJm8M1vHqI9YpmvI0P3zvns039o0q
JqOG26zY8wn4oCKKzd8Nx34lK3ZBfz9C0ctbfkcxuaThtPuuTVSE1Ydn56cq
fgy3SaekKHr+Z6OizC8kvooDFDIUtw+EG9KVihinOX6eoufVEhTBKl91dqJi
OxS/axRbYF5ciuIbmCfsU6wPsXwTsxVNOdFDMR9TswqKvmIm3X+dgEGwUaZ3
/+h3tsBtxuhyZrPUDbE7qgInCPG6H4SYXfDGr6BincSv+OgZE74+4ttsxckZ
3buufSddEW+zOyUpmnJRTd7b8yJzFUfgFzFLsS3mLc5TNPnAvtfN/OrWNzQ3
vzuhxtZGmj6Iob1hjqKXkzhXsXkdWJlIUOwBMa5tFiqattthuJ65UnE95kX6
FL/A3NFCprdO53MmvAI7jsscV7qq5Z1/+R2Mg+1WzkR9tCLfgdTOzqNcJuVK
34sLPy7zBBRtAWcjCvdSZmv0MH6nBwq4UiZtnyfjuoam9/3nKsq8TOKdT4Jh
yVWE1bKqE/2KpuN8I9ANp+coVsGg9oWKd98DtUDRwby+LMXHx8ABPFfR5FVw
+XbgJmYqrvvkOri8Mz3KfLA+fBN+54JLj55Z536XORtFdcB5GxvqXeYLELt6
T9ABq7x+kcvshDm4QWcy5gy7TDrf4WZ3lsv8+fDn7xx5VcD5avGI2K7sMlfi
QmzQgXTzH9uUMxfOBCGe74yDmPNHchUzBk9teMpjmYrnoZddqzji5G6vPHLG
TMWxhWd1n7YtSdE0X8U7PvkUMbb88mzFEzE4vIhJeb5e7neEOezU/Ixf74pt
R0PhH6LMhRjY6zfmJoAFGrMzwrwfP8Bc59btcGSJMnesG/lQ4x15TtujQHCV
MiFtfsagvIqc1QzFtY/BjpiiaDpud0fRPUfxN3iso1Oi4q14ITRHsQHOR5qr
6Hn1GYrD8HNZphi7yDqncEeGIh4u22cpFsJy5iLNoW9AQGq2omlekOk8burf
MHlCk4fMhvj5UKbitRM3rh5WO1WxCN/HKkXUfDUyFE3bQwpcBgzOUqz28o+P
xzZJRVMurWn/gr1/V+0sRVw+SUhT9PKcVyqa8o7rndxybP2vVyomtoCJXGsV
f7ppUuyXppffnqRoWreqgdvFFEVv3WmCopd/vkDRuy5Yo9hg7e8plzdfpzjo
uNFnfn7xBkVv+1qtWIq55UmKpu3ZtL5fNK/Dhmon+BXPOAauzHIUTf48iAtR
miULoYEhTdG7XlujOHXhI7PePSZD8Tzsn1mjeDS8vddnKOLyaXaKIp5WT/Ur
es9bZir2G7uk6M96OYpD8ERRrHgzbHY/5Sua7iMW7Wodu/BIUEyaAwuNQxWr
4H3zfYrGdQFTXrAtW7Zs2bJl6++X9f9eWf9v/b/1/7vt/02ekHyqpPT+RPL9
ktb/Hxr+n3y/pPT+RPL9ktL7E8n3S3r7fZS9P9G0fVr////v/8n3S5Lvl5Te
n0i+X1J6f6LpfCe9P5F8vyT5fsmD3f+T75eU3p9Ivl/SlJtAvl9Sen8i+X5J
6/+t/7f+3/p/6/+t/7f+35YtW7Zs2fqHy/p/r6z/t/7/X+D/n8f7gGIm3Wet
f7L/t8nHhJnk/z8YDDcIYWa8/n+TX5XeP17/f/tqW2I/Osok/7/gi6b31epd
zLT+/8D6/++dTtf/9mI2k/z/ZTgHK8SM1/8vvX88/y+9fzz/v6f9//k4RyfK
JP/f+sfAdy0WR5jk/1vcChNzwkzy/y+sgT8ZYZL/x68hK8ok/z8cxiZlRpn7
2v+jvjwjzCT/D3/LkV9EmOT/YXrJ4l1hZrz+f5P/l94/nv+X3j+e/5fef2/9
f50pw0vGLIgwyf9fCV/PFQXMfe3/l4O+P6mASX6yPs6nCTHJ/6/cGplxzcQw
M17/v/T+8fy/aW6Syf9L7x+v/x/+lgsuDTHJ9+IYvj8DzIPN/3tXfQVM8v+N
8AMJM8n/X/M87OBhJvn/k/A4F2aS/zflBXhj1MJMOo8/gwfmMJP8/+jr336y
/I8wk/w/HqZahJnk/xe3ebzh630LmPH8v/d+cpjk/+Eo3faoEJP8v2l7aNY8
79iiG8JM8v/tbzlxatUmYSb5f7hqbZZaxiT/b9q/ska9lXDCpEKm9f/W/1v/
b/2/LVu2bNmy9a8q6/+9sv7f+v9/gf+XvkD6f9n/L70/UfrBvfX/tv//4PL/
rSAmYVeR6v+X3p/4EmqakOr/39/+X/b9x+v/l95f+n/Z/y+9v/T/sv9fen/p
//dX/7/0/tL/y/5/036N8bKHR3e7//9g8/8Huv/fNF9den/p/3e3//+f8v/f
4fzsqOr/l573UOn/nwZxC61Dqv9fen/p/2X/v/T+0v/L/n/TeVx6f+n/Zf+/
9P5EXHZ/KfS3+/+l95f+X24P0vtL/y/7/6X3J5r2L9v/b/2/9f/W/9uyZcuW
LVu2/kVlWu8w5RBhA1E3TdP1TOwu46EjByl69zezFV/Orv9Kdv10RS/PNKg4
tdc11QOf+hTn3AoTMtIV78YLP5/iffjAf46iKed35xtwYe8qfg63E3W2Kd4N
cZX1ShVNn2cSft7PaR4HiX2fKXqeYIlie/xgkxWn3Q0TR1IVTbnJplzgYZlw
QbtO0bvfWqU4+QHoVF+kWOVdEMVLFE1ed9ud8EbmKsIU7fnfLlWs9eSqU59c
tV7RlGvWHeL4WqcotgFtMD1L8caLbhhxfFIJk/JPm2HuWZSJmn+J34F/G/m+
nLm0wcYJnxYXOF/0Hxj7xzLmX4/BQlG+s8K9LnvUWzmKc3FBJEtxEOjaxDWK
wdcviv1apOitd6xSnPbZ0dmHjZ2vOAFzXzW9nNWFinPwhj1RsRbonJsSFNuN
vOrGpaMTFWtACurGBYqmdYqj0XssUuyCN4yJii0bwR3yAkX49j66N0HRe99r
FU3bybUojouYlE8axtfrMhu8Age+gJNzW7caHa9ymUcNBHMVcFA35EWZWzC/
2G/c3nD8+7YoM/fIFk9NzvE70V8guNBlNoZ47V4B5yrQTjf5Fet+DsG3PsXc
lSembH5qo6K3zpOtmImiMkfR5B8mYHBmtqJpvdiUCzxhbb05fXpkKU7BYMps
Rc/3FzG7XfrRx1f3yeZ8UplTanpuYgQGTLtMLw81YPy+vPzJKHN6KgRY+ivy
rl3mN2vgQB9wqoLuvzHKfCwHBFae886FXWOvOMp8uQWsYPqd8vkDb6+92WVe
egd8Y0EHT5OdS5i7fsbgbafdOx8+fdIbPsXGs/449a+EdYpjYdl72ieKaRCH
3HqNYvg1+EB8il6epOZvLybHdpUiprdOE9uP4LQ6J8Ksj3OXcp2Hv6uZ2/is
KNPzdXlORzzPR5knYeBlnlN889YV6/5ymXUgPn5H0EnDcpm/g+76IOh8UQ4L
kVHmbE9QOr+UNd1WfUQpk9a5TPNwcnFHTFU87nZY0Vmt2AtOw2vmK5rWW73r
r6mKA2ZCgPWXijXcN3+/8rrpil6u6UpFjMkck6b4UxsIysxQNM1DAyv4wQ8Z
imDJj56Zpth26Wj/K29nKvbBL3z3ibr8TJ+iySuifp22UfHlIZ0P6/OVpunv
NV33puL+kaP4HgbZZyu2gWXyu9J3m/1POO6Z5j0yFK/EPOIsRW89N0VxUfaS
Z753liquTfjk/QHPrFBsft3pyy96Yp3i71PviP1KUfwEl1eTFU3rj3iYnZqo
OMIPC9PjFb3c5tmKiI8/U/SuExcrvtAIDoBrFAswvyddMe3kn58ZdFmK4lDY
XBb7FL3Po0Cx+ImLz7ttelDxmEd+SpyZl6Vout+5D5aHO2YrTsYL1VWK9X74
7bLJrdYqms7X57x3SdXqbbIU8fGTrhsUTfnjvfGA6lPEON4xeYpdxh0Zu6RO
VXyn95u57avlKx7R4fiL5k3cpGjqlxgQgAd21yh661EjFE39dTXwvmSMoqmP
rgoeF1/VtGXLli1btmzZMpX1/9b/W///t/0/+X5J6fWk/yfvTyTfL2n9/6Hh
/7Ht+8Ywe3/p/8n7S/9P3l/6f/L+0v/L7U16fyL5fknr/z2S75eU3l/6f/nc
hPT+0v/L70t6f+n/yftL/0/eX/p/8v5E8v2S5PslK5v/n1q1ScPvBobZ+0v/
T95f+n/y/tL/k/eX/p+8v/T/5P2l/yfvTzTlXFj/b/2/9f/W/1v/b/2/9f+2
bNmyZcuWrQNa1v9b/2/9v+JAFPIBJvn/77NByIaZ8fr/pdcjSu8fr///Kxw4
E2Fa/185/P/EU96p9vKPuUzy/6btxNT/L70/UXp/ovT+RNP2Jr1/PP+/7fmJ
sT0zyiT/D9NULisPMcn/o84rKWWS/8cxCqPDTPL/iQ4M4ogwyf97+0GEua/9
/8ffwQceZpL/93xGmBmv/196f6IpN1l6f6Lp+5Lenyi9P1F6f6L0/vH8v6n/
fxIGHRQy99b/e3POcpnk/1vjHK0Qk/y/Nw8vxIzX/y+9P1F6f6L0/kTp/YnS
+xOl94/X/2+ahw/2pm6tIJP8f4fL4ZXlMCur/48dvO+6MCPIJP//TgkMNgkx
yf/TPDQ5F23UmXBgCTHJ/8/CBdQyJvn/c2A5/ZEQk/x/40dhRwgxybebfv+V
uiAwC5jk/8/HgTsFTPL/Pf78vXP9ewNM8v94+XJ/gEn+3/T3fofzEcuYdN3r
7ScRJvl/2PuSUsJM8v9dUMiXMcnzm37fe38hJvn/ITjXsJBp/b/1/9b/W/9v
y5YtW7Zs2ToEyvp/6/+t/1dEvXtymer/lz6XeAt+IBHV/7+n/v8OFGDlqv9f
en/r/yuH//8GYhj6bVL9/6btRPb9V3b/L/v/pfeX/l/2/0vvL/2/7P+X3n9/
+X/Z/y+9PxGm+zZZFlb9/4eq/4dvq2evyH7r//dyFkpU/7/0/tL/y/5/2fdf
Wf2/qf/fNA//YO//f+7W7V0+nlam+v+l95f+X/b/S+8v/b/s/5feX/p/2W9v
+v191f//LVap6v83/b3S+0v/L/v/pfeX/l/2+Zt+X3p/2/9v/b/1/9b/27Jl
y5YtW7YO4TJ5foPPN123eOysaaganQuH935zviPZBG8Y/Yq/YH6dJt5u3Zeh
6Add5aYpjoDLzblZil5uWkDRu04vVvTysiKKYWjzeymquG0sBHpmKpo+n+DX
8AfmOpINroagzTmKqNFrrVL07tc3Kvr8NV6t+0Oyotevlq6YBvqpX7LiMIhV
Pmep4iCI6+uzQNF0X1Zr0dsj065aojgW78804dus802iYi/cTqcrYuxel3mK
Xh7yUsWx8K/br1C88HUI/EpXHI15xcXMNnPvPD92r+9c22RZ2eQdUWYxvk5/
xfvezLwMtOJ1Rc5CbLgLKO7KhC8oW7Ge/97PV03PUDS9L6+vd75iR1xQW6ZY
irma8xR7zHr3mLppCYrVUHAtV/T89ypF0zwQz69rtsqGO8OViqa/t13tzfMH
3r5U0bR9NngATMoyRS/vd7WiaX5CdQxELmIuefyOx+Y1ya7wQGEm3V97OYcu
8+YX4QfF7t/rghFwmX3P7nnzuvyA0/XeAUVPXOwyz4Pb0A4BZ8Y1EEAZZSZ2
OTb2y+9sx+Bjl9n6i//0LWgVcCY/CgHHLpPyZL15MqVM+jkrkjqP6p6Rpfgx
HnCSFTvDslkLnyLGlLbLUbzEC/hTrIavI1XRtI7jra8mKc4C7bXcp9im7kNH
1hyWrfhWPhzwI0zKDbwfA1ijTC8vPs+pVdLLt/PnKHMEfqB+p1ZvEH0uc+QG
DIZ3rm8D5TK3PHXflw+/HnAw3q+Wy3wI4oYbBSqeC3KZXxVAsGjQGdOz14zT
FkWZwxfNfb76434H9Xf3KBM14eo8JxkHTrlMHEP0Uex8NxwESAnTy2POcZr/
cnvr9B+yFHeCRT82TbEOPCYwcIHifBS5qxW3w3ieL32KpvlLT61f1ObxhhFm
yz4QEJ7jLMWKMoOg1Xv7nQsx+NJlLjwdEmODTiG+T5d5GsSZTgo4kN5duspl
1hr5+d0TXgk6YzEP2WW+j0HpAQdSZl9MjjJh9TjzLb+Dyz+JUeajWDQPqoTZ
Cv+7HAfbBS7PVBwzBxZ2NyrejsezVEW8Ovo6WXEb9k0sUvTh+Xya4jQ8jnyp
eDgs55y0XhHbF07yKTaGx+KmpilivO73mYoZuM7vU0xZPaz2S19oJvdbMemM
S9IVQ5N3bH1+Yprib3fBAcGnOBPinNukK3o58BsUMca8cLXiSMy7TlM8AnOE
fYp42n6wgImxsQszK9Zhi5kTvj7i20/Oy3GK4LJhTLZinzogSLMU77kErgBy
FO+s99Y7F3bNUjTNr2sVu5o6vZ1PEU8ro1YpHoc5rimKXb0AeMX6sNxa5lP8
BZchNypiG8qatYre57RGcRh69DmKTabdd22HKZMUq+B1xCzFATD+rf8gRW/9
ao7i5f+BBbtVit55db2iac7e4HXQmJGveBM+d5qraFq32nIjLAjmKV4T+f6R
VgODiqY5VJGHT/n9xM6pip/hfWSe4io4DP5YrDgYj09BxQaY/56sWGUGdFhM
VjTd9919Yca1Lw9JV3wQrl6ezlO8YtCkoS1XFCniZdaGXMVH8fo3R9GHeb8L
FRfB6Xzo54peP9RYxXq4DjBEsYoP1m+7a5r69GzZsmXLli1btqz/t/7f+v+/
7f/J90uS75eU3t/6/0PL/5PvlzT110nvTyTfLym9P5E8vaT0/kTy/ZKmn/Nv
8//k+yWl9yeS75eU3p9Ivl9Sen8i+X5J6f2J5Pslpfcnku+XrKz+n7w/kXy/
pPT+RPL9ktL7E8n3S0rvTyTfL0m+X9L6/3+n/x/5Q91aJb1C7P2J5Pslrf+3
/t/6f+v/rf+3ZcuWLVu2bO1xWf9v/b/1/7vt/2GaUKedZcx4/f8m/y+9P/FL
33uxj8Rlkv+/DecLFTGt/z+w/j+zZ9XYT8xhkv83zU829f+b/L/0/vH8v/T+
8fy/9P7x/L+p/382itcwk/3/1SBg/f9jhf/HMRPLC5jk/+fg7lHMJP//Kj43
X8zc1/4fx/mUhZjk/3ujJwsz4/l/6f3j+X/p/eP5f+n94/l/6f3j+X/p/eP1
/z+Bx9Ewk/w/ju0ZFmTG8/8zToMDew6T/L/3cYSY5P9p/pKcwyS9fzz/L71/
PP8vvX88/y+9fzz/b+r/d9Cnhpjk//su3tV6SEopk/z/rzhoP8gk/48v9zc/
80D5fxxHOLqASf4fD695QSb5/6rovwuY5P8931nAJP9/ejsQ1IXMeP7fOzwF
meT/22IOeyFzb/3/ebdNb/7H9hwm+f+mOEiqjEn+35tfFWLubf//cnxDYSb5
f/g0Jj8aZpL/34FzYiJM8v8vwI9tGmaS/zfl1+wr/z8XNOhpRUzy//365H2c
0b2Qaf2/9f/W/1v/b8uWLVu2bNnah2X9v/X/1v/vsf+X/f8/xO6SGlwR2e3+
/3j+/9/S/2+aB/5P+f/pKDyKlP8/CwVbier/N81PngXjsz8K73b/f2Xz/3J+
kPT/sv//+Qh8k6Wq//9VzNEMqf7/Ac88eFvLRpED3v8vvb/0/7vb/3+o+n+M
sX48ovr/pfeP1///CHruAuX/Pf9Yovr/pfeX/l/2/x/s/t/U/y+9v/T/sv8f
x093KKs0/f+zcXsMqf5/PL3NLFP9/w3x+iWk+v+97ydU6fv/+xS0ih1JS1T/
v/T+0v/L/n/Z97+3/f/S+0v/L/v/pfeX/t/2/1v/b/2/9f+2bNmyZcuWrUpQ
ptzePf3zhuuHAXgf+YSi6ce3QhH2iiPZ691+jWb9MUbx8THv3bP5xrWKzbwL
RcVWEBf5dbaiyatjDFXNVMX5J0zqeu+ANMWHP705dqkeUGxe5/LXds0OKz4B
4xbe/loRY+halSkmj4SAvE8U673Q5I7cle8r1oQYsP5LFU3+dtD4aOzKe5Xi
W+jjUxXvLqm6pvbxKYotj4DEubWKXl7fCsWa0yEQdpGil5+2QvHWK9+MvYIk
xan4NS9QNOVEm/JhoZts5OfzFb28xwWKbUeDSFmuuB23l6WKGLs4cqOiqZ/5
mLdhcHiU+ewfEBTtdy7C4N0Q81i8Ly5wLoflovQ8RS9vLUvR5N9+w1zKRYoN
cPuaq4jLPGd+qujDXNYExdKjIUhunWKjriDoshVPRa+oeSf+PTmKYQz+1JT5
rMRbU+CGNEtxff7QzDmNfIqmuT1w9/fZc5mKCwaCWctSfGskJEyXML39Jdep
DeNG1hYz6X4ZNdmpUeYTDWEBKc+BVL5LV0WZN90FN6h+5330Ri5zEIqhQMV8
+VJmGcTy9gg4GAs5ZRPzLNhd6uY5jYaemp/xa5S58MdduS9s8Tt/dAZh7jLv
nXJW1oL0oDMKn2MpZQa/a7H48TsCzg0BCOTNU3wZAyY3KJpywL1c7lTFOhDX
tyBFsbQYarmitx44Q9HL2UtS7Ap6JdGn6OXTFjEpp/hp0PFHRZktcfB7nlN+
NgQXuswmDSHBM1Dh1aLM6rgQ6Hdg7x4fjTKvWQEd0ubf947rLvP3rdAAHHDA
Vo24vJz58MZLxuzslu9MRVHsMmdgUHPAuWjexO++WB9lLkXP4HcuwEAAlzkb
c1UDzs3rYAeJMmmd3ZtHVMJsAjp/dI7RL+WOazx80dwNil5ebrIi7MXdrkhX
vAX340Kmdz7NcjpiXmWUSbm978aOugkvu0xvOwxUPJfi/o/oVYJOsOvXff54
w2WejOcvc+7GrxAzOSLKvB3avk/3O+2rgciNMo/8FoLB/c4ZKB5dJmpdJ2j8
3r3tpph5JB4nchw8LJ6cplgKp+3xmYqxNz/zOidbscr8ZoMmDU1ThPTS08Pz
FH9DzzpdsQjzRZMVV28f8ob7Vaail/uaoYjxv219iqZcVC+vPlkRTz95qxRN
3tXL7VyvOPy/h694sdkqxeR7XmrxweC5it5zDkmK3vHGpyhzjonD4XQYCjNf
+jb5mLkrsp3usPywK8psALETP8WODzjQrZRJ54tqycvd67JLmIktLoAzvHN5
U6hS5mn5EIie52zG41euYsaXsCNnKW7HnOJMRdP2YFp/MfWZ4NusnaVo2p47
bqh2gvtmiqK37rFKEdF7meLYwrO6T9uWpGjK/52M16ejFVvhfdJLit71/jzF
1Zi/vVaxZSMYWLZOscuzcCDaqOjdH6Qq/nbRn489cXSmYh7mihcqYkzM1ZsU
80+p9+v4Y/MVTeuwpu2nFxy2WgYVX8YdX9O7b8hQNPUFmbz6NHgM6rhUxV9G
w+C8oOKabldc83wkVzEB2iOOyldsCl0KS8oVv/9xxIYPD8tT7HjV/OR+K1Yq
Tl74yKx3j/lY0bTeVAPvKz5QNHoAU7+fLVu2bNmyZavyl/X/1v9b/19p/L9p
njn5fkl4ur3r2nL2/tb/H5z+n3y/JPzvT+dGVL+c9P7S/5PHkf6fvD8xCUWv
y96fuOmOdz58+qQoe3/p/8n7E8n3S5LvlzxU/T/5fknp/aX/J+8v/T95f+n/
yfNK/y9/X3p/6f/J+0v/T95f+n/y/tL/k/cnmp6zI98vub/9fzp6ozB7f+n/
yftL/0/eX/n/Cu8v/T95f+n/5XM30vtL/0/eX/p/8v7S/8vvnXy/pPX/h4b/
fwnfYMjo/8n7S/9P3p9oOl+Q75ck3y9p/b/1/9b/W///92SELVu2bNmyZeuA
lPX/1v9b/3/A/T9uFuWlzHj9/yb/b+r/x/HyPaNM8v+oXx8rYv7T/j/pxJTN
T92XxyT/j4/rTw4zyf/jWIhFYSb5f/zrT4wwyf+vmg4CM8Ik/++97zCT/P9E
GLfx3yIm+f9THjvr2jWzC5jk/735CvlM8v84jqFLiEn+Hx8X7xxm7m3/v/T+
ROlxiNL7723/v/T+8fy/qf/fO45GmZXV/8O7qPVhNpP8f5UPIGgzxIzX/y+9
P1F6f6L0/kTpeeNRen+i9P5E6f2J0vsTpfeP5/9N/f9Lnvne6XR9iEn+H7/O
2H9HJP9/PC5IlDLJ/5+C437KmPH6/6X3J0rvz/5feH+i9P5E09wt6f2J0vsT
pfcnmr53U/8//vVDy5jk/2+8fdjPo3uGmOT/J+FxsYh5oPz/XIjF7lTAJP+P
U7yW5DMPFf/fAY+X2Uzy/95xJ8SU/l+uA0jvT5Tef1/3/3tzziJM8v9wVF9Q
M8wkf/tf3M4KmPH8vyl/YcwCeGH5TPL/WTDOb1Ihk/y/aXu2/t/6f+v/rf+3
ZcuWLVu2/hVl/b/1/9b//2P+X/b/m+aZy7k/RNn3L/3/wdr/L72/9P+y/196
f+n/Zf+/9P572/9vmtsvvb/0/7L/H8dkj42o/n/TvNx95f9l3z9R9v3vrf/3
3oer+v+l9yc+89lzm0KvlVYa/2/q/5feP17/v/X/Hsv/gGSMiOr/l96f6Pnd
UtX/L72/9P+y/1/2/R/q/r89nocjqv9fen/p/ytL//+AmyC4JKT6/yHl4Ye6
oUOu/38qjGVvV6z6/6X3j9f/v6f+33S+mIEVUf3/hTtgR4uq/n/p/aX/t/3/
1v9b/2/9vy1btmzZsnVI1J7688pW+HqvcRRNZTjvD2gKwbW9FavgDdvTmntY
Xg5qgiM5/Ek0Coqm/N++GASYpujlxKYomjz/cOzTzVVc/NukWWfvLFJMhXiq
XRHFe/AGpFzxG9A0X+Qomj4f1Kl3zXEkPW+xULEKDhBJVPTWAdYqPnk3GOg0
Rc+jZyiCTeg1Y4Oi50FXKu7EwNQkRZOvnhs57ZZX5+Yqtmud/sPc6umKXp7Y
UkVTXiGkIl51dqKi6Xq7xw3nHrZp2RLF39B7JSp6OZDJit46QwnzewzAy3Uy
8QuNMv+c/cGXv/T1O/Vx/SHE/PN3GMCe7zyL62N+RdP8jSehHbfaekWM6zx9
juIiiFd0lirKnE7iZvThyYqbMAc4W3HWH6f+ldAsVxFvS07OVsTbyJuKmevx
vjjbeR5zVouZ9XGBJNtphGIqRzETNsdN2YrHLz088uCzWYqzME84R/EeuC1c
mq144tSqTRp+V8iE9LVTn8xymjwHwZwRpnf/nutgnGc4yjwN89r8Tq9rqgc+
7VXOvA6W4wrzHbAxn33kMv/MfWHLBZcGHdTwP5Uyl8Y+jesfCTiwVZz6VykT
UjlrvxRwclDIljI7bIZgP79TFfNyo8zHcp698fZhecb55DWHdfv05o4u8008
DgSc2rhd5CnKnEviiJfSB09tuEDRO97PU2yCeb+aw965sOulH81WrFJwRuwj
/1gThdISxZ2wOQ7KVMTDYlEhs5onIJxCzNWMME9L2LL43Pq5TvFCOEG4TNTV
1wScU/Hfu8x3boGk8YCz5FzY011mHuju94JOFdxxXCatO/cfuLTBxglRJn2P
sHeMfMhlwlMtVRYHnNkXfHzKO9Vc5srLQHQGjPkjkMq6PT3KbI/rp/4KH+Yy
xz07v1PP4oDTcOOET4tvLmV6ea9+5zPckAuYXs6yz7kWN8hUxW0QNxvUHJJy
/F0fxvYD4tP9QYBmVPj+MPM+iAvvn2V8X6a8DLCUD62MMuEoP/4Fv3H+P2Ks
y0xoElpf0jDofNYQniSKMmeA/u+XV+HLI0zK39wUei1xyPYosx4GvPsr1rui
zN9xoJHf2YbXC1HmVXkQYOl3Tu93RPJyt4gJT119+XC2A6uPS4oyFE3erCnE
ao71KTa/BhK8Vyqa8lJr4ACyDYoPxH5a6ao0xY7wWNbhGYre8W+jYhGuF69S
TOoIgemLFOthPuocRdNxozkGXn+p2GXl1siMa2Yp9sIT6HTF7PqvxH6tVoT0
90svzlL01sELmW/j+kKW8yb2ZUSZz/Z4/5uXnbyK67gyJuXCN/8KdvRcxURc
ly5k4jLIpVkV55USpvccT66zYVGbxxu+rinz3YnZcFoNZSriMs+mdYq0H0ue
GruKKxyepeg9p+dThKfoEj7JUsRl+cOyFefgB5auuPaxYOxSY4liPVzYXqt4
OA7O26DYAxcmvlT05vINV5wTO0g/0HaG4thxUNMVPd+/QDEJj+sbFH07f156
++wURdP31f4WuJLJV3wMTnPnlCouHLL9xxEbAootceBgtuK09bdc+WZrn+Lm
dyfU2NpojWKnX2FhIqj4bYf7Y/8UUBw1+MQrf7k9S7EdrrcsVUwqg4WnWYpw
t3vi1BzFprhOmKU4K+/SVW+8mK3oHc9cxWvhMPpQmeKFmHuepNi8B9wJLFQs
xevr1xW94/FkReMNOR637nMUbdmyZcuWrX9DWf9v/b/1/9b/7yP/T75fkny/
ZMZbcONfzt7/3+r/yfdLku+X/Kf8/xzckMLs/Ynk+yWl9yeS75eU3p9Ivl+y
LvoJl70/kTyxpPT+RFN/Mvl+yUPV/3v+I8zen0i+X1J6fyL5fknp/Ymm586k
9yeS75eU3p9omj8mvT+RfL8kWOtHh0fZ+xPJ90vuqf83eULy/ZKm56qMz8sI
70809f9L708k3y8pvT+RfL+k9P5E8v2S5Pslrf8/uPw/+X5J6f2J5Psl4VVN
3BhR/p98vyT5fknr/63/t/7f+v89va+3ZcuWLVu2Dsqy/t/6f+v/95v/N82r
9/IrNzEPNv+Pl/uflDLj9f+b/L+p///NXEiSdJn/tP/HMUYJfib5f9QiE8NM
8v8XoKePMMn/n4L392Hm3vb/dx86PfWbEyJM8v+xm7/YFhNmkv9H/dQyzCT/
/zkOGIowyf+jDisNM+P1/5v8v/T+8fy/9P77uv9fev+99f+42V0fZZL/r/Vh
24tuGBFk/tP+P3NOo9iumMUk/w/d5Wd1DzHj9f+b/L/0/vH8v/T+8fy/aR3H
5P+l94/n/6X3j+f/97T//+Ofbpr0001lTPL/b9U7c8BNL5Yx4/X/m/y/6X2Z
/L/0/vH8v/T+8fy/9P7x/L/0/vH8v6n/H6a0tG4RYpL/HzQJBs6EmOT/vXkq
hUzr//+e/7/qbP+9n6/KYZL/x3GAZ4SZ8fr/pfeP1/9P/l+uA+xp/z8eztZG
mOT/Zz+1PvZPYSb5/8Xwr/sWMOP5f9N+3QkPAGEm+f+CVl/8p29BiEn+P3XA
4Xc+eXeYSf4fY7oHFTGt/7f+3/p/6/9t2bJly5at/8+y/t/6f+v/bf//Xvp/
2f+PcXujIqr/X879YYq+f+n/K0v//1voS0pV/7/0/tL/V/b+f+n94/X/y77/
A+X/Tf3/su8/Xv//vvb/lb3/3/Pihar/X3p/ouz7t/7//1L2/cfr/5feX/p/
2f+/tVFO6d2XhHa7///f5v9N/f/S+9v+/wPr/4ehIC9R/f/S+xMxXujMsOr/
N/l/U/+/af6Pt64TVv3/767+ucED70VU/7/0/tL//93+f9N+Lb2/9P+y/196
f9v/b/2/9f/W/9uyZcuWrX95/dtybfbV+sUM8LVdHMlW99Xq/fB3fTUNOb+m
H59c0nDafdcmOpKmXMXgRghW08TboWYZivdf22HKWVnrFK/A+9dMxVecZg8u
ualIMYD9wWWKi9GLu4oYP9wnrDj/2047M/1JiqbPpwFe981xJJtjUOUKRc+P
rlaccIWvZ9WJ6xWXX/TEc7du9yl6ubua27Fff7WiydfVq1XSy7dznSJYnauP
yFOU+XPEHbDc0jJX8YgT3Dd/vzJbcTXmw65WbIU5g9MUR1275YNrtyQotoPl
Af9CRS/PdoGiz1/j1bo/JCvuQhFQwiTvbZqzjXG/48uZX6CPLnBWrvvryf+U
BRRNOWt4e1lnrWKvh7+rmdv4K0VvPWehoikHOQVzDrMUA59Cw2+O4j2X9Drt
/HHFTMqvrIYLJCVMyiWE1O++T0WZr42YMm9Nbp6Dt/vHRJndYDz3cXmOt6NF
mKXP9cn7OCPXORnzPzcxKa8N45MHlzAngs4/PNdZ+WKz72f2KGE+A19DNMfB
j/WNYua5oNeq5Dj1cCEkypwCMYYP5Dn4eML15UyMFR6Q7wTwuFXOrPHiy6e3
q1fgeLrWZRZjTmLQaYrHV5eZ/OFhR3wSDFbkopcxvX7eoPPlNSBUS5mUNzrq
y1/6XnBsKZOOn16OboQ5Dg63j+RWPFcQZT5xx2PzmoT8Ffufy2x/fuNHc54N
OC99MfnRHR03MVFL5OU6ddG3+RRN+YamvNEJa+vN6dNjrqK3DpyoOA3zNxcr
btsCYjlZ8fkjcANUnIn38RHmkhGXfxbaluPMxHWhKBNe5UnT85ye+H24zMsx
gDbg4FiXTi7Ty70NOLCac/RMl9keF1yDFTmuLvObNSCkAsbvy3veI8q8DcWQ
38H4+ZEu08tbDRqPPw88DXtalFkbvxi/80U5CJkoc7Z3AnNgazr3aZd5Ox4n
Aw5qpoIo8/4sEM1+4+dJOdoyTxtPw8dFmKiRTspxfi1rGtt1o0zK2zXlZZje
73m4kBplwtNDl93td97G9X+X+UJ12NOCTgL2C7jMZIgV/T3gYHzx+iiT8pTx
8HpWlOnly+dV9DtEmVtgGWd9XsXxz2WmQQzm2IAx3wGXl9+KMovmddhQ7QS/
M/d5eMGbmHScHAuP4RzvUxyO/jtD0Tu+rFX0+gJmK5rWxwdhY0aSorfut07R
y91NVGyFvnyuYh088CxSnIzrTSsVm+PzYKsUN0M85zOaXp/IMsUX8DgxT3Hb
nfCJrFLEZYwdGYo/Yb5xAbNtbON85e3MCu8YZX6DgTJ+B3XnY6XMB+vf+82W
W/3OAtwtfYqmdZYr6lz+2q7ZxUzPu+Y4vfFCehPzXAwKNh/Pz2gHZ8AsRVNe
7e9T74j9SlE05Xq3gbF5qT7Fq+EydJ5mXXzwIksxAJdlv2UrmnKfm+PnkqB5
3emxS+Z1it7+renlAy9QbIccreiL7QWnPDZJcQ7myo5TLMJgkyWKpteJh5HG
GxVzRr0VO7RlKbbBylXclQkXutmKI/C6LUex7G64AMxXxGXXDrmKTbFyFOm8
Kll2MTQGaD6C/VM+RdN1SBO8f12uaJpvCVPwbpm6XnEani8LFb3tKKx4Azw+
U8WvOBWfo0tSbJUNX9BXikHM9f5U0Xi/b/2/LVu2bNk6lMr6f+v/rf+3/v8f
8v+mufemPlvp/Q8V/9++pOqa2sdH2PsTZ2BF2PtL/0/eX/p/8lnS/5P3J85d
AY1wEfb+RG8uQIS9P3EotCc+F2HvTywrP/u9S6pG2PtL/0/eX/p/8v7S/5P3
l/6fvL/0/+T9iSd1Lhze+02XvT8RnhK5NSXK3p94NW4XUXX8lB5Z+n/y/kTy
/ZLk+yUPFf9Pnlr6f/L+0v9LLyG9v/T/5P2l/yfvL/2//L6k95f+n7y/9P/y
+CO9v/T/5P2l/yfvL/0/eX+i/Byl/yfvL/0/eX/p/8n7S/8vn5cxvV/p/aX/
J+8v/T95f+n/yftL/0/eX/p/8v7S/5P3l/5fPt8hvT9RHh+t/6/c/p98v6T0
/kTy/ZJ76v/J90uS75e0/t/6f+v/rf+3ZcuWLVu2KnVZ/2/9v/X/B9z/4ziG
gXlM8v/3zzmi05wjokzy/3h72TfKJP9/S2cQUhFmZfX/1dbUPn78ylJmvP5/
k/+X3p+IbfPPuswD5f/Bukd/yWKS/2/WHAZQhJnk/69GQRdh7m3/v/T+RJPX
kt7/QPX/S+9PlN6fKL0/UXp/ovT++7r/X3pkovT+8fy/qf8f9r7LykPMA+X/
d+DcFB+T/H/KhgtjP7KUSf7/WBSPYSb5f5Ovlt6faPIS0vsTpfcnSu9PNH1f
0vsTpfcnmo4/0vsTpfcnSu9PlN4/nv+X3p8ovT9Ren+iaV6W6f1K70+U3p8o
vT9Ren+i9P5E6f2J0vsTTfOdpPeP1/8/4VK4MAsxyf+fkguDp/KZh4r/x7d/
TzaT/P8T6LdymPva/8M0yNwXcpjk/715JyFmvP5/6f3j9f/PGLTuyf7fhpjk
/3EZoWqIubf9/6bjeU8MPi9kxvP/aQ/BAKUAk/w/nKVvODfMJP/fGwcghpjk
/7/B43eISf4fbyc6hJnk/+tDHPrLxUzr/63/t/6/ivX/tmzZsmXr0Crr/63/
t/6/0vT/S+8v/f/B2v8vvT/RNPfe1I8az/9Xlv5/6f2l/5f9/7Lvnyj7/ve1
/5d9/0TZ90+Uff9E2ff/T/t/2fdPlH3/RNPxc1/5/0fOmPD1Ed9GVP+/9EQH
yv+3det80+H+QtX/L72/9P+y/9/6f+v/D0b/bzpOSu9v+//3T///qOvfjl0J
Fav+f+n9ieeg6A6p/n+T/9/T/n/p/Ymoj0+PqP7/0v41Z99YFlH9/6bj+Z72
/2N80allqv9fen/p/2X/v/T+0v/b/n/r/63/t/7fli1btmz9y2pP/f8hkf+7
B6/flBcchs/pHk0fXB911zT8vUl4HzxG0cs72qjY7DP8ghTharzDhlxFU56d
54HWK/aps6F3nQ1Ziv02hV5LHFKquP6/IDzLFT9rCAlkWxXhLmPV9BLFGidC
va9YpQtMRnlbscesd4+pm5agOAznk6xWrIn5hMmKXi5uquK0/gOXNtiYpjgf
7yc2Kv6C9/HrFU25aaj5OyUpmtYdZG4o8X5YXqqZqwjpcb1Oy1PsmPZ57Arb
pzgCYj7vX67o+YCvFDGGc/MSRW99aYViTbidXrFR0eS7UOfPjzJb14SkUH9F
P1w507svLnCaNPxuYNl/AopeLp5PcVjmnEatvl2nmIR5fXMVTblyl+P63lrF
ljggJlfRB2/7xU3MAbsg2DjXAbt1fvso8ya8z81zns37OKN7V5f53xHHJ01d
FnCwzf6ucqZ7TZNlZZPznciDz57d8+ZyZsNPFz4y6918J7nfiklnXFLO/CH7
tm41OuZXbBflzKO+gA09v2I9oZzZ5ciaw7p9WuBUx4FB5cy+N94+7OfR+U6b
wBUPP3BOORNWiT64Nt9BvVJjM9PLMy10YDXkxCs3M+/FPs1CB2+zd5Qz7+r9
S1nTbQVOMxT4LjMNc6uDzoL0Wh+2vaicmYYDkPIrchrLmLNvLOtfc3bAOF9r
wqfFN29dsYl5G/6LvIrnMaLM6jiYxF+RT+gy6T76MrwPLmeubf1j4LsW+c6Y
njBpppRZfMNNbp1vzL7XlJc35FX4hNMUvf1+rSKk6B7VZbXicThIK0XxcRyI
k624HXO5S5iTc45s8dTkHCfpREhUjTK99b4850rM1XSZeBqsGXTeXX5Xu4SX
XaaXzx5wwDa0S3CZWzAvO+i0w+B1lwmpn9/PDDp4OLiinPlmbRCa+Q7Gvrou
81h8sChYkZfuMtEOPxB0bp9dkDOuscv8s/WQlOPvCjjXo79xmVsgNvb1gPHn
gCW88GqX2Rh3qICDcbZTXebSZ753Ol1P52uXOQwrWOFXXGY0dtYfd2TAaQE2
/pUoMxdiqH/Oq1i3dJkzUEAGHIxX/81lDr4MAmuDxvn/uAz/R5R5+NhRvyZt
9ztB+L9vuEzK+Q1jsKjLbADxrdkBB//1WJdJ+b87LpvcqmbtciblZqJue85l
RuFjjQQq1oFdJuV3H3vTXRdmXOsyn8cKOBirfGqU+QRooQvyKo4fEeaRuGyV
64yGy50xLvOdkjELWlwQdPBtD8lRNPl/kyf0crDnKg7AgNsZikdjsHuCoufJ
EhVrVetw/EXzZimazsu1MEd9veJ7qLN9iqb5MK+X/eeo9IcyFae+D+8kTbEG
zmGbr4jxwx1XK95zDLzxLMXYxhI7o4eZ07aB6M9yLsZg9VLm8Thoyu9MhjaI
SJZic5wzlqZoyl/G2OGrCpldj03scmyiz8Guj3OiTModPglfYJYirLb+elGG
Ivy0LseuVzS9zun3YaOOYn3so8hWbAunvRuzFEfhwKxMRVOe+0+74ECh6eXx
LlE0rfvgskfXVYrN3w3HfiUrbsMc5CTFdjgvcYbiABwg+KkiXs6e+YHiqB/q
1irpNUexMcQV/5qg2ARO8wtXKzbG43uaouet1yiavHp/eKzyPJ+id/2Ro+gd
P1IUx0fhRiZdETffLoWKTarClU2e4lS4HFqXqej1Pc1RbPDAe6t/bpCm2Lnt
+Pa9f8lSNOV3F54Bn8gmRXws5ccCRVNutXf/sFSxCV6nT1U0aYAkXC/q70ju
F0dhy5YtW7Zs7e+y/t/6f+v/rf+vZP6ffL+k9P4Hm/8n3y9Jvl9Sen8i+X5J
6f2J5Pslpfcnku+XlN6fSL5fUnp/Ivl+Sen9ieT7JaX3J5LvlzQ9X0O+X1J6
f6Kpj056fyL5fsmDxf+T75eU3p9Ivl9Sen8i+X5J6f2J5PslpfcnkqeXlN6f
SL5fUnp/Ivl+Sen9ieT7JaX3J5Lvl5Ten0i+X9I0/598v6T0/kTy/ZLS+xPJ
90tK708k3y8pvT+RfL+k9P5E8v2S1v9XTv9Pvl+SfL/kvvL/5PslTd7S+n/r
/63/t/7fli1btmzZqtRl/b/1/9b/H3D/X7/Gutgnlc0k/w9TTZr/EWKS/8f2
tuujTPL/MB3lrXciTPL/52BO7ibmP+3/wWac3C3AJP9P+aEyR9Tk/6X3J2L8
bHWXSf7fy80sZO5r/79l8bn11/6eyyT/j3p6bIQZr//f5P+l94/n/6X3j+f/
pfeP5/+l94/n/6X3j+f/pfeP5/+l94/X/2/K1zD1/0vvH8//S+8fr//ftP3j
lKeVYSb5f4xdnR9kkv/39v9cJvl/bIdOyGGS/4/9n9gmW8Yk/z8YxmInh5nx
+v+l94/n/6X3j+f/pfeP5/+l94/n/6X3j+f/TT/H5P+l94/n/6X3j+f/pfeP
5/9N839M/l96/3j+X3r/eP5fev94/l96/3j+X3r/eP7/o3th8EuESf5/Hr6P
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
hf+Xz7NI7y/9v9z+pfeX/p+8v/T/5P2l/5fPd0jvL/0/eX/p/2Ufu/T+0v/L
87vp96Wvl/6fvL/0/+T9pf+XP0d6f+n/5fcovb/0/+T9pf8n7y/9P3l/6f/l
8xfS+0v/L5/fkd5f+n/y/kSwYT/MjbD3t/7/wPp/8v2S5PslyfdL7iv/T75f
kny/JPl+Sev/rf+3/t/6f1u2bNmyZatSlPX/1v9b/7/b/v8PvH73M8n/34HP
Exczyf//P/bOA0yKaunfmBUToiJgwmvCjIoKKhwDImBCRUUBQURFQcQIigEV
MygoCCIqoogYkCQ5s8CSNk/YxM7OTPdgxpz1P1W9Vd//Vt3jAC5JTz0+3/tc
PsLOTE93n/dU1y/oDytjks/H8bmj40zy/9NxIEiCubH9/xeh2Ewyyf/vg/f7
ZczN5f/x8eNOISb5/2YogpLMTP5fen9in3lv1D+p3GeS/z9pusluW1zKrG7/
3xLXu0VM8v/T4J+7Ickk/095lDKXUnp/ovSeROn9idL7E6X3J0rvT5Tenyi9
P1F6f6L0/kTbHDPp/Ym2OTC2OSrk/+U+AI7L6ZhkSv8v9wFs/f+2eSzS+xOl
9ydK75+p/38KHu9JJvl/21zorqc3S6/k40zy/7bfb+v/l96fKL0/UfniKtrm
WUnvT7Qd/9L7E6X3J0rvT7TNd5Lenyi9P9E2x0Z6f6Lt+m6j9PVE6f2J0vsT
bX+P9P5E2+covT9Ren+i9P5E6f2JtvlL0vsTbfO7pPcnSu+fqf8fNfrIOJP8
P/yp6T8VMzeX/4dvzS5P5jPJK+Ll/JRKJvl/3LbdKc4k/58Xhkn+cSb5/yge
Rwkm+f85cJtbO87cWP//0AcgnEPMTP3/Nv9v6/8fdXrerTu8FmOS/38Cb3wi
TPL/C9c9+bj/USUzU/+/zf/b+v/x9uC6Sib5/xhuZK5hkv+neU1yblO7xNhX
sxrEmeT/g/lJSSb5/6IrdvykxsVJJvn/sSfCDVGCSf4fL0vDS5nO/zv/7/y/
8/+uXLly5eofVs7/O//v/P8m6/+XHl/6f9n/b/v949Dve6r//9IJcEPuq/5/
6f23dP9/YzwwKlT/v/T+cv7Phvr/raX/X3p/6f9l/7/z/9Xr/6tr/o/s+99c
/h/HQn+ZVP3/0vtL/y/7+aX3l/5/ffv/nf93/v/f4P9l37/0/7L/Hx9Haxbf
avr/pfeX/l/2/0vvL/2/7P+X3j+T/+/6Vpv2q94pVf4f48u/rFD9/ysxvyWh
+v/l3B8inp5qe6r/X3p/4m34+cdU/7/0/sT0RXLE0Z9Wqv5/OfeHWIlBREnV
/y+9v/T/sv/fltcgvb/0/7L/X3p/6f9d/7/z/87/O//vypUrV67+ZXUi+OxL
jGJ11ZbKC64mn7+hOb9dsP/7ccUFT7x9zP63vKDY9/IXm144e4liZ1jGpaKK
h4I2PqdIcSZooHvyFPtiPt4yxUa7fnDQdd1WKga+KqZ4EGwPRD5RrI8BtWsV
bev34D53mmIN/IceVhyMHnqkYpBXNl9xzmyolYqQilV/t2xFuBv8ccECxW64
sFqq2Ar70goUbc9Z94KXvYsmLl+fKFKcNu7U9B1koeJjJ0TT/yWZN0Os53tF
BpcldSqZz3w/7Nbe76XfZxiHcH5Icfwjhw/NLy1QDNZPeYoXY0DwHEUc5/DB
B4qjnzp73h4NJyoG+WALFA/FdXSBYntcx1Qwa06ad8qel5LXSTGDvMBig+Mu
OsaZ32DuaYnpek3/sh4nFinu2Ae+aCsVF+zRsNaSlh8rdn9sl29b/P6+Ygxi
I/suUPw8CZMtChRtfYM3fgoL5Apm7WDgioGjaN+uKea+mJtcbODTH7DEZ96I
njdq4Fu5/CqPOaxbTn6vsSEz5UFotIwxD8ADJmx9rgTHbLwUY36CuZNhsycK
jhhzFSxny0K8DyX3oyA1e9RbKSbqhHNLzEzQz+NTzMBTlJhOR1/zxSfp8wcx
+PdLDcbO/ekzD8LG+KgZc8Tdz993XIr5DnqNYvMT7ndVMslzXgdfv2+LFOdd
2Tb91hQoYvzkkHJmkKtdaHCb8xqPiTp9fMg6z/waFM4+c2/s242Yww7u3/r+
vX3mGFwvp9fHoLGe8Jg95tzzUt0dw1U/h8e8G7TKweEq31POXHT25X+2bFho
Bv5ZXH9RbjnzbGxMLTS4bfNMkrkXbiAVVZ2fPGYwXyZk6sH2Q5bHHAaxqI+H
zUczIbDYZ85HERU1GH89y2fCq9vjjqh5Ah+88Jk9cD86YlDv7ZBi3nJo88UT
ahRb8xQ6nP/T/dkJj0nHc3HOj1cmxnrMfaEt+IKwwe3G03wm5ck2h9jsnz0m
5TInMIDSY+LhWCdsMAZ+lMe8Gj1d2Lx8K/yEHnPgjEl9at4WNl/ggekxg9zw
kMGvx3CPidsmDcPWnAgcU3S3z5y/5M+ee1ZGTPokPXivBT7zG3xHotZcBtSu
HXxm0SvHp3/UiDXXAGMaKz3m1/Xu2yl7rj0fwfb5wre/vI3HnJx+d15+IWT9
9QSKYJ9J+cIYS3mkz7wFxhm1iJhn8ATiM+Fs8OGvYfPlaSBsfWYz+Fq8FanK
pfSZkBq79KKIwZf9o8ecjgGqYYOXsVoVzCYfHfX6/oOKrPNzdoT41vk5irac
0DIMrF2iGOyTLFPMPva7w2dNW66IZ+9aOYplmJ+Zq/gcDnLKU8TbiZ75ijth
MHee4hXps9Rnl2crtu92VsVlg6YrngfxuaXLFWui8C9jzkJhX2Cuxnz4GPN6
/EKGDXx6HV8oUGwAp4+ZyxSD65JmAR73qxTbwnbB0hxF2PVpNCfB7Hryq6+f
dVeB9Touc6OJT2Nu+XLFvtBGcKrmQBxkVso8aya8QXmmH56PChWPuwF+sAJF
XOYdnKdoy5/FbYlvVysG+94fKwb7G7MVhz4LB9h0xSawXXP6RMXP4fL32ULF
qbgPuVwRL1c3ZSkG/SezFYM+i7GK67q8/u4jh7+taMvvroUXptcV28Jybtg0
RVv/EtxtDpuYrfgfrALFxuibixS/H7xs+HY7FSji5XBaoeKHeB+jOQrz0AsU
cXzaQRHFoc0/ean5J4sV18Eydb/ZinRfL2k7P+yNN7YhxWvehBunmOIn+CBR
SHEgPt84WdHmB0Zje8owxQV43D2jGPT93aq4yb2HK1euXLlytT7l/L/z/87/
b/X+n3y/JPl+yW3d/9vWBdL7E8n3S24r/p88gaT0/kTy/ZLS+xPJj0raciXI
90uS75e05VBI708k3y8pvT+zyvdLSu9PtPU5b6j/Px5FbpK9P5F8v6Rtnjn5
fknp/Ynk+yWl9yeS75e8fSk8IJBk708k3y8pvT+RfL+k9P5E8v2S0gsTyfdL
2vIUbMez9P5E8v2S0vsTyfdLSu9PJN8vKb0/kXy/pC0ngny/pPT+RNtzGdL7
E23PNUjvT7Q9H2H7fMnrS0rvz79e5fslpfcnku+XlN6fSL5fUnp/Ivl+Sef/
q9f/k++XJN8vuaX8P/l+Sdt1vLr8P/l+Sef/nf93/t/5f1euXLly5Wq9yvl/
5/+d/1d8dBgMPAkxyf/j8mZYgkn+3zZndeczYcJRkkn+f8mL8AMnmeT/j8X1
WZKZyf/b+v9xPMcRHpP8P9jm5PXlzC3t/zvffditbZYkmJn6/6X3z9T/PzkJ
gzjWMDeX/0c9l0owyf/T3AA5P8DWNyi9fyb/L73/5ur/t/l/6f0z+X/l/TP4
f+n9M/X//9Z1+Ukv/5Zkkv8P/liCman/3+b/bfNMbP5fev9M/l96/43t/7f5
f+n9M/l/6f0z+X/phTP5f9s8JZv/l94/k/+X3j+T/5feP5P/l94/k/+3zYmy
+X/p/TP5f+n9M/l/6f0z+X/b52vz/9Z9AYv/l94/k/+X3j+T/5feP1P/v21+
fkGvsfdWxIuZ5P+D8WFRJvl/3DY8MMQk/x/kJoeZ5P/xNmVdjEn+/6K3X/5P
q13iTPL/O+/3dNe32sSZ5P/3xy9anEn+fyLemCWY5P+D+6M4M5P/vxkrj0n+
H3XezzHmxvb/D8fB/wkm+X+8HUwfj0Ty/8HzaWEm+f8dcYBYJZP8P8ZZN44z
M/l/23Uc/tSaY+JM8v8n45iSGJP8/4d4HY4xM/X/73np99v3uTzJJP8PTydU
jk4wyf/jWKUhcSb5fzj6+o0rYTr/7/y/8//O/7ty5cqVq39YOf/v/L/z/+vd
/y+9v/T/sv9fen/p/2X/v/T+cv6P9P+4nG/vq/5/6f2JR1wCgQ6Jzd7/32Ia
iJRyq/+X/f9wF13vWE+tC2z+P5i3mlL9/0EOQ3Kz9/9L7y/9v+z/Lz5rp9NW
LkuqvsHq8v9bqv9/S/n/6ur/l33/W6v/t/X/y75/5/+d/3f+f8P9/4b2/9fC
gJ+46v8HS3zeB5Wq/38gXvgrVP8/xtpeEFP9/9L7S/8v+/+l95f+X/b/S+8v
/b/s/0etPzym/P/H+P6VqP5/6f2JwRz6hOr//wP3pz3V/y+9f6b+/1zMi4ip
/n/p/aX/t83/kf7fdh2X3l/6f9n/L70/Mcgtiav+f+n9pf+X/f/S+7v+f+f/
nf93/t+VK1euXP1LakP9vC0/d2urDc35tXl+W84vXv9vUoxh7t9wRbx9HDpJ
0eZdgxzYYsVJEE91QIFiq9nDwg89l6s4EfOashVP7HHvxeu65Chmp+8Sx0Rj
ikefDBsEnyvmwriFV5OKfXeCYNPJioHX76U4sQaI2vcUu6BnfVUxFoeA48WK
HcOfjogtXKWIuu2MOYq7drlizQ6LZyva8s6+hpi4ipDiUvT5BYqoufPKmGvT
d5kFlxQYXD79vobZD2LgHigyYHuGb1fBfPNmEBxFBsdKP5dkNob46H2KDMb4
HVLJRG02M2JWQbzrCM2gD7hQsQnEgH2Tr/hd6zfS/2UpYkzaAZMVg3XSVMW6
M557cVXTWYqjdm995bE5OYrB3Oc1zGAdUWjKp0NHt8888KpFXU9vFjGfN7p3
5u/nJpjBHOgyaz6s7Tn6IzCvb7Fi9hoIDp6meE4BrGDnK+I2yag8RZkLSLyg
BdQa5vfT4AtfaH5/esLtS2f4zA7Q/tgjamZjA6PPjAYbRObu0Os53W7wmZSv
GvSvx5iLUTSEzV7Yx1+o2HoX+CJoYnv5jQWKQf7yGmZwfigy9z9Yr22DZ1PM
K9PfrgP3KjGobd5MMYMc6BLrnH8c6/Kqz/wDG2KjZvxYCHTzmVPQs0SrjpcY
M/rVmelPOGIags5pElKUedvEOoN2fPDb28qYS3FfJ986n/8hiK1t7TOvQ98V
MXvusrrz/M98JuXYrsLymb9A/PVLUYNjXd72mbPv+Np0OD9qIsuv6nfmSylm
LXxjS6rOZz6zEraLu0cMpNneXOgx6XMfjecVn0n7I4H/SDEpP5f2GeV+I3k5
6eds89h3TZ+9D3zTZ1IOdXAe9JmUP/taLUha9Zkjdx73wKOzo9bcAdv7Fpy3
fGYb2I5oEjUYA1/mMfvDdujksDXvoA4GMPvMQShcIwY1WcxjrlwGQjZszcWw
zfMPfIzHDPqmw6Y+aHc/yYSf8uplRQbe1Tp/ekzc1v4pbD2u8DKxymMeD6ft
F8PWzxFj6s/xmdie3i9izbMIricesy/ESL4SNl+tfv+ZWy7wmLh9PSBkzSMA
i947z2cG+btR02m7u9Ifuc88cO3URy89MGoaTLyr+5AvfOYYOIyKotYcgeC6
5DPPhfT0cyLm1pdfuGrthT6zce116Z84Ytr2bJc+dfpMyh+35TsE+4dlzF44
h6vApG8G03eE+YrBPnmeYuDbNVvi/V0xkzx/4GtLmO3gnz8v1+Bl6Y0EcyeI
az6joCrPvIJJ/vDo3SGot0Ax/eY+aE7LUQz2LZcpzkKBnqV4Jl5vS5iUp2x7
Pg7SWoedH2PS+Tb9Je7+xy+rFefA2/LncsUgz3yRYsdnGxzcv/VyRdvcnsC3
lzHnLeg0tFtOvqlRAQnJPvNGzD+OWK+PwedZwnwc86TzzDjMYy9l0v1DO7jd
6bOGCbsNx36Xvm7jdaVI0TZfEbpSzrw9T7HL/M+S7zVbrRjFDa1Fig1ww32i
Yrtj4Qo6V9HW/xN8bz5WnHHmUX0bXTZVcUfMiZmrOBgOx+tXKPbHOYSrFZ8e
v/KLvU+ZqtgIDsfewxW74HnzJcVGuIHymqItd3hG6z22P+6pdxSDPpo5io3x
grJC8Tu4jA7MUQzy3rMVbfuqN+B+3BpFOq4l98ML1FJFPOwbFyjeA20Hj09R
DPZPVihCN8I9JXmKQf/RKkVbH4VtvzjrFkg4n6XYBU6jDz+vOBFPsIMV++N9
0FOKQR/l7ZquXLly5crV1lDO/zv/7/z/JvP/5PslyfdLjj5nvwOvWpRk708k
3y9Jvl9yW/f/5Pslpfcnku+X3Fb8P/l+SfL9ktL7S/9P3p9I3leyuvw/+QxJ
6f2l/yfvL/2/7POX3l/6f/L+xLNRjPjs/TfW/5+KgifB3l/6f9mfL72/9P/k
/aX/Jz8r/T/5a+n/yftL/0/eX/p/+blL7y/9P3l/6f/lc0a2vlzp/aX/J+8v
/T95f+n/yftL/y+fO7C9b9L7S/9P3l/6f/m8g/T+0v+T95f+Xz4XI72/9P/k
/aX/J+8v/T95f+n/5XElvb/0//JzlN5f+n/5PIv0/tL/k/eX/l8+jyC9v/T/
5P2l/yfvL/2/9F3S+0v/T95f+n/y/tL/y+c7yPdLVpf/t835J98vSb5fEo7m
rF+Sqn94U/t/8v2Stnwc2/NQW8r/27wo+X7J9MUrq8HEpLo+DoG27DFx9v5E
2/0D+X5J5/+d/3f+3/l/V65cuXLlar3K+X/n///F/h/12N35TPL/2+H6Ps4k
/7+sbfENn97lMcn/T7562Y57+wlmdff/2/y/rf9/Gq6TfCb5//2xjznJ3NL+
/3R8zjvOzNT/L71/pv7/wJP5TPL/tjm61eX/bf17qNd3SDIz9f/b/L/0/kTp
/TP1/0dgnFb9JJP8/3f4vHiSSf4fbNvaqQlmpv5/6f2J0vsTbXN+pPcnSu+f
qf//xq/2Kzr+UI9J/j84vyaYmfr/bT5Ken+i9P5E6WeJ0l8TpfcnSu9PtO37
2OYjSe9PtOWM23I5bfNYpPcnSu9PlN6faJs7ZHvfpPcnSu9PtM07kt6fKL0/
0TYXyzbPR3p/ovT+ROn9ibbjSnp/ou1zlN6faJtnJb0/UXp/om0ekfT+ROn9
idL7E22+S3p/ovT+ROn9ibb5Trb+/71Au5+XYJL/R101PM4k/9/k+UT6vzhz
Y/v/bf7f1v+fqA07qwkm+f/30ncvXWvFmeT/gxzzMJP8P8bN9KhgZur/t/l/
W///vrgBHGeS/8er4WMRZib//yAcFkdHmOT/bXP7bf3/Nv+/qfv/MX7ipyST
/L8tXwnHdK4rYTr/7/y/8//O/7ty5cqVq39JOf/v/P+/2P/b+v+l95f+X/b/
S+9PhPTgX8cnVP//IBxcm1T9/7Lvf2P7/6X3l/5/a+n/l96fiBqoT1L1/9v8
/1D0c2tV/7/0/pur/78f+t246t+T3p8YePTkevf/b6j/t/WBS+8v/b/s/5fe
P1P//5by/7Lvf2P7/2Xfv/P/zv87/+/8fyb/b+v/l95f+n/Z/y+9P9E25z+4
T4mvd/+/bX649P7S/8v+f0iBuaB1TPX/S+9PDD7PuOr/t+Xj2J63kt4/Y/8/
XmfWKP8f5DHHVP+/bW4/TONrcVtivfv/bddH2fdPtN0/4PbEQ0nV/y+9v/T/
sv//SXyQJu76/53/d/7f+X9Xrly5cvVvq43y/1sgz3dDfx6b/7flHSM7aVqq
P/raAUayBi6Qeiva7nvPhXEvXcOKL+JzwVHFXqeC+M1X7I7id7liN8zbXKF4
BAZWFis2OuarRyv3TCkOXgsBoJ8rHvYsLIhKFW3v20TMR3rFSEK67n3zPlJs
ADF49y5XDPrVQoqBT8pWfBf7qCYpBnmDSxR/Tq86k9cXKtr604K5AWuYaAGy
Cs1pA95Ir+R95qr06qLdfdGq/v4U87zV30yq+XvUoM7u4zN3vw3+wgjPM5Fz
TTBd7opK5i0DwQxEDS5XDggp2vJMg7xgzWA9lKUY5PiNU9wD++EmK8ZwHaAZ
5LUuVwxi8woUMc55tseMdmw18oo7w1X+Yy2zOYqqUquHDLx3gWLwPctWrHEe
eLvpirZ16y9vX5b+b4ViAoVOoaLtc0Ft9NgaZh+c91FoIqdDkq7P3PvK4aWH
dosasDSPjUwxxy0cf33sxBKDh1OyknkaCptilVNIlLmPRNs+450/VJ76ec08
xV/OOK/e3BNizLG4Txoy7+e9kD6D+EzKOUUd+Y7PrFwIQbZR0wJfaIoJu0Ev
NS82qJ18n7k7BiVETTY+OFLJpNzYq/ud+dIT+0QUD+kMCZmFitd2fmXncQ/k
Kwb5n2uYa2Fbp2aRuQHzpX3mEShqIwZPo7ukmFPwvFdsfV2X1GlZFj0rxaSc
62MeA0GUYk7FAR4lZsqYIemlc4oZ5IEWG9hlK/nQZ/aF09tVUXMktNE+5zPf
R68XNXvA23hQihnkThYbOGuNmOUzKc83eH99Jo7BeTVindN+OMRqzvGZ78BY
jLuiBjXKvinmnPTZ9u7Dis1c0KzdfWb6zUifASPWOfzwp25tk2Ie8xY8GWV/
n205BbY53hehb/CZP8By/wD7+4mxl6U+M8hztJ//wd62neIzMV61iz3vw/Z5
2XI0gtx4n3nCzYV3X3hp+v1Pn1WmnOYzKR8Zby/28ZmU8/jtc0fOb/9NjDkM
czwjpgDzPyuYdF0O9oHXMFE3ji40sLs0vonHbAKniR4hs9/3dww45QGP+XQu
7DCHzPja8Il7zCk14Qsftn6/DsINuBRz5CtQ9u/FkH27PnRTfZ85YI9hB79z
YsQcixd0nzkd4r7HRg1q+1Yp5g6X46Aggxq3kc9s4x/0xdXXRcyO6N2TzNt2
AHFZWOVjS5hn4L54ntkdB3IlmH2wj6LA9F187reRr5LM4J8tMg3w/stjvvnz
Z31e6xgyY/4Y1LblHR6TzsOfQpxs1GOeBnHr74er5sitYR7eCjaAC81OuHFZ
yvwYL7h55ic43Q9eqRhc58uYg9NnyRaT8k0F9mt4zAZ4IQibFrhR7TEprzOY
A1ak2ATnR61ShKPp13XLFUeUQrDyAsUgn3al4jl7wwZrnmIK+zjKmCNwoF2+
mYXX7RgzuA6HzCi8T/SZr8TgwmbPSbkR+1xizD5YEQN3Oz9Uxpi0b2WbK7im
HGq1InS/HNQ4VxFj499aprj2+VHpd3yK4kHosz9WnHjx41fOXbBaMQsO1zOX
KwbrmIWKdTHXfZpisB8yUdH299To3mNXs/dyxeA4W6y4K37N3lashc9PvqQ4
sRnccL6qeA7ed4xQzMOGmeGK/XHA3xTFKN7nTVV88mG4oq1SLMLTa1gxtutN
3037IKSI8ddfRRQnY99IQvFcvD8rUoy9CgHBYUXbfMvgdU9XrNPgx5G7ty5U
pPOc5LQuu6f/CyseiY0BFYqNYPut20rFoH/nI82Wd6RXkncrBvMShykG6/7+
ii4X2JUrV65cbRXl/L/z/87//23/T75fUnp/IvkeSen9ibZ+ZlhVdRrqs/f/
t/h/8v5E8v2S27r/J98vSb5fUnp/Ivl+yU3t/8kzSZLvl5Ten0i+VlJ6fyL5
fslfodt/d3+9/f9vZye/vumchPL/5Pslpfcnko+UlD6aSL5fUnp/Ivl+Sek3
ieSnJaVHJpLvl5Ten2jr05ben0i+X1J6f6KtD196f6Lt+LHlFNj6eKX3J9re
T+n9ibbzv/T+RNvzPrbPy/YcjfT+RPL9ktL7E8n3Sw7BBk5PXZfJ90tK708k
3y8pvT/T8v2S3p8ovw/S/5P3J5Lvl5Ten0i+X1J6fyL5fknp/Yk2Dya9P9F2
Hpben0i+X/K9AUt6PvBlnL1/Jv9Pvl+SfL8k+X7Jrc3/k++XJN8vSb5f0nb+
Id8vaXtuxfl/5/+d/3f+35UrV65cuVqvcv7f+X/n/xXxMelTkkzy//R8unxO
3db/L71/Jv8vvX8m/2/r/w/8scck/49jdWommVva/2N84nERJvn/P3/pdPQ1
XySY5P+l98/k/239dUfiPIMyZnX7/1Wd4cH5CJP8P+r4Nkkm+X/b52Lr/7f5
f+n9M/X/F4NOXZZkkv+fiCeoBJP8/39QiMeZ5P+DuUpxZqb+f5v/l94/k/+X
3j9T/z/5f7kPsAaPxyRT+n+5D2Dr/5feP5P/t70um/+X3j+T/7d5Tpuvlh45
k/+X3j+T/5feP5P/l94/k/+X3j+T/7ftD9r8v/T+mfy/9P6Z/L/0/pn8v+3z
svl/6f0z+X/p/au7/196/0z+X3n/DP5fev9M/l96/0z+X3r/TP5fev9M/f/S
+2fy/9L7Z/L/0vtvbP9/zhNvH7P/LZXMTP3/G+z/cXBh8v9Y5f9xnNzISubG
+n+YUvTqyVEm+X+MiXk/ztzY/n+b/7eefzaw/9+WK7QMN5wqmeT/T4DlzcEl
TOf/nf93/t/5f1euXLly9S8p5/+d/3f+3+r/Zf+/bT5tGTYOJlX//6b2/7Lv
X/p/2f8v/fKW9v8b2v+/sf5frq/PvLhTr0cGJzZ7/7/0/tL/y88FtyceS653
/7/N/9+GjeMp1f8vvb/0/7L/X3p/6f//bv9/dfl/W/9/dc3/sfX/O//v/P+/
wf/b+v9t12Vb/7/z/3/d/7+l/L+t/1/2/Wfq/6975Ct3T+2QUP3/cu6PnP9j
9f+i/196/431/63x86lU/f/S+xPxtNU9ofr/MX6hrbfe/f+28w/GIDX3Vf9/
sH/mq/5/W66Q9P6bq/+/XxeYTFXp/L/z/87/O//vypUrV66qq/7Se29Cbitl
+/nzzj+k887dNDcwryfIj33QSA6GmLHikYq1MPdtuWJLXHiUKAZzeIsUs9Kr
nfkPL1MciHMeshSvgNu1uyOK58Ft98y4Youbnhq/8ouU4prpP73x4WFJxXl7
gNFYotgA11vPKD6N+UjjFEfA7sa7kxUhfe3da3MUT8IFXZ7i8Sj252s+Vac4
58cpira8M9v95JvnwAZNgSLYhnrHesyak+adsuelIXPH2HvTS921zOaN5lSO
/rnUoJbabS1zXDuYDFtqcLzz8T6T8iLxtx3iM4P75IjJwbxln0m5qLhsm17B
3B7GcDcOmZtxwHahYpD3l68Y5PouUqy1D9QkxVYQY1ZnpuLTmJs3QfHBL7N3
mzRvkeLQujumlyAFmu//cM9Ru8eYUVgevRQyGCdckmLm//Y9jMo23XD+RiWT
/JgtT9l2PHTBdf1ixXXp1b1341jFn2BsdYdpirY5OZfgIKcixbswJ62cSev6
J3Efxmdi7GEn+5x527zr5ZhnHWPS/qPMpyTKnEWibT0V5BKWMZ+CuOx7C8z5
LaB85icQI/xYxIA16rc6xcRl99ASg2PMe6aYP+Ag9GKzCstnUs7pizjHo5JJ
uaK2vOARGCBdqPjuaAjgzlHMh2XhG6VMbNM8MN9grGB5khms04tMN/wNHrPh
pxXplXfY+rngY0T3pJgY2x0vNndh4GaK2RJiTvsWGzw8rkwx/WZwoimu2vdL
MXeB+NyGxSb8Vu9mNSMeE5f748IG20pP9ZnkdW05JsF+kc/E//ceUXMFbEe9
6zNhN+WtNlFrvoPtuLXNXbflR7RFH+AzKad1N9y49Zn3QCxmccTgy14aY2I8
aM2I+bPB+ekrX4w5YSqKToOPsfSoYOK2xtqiDZ5XDxZvaL7HxPjK18LmKMwF
9ZnQVbDfhP/zftL/2fImHoGvQV2f2XkWBExGzBPoh3xmj/i1+a0WRKzvD8Y6
TvOYlEccvL4KJnn7IN91DRO3ry8sMheecMHgvRasYf6cvnv47ewisyeKyxhz
FTyWUxYy8FTNjg96zAmHwcZjyDyEebIe8zrYxs+3z7HHGN1aKSbGS9YvNvj1
m+YzTwuEeFWeqsfscdktkxvFw9Z8BLzcn+Uzj8cvWsSaS2L7/tryLPDyP9xj
wlNIjzYMW48r2/u2Q5/LX2x6oce8BbZ9ng6ZL/DBO49J+cW2efW24wS6Mmb+
nmDi7c/3BaY3XPbCSSZ5wmj6avPr4z4zyPGNmsanQsWYBxTDnU3IbDcz0rHV
yALFn+Btv3i1Yk+cK7VSsT8eN7MVL8UNypWKpYVw4chXrN8WJi1p2vpz8DG0
nmuYQ2H78ZNCM71g1h1fmxjz0Lpreuf9FrLOmbz4jGfO7eLlKf4OjyF01Rx1
MixkND/FE8wKxby6w1udcMFExQbQTjRzumLR/H1WrL19ueIKiAkfl6fY4rme
qV/H5yt2St+VXVtXczTuXy1RXIA5tJMUA/86VrEhrj/GKwbrj2WKwX23ZrCv
Pl6xC+alv6yJ1/tXFYN+saGKE7H/6GPFvkdBJ8iHimV4PC5U3Avale7OVzwu
fdf9+lkFirf1fu+AGc9pBs/zVCgO2QtWvGFFfNl1NF/GhpJixcFwe3P7YsXe
X5sO5/+0XJGuP5Kjv2v9xnetcxXxNH54ieKSX+AB0FLFB/CB0YWK5+D5oJ9i
g76NLiua/6hifzhdl76gOBovM08obk414sqVK1eutuFy/v+vy/l/5/+3gP8n
7y/9P3l/6f/J+0v/T95f+n/y/tL/k/cnku+X3Nb9/1kowj32/kTy/ZK2/tht
xf/b5vpK7y/9v+yDtfW72p4/qi7/T75fUnp/6f/J+0v/T95f+n/y/sSm2Afq
s/cnomYa4f9t/x8c7wn2/tL/k/eX/p+8v/T/8nOR3l/6f/KG0v+T95f+n7y/
9P/k/aX/l33dthwT6f2l/yfvL/2/fL7DdtxK7y/9v3x+RHp/InlKSfL9kuT7
Jcn3S25ov7r0/tL/k/eX/l/2/dryJqT3l/6fvL/0//L9kd6faJvbP6A9PCCT
ZO9PvAget3ozyd6fiJrvTo+9v/T/5K+l/yfvL/2/7GOX3l/6f/L+0v+T95f+
Xz4fIb2/9P/yuSTb91d6f+n/yftL/y+PK9v7Jr2/9P/k/aX/l/3qtuNEen/p
/2WfMPl+SfL9ktu6/yffL0m+X9L5f+f/nf93/t+VK1euXLn6r3L+/6/L+X/n
/9fD///ZEzoPi5nke9/D53c9Jvn/0aAtkgkm+X/p/YnS+xOl9ydK70+U3p8o
vX+m/n8cq3Frkrml/f9A9JqFTPL/OKbhlQQzU/+/zf/b+v9vxfVNkkn+33Y8
VJf/X/D4/WP+GFTCJP//w6Xnrv5mUpKZqf9fen+ibQ6Gzf/b+v/3wvNTgkn+
P5w1ZcyQ/sVM8v8dXlj0fcOOlcxM/f/S+xOl9ydK70+U3j9T/z/5f7kPgI+p
t0wyyf9j/OwRcWam/n/p/YnS+xNtn4v0/kTpDYnS+xOl9ydK70+0zXWxzTGT
3p8ovT/RNt/Jdtza5q7Y5kdJ75/J/1dX//+G+n/p/YnS+xNtuZ+2eVPS+xOl
9yfa3h+bb9nU/f/SXxOl9yfa5thI70+U3p8ovT/RNh9Jen+ibS6Z7ftrzbMW
3p9oO65s75v0/kTp/Ym2eTW240R6f6JtTojN/9v6/3NxHFKCSf7/on3e3qHR
McXMjfX/MF3kymOjTPL/zfokB7TvnGCS/++IfjrBJP+/M55fE8yN7f+35Uyl
L67pK2ycSf7/0q612jedGmeS//8Uts33LGVWt/9vejtM8oowyf/Xw/ejlEn+
P7iPK2OS//8QgxdKmc7/O//v/L8rV65cuXIlyvn/vy7n/53//xv9/9L7S/8v
+/+3Nv/fFudTevo5AOH9t7T/t/X/K+9fRdn3L+f/SP+/B7RhHpRS/f/S+2/p
/n/p/Ym2ub4b6v9tfea9D4ABzZ7q/5fenxh4mrjq/5fen1g799mW289LqP7/
Te3/Zd9/dc//kX3/zv9vm/4fT5e7+qr/f1wKBlx7qv8/vVjfv8GPSdX/L+f+
yPk//zT/b5vbL/v+ibLvnyj7/p3//3f4fzn3h1j6M5zAPdX/L71/dff/H47f
m0rV/y+9v/T/sv9fen8iXn76JNe7/9+WMyW9v/T/W0v/f3C6jKv+f4xFaZ9w
/f/O/zv/7/y/K1euXLmy1Ybm21ZXni9ely7Q3Fbygm3/bgJex1WaG5j/a6vg
vneikfy96/KTXv6tQPG9AUt6PvBlVHHoE/uc8cOl+Yp5oNPuX6I4A+KUHl+u
2OaUVPfpBSWKwXLXUxx0JyamKv6KDY+lisH66X1NvI9+ShFjwDpNVXwb//0l
ivdgHtpSxQa4Plqk2DH9btd6eJ4i6uPJcxWD3LA8xa+fBFEZUrSt14J5DjHm
FyiKIgZj1R5JMYP72GKDt9GHrmUG8xRKDaTKDfnCZ465AARB1EBq3uVH+sxb
fm4Poxys/czYZvl2JZP8w+Kup6eXtEWKt6VX8U/l5inacmyx/fuOeYrv4s8x
VTGv1YIzPjpqguI60AHt5ijeANst0/IUz8d8tnImrL7qJQrMkTs/Ouz853wm
5W/Ct+D+MWuZe2CuXpnpcvzPS17sXMkMcqKjBmObpxQoPgca9Jo8xQbf/HTK
6HOyFBtfW/fOG7+aqjgaj4/ZilPhr+u/StE2B+nuknPG7XlPktkKB7cUWueu
w+7P2LjPxBi0+VFr//NuGAuXr3gG6Oz9NFscvl3FnJHZirVOaXffiFmrFNvA
x/96BfPn9Lu234EhzimWecV4+js3xeyJuWnFpkP40xGxhT6zbvroGfVQ1ByN
czBizD8mvPT+D/eETVPYJjk6ojhtNYiOkOKp8GNdVaBYcdmg4b1qx5h3QPzj
myHrfHvcjtvXZ9L5Ac4G92d7TMrLo9xqmV8d5F76zJEonKJmVWfYqEoxg+9p
iUFNE/GZ5XiiiRrcrj7IZ74HsdSnRAxq3Ht9pnfARQ9PSkbM3vi5+UzK/8V/
5hefSdcvXPa3rGSidt0tan7Cz7mCGZy3ikxt+FhXFyhegoNvChVbQxzpDprj
4etUWqC4Yi1sMGna8p3XYe5nnmLgP3IVD2l6WPiad/IVbT9n8PyS5iIM3NQM
jo9y5rrV7z9zywWFxsOcUo95PDYKhMznfWCj02M2xYE0Yes8+RFHw4aUzxzS
GO4IImbw2pKbB17kM/tPg42WSFU+fIxJOa0n4gWqghm7967Q6zlFBl/2Yo8Z
zMULG9Qih/pMSIt/sWnEHIEHvMfEcWftwqZyz11Wd57vMfE00zdszrwQgsg9
ZhHo7e9DJoL7bz6TctJtORG2ef4b+nPa8gIW4fXWZ3rYaJD+vsAYpyNSzL1x
/7XYTDvzqL6NLvOZq+AyNSJize84BK8/PhO6GA7sFzHbQYx0X48JT0WN+jRk
vsMcTo+Jl8cHwwYvb/19ZjbmyEYMavJlPjPIfY+aX0Gf7e4zKVd9NpbHjHaE
K1W46nu/hnkdXB73K7JeX+BVvtV7tWJzfIErFYP7yizF3ujjJykO7ZaT32vs
EkWMf56eq3g2fBxFmjHMI9bcCYO88xS7Y+N/rqIt1zXYZ1ypaJsL1L7p1Oz7
5uUq2u6f22Kg8nuKwfM8WYpwlbh4XZ7i6bhxkqsIV612J+UpjsXrUJHiPPT6
+YrBfWWWou0+P4YbB3MUB2IfyjzFWtjYsEKx73HwjV6s2Aj7jN5QjA2BBxCf
VQz6xUYp1sDBbU8rLsDrzAuKDTCQ/QPFIGd4hmKQ37tY8RE8YeQp2vYN8bZt
/3LF4P6mTNGWO9wd1zHLFGuU1F+Ue/48xePwhr9QMXtGi/QtY5Zi0EdWoHjM
6XCnUqJoywcP9kU/VrSKAMvnaNsv+Fuuw5UrV65c/fPK+f+NK+f/nf/fjP6f
fJ6k9P5E8v2S0vsTyfdL2uaZ2/oPt3X/D109b3yXYO9PJN8vSb5fkny/5Lbi
/8n3S9rmrpPvl7TNP9/U/p98v6T0/kTy/ZLS+xPJ90v2WFin58I6/nr7/1vL
4UGnhPL/5PslbfPtbecH6f2J5Pslpfcnku+XlN6fSL5fUnp/Ivl+Sen9ieT7
Jcn3Szr//9f+n3y/pPT+RPL9krZ58uT7JaX3J5LvlzTZMEgsyd6fSL5fUvp0
Inl0Sen9ieT7JaX3J9qeE7HN85c/n/T/8ue0PS8gvT+RfL+k9P5E2/M70vsT
yfdLSu9PJN8vKb0/kXy/JPl+SfL9ks7/O//v/L/z/87/u3LlypWrf3U5/79x
5fy/8//r4f/HwW36oaVM8v/LcB66xyT/j3roUY+Zqf9fev9M/l96/0z+3zbP
xNb/HzyXn2SS/8fH6a8oZW4u/4/afUQ+k/w/rFbqrokzM/X/b6j/t/X/Qzfo
d2UJJvn/UmizLylhVrf/h6dAmi+OMsn/23IQbP7fNnfF5v9t/f/Bc/wJJvl/
HLMyvJRJfgY+pd55YSb5f3wcfVIlM1P/v/T+mfy/9P6Z+v/J/8t9gGAd6TGl
/5f7ALb+f9t8G5v/l94/k/+X3j+T/5feP5P/l94/k/+3Xb82tP8/+i4Mykkw
yf/ftxNMgEoyyf9/lz76ttspySSvjmPg1iWY5P9xTM/UBJP8P0xHuemcBJP8
P/ytY6JxJvl/3E7pGGeS/4epdM2vTjDJ/9t+zvo4YC3JJP8/CeerJZmZ+v+l
98/k/23zZGz+X3r/je3/t/l/m1e3+X/p/TP5f+n9M/l/2zyfDf05bf5fev9M
/l96/0z+X3r/TP5fev9M/l96/431/7b+f4x53zPBpOsLjpM7q5hJ/h9vr9PX
eWJ1+//0l3jh+OtLmOT/e8G4+9tLmOT/4agbdmucSf4//SKH/rggziT/f8xZ
F3fq9UicSf5/3Qfdj4i9Wskk/1/yFAwWizLJ/4/Mgs6RUubm8v974lyZUib5
fxyzeG2cSf7/AvzCxpnk/8f0ePXkE4ckmeT/0zep6W9aGdP5f+f/nf935cqV
K1f/+HL+f+PK+X/n/9fD//f79rb4tflx1f8vvb/0/7L/X8712NL+H3WP76v+
f+n9iTCdPvxpfKvp/5fenyj7/jfW/+8K49rf9Lea/v9mGNRcqfr/bTkI1eX/
bfPPpfcnSi9DPAwFSUz1/0vvn6n/v7r8v63/v7rm/9j6/53/37j+f+n9pf+X
/f/Sp0v/L/v/pfeX/l/2/0vvL/2/7P+X3l/6f/lzSu8v/f/69v9vKf9v6/+X
ff/O/zv//7/8/4MYDJtU/f+268v7oP0rKjd7//+LuKEdV/3/FS9/fOZRfeOq
/196f+n/Zf+/9P7S/8v+f4ybv6FS9f/bcgE2tf/H29Zf46r/X3p/6f9l/7/0
/q7/3/l/5/9duXLlypUrUZvaz9v+/q2tbD8/+vtLFAMPfYsm5vn0UKyBnula
TduPg4J9kZG05dAF8xyKFF8KGmkVT4Tb6y45is/eAnfWqxTxtqNukWIB+ldf
sfbDcOO3VjG4L85RXICBsE8p9sU8q7cVG6RXr0d/Ol/Rlte2CBc2SxSD/OSZ
ijXOgwEH0xUhTW+XLosUR0NcZcM8RZvH+Br00+GaiSbPp/8rVLTNo4hgbm0F
82n4Z2uFDOqGA1JMyuvEsckHrmUe9ix8AKXmK4jLPSXFbI55dcUGdUb3SuYJ
N8ONe9R4EP/bJqTYayncMBcodkKxnK8IaW6jb16u2BvzbCcqButRzSAfb6Hi
d6DnB+Yooia+qoxJOcXwKo+IeUyM+ZoVNhgX3Xwt88sxMLGh1LRB0ZBiUp7s
ydhgGGPuC1r3grDBNr/RhYpDO8MDBLmKQV7oUsUgP3qhYleIQ9xjiWLiERBu
JUw6D2AM8EtJZjBHo6gqfzvFLAft9FSxQX1yWYo5EvcViqv2s2JM8nJTO0DH
e64ixtBem68YzL3JUtwZ3/ClirAKq12nnBm8jgLrHOkToo+l/0sxYcr3c38W
G4yR3CPFPAK2g2oXG4yNHBtj3gjxiNlh6/yrYM6JZk7zB5/stF2B4qAjYQel
gnk2Dk4PGdy2KfOY/TFYMmydg22bB45f++U+86MS2EmJGtyuuCbFPBkD0YsN
pDh3uDXFfP8ASMQutuYRtMDBKCkmpFG+1LzY4HbQBz7zihmHPPHZ5VFz2MFg
/H3mmEPzP15dN2KdN46xJs1jTHjK5vifQ2Ys/u9CRYyxKMlTHLU7GMkcxTXl
UKsV3y6Hb3SuIm7z75+n+DDEaiZzFBetgw3f3PXmeQVg5jR/Sh99r2blKY6u
f1L5ETvnK+LX4JscxSDHPlcx2B8oZ2LM+9iCqvfVY77X5Nd19e4LmRqgy6/2
mTe+1ab9qnciVT7PZ4Zgt+OFqBmFuaM+k3Jg4Xc1blLBpJzre0fMKvujgce8
pE7LsuhZIetxMvDP4vqLcj1mX7h8vRKu6lNIMr/HwW9FBuNCv04y+8x7I/3O
FVnzDlrhA3A+8xt8gCJqzUmh/VC5L4qxKZ97zCI8/YfNRdgw4DN/gNvJA+x/
fzfM//SYlAN+8zmPNjz9PZ9J12uMZb3OZ1Ie9MsYYO8xIV225m1hgxq4oc/E
x7ouihiMLX/YZ745GQK2IwZjkn/wmZ1hGzAVNVMehEYOj7kMr59hM+aPQW1b
3uExg76RkDUnAi30f2LM4P4tZFIouvMVu+B1aKWibb7c2TtBomeWYhnowkPm
KwZ5sB8rtn2x6YWzh01TbALbkN8sVAzy5JcpBvOgVio+gDcmeYo4jqs0VxHj
gV/KUQzul3MV4Vuz87gVir9B/MSA+Yq74vE4QzEP79+nK+Jtw6BlirbzrW0u
UJDvWqjYqXTgnc8UFSjedEPWoLlX5ikGfT05ivApd945S3EEDkqbq9j9w+d3
O2TVFMW2uP6brdjrkcHpr06WYn+8bsxTbNATHjR8UnEBxLE/9bImnJYb36U4
GvdTRig2wnXta4oL8P5vrOJovG5PV+yJOfDLFG37j881gBuBCkVbn8k7J043
2W2XKzbE60dI0db3lV4UpW9xihTXflSRXqHlKCbTV9sGEwsUZ98BjVgxRVwG
v75EcTBs29SfoxisF0crBuvRVxQb4PX8ecXNqUxcuXLlytU2XM7/B+X8v/P/
26D/fwn7PT32/tL/k/eX/p+8v/T/5P2J5A8kt3X/j2NbeibY+0v/T95f+n/y
/kTy/ZLk+yW3lP+3nQek95f+n7w/kXy/pK0vd1P7f/L9ktL7S/9P3l/6f/L+
REiB7pny2PsTbc+/BH1hSeX/p+NzVAnl/3td+/6Nj+3isfeX/p+8v/T/sg/W
Ng9cen/p/8n7S/9P3l/6f/k8gvT+0v+T95f+n7y/9P+y35h8v6Tz/9Xr/8n3
S0rvL/0/eX/p/8n7S/9P3p+YPjhHvVWeZO8v/T95f+n/5XEivb/0/+T9pf8n
7y/9v3zeQXp/6f/lc1K256Gk95f+n7y/9P/y75feX/p/eb2W3l/6f/L+0v+T
95f+n7y/9P/k/aX/J+8v/T95f6LtORHy/ZLO/zv/7/y/8//O/zv/78qVK1eu
NqCc/w/K+X/n//+G//8K5zqUMMn/U46hzDOEaRQFQ5NM8v8Lx8MAjSST/L9t
HrWt/196f6L0/kTp/TP1/wd9oh6T/H8wzz3BJP//PujP+8uYm8v/D1oDD9jH
mZn6/6X3J0rvn8n/2/r/G/w4cvfWVyaZ5P8xLvXiEmYm/w9PEze6t5BJ/j/v
BRDOFcxM/f/S+xOl98/k/239/81wMEicSf4/yEUoZWby/8GcpxgzU/+/bY6E
9P5E6f0z9f/b8i/I/8t9APL/ch/A1v8vvT/RNgfDNg9Een+i9P5E6f2JtnlE
0vsTpfcnSu9PtM0bsfX/H/YfqCST/H/gh+JM8v+n5926w2unx5nk/5fhPJJK
Jvn/mfDY/z1xJvmo9MlrzB+D4kzy/zie4Ow4k/x/MN8oziTPb/t11OIt40zy
/8F5Ls78b/+fEMw3Q2G8iIkzyf9f9+MJf9zSI87M1P8vvT9Ren+i9P5E6f0z
9f9L70+0HSfS+xOl9ydK70+0zTuS3p9om5Nmy0OX3p8ovT/R9vdL70+07ddL
70+U3p8ovT9Ren+i9P5E6f2J0vtn8v+2/v/F534b+erMBJP8/7hTYVBeJZP8
vy1fZmvz/3g6vjbKJP+Ph/u4Eib5/2C+UAmT/P9Xj0LSdTFzS/v/h8xp189K
f5+I5P9t51uaCyTnA+FlqWmSSf7/T9jW/iLBJP+/Hd7Axpnk/+HiX39RMdP5
f+f/nf935cqVK1f/+HL+Pyjn/53/3wT9/9L7S///d/v/Zd9/dft/m0+Q3l/6
/62l/196f6Ls+99Y/y/n/hADX+xt9v5/6f2JqD9mx9V5oLr8P44jX+yp/n/p
/YlXXLTP2zs0Smyy/v/q8v+y77+65//Ivn/n/9ev/196f+n/Zf+/9P7S/8v+
f+mhpP+X/f/S+0v/L/v8bb8uvb/0//+7/z+h+v+l95f+X/b/B2OUE6r/f1P7
f9n37/y/8///y/8H++ie6v+X3l/6/39a/z/q12Fx1f+PcVD3x1X//xt4Hxrf
6vv/bedbWy6A9P7S/8v+f+n9Xf+/8//O/7ty5cqVq39t/WX+7//ghta27v//
cl9A5/yeg0FFdysGuT19FYOcz6GKqI3vWqlYCWNdjixW/BBivq4pVJQ5YcQ5
eJ+SrRjkxGreinliFYqB3/1UseSp3PQd/xrF0dgX+5jiAtCs015RRC0+dJKi
zc/b1il4m1t3oWKtfaA0besXW/7XIvRCeYp3dx/yxYMmpNgH8ygLFG3zc25H
UZyn+MDeECiWo5herKRXYuXM3PxeY++tKLDOOYdV5cQRKWZ/3FgqMbDKKvnQ
Z/atedvLL1wVNXNwDkmMSf5h1Kc7fTnmiELFtjgIoECx9ts7NDrmq3xFW57a
CPTN4xUxNm/+QkWMW/tlteKLODepnNkC36gCM+1M+JM+k9YpH2HwX4q54GF4
4qLEgC15+YUUM6vI+2GXeiUGxzAMSDErU4e9cNIOJeYYnKtQyUwv1uoU50QM
xm2eVqS4Gwb+5Sna5pzInFFiMB+jnHn2Xed98NHFhebnN2DjwGdeATFud0fM
823hxJVigq2+66Ni6xzpo/F/VzL/wAEYUfP4SFgg5yt+djkIYc2iS7rWat80
S3EpaN8lixQfyE6s7L99vuKnF4Mw9Jin4YCKsAm9ntPthqwUc/fDe33+2mMl
1lyA1augKplt9sBPrGpfJaR4NQ7iKVJM4j5eOZNyWlvhxonH/Bq2z7YLmZoQ
U93FY0JK6IWzQwZ1QyePSTmtud1AaHhMyilGLZTtMSkXGM6KbzzlMylXl/Ks
Za41/K6z5/nMVRBPel/UzPgJDhyfmReu9fAh30RNnSmfzDz8aJ856CLYKY1U
7Rv7zM6zQFhEDGqaK3zmAfiDRQzsBv7cvoKJcXmhIut5ck/0Y3mK6Tc7/Umv
VpT5l0Sbl4M09IO+WKpYF33UCsXGOE9spWIWesvlinnPttx+3v1LFG0e41P8
Iq5QbIS+dKXiuzjAJUexRfroSKzMU7SdNzAm/FSfOQzzRCPmO/TrPrMNbHM0
ifJ+qNwXDa4PHhPH/pwfsh4/PfGBIZ/ZFL5OiWjV+dJnUk7uPTWO8po18plt
0p/W1ddFqvY5fSbl8Np+/bfvYWPXY16XD0YnbPA2yHjMXPy8QuY/+IX2mO/A
dug06jv3mUGOadSchw9++UzKy87/T+nPD9/mM+l6Yfv9kzCH02Muxg31sIFp
Yj1O9JlHwHbi1fbXFdw3eMzX3gIhG7LmFMBV+9HKFBPbRuaUGNhVOnlhjEn7
Pjfig5IxJp3ftkvfnXbpW6i4G7TL1MtThN3wcK0cxRYfwJV6tWI27j8sVewO
Y5Cem6zYCPti5im2vWVyo/hSzcF4vfxQMZiH9oFiDL3sZMVWcFq5epZiGeau
ZysWwO1dPFcxmH+1QjG4v8lSrIEX/FmK7+IcuQ8Ug/zVjxXfxnWepu363nbQ
8F61H89T7PQf2NHXtN1XBDm0hYr/wYD2PMVOuA7IV+w4cacOE3daqbjj5XDm
makY+OaPFYPja5qibV8g+H4vUxwAp8tpixWDfaexinXRB09QtOUIZ+P91BjF
3nideUfxabgdnDlREbf5Z8xTtOWb1zsWgqsrFH+E7bFJcUVbv8QvEPcbCSse
+xic+VcrXoH7cksVYXWz9sIiRb9ZozmVo5cr4u3FxJjiDbhOzVdshfePMxXz
6g5vdcIFExXXvfZY+sgeptgFTr+jBiv+tb/ZgH5OV65cuXL1zy7n/4Ny/t/5
/3+Q/yffL2nrc5ben0i+X9LWf7it+P87D1qW/i/B3p9o61OS3p9Ivl+SfL8k
+RvJTe3/b8fjKMn+jki+X1J6f6Ktj5R8v+SW9v/k/Ynk+yVtuQDk+yX7bw8L
f2+9/X99fMAkyd6fSL5fUnp/Ivl+Sen9ieT7JaX3J5Lvl5Ten0i+X1J6WyL5
fknp/Ynk+yWd/988/l+eL6T/J+9PJN8vaXseiny/pO34Id8vKb0/kXy/pPT7
mSj9OJF8v6T0/kTy/ZLS4xNt1wvb7yffLym9P1G+Hun/yfsTbc8pSO9PtD33
Ic9rzv87/+/8v/P/zv87/+/KlStXrjZDOf8flPP/zv//Df9fG/9cKZP8/2J8
Tr2CSf5/Gd5flzHJ/9vm56N+nRlnkv/Hw+7gODNT/7/N/0vvn8n/2/r/X4fb
0/2TTPL/b8CY/UVlzM3l/8NZU8YM6V/MzNT/b/P/0vtvrP+39f+jjnwtyST/
f+V9YMTiTPL/tjnny4bDFyrOzNT/b/P/0vtn8v+2/n88LPsnmLROh6f+h/cq
Y2by/5OvhkkthUzy/6iNd0wwyf9L75/J/9vmAtn6/8n/y32Afl9CkHaSman/
3+b/bX7M5v+l98/k/6X3z+T/pffP5P+lt83k/6X3z9T/bztPXv0mDCKIM8n/
f3E1TL6pZJL/D65LUSb5/6YlH079skOYSf6/OSz7fw4xyf93hLFW6Z+XSP4f
T393R5kb6//h6P6kRphJ/j+rwcS7ug+JMMn/d4DTS8dKJvl/jHE5Is4k/49f
n0/izEz9/9L7Z/L/tjx0m/+3HT82/y+9fyb/v77en2jz5Db/L71/Jv8vPX4m
/2/7/Tb/L71/Jv8vvX8m/y+9/8b2/wf3BUkm+X+8ir0QZ5L/x8NilziT/P+d
+BcXM53/37r9/xs4t6yUSf4fx4aOjjPJ/9vuK445/b0BS3ommeT/YTd992lx
Jvn/D88zY3q8Wsp0/t/5f+f/Xbly5crVP76c/w/K+X/n/zdB/3+QV+ep/v/d
8UY9sdX0/2+o/+/22C7ftvjdU/3/0vsTf/RDWVPGJLaa/n/Z97+5/L/N50jv
n6n/3zbnXHp/oq2Pt7r8P7b3vuqr/n+5Pt9c/f/V5f9t/f8bOv9H9v07/79+
/t/W/2/LGZHeX/r/f0v/v/T+0v/L/n/p/TP1/zv/7/z/+vj/De3/l95f+n/Z
/y+9v+v/3zb9v63/X3p/6f/lfYX0/tL/u/5/5/+d/3f+35UrV67+NfWXPvt/
XC82NBd4Q/+era1sP/9cuB+/QhOD/67S3MA6G/tfJxvJwzHIslAx68C9Rs5/
OKJYZxAkaBYo7vrkGQc1fmS14lAMAlusOOpk2MjIUyxHz+ErBjm0nyra8l5t
74Mt77U35mJNVZyDfm6mYh4+qD9L0bYv8DQOAtAMcq4+VvwA91WmKDbC/Kgs
xdE4CDlXEbo4L16xUrEn5kIvV3ywS9/F5367THEB5mJlK/62rt59O2WvVmz8
ec30EqGCSbm96T+U/pMpJurzfUrMsosgeDLF/PJBc9r1s4rNrxCz9kklM8jh
KjbzINb42RjzeAxwDZtDV+37/R0DChSxrb1BoWK7YyEhdbWiLXfMtk8Uw/2x
5Yq4zLuznHlzfdipKDC4vKzhMcde9svbl/1SZKbfBIFuPjPYD4qY89ArpJjB
uqDYPHQT/IVrmR1w/Vhq0gfF1A63ppiUr4rxnxUpJurAmSUGY0qb+8w+WBFz
1Ov7p7/hHnMCxP9+HTL4Msb4zGGYAxo1vz894falM3xmB8wBjZq62CDpM18M
NhAMavGRKea4heOvj51YYjBGr3slk/Ilbb4LdvHqJQoUbcdDLTibLV+iiMu8
m7IUZX4wEfXEKI95NcQDnho2EcwX9Zl7wxiQblFzfgson/nJ7de+f+NjEQOv
4sl1HrPB+5CwHDaQVljjqArmgfh+F5l1q99/5pYLYswhey14e84uYbMc929j
zHPhMZiuYevni/rpRZ+Jy/dDota8hvSX8OI6LX3m3vDPPhkxHcKfjogt9Jl1
X3yn3aiHoiY19dFLD1zrM0+Gr/uKqIEpV52G+sxbBoJhi1pzMWw/jy0nwvZ6
IX17uxE+c0ojCCSOmol4gFcy6XUdj/sAa5hl+ABIkdkOxrzPyVd8YVStz44r
zFOk3HvJ4Pu9TPG65rDDsETR5ucx/rqhJsY6Xr9YcSgOhl+giKf19osUg325
5YoyhzgTZd4w8RqI/3yglEn7j80weNdjlh3a7d3PG4UMxq7v4zOX4aC1SJXH
9Zhd8cQYMtdgILHH3Bu/7yHr8WA7Pm3nbdzuiHlMynPv3gMurD7zZHic47OI
qVEBAtZnUq5xcJ3wmKsaNwntXhYy9+L1ymNSTvGe98COrM98ELTc/vbvKd4u
TPWYdH54/SzYcPH/j9i4EDXpk9Mu37ZIMadDe/3jxWbUQ/CB+kzy7Xjautln
TscNtIh5CC7nrX1mkMcaMXPx+u0xy/DBq7CBtOsGPyaZa/H8UWTqNPhx5O6t
Y0z6/Sv7wY1KoSJYvkcG5ysGOSKrFN9dCjcgeYrw1MsXD+YqQhfNfgcuUfwN
UkF3n6P4wdcFl3StNUNxFR4vSxUPwgeSshWzYRvysSzFxhhwPEOxLua4vqOI
2wYHv6XYBHPMJyrOwdzXaYrBzzVDMXg/PlY8Z/GEGjMjcxSjEIPta7ZvOjX7
vnkfKQZ55RMVbX+/7T4W2ymOXan4wTOww5SrCCkZc+4pVMS4ilF5ir0egAf1
chTxNLU4X9G2rxTcp89UHIzrqrcU++J+11jFd/E+eqbiwDUvf3zmUdmKt+EN
wiLFGNyufDta0ZYnWwPihxa/qph3Vb8zX3piiKJtHRfMSZtiJOu3bfDsoGPz
Fe+AbapHworYXnRgpeLpzfokB7SvUMTl9/55ikGucpHifnhDlaOIp/3GBYpB
X0O2YjA3tVyxDcTffFes2Db34KaHhacr1iiBYPEJijFoKxk2SLEBxGKve0Yx
6EO8RNP5f1euXLn6d5bz/39dzv87//8v8P+Lzr78z5YNPfb+0v+T95f+n7w/
ccwRdz9/33Ep9v5E8v2SW5v/x8cUfkmw95f+n/yR9P/k/aX/J+8v/T95f+n/
yftL/0/eX/p/8qTS/5P3l/6fvL/0/+T9pf8n7y/9P3l/Ivl+ya3V/5P3l/6f
vL/0/+T9pf8n70/shAPrk+z9iSOG/rhg3ZMee3+i9HrS/8vPV3p/6f/l8xrS
J0r/T95f+n/y/tL/k1eV/l8+F2P7eaT3l/5fvl7peYny9RDJ90s6/1+9/l/O
HZP+n7y/9P/k/aX/J+8v/T95f+n/5fFgOz5t523p/aX/J+8v/T95f+n/yftL
/0/eX/p/8v7S/8vj2XZ+kN5f+n/y/tL/y3576f2l/yfvL/0/eXzp/8n7E22/
3/l/5/+d/3f+3/l/5/9duXLlytUWKOf//7qc/3f+fxv0/x/NHJxeSoaZtG56
frdDVu37fSUzU/+/9P5E6f03tv+/M/wzSxJM8r2oi94uZ1a3/59/xkdHvb5/
hJmp/1/6I6L0/kTp/YnS+xOl9ydK70+UnpQovT9Ren+i9P5E6f2J0vtn6v+n
vEuZe9ka1z0J5sb6/4PehBVvEZP8Pxw1OzRKMMn/S+9PlN6fKL0/UXr/6u7/
t32+0vsTbfOabJ5cen+i9P5E6VWJtrlYtp/HNifK9nql593Y/n/UCjckmOT/
Xy4FQR1nkv/H09SUYib5/2C/L8wk///QBzAoOsQk/2+bz38ujKUbHmJurP8P
vH4hk/x/kNMdYZL/vwPnNsWZ5Pltv46auGWcman/X3p/ovT+ROn9idL7E23H
g+34tJ23pfcnSu9PlN6fKL0/UXp/ovT+RNv3VHp/9v/C+xOl9yfa5u1I70+U
3p8oPT5Rev9M/f+n4RueZJL/vx03ihJM8v8PPwdBE5VM8v84Xi6rhEn+fxyy
hFnd/j/YPwoxyf/DNKQl6feV6Pz/pvH/qFMvqWSS/5+F80rjTPL/zWpG3urd
LMkk/98PbwviTPL/6YtA+pYwziT//xqMyWtZxnT+3/l/5/9duXLlytU2V87/
/3U5/+/8/zbo//HtnhxT6ybp/Ymy739j/b/s+yeiLlvlqf5/6f2JzxZ/VzZk
3+Qm6/9/qisInJjq/5d9/87/r5//t/X/S+8v/f/f7f/HMcdNKta7/39T+3/Z
90+Uff9Em99z/v+v/b/tdc27EiaFJ1X/v/T+0v/L/v/6KDDjqv8f41vaxlT/
/yoMBK5Q/f+fN7p35u/nxjZZ//9K+Hqcskb1/3+JFVP9/9LvS/8vf116f6It
f8T5f+f//3/afr/0/tL/y/5/6f2Jb/UGoxtX/f+/jQdRH3f9//9w/y/7/6X3
l/5f9v9L7y/9v+v/d/7f+X9Xrly5cvWPqw3NhflL/78BecHVlSO8qcv2em3E
+7trFW35ttZ/d2akY6uRi4zkPVM73Fo+Pao4AJ9/L1JcUw61WnHgi2AsshS7
QDvfoysVO+K8iDLFRzFo7BPF6yH2aXBSEVKxir+bo2h7GwIvO95I9sb3VXMd
3ge9pljnl306lQ5cqDhnNtRKxW5PQRLVIsUgH3Kuou3+NsiFm6Bo298pw3XJ
FMW+mF86SdGWe2vLIw5yeFcophdNP92fXc4M+pQLTW0caOIzB7zx1Nnz9oia
ebjvkWKWQ6ziU8Wm8/zPku81SzEbgP65t9jgWILfY0zye5dD2/OvhYqnYmmu
O3PmbZfdUqCIh8UrixWD9egHirY8zYGgGXLLmZRruRMKC4/Z4zII9qOcyhQz
yJ8rNhgPdk+Kidtu8WKDu3LLU8yH6sGCp8TE7r0r9HqOz2wA2xfDo6YpBjqn
mGBj195ebBLoC9cyGy4f9VZ5m9KqPO21zCC31P7rjV7+revyk9YyF8Jff22p
OWmHmi0mXZ5iLoCP87ViU4nHUSWTzj/ZO+6dXjFGFK8LBgkptroHTE+B4im4
LlmtuONrp+fdusNcxXW40bZMEb9OtcuZGHv6QoGB6U77dPKYlJOLsdmjPSY+
TnBm2KT/UPpP+szJr301bulFEQPfvst7+syGDxUc/VBBxByOYsFnvvNqVoOJ
d0VN+qBoff/elUxsG301Yn6E7czBHvNSWK7VCxvYHXunnc9sBuO53ooY1Ig7
pZiDMKC12Dqvm/KXZQ5z8NxLikl58bY8CFt+xJE7Pzrs/Od85vvox6JmLj4H
4jPhpz1tpT2/wDaH3JYLALvGlaf6TMqZ/RNOQ+NjzAlTMfnTnIjHcQUz+J4V
VeWB5yuegf4sT7E75tvnKn4+b8mfPffMVwz2k3MV20P76PY5ivBu1F2Tp3g0
bFdUal788KTkARflKMpcTKLM8SXeifvqJUzy/PGxcACXMYfW3fHqvU4oMMfh
96aCSZ4fT5ePe8wL8EGYsIE03ibPe8yjceBN2PS9unHtdas9ZpC3GDZ4GAz0
mNvD7VLtsDVfIPUrCN8ks1H5EekjstBgrHXLJDOYw5W+juBGsM88F2LSz4kY
jKuf5jNPQx8btR63GG852GdiXOeBUXMsPn/iM6fXS9QePzZqvZ7avi8T8PkW
nzn/lD0v/X57ey6ALd/Edv2y5RrgGLMrfCblbmMsaH2fOWAPOBNEDMYMH+Ax
g7zRkClEIVuoKHOmiSNww1jT5tmC/oLlimfjC81S7I/P58xWDPYHFyri4ZrI
VmwHjxs0yFPsCDHDD+coynxxYvSxE9L/ZSsGfRzTFRvi+WmS4oL03X63HM3g
+H5bsTEcRn0mKeLp/YjFig3C17yzcHyOIi5LrshXtPWltMc5V3MU82Ab7JaP
FJvAtsEb7yk2qLumd95vSxR7wfb8LoWKdJ2XhG9n1pQCRWzL6JCnaOsrsHns
ZzHwepXiOtxYma14PMT6/jhF0ZYP2/c12PjTDK7/yxRt+cK29VcXPFG/YyR7
4z7dEEXb33MO/jv9jKTte/0F5tmG1psfwnbL3DzFGzDfWRO30+qUKdrypnEb
uM9qRdv6ev4b9U8qPyKsWLw/PAhVqThnF2jAy1Xsj/vw8xRt73N/fF97GMmg
P7Gr5rbiYVy5cuXKVfWW8/9/Xc7/O///L/D/5Pslpacgku+XlN6faOvv3dr8
/+1LoTEvyd6fSL5EUnp/Ivl+Sen9ieT7JaX3J5Lvl5R+PxOl9yeS75e0nX+2
Nv9Pvl9Sen8i+X5J6f2J5Pslpfcnku+XlN6fSL5fUnp/oq1fV3p/Ivl+SVse
hO35Een9ieQvJW35BbY+ZFsuAPl+yXGp50fV+sxj708k3y/p/H9A25x/vJy8
kmDvT7T1+UvvTyTfLym9P5F8v6QtX4B8v6T0/kTy/ZLS+xNtz91I708k3y9p
u57avi/S+xNtzwXY8k1s1y9brgH5fknp/Ynk+yXh6jy5UdL5f+f/nf93/t/5
f+f/Xbly5crV1lDO//91Of/v/P8/yP+jztu1kpmp/196ikz+X3r/TP3/qJ/6
J5nk/x9bsOLNC6aVM6vb/++MzzFXMDP1/9v8ifT+mfy/9P6Z/L/0/pn8//p6
f6L0/pn8v63/H+zrNf19Jvn/B/H1JZnk/0fg+a+MubH+f+CMSX1q3hZjZur/
t3kAm/+X3j+T/5feP1P/v/T+mfy/9P6Z/L/0/pn8v20elM3/S++fyf/bPKrN
/9v2DW3+f0P7/7suP+nl37ommOT/8TT9epxJ/v8YHEgSZ5L/X9oTBkQkmOT/
98I5UnEm+X+MNdkhziT/H/iPOJP8fwLnNMSZ5P/xtmP/OJP8f/oP/3TK6DiT
/D8eLp/EmdXd/y+9fyb/L71/Jv9v23ew+X/p/TP5f+n9M/l/6f0z+X/b9dT2
fZHeP5P/t803s12/bHONbP5fev/19f9yHwAfczgiziT///2wW3u/d0CcSf4/
mPcTZm4u/x/cn4aZ5P9/gduyl+JM8v/B3Kk4k/z/s3jiL2Zurf4/uB8sYpL/
j+DPFWeS/4fdsg9CpczN5f9xW2/7GJP8Pzy9V7hzkkn+3/bcH36sZQkm+f+j
cWBLnEn+35YrlL4JSh+ZpUzn//+7nP93/t+VK1euXG1F5fz/X5fz/87//wP9
//r2/1eX/7f18UrvT/zkqJN3/eCgpOr/z4Yxu9MS6+3/6+ECNmr1/7L/X/b9
O/+/fv3/0vtL//93+/+DOeRlVv8v+/9h1bZgRUL1/28p/2/r/3f+v3r9v+z7
J0IIyQ2fJlX/v/T+0v/L/n/p/aX/l/3/0vtL/y/7/6X3l/5f9v9L7y/9v+z/
l96faJvzL/v+M/X/O//v/P//T9v8H+n9pf/f3P3/OL5/Wrny/2CVv58dU/3/
0vtL/y/7/7+4+rr0mbRym+3/l95/S/f/S+8v/b/s/7c99ye9v/T/sv9fen/X
/+/8v/P/rly5cuWq2qu68ln+Mp93A/7+jcoF3gLXF9vrsuXg2MqW55t3/iGd
d+6maLv+9t8Pkg4HKI6eDsmoryue0g4ST3MUA/9ZrBiLgyAoVOzi5f2n9Occ
RVvubSEs+9/IV+z/+4SX3v8hqfgdxJHellJsfC2IviLFLpgD+5JisF4cpvj5
5TMOeeKzSYprP6q4967QBMW8usNbnXDBaMXj3722+dVvzld8GrT+KVmKwbpz
nmL/O66/5OzjZikGecvTFc9BTzBDsdY+UJMUbbnGGHP47kxFjAk8Y45i4F+X
KS5a9+Tj/ke5ioVHg8AsYz4O2wK/5JuXYTk+w2MGvjVs0KrVWstsjnMZSg3Y
zu5DUsxP0eOXGFjNHdo8xvx5yYudj/85ZP7AeSNFisdhIGyhom0uR+D5lio+
iN+zLMWsQXOvbDtllSKOZyhKMim/tS1uVPnM7eeBwYiaGDa+pZhwN9/6yhKD
8cVdU0xcrs4rNpAiN++UOJP2BbAt+chKJvnPJz6DAz7GnI35fWGzEsViJbPl
YAiUjZjGuE8SYx5QDBNgQqYn5uTGmE/DmKAvQ2b82F0LthtRyaTX1QyDHcKK
/fAHL1A848aO//l4v3xFPEyvzVG0ze2x5eXtcUeT7n/8MlcTRXSu4rug0e+r
YF4HGuDbIutc/ZmDIXnRYxahSAibo7N+WdG4SYr5EQ6IKjYYl9g+xcQxJu8X
W+fk4zKvtccceOT89t88FzK3ROFXPGYwjylsTkMx6DNXpc9K7e6Lmr64MeYz
r4DT4eX2Ofwf4QvymfMxP9E+zxzjwe/wmfdAPHdxxATbNj6T8qC794APyGdS
Xirqwqd8Jpwl6+9mn38e+DmfGYXLyGXp4//hFpHTb/SZPeLX5rdaYJ9DPhjG
xV/kM/uDNh8cqXqex2P2TQ5o3/mVsJl4OQQTlzNvwBNBobkQ96PKmKiFxuQb
3M46tpS5In3W6zcuz2AMdpsy5l0Qb7ssv8qflTMxzvTNgqqc4jJmL5w7VmCW
wWlxSRmzz07Zc/3zCsw+Z/xw6bmry5iL8N8pMHhaP6OM+THErk7NN7CL9/6N
Zcx+HWDDPt8sAs3fsJx5Fx4YBWbIFxDgnmQ+js9dFVZ9v5PMqxd1Pb1ZnyKT
k99r7L0VSSadt21z/vHyv5/P3LfOlE9mHh4xi3LhvslnevCx7Byx/j218QV5
zAGYxxw2cNY8/maP+Ql+cCHzNcQhf+MxL/j9wDcHrglb8y/SNwvpM6nP/AYf
iIuae2pAYLTPbOMf9MXV10UMaq99fCblGr8GMdIxnzkS2ihmR6vOsz6T8ott
+SMYH3O7xwxiKkPmKtzf9ph42Tg+bM0Bsc35rwk6rIvH7IN5oyETxmBdj7nX
CbDzGTZXwHbWuz5z5/2e7vpWm2hV7rrPHIJBthHzNdxeVFQw34Q2hI4h63Uh
6AdZpfg5aOKybMUZ6JsXKgZ9IjMVV6WP6m9/z1KcivvXqxTxNmif1YqxHRan
7/ByFafiCTtHcY/De33+2mMrFL+E0/oIzcEYvLNQ8elBx95w8qsTFNtdBfWx
YiuIyc2dq2jLI7b5TNzm/ylX0TZnrAJiaPtqYrx6LEtxHu5XLFTsiPdhixSD
+9ClirZ/96bCuy+89OkKZjBHL2QmwPJjX83vB8MFrkARb8M+y1e8GIODVyn2
whNDvuLU9Nnv6KwViqPwxnmSYjZ8PZpPU7StI4L9mXmKA/C8vlixCTYkvK9o
y5Ptj/cfozQt61zb8tqWr133WNhoz1UM5m2GFOvPPaHHvRfnKX4I23uv5iu2
xUaacsUmBzV+5PcJhYpB7m6Oom3dHcd+q1WKQR57peKUmjB5MaxoW582wH2/
IYpWX/EevLFdNF25cuXK1dZZzv9vXDn/7/y/8//r7f+DvvUEe3/p/8n7S/9P
3l/6f/L+RPL9klur/yfvL/0/+XHp/8n7S/9P3p8o84CJtv5n8v2S5PslyfdL
ku+XlK/nn+L/f8PG7iR7f+n/ZV+99P7S/5P3l/6fvL/0/7JPXnp/6f/J+0v/
T95f+n/y/tL/yz586f2l/5f9zNL7S/9P3l/6f/L+0v+T95f+X/Y/S+8v/T95
f+n/VR+y8P7S/5P3Jwbn7yR7fyL5fkny/ZLk+yXJ90uS75ck3y9Jvl+SfL/k
nrO3T15/d4K9PzGY05Fg7y/9P3l/6f/J+0v/L8/b0tdL/0/eX/p/8v7S/8u/
R3p/6f/J+0v/T95f+n/5/Iv0/tL/k/eX/p+8v/T/5P2l/yfvL/2/fP5Ien/p
/8n7S/8vnwOyzfmX3l/6f/L+0v+T95f+n7w/kXy/pPP/zv9vTv9Pvl/S+X/n
/53/d+XKlStXW105/79x5fy/8///Yv8fzGMJM8n/w/TxPe6IMzP1/0vvT5Te
nyi9f6b+f1sf6f2YY1jOJP//JAYuljDJ/we5nyEm+X98fHdBEZP8/0J83ZVM
8v/S+xNtnlx6f6L0/tta/z/YiZGexyT/PxB/3gST/D/+uMNLmeT/F+D7W8zc
WP+/L/6ABUzy/y/CeJTecWam/n/bXB3p/YnS+xOl9yfa5uRI70+U3p8ovT9R
en+ibQ6P9P5E2zwT6f2J0vsTpfcnSu9PtM0/kd6fKL0/0TaHRHp/ovT+rv//
v/v/pfcnSu9PtO3b2ub8SO9PlN6faPt7pPcnSu9PlN6faJt/Jb0/UXp/ovT+
ROn9idL7E23zx6T3J0rvT7TNAbPN+ZHenyi9P1F6f6L0/pn6//G0Xi/OpOvC
bfj9rmSS/2+JF6Ywc2P9P+yO7LF9iEn+H29LFkeZ5P/x9LGskkn+/8JLn/5+
2K1xJvl/2GVpXDvOJP9fG4/3Sib5/5bo4yPMzeX/t8cPuoJJ/n8ZnkgqmeT/
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
K87ylQpDFK3j3Iuuy0sdcoH5mTDCCCOMMH57BP8/byP4/+D/g///n/3/LkMn
X/XeM3nx/kz2/Uj0/kyrjnF++3/2/Uj2/Uj0/kz2+r+Xwf//Mf7fTe5ad/qH
efH+TOv9BfT+TPb9SPT+TPb9SKvvN/t+JHpwJvt+JHp/Jvt+JPp3Jvt+pJVz
wb4fid6fid8P/T/+vuz7kej9mdb7Auj9meyPkej9mez7kej9mez7kej9mez7
kej9mez7kej9mez7kVbeBPtgJHp/Jvt+JHp/Jvt+JHp/pvV5ofdnsu9HWrkS
7PuR6P2Z7PuR6P2Fc30/0vp52Pcj0fsz2fcjrXwQ6/O1cgTY9yOtXAD2/Ugr
l4F9P3Jh8//s+5HWc4vVT559PzL4/3nz/+z7kez7kez7kcH/B/8f/H/w/2GE
EUYYC90I/n/eRvD/wf//Cf1/x+d9A6hqIft/q799u7WOGXvGjmkh+//zi6v1
41atE7L/H0ceLidk/8+5kJgPadX/W/4fvX+p+n96bXXlvJDX0YPp924Usv//
cAsvLuqF7P+prcDbLcJS9f+W/0fvX8r/W/X/tFzMRUL2/8nvkxey///HYV8v
dvURjUL2/8XFd9lnfWcJ2f+Tjowbhez/kz4uWSH7f1rGl2WF7P8pFmFqTsj+
/4Rvt/rl3O5ZIft/0pQT6oRt7f+T/kk1Qvb/h1OAQ1aYzBp2/b/l/9H7l/L/
6P1L+X+r74fl/9GDl/L/6P1L+X/Lw1v+3+oHZfl/9P6l/L/1+1r+H71/Kf+P
3r+U/0fvX8r/o/cv5f/R+5fy/+j9S/l/9P6l/L/Vb8ryw+j9S/l/9P6l/D96
/1L+H71/Kf9vnSeW/0fvX8r/K+9fwv9bP4/l/62+eZb/t/qDWZ+v1UfI8v9W
XyDL/7e2/t8/BaVPygrZ/6/st1WPbhGy/6fXJS5oEbL/pziPy1uE7P+T3I6c
kP1/+uatMjdvlRX+UfX/K1EDnayQ/T/d/jbPCNn/v3lI76PeLUsL2f+vTY2e
0kL2/xccfu5bnbLNQvb/1O7zmRYh+/+jfJvRX7JC9v//ojr7nJD9P93eOuaE
7P/zr+zx1JSxWSH7/2R/KiVk/0/bbn1ahOz/76c+c1lhW9f/L07nUSRk/0+X
5bl5Ifv/W32MxZV5Ifv/9c56+eNOV+aE7P+tvJjg/5MR/H/w/2GEEUYYYfwf
I/j/eRvB/wf//yf0/21V/++7m3ae1qLq/9H7l6r/x7r/efX/Vv0/en9mr8bu
W290aE7V/z91ku9okVX1/+j9mU9Q/9Scqv/Hvj/z6v8tovdH//93r/+/kXIz
mpT/v5j6RzSp+n/0/kys+w/+P/j/4P+D/w/+f+Hw/1Yug1X/j94f/T/W/6P3
R/+P9f/o/dH/Y/3/FPK1WVX/bz23WP3kr/K3pbNyqv4fvT+z+KzT8NaxLar+
n/Ti+i2q/p/a0n/QrOr/0fuj/8f6f/T+6P+x/h+9P/p/rP+nOIpHmlX9P3p/
9P9Y/198eIy+WTqn6v+T+om8qv+nNnoP5VX9P3p/9P9Y/4/eH/1/qP8P/j/4
/zDCCCOMv/Fo09zeVuTnvusDqI50ir/pw1uRh2uN3/TnbfD122q09jhQIe1F
mjde8M4VD16jWEb5vTcoWj9Ox8cuH3ri+e865LDTli/+SSlaeaCkcT8vV5xD
9dbjFHelvi5TFWupMCevmDxXfqD4iX/8PbNWsQvl/fZRHOSXBbc9oZisz15V
7FlcJe315XDFTvTc9JYiLVOPG6KY5DeOUVxk775T/3nUcMVmymt653eTYuoa
ByvuTPm0ZYpJ/dN0xTOKq9fdLqtSHLC4N1mVijdS/lqFovU++63UILxSMelL
0CT8xOv0l6qdrzI7+aEm4Q7+sXHlGjedRiz84QZ//mfcvtRQfI7wQx9r9kP9
3L4KLcLlL/CNH9JuPf/jdqlRPN2f7sMqFJP6dU2rTv5dry/Pi4XJvkja0eFr
KQjP3c+bqnrXjYJ65whXoqDZene963zKqANbhJyvusrJFEineOO+6R3PPKlK
Mefjwb6sULT6FfhV/1pzxism9ZTjFI+lIORJihny1lMUfYrlt1vNVKS2OpdN
U7RyzWg52nWKYg/Kc5ykaK1/X9jsX+eut2e14h7UV2q2kOeZH72+/yAWHves
F2EZR1piSix8s776sS3vyjg/C7WriYWcY3sOidlYuNU5XgTYfbMX8Vrz2FjI
+7BJrmBBePelfsFZ5yh+eN+CMMl9q3P3+NjpnrEwmd/Sji77vWNhkieedn53
7/tuBSGvExN/EwvpNjIr7e76tW7NseWRkHNvSaN0ioWcZ9qX8uViIcUsn5x2
NK10iYUU9/2ftPO7S6ccGgsTn5B23np9fXEs5Bzhato/jIVL39Rvnzt7pM2+
8db3Ta6zWMg5wj5t97EtY+Eve/n5PO1Iz60aCz8Z5zvhpM3jb/374i9xa/mg
SPhNsmHlPnluo8vvuSoSJn3Qat31r/nAwUh4wp7HFs/QWkexAtvHwn53DFnx
mdPTc/f5Y+HXFNSZdqRZJ0ZCvu8n9dOx8LHmMbsf8WvKXUe5i7HwWBK1abPf
/tjyfdY9dalYyDm8Xx34TPFPLDzIx8fvnHF3PjB9l/rXY+E1y/kJPeOoXdZT
sXAjv923Q8ZVbuBfIIuFxR9+tbqZaTMXg3TJD7HwlT4Telz3acY9uOcHxT+R
0KfPdpuemluPEAm3pBtNrZk74KuqZ+4ZC6+mkTavi8QzRcKlPvUfdMpd7rXu
6bGQc9hp+zwbCzl3O9mWiIQfUF1ByvldhlsHRsJTKPA4ZR7PnSiXMhJWrLPL
+qnjUo6mnc6RkOdJb43v3SYSJvNHrfuY7vORcBdqaJRyFPOcj4UR+dyMK94E
fuy9QkG4kS8zWaXOzabcy0jY4VXfuStlXkfW+Znsj80Wfk55JrXuVT9dXtso
PJmCOSrdz+V+46ZK8dED/BlVobjTN4ftNeOLBiHXP5A+36RBOMDvNj1f4ZYg
cdwkHLbrJl79O4rdfToS9vS32Z1SbiAF/UZCzvGsoRtIJExyY2rdNrM2Wuqm
frOEpFFXqTbvy/f5bafVyhV7Vm16fdWmMxSvqO/y0j+umKpIZS6P1wn569Np
2i0vXIUKC6rd1vTzNQt53+d1+jyqFAdddt79n/QsVzzt/Y/yr+wxQ/H44mzz
0nWVit7qD36vUbiFP9y7VbkdqFHjbGF0yuXFO0ytO3aO32BKKX7vX9/oVaW4
6fK+UEczyf+tVFyW3o/V5PMR6VdVa24zQ5GmrwdnKk7/xAdAT1a01hedNvKB
vGWKO/vXP9u/p5jsw5QpJjko0xX3pRdZhik2ky+/Q7GX347a9XnFJG/2EsUu
lEf9lOJtdAN8U/Eduu8NU2wa7n/g6YpWfyqrX+gmxdXNgMUrFI+mfTHN7pSf
VKtY8MvL+ysUrdzh+uLTxBZdmhSp3Kn9GMWzqPBphKLlGbrQBHy5Q/aifcXu
im3mr8III4ww/m4j+P/g/4P/D/7/T+L/9/da5Ni8eH+mr/IdcWdevD/6f/b+
6P/Z+zOPIZEQi/dva///ldcES+ZVnTx6f/T/7P2Z7PuR7PuRwf//Mf4ffRb6
f/b+6P/Z+6P/Z++P/p+9P/p/rJtF74/+n70/+n/2/uj/2Tuj/2fvj/4f68TQ
+6P/Z++P/p/9Jvp/9v7o/9m/o/9n74/+n70/+n/2/uj/sW7c+r7o/dH/s/dH
/8/+Ef0/Hn/r36P3R//P3h/9P3t/9P/s/dH/s/dH/4/3ffT+6P/Zq6L/x3p7
9P7o/9n7o/9n74/+nz01+n/2/uj/8b0Y9P7o/9n7o/9n74/+H987QO+P/h+v
C/T+6P/Z+6P/Z++P/p+9P/p/9v7o//F4ovdH/4/zJHp/9P/s/dH/s/dH/8/e
H/0/e3/0/3gdWecn+36k5Vdb6/+t/KNn9/MV9Fnx/sxXaOTF+6P/Z++P/p+9
P/p/9v5M9v3I+e3/ra/Pvh9pvfcxv/0/+34k+35k8P/B/wf/r0fw/2GEEUYY
f9AI/j/4/+D///b+P+nbUSVk/78CCZCMkP0/6Yd3ckL2/xv4WMt9c0L2//f6
j7M6K2T/b/WzfZDed88J57X+H70/E71/qfr/U5dqd9sZz+eF7P9pudKUFbL/
3/meXPFPVliq/h+9PxO9fyn/b9X/11F/o7yQ/T+1hZrdKGT/vz29oN4gbGv/
/6PXS8V5gsn+P8mxTQvZ/1t1gL47wK27Z4Ts/5O2RBkh+3/Sn1ukhez/b7nB
/+IpIfv/5HzJCtn/r7+BH3lhqfp/9P5M9P5M9P5M9P5Mq2+G1YcNvT8TvT8T
vTMTvT/Tek8cvT8TvT8T/SYTvT8T/TsTvT8TvT8TvT/T6htjfV/0/kz0/kz0
j0zr+Fv/Hr0/E70/E70/E70/E70/07rvo/dnoldlWv120Psz0fsz0fsz0VMz
0fszrb5Y6P2Z6P2Z6P2ZVt8h9P5M67pA789E789E789E789E78+0jid6f6b1
PIben4nen4nen4nen4nen2ldR9b52dr6f2r38kBOyP7/yW39A3xW2Nb1/+j9
mej9mej9S9X/P0I/b1bI9+Wk/1BWyP7fdzlbekaLkP3/x3S8W4Sl6v8t/2/V
/9PReD8nZP//k49bOiMrZP/vf6rrq1qE7P9/2j3/+dldcsJ5rf8njftkJGT/
n/RbygnZ/+dWGfjCMlU5Ifv/pB9eTsj+P+mLkxOy/79+cH71g2/ICfn8pGXV
mnXC4P+D/w/+P4wwwgjjLzyC/w/+P/j/v73/n9/1/+j90f9j/T96fybW/TOx
7n9e/T/W/aP/x/p/9P6l6v+tPvlt5f+t+n/0/kzaphmcU/X/e1Ff9qyq/7f6
Fa/6tReMs5X//9gvCx9tUv6fvsy/m1X9f18qGG1W9f/oF9q6/p9+rMubVf0/
en/0/1j/b80zwf8H/x/8f/D/wf//Nfy/Vf+PXhX9P9b/o/dnWvlHWPfPxLr/
tvb/Vv2/dV9G74/+H+v/0fszra/f2vp/9P7o/7H+H70/+n+s//dVMC39c6r+
P8lNilT9P3p/9P9Y/4/eH/0/1v+j90f/H+r/g/8P/j+MMMIII4z/eVhevbU5
v5b3btN9ivmYL9zaYXxfK7c3CSI6XtP4OmW+/cMOlyn2p7+/RdH6MXfee413
t+o+wSHbUSBpRrH4kLXmkx/WKmJeGnNn8vqjFCeN8J1aahRH90tdf+evHygm
zymRopWHa/2+HcjvDnDI/l7fdByk2Mu3N8i/p5j4+8GKj1Lu2UDF4qJ86b47
vaN4CBW2D1W8zz/OrvmO4hJH9Cg+eo9UHEp5ZJqH3OAXBjMV76NA4RpF2kZq
r/kZ5ZFVKa5CGwGViovS+wOa1nvNj1AuboPwgBb/hn6lvP+O78GPv9s3zoiF
FCd7WsZ9OHuZ4oooFnIerrejhXtahKTbH884iv3bsEV4/w7+P0i7LUmfNQkb
vVU/ssbRsvCmSLieT+H6qdadQA1WYiFfL0udOGjJEwcVhBc+4cVAvaO2MYfM
EVI7hQcbXCMFuWWF573VKTuxqc694E+XtWsUu/p4vYkzFW+mhibliphfyEzy
dd9XtPLgplPDgvGKHVeasH+/QZMVD6IXTaYoDqD9yZmKVv+lAT6mdEK54tAV
nzn9uF7TFQ/wsbjnVyhSu5ePmoQUM3tejaNtS9cs5M+XvlxjJOxFAYkps394
sp8WCzkH82A6/2Ih59juT0G3sbB4UvhWPmaf8+MooLogXDG+/Yed9q5zpM/i
WMh5oMl8EwtbtvYblml3O208xcIrvLYfbucXfHPFJstveFEsPMzHnqfSznf3
WHy5WMi5t+d19zeyWLgtvQCSdlQ2eUss5Jxr6+sk82Is/IHytu0+3nQarRsL
KyjIPO28dVnsiFjIuaKjqXFPLMzQ/mXGTaXzOhZ+0/Gke8d+nXH/9eWg2xWE
e/oY8FPrzFySZH6JhZzzax2fDX27mndi4YsUJG73b7f6/1t5CtbXt3IlTt3S
J7/GwvUozzHt6HHhylgYrX5w8Q6Tdkc+0lCcwWIhbbMelHEUc352LOT5Ntkn
j4SkdQfWmsfNOp8XpwDZWHju9938qz+OYsJviIXPUoBn2iVB6ZGw+M1XLb8j
ZR6HJN87FnbwsbeP2L9XEhsfCTmv2fq+1n0teS8uFnJubzJPRUKfGvPetbVm
XkDy/lgsPIECUe3rcQhNeLFw8hJ+prHPH7o8OsZCaht1sD0/kAYui4Vf0AHJ
mJ/XRHpOjIWfem38S1ry7jH33sqnKE6mQz89MRbWFGe3EYPTrpxyLCPhL288
+Oo3V6TckJ6+kVYknNS0WfEOmXK0Lf1jJFyMXgBMuZE/+42/SEjbtqvXmjkL
FKs8IS9MPocaR7rt0kjIOdo1dGOJhZxPvQ/lcsdCzkOn6a5HLOxIHjw9933F
SHi/3z5aOuV8+nm7vfLCTX0cbs9qSkft2iEvvJH8arXr8O3jyx94VF7Yv3qp
XS/sX+22+GrD4qUcCYcVr5YDtqp1ZV5jHx8Jm5chkW3mFJBuvr9ZOM7H2PZP
uWF0XKoVk+fxSsVtyE9XKP78Nc38ilvTRDJbmFz3+jmMaXnaZemIaT5JjcBm
Kr5GN+RyxeLDYPHEm6l4B92/pyt29ds5vSsUk32TSkXL/+9A74sOVvyMJuzh
ikl++FDFCloXPqOY1JdNVGz008sV4xQ7UB3cPYq9Hved2J5VPI18c2/FCnpO
elKx209+I+8NxUXq1xxbvs/Tim8UZ5Gfyicq0uPUd+WKdy3R88sLslMUqbxp
QLXi2rRhOlkR86GZ+/ppcFqFIm0ndKpTHEn7LY2Kc/zj69qjFNekjauxiqYP
of2W0xzSzAVubd1pGGGEEUYYbTuC/5+3Efx/8P/B//9u/8++H2n1v2UvgkTv
z2Tfj0Rfw2Tfj0Tvz7SuF/T+TPb9SPb9yOD/29b/s+9H4ufKZN+PtPqHs+9H
ovdnsu9HWn3O2fcj0fsz2Y8i0fszrfcX0Psz2ech0Wsz2S8i0Q8y2fcjrT7e
7PuR6P2Z7PuR6P2Z7PuRVi4Je2ukdXzYpyKt/u1W/b+Vp2B9fStXgn0/Er0/
k30/0ppv2fcj0fszrfMZvT+T/TES/TvTer8GvT8Tfx/0/+z9mfj90P/jfY19
PxK9P9N6XwC9P9O6HtH7M63zB70/05of0Pszrc8LvT+TfT/Syqdg349E789k
349E789k34+0chbY9yPR+zPZ9yPR+zPZ9yPR+zPZ9yPR+zPZ9yPR+zPZ9yOt
nAL2/UiKQdgtP9/8P/t+ZPD/wf8H/x/8fxhhhBHGX3YE/z9vI/j/4P8XAv9P
bf9frhOy/3/Udx15OS9k/39PcfV+0r15Ifv/yZv7hVxOyP6/GwnxnJD9f9cO
d9y9+ek5Ift/q6+pVf9vvf9u+X/0/m1d/2/5Yet6Qe9fyv9b9f/Pdff/YV7I
602/eu8d1wnZ/690g2/EVC9sa//vLdIKi9UK2f9TDGZDSsj+/8oH2y9x7D/T
Qvb/1Jbl1joh+3//FvY6uzQI2f+PpIDnrJD9/x7+dfznW4Ts/xOfnRXOa/2/
5f+t/iGW/0fvX8r/W31OLP+P3r+U/0fvX8r/o/cv5f/Ra5fy/9bXsfy/1cfD
8v/o/Uv5f/T+pfy/1ZfM8v/W8bH8qtW/xfL/Vj8l6+tb3tvy/+j9S/l/y5Nb
/t86btb5jN6/lP+3PLx1HND7l/L/6P1L+X/rvmb5f/T+pfw/ev9S/h+9fyn/
j96/lP9H71/K/6P3L+X/rf5Ulv9H71/K/6P3L+X/rT5Llv9H71/K/6P3L+X/
0fuX8v/o/Uv5f/T+pfy/1afIqv9n/4/7AKSbj84J2f+fSxNXTsj+nx4LLskL
S9X/W89j1NZnsZyQ/X/Nluu9WnFvVsj+f51V/YNinZD9P2nfxeuF7P/pMe/N
OiH7/3bkvzNC9v/PrOmTHRqEwf8H/x/8fxhhhBFGGCVH8P/zNoL/D/5/IfD/
Vv0/en/0/1j/j94f/T/W/6P3R///e+v/28r/W/X/lrex6v/nt/+36v9xncnc
kPoxZ+db/f++dJwalf/v/dERI9a9Zbaq//fd9Xd6s1nV/5+xUrddhk5uVvX/
O5Nnyqr6fyt/Ab0/+n+s/0fvzyRdODyv6v+t9zuC/w/+P/j/4P+D/w/+P/j/
P97/W/X/Vv8f9P7o/7H+H70/Mwkeyqv6f+t5DL0/+n+s/6fpYMesqv8fRc8R
WVX/T8vCNbKq/n87CpJoCfX/wf8H/x9GGGGEEcb/Plrr51u7X9BW+bzW/SLn
v/8xmgtqtHafgo7HhYq9qO9BH0Xr912J6mYeVFyZ6oMrFFv8cmXjOsVbqZ9A
jeIhO92+12lRhWJ/8nlvKCbvHVcr3vVrXfGB6iPF5D3inGLSX/s1Ret5o70v
g7npBUV6/Dp+sOJ0ahA7WrEbCbp3FD/2WvSjMYobve0rc8YpWs/V1n5Bp+6+
kv89xZpDvWEdr3gMvQBfpThzz559T15UM8nzrVCsSoLTFJ/p0m6tY8Y2CrtS
g9wqt+jI9EkHPN4oHOz12+pVjg53v1lCzpuz3kew+hKT7h1eEC6e9wFs9S7j
X8fvHQtX9fFqi2bcx5QnHAk5ZzC38z3FP5GQluOrpdz3/vF391h4JAXbpl0Z
NQQpCGmboqXe0enbe47Qp65+sEij+367/sUjUxDy83bSR7hZyL7iQOqHUKO4
PZ0XlYo+1c51nqmY5BJOUaTXHB4ao3iR1wRLj1PccfUHXjz6yRmK91G+cKXi
yjQ0k/w7zdXu9ldaleKOtCEyS5jkhle7S+kXnC1M+k/XONrGGD1b2DFplOIi
ehEhEnIup9VHff11eh147Yqx8Dkf59s+PXcfLBae6l972CLt7vHtOnrGQs5v
/erAZ4p/YiHnlj7lf4vmWPi4324YnTH7zy/zpU+8i4WXFFetq+6ecd72r/Fu
QZjkKtY72g7auSB880LfMaPOUYz33rGQ83ytPALruqumeSUWcn6u1d/by9cd
z4yF3Sl/Oe1WG/LByA03jYV3Hzzg4Q0OSJt9uf1Zd/13sfAWn3r7oZ2bQLHi
ixaEe1PudWbu+ycFYbIPVeciOpAFIbW537LOvTnyvh1eyMZCyVPd6c1Nnv5X
Qcj3x4G0oVUQDjl20hIrxnVmH3WrfzhtO30dCe8jAZoy+5yPLd9n3VOXioWc
nzvQx2yPjIScBzqL8gljYXHyPmPHPdKO9NOesZBzaZ+7v9fFpxwaCzln2eoD
b+UsnHXz0sUzORJ2pIZtKXec17jnRsIV/dk5pdZdQwHTkfBIf3n3S819LoiE
nCtNuvDrvHDcGT6YsMbdTQXCkZDzUlub+zCaRiTMnOSDNlOOtru3jYTP+ljy
k2qdT+Fs2T4Wcs6ydT1OohMhEn7uy3xn17rOdAAj4bRJfkM+5fzJvtuSBSHn
fRcv4hF3PhALSY+tm3GfF8/ebl9Ewv0oTzPl6PT+OBLWkL5NudlZHxAfCTlX
t4HeTysI22/sE7/rzDwOev3wxkhIl9f3tY5Ou6tj4fJ+e3NO2rW/9Mz/tquJ
hZyTbv38yXNGXngGBaPUmLkSe/pY1+8jIecyextbcX4k3IEmwFozX8PKibDy
L+g2eURBWObjZ5+qm5t3GgsrfIzwFxn3UsHf+CJh4hVTjtrk7BYLORd+79fe
PKT3UQVhTPm1dWYOgrd5J5wVCan8Y2ytW3bd6at+fXEs5Pz0NZ/8cMlPn4uF
/dZ5cevhLuMuvNHPULFwDx+ne1PGVW7gJ4ZYyLnbdNsoRMIzqT4g5ZJlQ15Y
/u1RuReeqJmbA9EkPILmy+q5/Zo06dt8q5ksG6oUP/YfwxTNJBe4UnFJ2pir
UFx70qXFP9MVT/PxwBOmKL4X71310B3jFJPzZbJiD9oAmKLYn+abCYoj6D3G
aYrJ/WSi4ngf1/ztKMXzaB91uGLZCr7C421F/7T/wItDFTM7+kQJzTV9G7lD
yhSt59It6fMcoriIXz6s8rBisv//iOJn9Pk/oHgfBSI/r9nVbxw8pUjL7H9V
KK5FN+SUYpIv3aKYenpm8QyOFKtpQ6ha8eQGX5hUpWjtbxb/5+rlLkgpfkhe
v16Rtq3mjFJMcpXHKVraw6pXLKPnlT6KfxpvE0YYYYTxVx3B/7ftCP4/+P+/
kP9n34/s+Lz/oHPi/ZlJw5i8eH/0//g+AvpH9P/s/dH/s/dH/8/eH/0/e3/0
/+z90f+z90f/z94f/T/W21j1isH/J2Tfj2Tfj2Tfj2Tfj7T6qKP3R//P3h/9
P3t/9P/s/dH/s/dH/4/15+j90f+z90f/z94f/T97RvT/+D6Cdd2h90f/j/W9
6P3R/7P3R/+P61b0/uj/8b0J9P7o/9n7o/9n74/+X7w/+H+8PyrvD/4f66it
/uHo/dH/47yB3h/9P3t/9P/s/dH/s/dH/8/eH/0/1oFbOQvo/dH/s/dH/8/e
H/0/e3/0/+z90f+z90f//3tzH9D7o/9n74/+n70/+n+8HtH7o/9n74/+n70/
+n/2/uj/2Zuj/2fvj/6fvT/6f/b+6P/xfRz0/uj/2fuj/2fvj/4ff370/uj/
8b0S9P7o/9n7o//H92usvAz0/uj/2fuj/2fvj/6fvT/6f/b+6P/Z+6P/x/cg
0Puj/2fvj/6fvT/6f/b+6P/Z+6P/Z++P/p+9P5PKl3vlxfszh1GBfj74/+D/
g/8P/n/+jeD/wwgjjL/bCP6/bUfw/8H/zwf/vwv1VaoRsv/3luzR5pyQ/f/w
12q3HdM7J2T//zAt7LNC9v+7rJ867sUxOWFb1/9becRWXwL0/kz0/kz0/kz0
/kz0/kz0/kz0/kzrfVur/j85rfNC9v830XvMDcK29v+ke5aqEfI6K+lL2yJk
/5/4npyQ/b9fLT6+fE7I/v8q/9r8WTkh+39qKzMiJ2zr+n/L/1t9VND7M9H7
M9H7M9H7M9H7M63+M+j9mej9mej9megZmVY/Iuu6Q+/PtPp7oPdnovdnWutW
9P5Mq28Sen8men8men+m8v5zad0flfefS6uPitU/BL0/09o3RO/PRO/PRO/P
RO/PRO8vNPrAWH2W0Psz0fsz0fsz0fsz0fsz0fszW9v3Cb0/E70/E70/07oe
0fsz0fsz0fsz0fsz0Zsz0fsz0fsz0fszrX5c6P2Z6P2Z6P2Z1s+P3p9p9ZVC
789E78+0+mtZfaKs/lfo/Zno/Zno/Zno/Zno/ZlWHyT0/kz0/kz0/kz0/kz0
/kz0/kz0/qXq/9n/4z5AVOE3HvJC9v+0Lf9VTsj+f8KvPf7RUsgJ2f/PeNU3
3skJ2f/72e/bsqyQ/T9t2xbv58zg/4P/D/4/+P8wwggjjD/dCP6/bUfw/8H/
/4H1/+j90f9j/T96f/T/WP//LfVVzan6f6z7Z2Ld/9/V/1seD73/H1X/f4zX
lLc3qXUWen/0/1j/j94f/T/W/6P3Z1J8xRp5Vf/fTMc7r+r/fbXolutFv7v+
P/j/4P+D/w/+P/j/4P+D/1/4/T/W/c9r/x/0/uj/sf4fvT/6/1D/H/x/8P/B
/4cRRhhhLPSjtfNYa3NY3vXz+pFO0fLb1r9fUL9vW43f3Af5P45nW/17YyxD
z48jHPIwaliQUqRYqoo6RSuPbF2/DJhcodiN8uWGK1oeNVlPzDGo1x2J179P
k/ZJTlbsNfWfRz3ScK8ixX+98pKi5Uu7PevF4GTFXj/7wLjxiitQDudkRW+9
lj5trCK9lr3b+4o/rfbrkM59NJP14mTF4sNU8ZOuVsS8XubV7z2z5jazmoSb
0gviNWafaquPeg1txMRCzqez+sQmOW8F4RX/9olsdW7PY/2BLQhn3e+DkOvd
5T/2XqHfOnOE//ZtEDo3uCHUqKIgTHKL6+auw2KhtxXnz0qb/ZMphvPqgrDu
Zd9Io84VF5dHdR0SCzmfkfTH+QXhq779wvQ6dxT1AWgRHkfnScbc/0rWlRWK
K9AJX66YeMopio0+lmzd9xVX83r+wHGKd1KDkgrFZP+qQfik13vnVbpu9IHM
FnJOX7IubxbyvokP99t2TCSkNiM9U46moW6x8Ha67tKOljFHxsLV/Wn+TNot
epnvyFIQnjllm4d/OqPObXbzFYtsEhWEQ317mfH1Zp92avOweEGY5ALWmfkR
Vn9sq5/8oXRCFYQ/rOxXZnXOd824cmRBuNmOr/SZ0KPeUez6lbGQc1St68U6
DlY/aus8P4D2l2Ih52/us68fsZBzJK2+6NZ1QR/brbHwlEO9OcuY/c99avYy
Z8dCzlH1//Xu78XCJJcw406lEz4Wci7tLv41ll0LQoqLv7DOPh98W46NYyHn
xtKv1zEWcp6p1Z/cdzs6aYOC0FuDB/escx/StkQk7Ozjvl+158+T6YONhWvN
GXrTYWtl3EzyYbHwF5pgM6442exS/3os5JzoFE27kZB07Espcz63jsMa3naO
j4T9qN9Zyp3X3QuoWMj5xVa/+qVPO7Jp8XGR8OIXrpydvTFl5kFYx83Kp6A2
MxvGQs4Ltr6vmV9wlb8BFoRfVPkN9TrnZ5c9OsXCg+K1Pzn2hPTc/clI2IkO
YK076SJ/4UZC9j9WngK19doqEh5Do9bMcfBp65s8XRB+UZwdOu5Y716/x3dw
KQjfWcxvkNeZeQqkz46KhBev0rts6rO1Zi7D6eTXY+FGPg792LSjx5oRsfBE
/591z7jj6UKJhavSB5129DhVGQk5H9nKBUjqv2Mh5wKb84CRJ2L9e9reOCcW
Du/rO4mlXb+fzijOsLHw7qaH3951k4zbfcnOxVM7FnIus9X/3/rcrfyOPh/5
G28k7O7b0C1R/NypsVQk/Lx49k9+N2Xev7r7bcLVYuEuPgZ807SbTiMWcl75
F+v6DmSx0KfJvvN4Zm5dQyy8/J6rtnj9RzuPoDiJFB8AIiHn9lq5Etb9K3l8
bBby/ru1X7Ah1ddUK+52yMnFK7FSkR5/b9KkZcM6FYo9tvbBwdMU16Z6ogmK
Lx/vH5TGKCbPd2WK7/RLXX/nryMVrbqgPOUbjVZchuq8hii+4w/frcMUlzii
x9HL3jlS0c+yAzZ7W7ETHZDXFReh937fUvRvRRz2xijFEXSdDVc8pPdR75ad
PF6xk497Hz5WkbT+6s8pllFBye2Ki9D++VWKyXz6gmLipwcoJuubSYoUG7zu
WEVr3//cu/yNr1nRd5H7eLkKRXqM/LlSsS/1XWxUtNaDVg47lWENmKg4iD7Q
UYqX0H7UQEXLS/Snvq83O+R890JhhBFGGH+3Efx/8P/B/wf/b/h/9v1I63nV
qqNm34+06sTY9yPR+zPZ9yPR+zPZ9yOt/sns+5HoN5ns+5E/nuzfKIjF+//Z
/D/7fiT7fqSVm8C+H4nen8m+H4m+m8m+H2n1aWffj7TyI6z6WKufPPt+JHp/
Jvt+pNVXGX9/9P9Yj2rVCaP3Z7LvR1p90fF6QP/P3p9p1T+j92ey70eiv2Oy
70ea58Ncz41E78+06pPR+zPZWyOtHAr2/Uj0/kz2/Uj0/kxrPkfvz2Tfj0Tv
z7Tq1dG/M633QdD7M633U9j3I/H7of/H9xfY9yPR+zPZ9yPR+zOt9ynQ+zOt
9zjQ+zPZ9yOtPAX2/Ugrl4F9PxK9P5N9PxK9P9N6LwC9PxOvf/T/WAdr/Xv0
/kz2/Uj0/kyr/t/K0bDe30Hvz2Tfj7TuX+z7kej9mez7kej9mdb7COj9mdZ7
Jdb9y3r/zsoLCP4/+P/g/4P/DyOMMMIIY+4I/j/4/+D//3L+P8mPSwnZ/zfR
e5Z5IT/vdaP3TXPCUvX/C8r/o/cv5f/R+5fy/5YXtfy/5Tkt/2/V/z9x3Krl
d+yfF7L/pxjVfRuE7P9996WBp9QL59X/n0ANfWqE7P//RQI8K2zr+n/L/6P3
L+X/Le9t+X+rT4vl/63+UZb/t/rJWP4fvX8p/29dL9ZxsPpRWOe5te6z/L/V
F8W6LtD7l/L/6P1L+X/L41n+3zwfDP+P3r+U/0fvX8r/W/On5f/R+5fy/+j9
S/l/6zhY/h+9fyn/b3l4y/9bx62t/L/Vv8jy/+j9S/l/q/+D5f/R+5fy/+j9
S/l/q5+S5f+tvkyW/0fvX8r/o/cv5f/R+5fy/1YfDOvfo/cv5f/R+5fy/9bn
bvl/9P6l/L/Z/9Dw/+j9S/l/9P6l/D96/1L+37p/WfX/7P9xH6CFAunzQvb/
F24/ceMjD84J2f9vQM9bOSH7/+t9O9T+9UL2/7cM2Kz4qJQRBv8f/H/w/8H/
hxFGGGEstCP4/+D/g///y/l/q/4fvT/6f6z/Ly6exncYlFf1/9gnAvv/oL/C
vj9/V/+Pdf+l6v93vidX/JP9w+v/0fszn/a6c6ecqv+n9vybR6r+38pNCP4/
+P/g/4P/D/4/+P/g/4P/b63/t+r/Q/+f4P+D/w/+P4wwwggjjHkcrc2lnacc
2/8j57e1X7+tfv62Gq39fclPX6KYPMf1VOxF98/zFRehQLcbNI1BsVhHlTnk
/vf9s/it0orUZnmFjKL1/LAD9fmdpniF16zDJyuuvYNfyDco+t967R1mK95G
dTYzFVei9c3Lislx7aXYiR68n1E8gHLkXlS84JJXVh9x51jFh6kP7HTFa4qr
sHjvsYq7DvWdhKcqDuj+xLZb36+5AzXKHa+4EuWpjlFM9ismKY7d/Yhf9+9Y
rbgoBbBqHkvv+zcLT6FA3JRbhYKlWoS1FASVcXS4H20RLvbetZ0/fy3jtqR4
vBbh0j7mtGOd+367/l3arZUVPp/xYr3O/Pf05c5rEW51TvXl/z4s4yi+N46F
y9N+Ssb5TYbnLykI9z4tqtigoc71id+cfeVlBeF5b3XKTmyqc341tOoZBaGv
xl/svTqX6IBYOKu7X+Bl3PWu8ymjDoyFJ9B+VtqRvZxSEF6/RtcOd9xd7+ZQ
IX+LsNcwv7BJuySutULxbYr300z6bExXTOIAyxTnnDe8atTFYxR7je445cnn
Zyhetvdrbx7Se5aQ18t1u/kGB3lh8vnXOL8qrPsqFu5C+xYZdzT5qoJweVoo
1jnatlkzFvahDQy7n/yXg73gKgj39/GMx9Y7WjZXFoTt/Jd7sn5ubmFBGBc/
9e9vqHf06xxVEHIeonU++LTfRw4oCBen9W+dK3j9OicWbnu4N8oZtz+d8LGQ
82cHHP5D8U8s9Jb/uk8zjmLa280R3rEXnaDuHK/tXomFfJ5b/fOtfv4U23ZC
LKRv80baUczqsFjY+QW6UTmfDrzZzbHwU7rw0+4fFCgcC3v65f6/0mZf8cm5
ab0WOyIWct6r9fP7u0nHlQrCi+kv6sy+2U/59OfmWMi5yS3/WHrGqe9HQtJU
16TcQRPqbi0fFAm/ubiPTww2cw2s/tvUzuftWLgivciTmZszHwuP9K/HHJFx
ftesV2Mk7LWhF6MpR8vpyZGwmV78SbnD3vAJ2LHwl736Tv3nUWmzv/fDPp55
RCTk/D6rb7n1+1p98kmvPBQLE/9gz3tUXrtcLOTc5+S5IBI+9fysgz56r9bd
e8ycf19xYSSk9lY1te5dmt9jIW3nTkvP9WrNwtvKvdGpdf7s+/riJuEoyuWo
VrmezGXP9skjlYrL+TiDIY3CURccfu5bnarcbQOnfbLidk3CnekBpdrMa6AY
7EIk5DxTikM/MBLetbFPkK51s4b7F/ViIecvr79OrwOvXTEWcv649f9bX8dX
ERzZFAlf9Nsdw1LmdWr9/7RdNDESjiZPmHK+C8whUyPhUp8+t9Hl96TM+dzK
5bF+L4opPTESLnXioCVPHFTr/K7EfsMi4Tk0Uo5+7B6xsOP1VZteX5V2/ili
ypOR8Fh/2m2fck9e/90KoxeLhZyHa+XR9KXzIBZevLMX6Gl3CU0reeFelHNa
43K0kR8J6TFqtZT7+OqnTnr7pUi4Cz3ApBw9NhwTCfudNbPyohdqzdyZrnRb
ioX83JU8h8XCIf62tlnG7Ktv5RcMP9vP8LEwyUtNm8ffOh9o+/ODSEiHdXrK
+V2D1X6NhHRb+C5l5kFY96MLKMCnWdjn2ud+ubtrynXx09QKVYrJc8RUxf70
/aYpPkTbYzMUk+eMCYrtfdnHLqMUb6Mgl0GKp9GJMUzxEpoYhyp2o/wMzUbK
rx6mOMIvt757U/Gz7/wD+GjF0973gdTvKp5HN/whipObNiuuoIYpWr/vSvHt
P+y090hFa38h7+MhvixT/Ixy0Sco3kbPU6MV25PXf1GxC63Lr1dcidbTTyue
RI+/byne5i//D19WtPZHNqecqhmKgy477/5PepYrXkVBGRWKyT7PNEVrX3IS
PefVKL66x1NTxt7WoLj+HXdvfvq2mp0uWX3jxy4fr9jrtb3dc91HK1peopnq
0252yMT3n6G5oEbI/w0jjDD+qiP4/3kbwf8H//8X8v/s+5Hs+5G87kSyv0ey
70da/x59KPp/9v7o/9n7o/9nz4v+n70/+n/2/uj/2X+h/2fvz7yPCmZi8f4L
q/+36uXY9yPR+6P/Z++P/p+9P/p/rCdH74/+n70/+n/2/uj/2fuj/8fzAb0/
+n/2/uj/2fuj/2fvj/6fvT/6fzzPrf75Vm4Fen/0/+z90f+z90f/z54F/T/W
FaM3RP+PPz96f/T/WDeL3h/9P3t/9P/s/dH/43sN6P3R/7P3R//P3h/9P3t/
9P/s/dH/s/dH/4/1vej90f9j3bL1+6L3R//P3h/9P8576P3R/7P3R//P3h/9
P3t/Zruv/QcXifdnsu9Httb/s+9Hsu9HWu+7ofdH/8/eH/0/+3r0/+zB0f/j
/299HfT+6P/xOrX+f/T+6P/Z86L/x/ncyuWxfi/0/uj/2Tuj/2fvj/6fvT/6
f/b+6P/xfTT0/uj/2fuj/2fvj/6fvT/6f/b+6P/xvTP0/uj/2fuj/8e6eiu/
AL0/+n88/tb5gN4f/T97f/T/+D6IdT9aZeqc4owWifcP/j/4/+D/g/9v8xH8
fxhhhPFXHcH/z9sI/j/4/4XA/yfr1pSQ/f9gev81L2T/33VIz+KTWV74Z6v/
R+/PRO/PRM/LRO/PRO/PRP/FRO9fqv7/3a26X3nIZ1kh+/8le355Qfb4BuG8
+v9xe32Z/u+u1UL2/52oP0eLsFT9v+X/0fsz0fsz0fszrX4y6P2Z6P2Z6P2F
4P2Z1vmA3p+J3p+J3p+J3p+J3p+J3p9p9c+x+vmg92ei92ei92eiZ2FafUXQ
GzKtnx+9P9Pqm4Hen4nen4nen2n1NbL6b6D3Z6L3Z6L3Z6L3Z6L3Z1r9PdD7
M62+Jdbva/XJQe/PtOY99P5M9P5M9P5M9P7zWv9/4DNfFf/khOz/k/5POeG8
1v9b/ZrQ+zPR+zPR1zPRg5ei9XXQ+zOt69Qien8mel6mNZ9bffms3wu9PxO9
MxO9PxO9PxO9P9PqR4fen4nen4nen4nen4nen2n1nbPqLtD7M62+OpYnRO/P
tI6/dT6g92ei92da/aCs+5FV//+Zb1t4e07I/p/aL7ZvEbL/v5pGi5D9/xqb
+w5BdcLg/4P/D/4/+P/g/8MII4y/zAj+f95G8P/B/y8E/t+q/0fvj/4f6/9/
6bDP2bcOjFT9/6gNNx3/w9RY1f9bdWjU/nX1gqrnf/b7j65+6qTC767/t7zo
n8X/Y90/+n+s/088cXa+1f+j92diTl7w/8H/B/8f/P+C9v9Y91+q/h+9P/p/
rP9/3euJJ3Kq/r+Hvw2fkFf1/8H/B/8f/P/C4/+x7n9e6//R+zPfJl/eEur/
g/8P/j/4/+D/wwgjjL/PaO2811aev638f2vzi1s7rN/LouH/recQK5+oC/ng
PorWj5k8D050SGoXcVaDouUl+r++/k+75ysVr6H3eccpfuYfO84dqziC3i9u
VHz9mys2WX7DWHGZL/f9ea1nGxU7XtPp8Jr3Byuan5ePF1rlRYe8ZNoJ66y6
+8uKVo5qM+UVT1X8xi8XV5+smDznTlHcwJeF7ztGcYft/Rin+Khvj/FxmSKV
Lz43RnGgX8Y0VCnuR40tahWvenRU4y8dqhXvo74Nmh8XVwdPTalSfL122zG9
r9Uc6GN0R1Yr/uy3T36qUqR4tmc1rf5FVZf74ODZwqTPS63Zx5j0RMdYyPme
Vp9zK19gxhe+Yc0c4Y9TKRjbzD3sS7nT5Ypr+m2DzSsVref80/w2Xtdxiu2b
Lqn46etpirP98uzYSsWbt8oU/+SFST+aGkcxvX0LwqW9fliq3u1L50tByDmn
Vl/fj5fzK7pYyHmd29O8FQsnU4yq3V/dOv6JX5kjfPPBV4szR8Pc90wKwiMP
XnnA4p3qHF2u18XCYykYNe0600ZnLOScWWoLtFVBON23mzi6ztH0dFEsPKx8
nV3WT6XdjT5GsX0s5LxC67hdSOv7WMg5v9Zxs/ppe+v7yKIF4d50Qmbcrl5b
XB8Ja+j6qJ07j8bCZN7LuOk0YiHnQlp5GZvTezuxcPgauVUGvpBxpCOvjoWc
4+nPrj4TYuGZxb/N98m4FejGVBBe49tlbF/n7um6/8XTTigIe/b1QqHO3UK5
drGwe/b4ygPK7H7pVp9wirvuFQsnL7FicYZOu3uKV9OQnrGw52nX+FdqzP7q
Vj/t3R/d9MPZyxSEddQYps7st5/kgUfC+/22/NIpR6f18pHwNuqjVOuup3V2
JDyB+mTVmn28rf7/Vv7Chg3fF8+AWMg5ua3tZ271Y7euo+JNco13t2oWJttW
xfvUIf4nL1e09sFPuqND8UyYonjZmf9tV7NlueK9T/qGUxWKFHP+daPwjG2f
eHq3y6rclP/4E2OW8D+fTl528HtVbk2/bRPnhRSTO6nGjfBte36KhRU+FvKL
jHnfqfTbmRfEQkoZn2n3Y6fHmtUiYffNvGCqdSd4jb5kJEz6iNW6SV3rTv/w
skj4Ofm0WldOhSKR8Jc3/JmXcp94vXtVJKRpPrbvs9b8kCl+tx97x0LOq6Xb
QbtYyPdNf7UtPi4Sco6z1c+f2m7lIuHq9Pyccgd3m/5i4Z5YmDynZczrKHkv
LhLud4E/oCn3IW33RkLOp6byiuci4STyoilHl+H0SLilL894wP45rb761vyz
1X6+gCcWjvZtlPax77Nc74F1H9ZzUfK8Fgk5h9r6Obk/D/bp+QcVHETC/7zU
/5zvu9U6bxefeDoS9tz1wVtW3inlzrp56eIdKhJ2pIZ2xXnGt0nbPhb2u8PP
4Gm3BJ33zUK/C7jKwFp3n3+8HlypeIM/bfIzFZN82qmKVEbz/CTF5L46QZH0
+lqa1nN+J/+6049likl90ChFy58n+8/DFB99zI+RistQbu1wxZNovhitWLz5
TNi/X5lict68o3iK3wa4b7xiUkekuYwvn6oaqtjBv/bVZ6ziUMr1naKY3PeG
K1rLxCTXt49D9qf7Tz/FrpQPrEmPrSPeU/wPPXfWKPoqjg8WaVRMnks0rX2Q
F3x53J7Vijeu+0Xx1KtQ3GHixsVH4xrFWnoAzyvS7efbasX2tE/yhqJ1nK38
3y5rzRl602H/UVxgHj74/zDCCOPvNoL//+0R/H/w/8H/LzT+39vQQ3ePxPsz
rTpGXN8yrTpnK1+AfT/yz+L/2fcj0fsz2Vsjrb6+7K2R6COYVn21dfzZ9yPR
+zPZ9yPR+wvn+n4k+kom+34ken8m+34ken+mVU+L3p/Jvh+J3p/Jvh9p5WWw
z0Oi92ey70ei92ey70ei92dadcVWn3D2/Uj0/kyrvtrqp82+H2n122ffj0Tv
z2RPibT6eFv1/1b+Avt+pNXP3Kpntvqx4/XDZN+PXFD+n30/kn0/Er0/k30/
0srXYN+PtPqxs+9Hovdnsu9Hovdnsu9HWnkB1vyA3l9o3DfR+zOten706Uz2
/Uj0/kz2/Uj0/kz2/Uj0/kz8+dD/Y129Nf+g92fi/RX9P77vic9D6P/Z+zOt
+n+rPz/7fiR6fyb7fiR6fyb7fmT7jR+7fOiJueD/g/8P/j/4/98/gv8PI4ww
/m4j+P/fHsH/B/+/EPt/WsacMkvI/v8LWoBEQvb/d5DgywvZ/69O7zHnhez/
J/za4x8thZyQ/f8m9DnkhOz/BzzsK9byQvb/3jKfvGheyP7fr7bqq3NC9v9W
foFV/2/5f2uda/l/q7+Q5f+tOsbPyUxkhez/z6dAxwZhKf9P2x1b1AjZ//tP
//5eLUL2/77bxbZb54Sl/D96/1L+33qv3/L/lpew/L91/C3/j96/lP9X3r+E
/7e8peX/reNm+X/zuBn+H71/Kf+P3r+U/7f6ZVl+D71/Kf+P3r+U/0fvX8r/
W31CLP+P3r+U/7feu7f8v9Vvx/L/6P1L+X+rj4fl/63+S5b/b20/E6sfi3Ud
WfX/PYqz0K4XZoXs/60cnJ7+Y940LWT/vyX12coK2f8/TPfVrHBe6//R+5fy
/9Z9x/L/Vj8Wy/+j9y/l/9H7l/L/1n3Wmh+U9y/h/9H7l/L/lle3/L91HVn+
H71/Kf+P3r+U/7e8ujX/oPcv5f/R+5fy/+j9S/l/qz+P5f/R+5fy/+j9S9X/
s//HfYCL6b6XFbL/p8fd+rSQ/T+1eTo6JWT/n7xfVytk/+/fMnmyOE8zg/8P
/j/4/+D/wwgjjDAW2hH8/2+P4P+D/1+I/T8tGz7Lqfp/9P7o/7H+H70/+n+s
/0fvj/4f6//R+6P//731/1j3v6D9v+Ux0Pszve08vn3uf67/R++P/t/q/xP8
f/D/wf8H/7+w+P/W1v+/RT6yWdX/J7eBZlX/j94f/T/W/y+ySbRHp3dyv7v+
P/j/4P+D///j/b9V/2/1/0Hvz+xNOUUtqv6f7Gv3ZlX/n5wXzar+P8k3mx3q
/4P/D/7//zeC/w8jjDDCWEhHa719zv/9MZrWvsCffV61fi/rOFB+7/Gaxtcp
o+N9pWIvWtderbgSrRseVvzq55rinbtS8aDtCucNr6pXbCyuUpdYMaV4KDUs
qFH8mHIvJyu+Qe+zT1Bc5N8dnx9+9izFJJ/zA8Ukpyur+Bnl1A1XtD6uCt++
e7/+DmnlaiXr2rcVfyK/+47ixAdO3fL7CWMVkz7L4xXbL+HN47uKHUjQj1f0
qcFrbvOuopX/ddrl659/0IQpipt6jdFSoVh8WFu3fZMm5tQyV/th5ZMb7qpU
XPfFrYe7yRWKmKPGtHKiE/83RfEK+gGmKr4z2o9pir4L9X92nSXcJjnR3a9D
fMeXWMj5pFZfX38VxLfnhf+kb1zj/NP+v+6OhRV+udAu4/anhWWLcA9aJ6bd
99dOzk3rVaWIub/MDpS7NU3xrqaH3951k8mKVl4wabIbZwl5n+X+VX2Qbizk
fN52FChZEN6+ll+p17nP7/RBlpFwP8rLTpn90mkbaZ+C0M9u6/Sqc4fQ/NEi
POjaFVe4eOeMI31wVbOQc05JH/+7Rci55AfQeqsg/OJsv4FR76jd+tmx8H4f
Ezou7ZLlUyTknNZ7aV+rWVjhNeRxKUfbMpc2C9fy24Cnppyv5vtoi2Yh55me
5vXA1k3CpA9CtduENlibhLS8Tlc7/9s9fO9s4Rm+LcYKte5KOmCR8FASdrVm
v3Sf0r3DzgXhmxdOHLHvBXVmP2eKa126IBxC6+U6sz/2nuPeWGRkOhZyLjZp
1NsKwq3oA6t3+/cb9Oih5QXhp3475dF6dyt564KQ83+3o/teQTi+ePL8d9c6
5+3QLTfEQn+Uo2/S5vs11zsf+BgLOa/2pn773NmjEAk5p3WX+teHfnpiLKx5
bMvib5B2heKqc605sZBzn638AqvPtnUefu/bv+8eC4/c2BtpO4+AYrqXi4Wc
t2v12fa7Bn13ioUtW/uJL+38XemBU2PheskHah5nn9474ddYuDYJu4x53Kzv
S9u5j8XCTLLx6Ba/+ogHdvl3s3DYacsX/6TcyPRJBzx+ZKViX+r7NF2RNNur
ExWH+jjzB8cq9vDxHEtMVPSzzhavT1P8ypcd3DVTkXTVV9MVz/Ixw9s2CL2F
GfdGhdn/vHgRzjj1/UjIedb/nfHq7efuFwlpe7ZPrfNX6xqbR8Ll6MWEWjeB
njvywqSPWI2j7Y31ImFHmifsXAYrX8DKEznJb8+/FQl5ntyefFIsnHTp2sU/
adeZgoYj4bRJfiMz5SZTo65YKHnENCJhxp8Ol6bc05TXGgk5N3afff2IhZx/
TdqrSyz0aZdr/SftlqHCibzw8tqnZ551eo3Z/9/KO3ibzq+8kLb316txpz7m
g8sj4Xq0MV/rvm3ZvvgRRcLDfNnGGilH2zOdI+EnT938eHRmrXk8/dP11xfH
wiv8415d2iUfcyTk3OoXj/aJCZEweT6vdRHVF0TCLX05z5BaN8xN7lp3el6Y
9IeqdiN/9gVCkbC6+ehtLlm91sxbecM/Ji0RC9/3r9MsZuezWPPSAdTwKBZ+
QXUVGTuPZhsfVNosPKHSPzGkXPYFv6HZKHyIHsSr3Gtn+sCBGYqPUvDCTMX+
M/0BmaF4J03kFYoz/eW8YaWiVe+xCD3ITVGcWnyqffCWMYpWHmvxZlx8YBim
WFZ28kNnzRysuBHNQ8MUu1Q9dMeQFd9UbEf7eCMUh+3qK4PGK9KP9cQYxbv2
98nWmtY+QvJ7TFRcoueXF2SPH6PYnwpuHlVchIKbrlG0coGT3OYXFZP95+GK
yfPmRMX1VqWEIMWkriqruM1wfyFWKlo55q/7afS4akX/VDaqcabipdRvM1Lc
gZ5vahSblzm7eKd7W9Faj3cgP9HXIReh43qD5p/dF4URRhhh/FlG8P+/PYL/
D/4/+P+F3v+f+1an7MSmnHh/9P/s/dH/Y10fen8m+34k+37kgvL/Vs4Cen/0
/+z90f+z90f/j/XS6P2ZXx34TPFPLN6f+bDXzSMi8f7MVYpn16W3x+L90f+z
90f/z74V/T97fyb7fiR7LCT7fmS3L/wByov3Z3oL/chFefH+THqdYNlIvD/6
f/b+6P+xXhq9P/p/rOdE74/+H+tj0fuj/2fvj/6fvT/6f/b+6P/Z+6P/Z++D
/h/rhNH7o/9n74/+n/01+n/2/uj/8f0FK8/COg/R+6P/x/cR0Puj/8c6W/Tv
6P/Z+6P/x+OM3h/9Px436/ui92ey70f+2f1/cp/MivdH/4/1z+j90f+z90f/
z94f/T97f/T/7P3R/+N7GVa+AHp/9P84T6KnRv/P3h/9P3t/9P/s/dH/s/dH
/8/eH/0/e3/0/+z90f9j/b+Vd4DeH/0/e3/0/+z90f+z90f/j8cTvT/6f/b+
6P/Z+6P/Z++P/p+9P/p/9v7o//F9K/T+6P/x31vzEnp/9P/4vgmV79dH4v2Z
7PuRwf8H/x/8f/D/YYQRRhh/uxH8/2+P4P+D//8T+v+rLvML2wYh+39qN3N6
g5D9P8XAntwgZP9/zq0Dp32yYqOwrf1/kgeaFrL/91fBvzq0CNn/Uxuhy1qE
per/0fszrff60fuX8v9W/T+1KxqXE7L/X5LWJQ1C9v8Ue7hWRsj+v99PXuCn
hOz/qa3Psy3CUvX/6P2Z6P2Z6P2ZVr8U9P5tXf+P3p+JvpWJ3n9hrf9H78+0
+qWg92ea/RzA+zOt/hjo/Zno/Zno/Zno/Zno/ZnofZhWnxD0/kz0/kz010z0
/kyrf5HVZ8M6D9H7M61+ROj9mVafDfTvTPT+TOs4o/dnWsfN+r7o/UvV/2/h
tym2zAnZ//tu3K8PzQjn1f/3+eiIEeveUitk/5+d6Bu2ZITs/++m+TUrZP9/
AfWdahGWqv+3+p+g92ei92ei92ei92ei92dafZms/kJWPzFrnxQ9NRO9PxO9
PxO9PxO9PxO9PxO9PxO9P9Pq/2P1O0Lvz0Tvz0Tvz0Tvz7SOJ3p/Jnp/Jnp/
Jnp/Jnp/Jnp/ptVvDb0/0/r31ryE3p9p5tG3sv5/N2pk2SJk/0/LrdWzQvb/
35X5DiwtQvb/yXWfFbL/9103326XE7L/J/29bUbI/v/wvXxDv7Qw+P/g/4P/
/xP5ojDCCCOMP8sI/v+3R/D/wf//Cf3/gqr/f9tr/e9alP/vcZ1vmNys/L+v
Lv2pvFnV/6P3L1X/j3X/f5T/T/LhYlX/j96f+UqfCcVDkf3d9f9fkH9qVvX/
6P2ZVs7CgvL/WPfPxLp/Jtb9t7X/b6v6f6z7Z2LdPxPr/oP/D/7/7+T/rfp/
9P7M5D7four/1/nk2BO+3ar5d/v/C8j3N6v6//ab73bIyRe1qPp/9P7o/7H+
H+v+g/8P/j/4/wXn/7Huv1T9P3p/9P9Y/4/eH/0/1v+j9w/1/8H/B/8f/H8Y
YYQRxgIf1nz7mz7//8jbbav833ni/Mv/7UW/x9kOaeX8JsfpZMUkv/cKxeTv
L1TsRfsG5ytSTF3zUEXref6ON7wgqle82mvlWTWKmCPLtHJv76IHrSmKG1Gj
ioziVb6txceRIsUQdssrJn0Vxitan9c19PVed8jm4tPssTuMVWxPubejFHtR
Pth7ikle4mTFLv7xZV3NPvR+/TjFp+k5dLJiM3mUSYrt6blpouLOfhm8Y5ni
d5TnOUJx38FHbLzlOeMUL/LL5qU1x/b2oqlMccv1Xq24d84oRev7jh14SvFX
Gavo3zb/8LJpiofcMDi/+sEzFS/qX73UrhfWC3en9Vu5241e4I+EGf8awIOc
f1gQ3n2pT9yqc2teteTkd+O8kHMbk+ugSbgp1XHXuBd8u4u1W4Q/fHT1Uye9
nXb9vvULwpTiXb/WrTm2vFpxsI8lW71KEfMpmaSxvpipuGzVoo8+9G29cOS+
XlhUuOKHUFz5R8LFKP86ZfYnP5nWVbGQYrjWyrjM6V5Qx0LObaTXSU5vEfpd
hOEu42gVs0yt4pM+RvS8SsWVaWje6DXfSVWKw6guv1rxPQqkmy28KBH0bqkT
fYBdreI5PoZ8erVikmddqXgnrUc1O6SOe3HMwJmK2193YurDRysUN/bT0FON
wvT1dxbPiCpH8Z/n54X881j5C75r0p0PxEI6HdbNuLFneEEdCyO/fBybMfvh
V43ywZGRkI+PX9Wutn8sXJEavRTXlf520jkWjvbtns5OO4q7W7cgfNpvO+xU
56htw4BYyDmVdBo9GguH+LZdm2XcrOHfPfP6+rGQ2lLtkXYUn/xBJKTbwvSU
e/zIS79p2T4Wci5kkjceCTm/sm7mt0flXoiEq1Ljk9Tc/L1YSBr4x9RcHxwJ
/dtP2x2dcmd5PfRzJOScyj39Nvb3kXAW7c+mHE1T/SPhs7SBl3LUHqNnJHxj
/Z92z39e63xa5REbx8JzfVuMfdOOYvlei4Wcl23lelj9t62+4tS2Z8tY+Itv
93FU2vx9aZr+MRIuVpyFyj5LmfkONF2+1CzkzxHzd5nJfz9DMfEQ4xXX3mbW
Rkvd9LZi/sZhfT/7cpDiJhQUXqZo9QW6kD7ACsXPfHutGeWK1F7ryXrhsv7x
bY0Kd8hOt+91WlQv/Hmgf26smPs80ijk3NLLad87LzyATvhqd/DJfqbLC5M+
UzXOVz1fPjQS7kUN3lIut/M9xT+RkPTVaimzL701b9DH3DcScm713Y9ctErv
sryQ8y43P90HKOeFPG/T9v63eSHddubUOL+r0nh/JLz8R5/QmnLtvr64z3bX
RcLbyn3AZ63zVrZp8Uj4+Zf3TXpk0dq5++eR8Nnv/ZlXO/e9uEhI20/f15rH
J3lfJRKeS33Qat0S/ra6WrOQ82dfPPyHAYf/0CQ8libkGneVj+/tW6FI7Xz6
NAqT/fsqF5MPbhZyTi7p78mRsPmJ41YtvyPlqNxgr0j4daOfEWrNnz/JC42E
r/iP/apaVzz5VvlsRiQ88gEq4JhbZ9Es5Hkg6ZvULOTnn6RP3WxhhkR4jZlj
Qtu6m8bCu31M+gFp9xI1roqFb/rp6a6M87vem90cCz/124K/pB1p3Pax8NRR
fsMm7Ube5x94ImGNn46rU46miX6R8H3/2LdRau57pM1Cnp9Xpv6ETULa/lqq
xvlqkNvOmCUsr7zohStnV7mz6X4+S7iaj4U/sNrRY1tZheLpSaMrRcvfVm3Q
8P0NF0xXTK7jiYrJumGYojVP9qLff4gixeuuPlaxeJMpnmlTFOkxboMJil38
beaR0YpWbnIfCnqfoJjkFU9TXGRv/wWHK5bRD3yrYqeH/Yu2LypW3DKgeKU8
o/gx7de9rbiBb+O37xjFk4pPg81jGhX7rrzTN4ftNUvRqht5xS+ftksrWvt3
1nn1vJ++hrQoJtdPjWJ/auxYpnga3efuU7yP9iUeUSyj43evYlLneK5i2BcI
I4wwwmjjEfz/b47g/4P/D/5/4fH/s3155jVZ8f5M9v1I9P5M9v1I9v1I9v3I
BeX/2fcj0fszrfpk9P5M9v1I9v3IBeX/2fcjFzb/z74fid6fab1/gd6fyb4f
afXDt44Pen8m+34ken8m+34ken8m+34ken8m+34ken8m+34ken8m+34kenAm
+34ken8m+yQken8m+36kleth1d9afcXZ9yOt35d9P9LKd8DP76/u/9n3I9n3
I9n3I9n3I9n3I9H7M9lnI62+9NZ7NOj9mez7kej9mez7kej9mez7kej9mez7
kej9mdbxQW/OZN+PZN+PtPw/+34k+34ken8m+36k9fOz70ei92fi9c9cw7fh
Hx+p5x/2/Ugrx4R9PxK9P5N9PxK9P5N9PxK9P9Oan9n3I9n3I9n3I4P/D/4/
+P/g/8MII4wwFtgI/v83R/D/wf8H/z///D/F8+6eEbL/p8vsX1lhqfp/y/+j
9y/l/1tb/8/rX1wH+6reLy/IC9n/L0oNLhqF7P/p8l6jXsj+/yHy61lhqfp/
9P6l/D96/1L+36r/T86XSMj+P/HBOSH7f1/1+fjyOSH7f1omDc4J2f9bdaRW
/b9V327V21ObpDNyQvb/FG+7Tk7I/j9NfU2yQvb/vhvDreVZYan6f2s/wvL/
6P1L+X/L41n+H71/Kf+P3r+U/0fvX8r/W97Y8v/o/Uv5f/T+pfy/5cEs/4/e
v5T/R+9fyv9bfb0s/2/1FbH8v/X7Wv7f6u9k1f8/3LDeWS9/nBWy/z/fty1Y
tU7Y1v6fXpPpUyVk/899gbA/UF/aKM0K2f/TaXFVVtjW9f+t9f/o/Uv5f6sv
jTVvoPcv5f+tfVvL/6P3L+X/0fuX8v/o/Uv5f/Tm81r/T9PQxKxwXuv/0fuX
8v/Wz2/5f/T+bV3/b/Uxs/w/ev9S/h+9fyn/j97/j6r/p9dMclkh+3+fJrTR
oTkhe1rfRWivXbNC9v90GxiREQb/H/x/8P9hhBFGGGGUHMH//+YI/j/4/+D/
/3f/fyM1AG9S/p90yaktqv4fvT8T6/7b2v9b9f9Jfm2s6v+t+jf0/kyfgvH6
PTlV/++7gv/7sKyq/0fvz/Sr7aPezar6//nt/1tb/4/eH/3//1r/v9SMU9//
KJ9X9f/o/dH/o29H74/+H+v/0fuj//+99f/B/wf//3fw/9bniN6f6d/a6jyt
5Q+v/7dyAdD7o//H+v8auiFm//D6/+D//xj/v6Dq/xeU/7fmAev9R6v+/8/i
/635udOVI3/eq29e1f97Wzvji5yq/z9hHd/gPa/q/9H7o/9HT4veP9T/B/8f
/H/w/2GEEUYYMlrrwy1v/673o0f+frbW27fp7zsfvz79fmc4RRIvF2ka/76M
fPNliub3pfegeztk13Pf6pSd+J6itd5fqbjq7NqhXnHnN31j4BrFbsXVxP6L
zVTMr37wDYPzkxRXoTqYGsWtu195yGenNSmu6GPSzpqj6FeL7d4oKFqe3Dps
Vs6v5bHPo/XQBMXDSIROU0xyGicpDqJ1yWRFy6t/6Ns4rz1V8ayZfuFQrvgl
BRBWKNLjYL8ZigO6P7Ht1vePUrRyrFYq/hY77T1QcRna3xihiHmKzNd8e5Lp
UxSt3F7SOutUKA782K+0GoTHn/rYUi9dV+lIgz48W8h5dj+e7H+RWHjcs+tV
vj0j42iZOiwWdn6BJji3AgVQNgsnNflE3ZTrfri/oDSHzfBB0rWKb5OQr1Ls
TbGXmqvQQlFzS8rzLVe08iWX7OyTFGcJ2atYfdrXJtEXCx+73Acwp51POdwk
KgiH+va74+sdPdavlBWWfeQDyercW367qLpa0e9CHr1NheII3879p+mKa767
VXFGqFBMcpMrFc962Z8IMxRJ191YoXg+NZKvVJxYd2v5oC0qFP0uz1m7lSta
fmaOX3bWzlTchA7sDMVB1Id9uqL13oHVx97q/7wu5YfHQs673OKrDUcNWyMS
8nlr9YFP8sYLwi+qDj1jpW51Zi6A1c/f6rc/5x4veCNhJ2p4U+vodrJ6JPRp
pgM2q3XeZrxzRSRcnb4g55/Gwl28vloy41KUtxwJ/7mVT0JOuS4U1N0k/Jzy
2Tn/s0m4ITUUqTbfN5lE+5OR8PO+veM3Z9eaffin71L/+tBPI+EPpPNTjrR1
u1jIucbJsjwScs6p9Z6R1S/9RvI0kfCUh/ydpNY9RRuT+f+PVD9Q47zVmvrP
SMj5nhHVH0dCriv4mOr4I+Eutcs37ndgyn1zhd9wj4WcW32Cv+19WaP48sSD
d7p9rwpFq//bSfR4MVZxDuWdvqg4iPIPn1dMrtf3FOm03mm64vghz93f6+KZ
ir1Gd5zy5PMzFM/22uWoCsWN3u/2xZ0blytuTPsP9cLXfEzoouVuDO2TNwov
owm80pw36HawYV44jfrBVzvahhmZF+an9VrsiB415ntbVj95KkcYnhe+d23n
z187r8bdTnUleeHlVA9e7ZanCzknvNrH7exd5ShGd7Wc8Kufa675YJNKR5fb
ZXkhX49JYUBe2HylfwOtxlG86l554aaUp1Ht6LFjl7zwvmN84HG1mQtA2+Sr
RcLudEOsNefhF6/0Al9zt5EXFJ8YKhSt+Z+WB6tUKNK2cXODcAu68VTOfb7I
Czl3mB6nRkdCzk2+hXKzY2F3yrFOu0eojqZJyPtKyeN7leIR+1887YR1qhWt
55ahPv6213TFA664sHjLqVKk0+/LJuFy9EJEzdz5Oha2jNn9iF/3z8x9LikI
OV/eP8Xs0SkWHhSv/cmxJ6QdvV76XiycTvt2GRf5x9w1CsItaUOozrwP+mqD
V/YoCDvQg0ida+nvT6RYyPVOXx34TPFPLDzo2hVXuHjnjKuNvll6jc2bhScU
j9p6lcX7Mt0QmoR8nY7yp1GnKsW018e7Vypa+03Fh5rZh989SXEHv1y8erBi
n+38GThC0epX+fanJ/5UnqpQXPkG/2SiWeanv/dHKDbS/X6IYhmt2wYpLkLv
045VXJvqCCYpWp6/S/FoPHLRA4pJfV8vxa50HTyo+PERfoN+jKJVF7EZ1QXV
KZ5I+0dZxYd9+d2IBkVrf/CfLYX1792mWjHpp9qsaN2vHzrVXyHvKzbTg88r
muQ5HlC09gU60H3sJsU28zlhhBFGGH/VEfx/8P/B/wf//yf3/+z7kS8e/eT1
360QifdH/8/eH/0/e38m+37kn8X/W32V0fuj/2fvj/6fvT+Tyk+PKIj3D/5/
/vp/fO/A6mNv9X9G74/+H89bqw88+g70//hegNXPH70/+n/2/uj/2fuj/2fv
j/6fvT/6f/b+TLKOD+XF+zPRM6L/x+sLvT/6f6zDR++P/p+9P/p/9v7o/7HO
1uqXjt5f+f+53h/9P3t/9P/4XiF6f/T/7P2D//99/p99P5J9P9LKK0Hvj/6f
fSL6f3xvC70/+n/2/uj/2fuj/2fvj/6fvT/6f7we0fuj/2fvj/6fvT/6f3wv
AL0/+n+ch+e3/2ffj0Tvj/6fvT/6f/b+TMyTbmv/v8cRv+7f8fkW5f/90/XX
/XLK/9Nj3ei8eH/0/+z90f+z90f/z94f/T97f/T/7P3R/+N9EL0/+n983xm9
P5N9PxKvz+D/g/8P/j/4/zDCCCOMkiP4/+D/g/8P/n8++/8+Pvbzlloh+/+N
yXemhez/SZte1iJk/x/XepOSFc5r/T96fyZ6/1L1/0k9fSRk/2/VUVMc6/Sc
kP3/ygMW77TZf3NC9v+kgbrOErL/92+vn9s9K+R1NC3T67PCUvX/Vp8W9P5M
9P6l6v832/GVPhN65IXs/3clz1EvZP+feKw6Ifv/pE9OvZD9/1UULJATsv8/
b7jv6NMiZP+fpz43WSH7f2pDdnxOyP6flq+PZoXs/4/OvfDE+OK8yGT/b/Vn
3ufsWwdO+6ROyP6f9MpOdUL2/7Qt06dFyP7H8nhWHxtrfYfen2ntW1l9YNB3
MK2+QFY/H6vfDnp/Jnp/Jnp/Jnp/Jnr/ea3/t/qWoPdnWn140Psz0fsz0fsz
rT4bVr8U9P7i/8H7M9H7M62+guj9mej9mT/RRldeyD6BtmuezwrZ/19JQa11
wrb2/4mHqxKy/yc8nRGy/0/6bGWF7P87vePNX4uQ/f+iJMazQvb/a9A8lxXO
a/2/NW+g92daXtHq22b1k0Hvz0Tvz0Tvz0Tvz0Tvz0Tvz0Tvz0Tvz7T6AqH3
Z1rz8Ab0c0VC9v+0TdqYFbL/t+b/N+g5MSssVf+P3p+J3p+J3r9U/f+vP/hC
ipyQ/T+dXivnhez/recW9v+4D8D+H/cBrPp/9P5M9P5M9P5M9P5M9P5M6z6I
3p9p9TtF7z+v9f+v7+2e6/5ETsj+fzQ1NMwJ2f9P7HHdp5OXbRAG/x/8f/D/
YYQRRhh/4RH8f/D/wf8H/7+A6v+pTe03zar+H70/+n+s//fdVs/uklP1/1j3
P6/+36r/R++P/h89Knp/9P9Y/0/tNT/Iqfp/XD+j//+99f9t5f+x7h/9P9b/
77fhorPfeTyr6v9v8G3ux7ao+n9qczswq+r/0fuj/8f6f/T+6P+x/h+9f6n6
/+Gv1W47pndO1f8n6/isqv9PjmuLqv9H7xP8/x/r/7Hun2n5xuD/29b/Wz4B
vT/Tyn+Z3/X/vXzb6/taVP0/en/0/1j/j94f/T/W/1NcyT5ZVf9fvIhf6n9O
TtX/W+8NBf//x/p/rP9H74/+H+d/9P7Ms78aVrzz5FT9f1v5fytXorX1/9Zz
S2v7/2Dd/1/d/1v1/9Z7Ouj90f+H+v/g/4P/DyOMMML4Gw/L/7c2tzfneYym
5cON3Ns/5vedf/7fyqMxfb6Rm2x9ncS/9lW09hfe820M7hin+DDlVNYpnkoB
shnFDamxQo2i1b/F+r77D/uyuHKrU7zg4XuLK6684j0kLj9STJ7TC4rJfzde
0fq8DqDAzncd8jPyPeMVz7v/k56u80zFf3RcacL+/SoUL6LGGWMUE1/4vqKV
X/xy/3O+73bLTMX+M31g0wxFK9/qAqqfrlCc/ux+xU9ivGIzvaf8jmK3SX4j
Y6rinT5W87gKxSS/t0rx3rFfdzzpXk1a5hafT5mcozrJx+9NaBSyHziquBrd
/uO8cCn6v2vceb/4wrSCcFuvG1+ucz+/8eCr31wxR0htUnINrty3IXmiRXjY
GT7IMON2un2v06KKKkXrfMhQP5NpiteM8yu2qYpWf5gunU8ZdeAKVYqnL+9f
RKhQbPfDysUleIMwqeeqdH26+Q2RvDC5LtjnxcLHl3rpuptGZ5x/2l98uVjY
abP/3tTyj7Sj1+4Xi4WPNfsFdmpu/5ZmIec/brPRoQN3/rFC8QqvvYdPVvzM
l1sf/Y7iUNonGatIsXa/VCgm+WmVitv379JurWOqFGl74OdKxWRfSbMbiZvp
isl6dLLiId18wNk7ikm+8RjFxAdPUvzMx+XenhPy+UCXWa9YmOwzpl2Po33H
l1i4C+UIZtyAw38o/omFfpfmuk8zZj9kq69ysi/XLOScx4tW8QJ/tnC9W/yL
P7Xuk+d8Qmok3H2LNX2nGrfFrasVT51IONzfFj5IOW/5tl0mFi6XJgPsLiNf
GAn383HWi6Qcxcr2jYScN2rV3x662v6Nmd1mC3+5zTcmqZnrRxuE7ElWoHm9
Xsj+7Uavm29oEPJ5nuwDzhI2es38cJUjzdcpL6wmoVvtfBp7xfmRcAdqXFTr
aDtq/VjIecdJHnsk/ODfXpDVupH3+cDuSMj5lRSf/n4kpG24a1LuFArCniXk
9T5p3LPzQvq0xlc70nBHRsIDy3Z6c5Ona828hu0ojzESTvLa/rRatzX9/Wwh
e9qJv/b4R0uhUtHq6/UT+dJyxccf82OK4ne0kTxY0drvXqZ41iw+brRikh8+
XrHDnuPeWGTkJMXHqUHSDMUDRvdLXX9nuWITfd7TFftSnxbNp7y+2b9RyPuh
VBYwu1HIOenr0QHMCfv7WOB8paOPf/G8cEPaqK52+6576lLtbssL59D9ocbd
/Yi/0vNCzvP13Z0+fiovTPrN1VC6cdcOeWHSf6raFS+mz2a8mhOSVjyiylG7
nSE54QsP+yu5ylF7qgvywrv89nF5tevhyxdOyAt3XnuHG39+o9o10PWXF67u
t9E2rXH30HNHXsj5la/QyAuH7UozgpkLcCYVVMwWcn3Lon46fadSEfOqmdbz
Q8pvm8XTFZM86grFqXMuPP7VM/PCr/02wZhq98JmvjIgEnKer3Xft9578nf5
q94rV1yZRqWi1X9vCdq4nKGY+MJyxctpX6tByPf3HyifebaQfy//VNNxSizk
XGD6cqfGwvXoOk27+2hDMBYm+3xpd8w2l6y+8WORcDmaeFPuvzNevf3c/SJh
l5s67vhKn1r3Mn3/2UL2olv5uO85eeGoDf0GQI2j2+vRsTB5HyLt6ON/Ihb+
QjfEjKNt4E1jIecgv037z83CtSh4OOUWJc9dpUjLgxMrFDf1p2mLZvL3ZYor
0ec8WDHJfa1Q3Nc/dk/T/E/xqXXwe1WKdNsdNFkx2Xd9TTE5H99UHHRI76Pe
LXtXsfhQv0HD9zMVKyjvd7hir2X8FHatYle6H/ZT7EB9Fx9S/O5iv1MyTNGq
z5lF9+OsYnJe5hSTfn3Vip1v9CuglOKcH33QfJVivS9/6dKk+OLWw33LNUVr
35wO0xqDFMv8NsayNyh28I9Tn92uuAjlUV+l2dq61jDCCCOMv9sI/j/4/+D/
g/9fyPw/+36kVR/Ivh+J3p/Jvh95tW/jOisW7/9n8//s+5Hs+5Ho/Zm87kei
92ey70cG/z9//D+eD+z7kej9mez7kVY/ZKuu8qybl/5y358j8f5M9v1I9P5M
9v1I9P5M9v1I9P5Mq/82+36k1SfZ6r9tnefs+5Hs+5Ho/Zns+5Ho/Zns+5Ho
/ZlWvR96fyb7fqSV18C+H2n1aQ/+f978v5WHwr4fyb4fyb4fid6fyb4fid6f
yb4fyb4fyb4fyb4fyb4fid6fyb4fid6fab0XYL3fuqD8P/t+JHtxJHp/pvWe
xfz2/zvQ+5dZ5f+t+zvuZzDZ9yPR+zPZ9yPZ9yPZ9yOtumj2/Uj2/Uj2/Uj2
/Uj2/cjg/4P/D/4/jDDCCCOM4P+D/w/+P/j/1vp/ap8xOS1k/5/0m8kK2f9T
m4+Xc0L2/1QuODUnnNf6f8v/o/cv5f+t+n+KLfgoJ2T/v/ixvmNInZDPB2pv
dGxGyOv35S/e+bxffkgL2f9b/eGtem/fXaJ9U1ZYqv7f8v/o/Uv5f/T+per/
6TRYJCdsa///vG+bdFODkP2/VR/Yh/oqNQrZ/9Oys1ejkP3/weTPGoRt7f/9
2XLKqFlC9v+XVPz09ejDmoXs/639IMv/o/cv5f+tfgiW/29t/T96/1L+H71/
Kf+P3r+U/19Q9f+W/0fvX8r/o/cv5f/R+5eq/0fvX8r/W/2aLP9v1f9vT+I3
J2T/b+V6UJuq/eqFf5T/X2qGT/isEbL/T7xiSsj+nzTipBYh+/8NaGLJCtn/
/5vYImT//9lrvjFRi3Be6/9b6//R+5fy/+j9F7T/R+9fyv+j9y/l/636/670
okBOyP6/OOks2Xlai5D9/1I39dvnzh4tQn5+2O8+P6G1CNn/FyeDq/N9ssJ5
9f/Wfd+q//fpN4MuywrZ/2f+1eHbx5fPCdn/W/k79JrSuBYh+n/cB2ht/b/l
/9H7t7X/t+r/57f/t+r/y2mDOSdk/78pefSskP1/0l+xQTiv/t93+1nv1Xoh
+39q/3lYgzD4/+D/g/8PI4wwwvgDRvD/wf8H/x/8fxvV/6P3R/+P9f/o/Zn0
MayTU/X/y1Oj79zvrv9vrf/Huv9S9f/U1nOlrDofcN3O3PqXc7sv41pU/b/V
H96q90bvz3xrXE30zdK5313/31b+36r/R+//R9X/t/h25BvnVH1g0tc/94fX
/79FF0Cj6f+x/h+9/8Lq/7Huv1T9/8Lm/636f6tPstV/u63q/xeU/7fq/+e3
/7f6tFv1/1auB7U1Pyu70NT/p6mferOq/0fvj/4f6//R+6P/x/p/Kw+Fpr/B
uf+5/n9++3/s+/Nn8/9W/T96f/T/WP9vPT+g90f//7/W/1v3fav+H70/+n+s
/zfzd1rZ/8eq/7d+rwXl/zG//I/y/yfRRBSp+n/0/uj/51f9v0/Xav9INtT/
B/8f/H8YYYQRxsIwWjtPWv+eJvDjNReU/7c8v7V/0Uaj1f7fOm50PC5ULKP7
/HWKyfe5VdHytDctdkSPo5dtUPx/7L0HmFRV1raNGRUVEyomzCg4ooOKsTCH
cRSMGFBUzKgIjDmgomJGxIyCigoKSM6h6aahm07V1TlB16lqxIwZ8197bde6
/m89s0R4UdHZ++L67vdTpq0+dcLe915nPRSDWVoNtHISrdwov46cZxDXmz9+
NfP0sbUp4AO+4Broc+2SwDzKZZ0CXOHioJ4eCXyeGkLPAfr5Sz6w2dXXZb4h
JLXZqJ8HHEANNbKA1r6D92cLgFb+nfcQBcBlzdzKPw/YiRriLAR2przCacB1
N3AddxcAh36wwSev7VkGpOXEmaXArrT+RdZT4+ElwscGFx5WO6Y89lFmNT35
rSah5EbWjpn0yYVLheXu9YDxVbHZlCu4VOjX1VUxV/10+adLhXnPrZP5Dapj
N3cdfNhJM98Tnj7QXTC1v3iCRmEb1561ttLMe33lPmdwFgGt9/TpdLkN2eKU
s/YrPho5ro/bUSgBjiI/XSfkvONHe72Xmamnhb6fUXmMYpi7LRU+TPeHql/8
63vCWnfYFtbGUpQjt1TY9q7EPnclqn7JDWsSZg7+LZtcWxmjbafZjcJ/0w+s
jNXR+xulQCsve3u3fXjYDOCt5JNGAK39qYvX6fPu9EHzgf68zgNuQ3mzC4D+
/FoIpLY0o2cBLX9o5Yzv5OI6v80DXuleA9miXtiK3ucojT199PuZP01C+joL
K83vy29sNQk53+2zR/ea2+3zJuEJP+746mOLK2O0XOy7VDg314nXql88X1LI
PsTKzTz08ot2n7xNKdB6r8fqp02a+5alwk1p46oqdiuJwibhme4yfqbSzq2g
+1OT0O0StTmuIkbbJIfWCyff687EUshbZfpc+mLggxSsWQL8wS2bL6sVsh/b
n/YHaoU+Ry8eS2016o3miZRwH+qfwu9DpYStqN95IjbhXPdATwkX0HtRiVgJ
XYdNwp8o56QyNtY9bj9bIuSc3+4U6Fkn3Jw2QEpjEQm+euGQ7dc/d/P9E7Fq
2oZpEA50sQ1nlcVuetclDtQLd6eRiG1L529K6J6OT22dMD3wj+TNEsChrp37
I3HgiIZTP5yTWwKk8oWrFwK7ZJ6SO27+NtDK/73VvRa07nig97IzgS1fnHt3
VX4ukC6rSQXAL3fZfnHveCGQ4jBbFgMXN7hRBBxBvqQYaL3HdAblTzYI2Qda
35d/vqWF/Ny3/vlhu1We9+a8lNDdlTJ/YsPctmt2vbDLxDtHHxtL/NKnvl54
h4tfbyyNdaY+UfXC5Ye75IxE7N/dneisF/6YOTp375KI0es2qXoh7xf4369e
ON5pvO0SsZH37DGktK5eeL7btu2Wub7c6zzjFwsvO69//XX/KP+lnqVR2J6C
USrN/Q7S891KgCPPdh31CoD9T3EFAXlAul0szwf6968KgBPphKkVcq40lUcM
SQs53zxzsuxSuPUSoX9ulsfocTilDLjVCPfiXSmQlg0nx4Fnp9yN5LczsY7r
6Ia0vkffB3+x0FXbbDmiLDbQacpPlgg7HeuStStim4yfc9Bmpy8RsodPd3Ib
5Y3CW9MuOYmfL4uFvt9cWazPw+Vnrv9+HGj1fWpNud5xIJ+/mpv3q+381maL
hf68KzPnybvQQuk94SufukKSmpirOhjaslHI+7ZWnYN13g52y87WhcCdDmjY
c8N7c4EPdXcnUhxo1V2U0HtKCWB3eqGhFDjSbSsNfAc40E0nXhoL7EeNyWYD
V7jXfufHgfGT3YGaA7Ryaa31ZjO6kd4PbOvinztNBn40x03ASoHXuMfS1u8B
fT3XMqDlAajcKrsCuAU9r5Bv0f2pDtjtzXmjLm5cDCykPPkc4NVu+fDoBKDl
N349Z7k30vIqYYQRRhhh+BH8f/D/wf8H//8n+X/2/Zrg/ZX/Z++v/T97f+3/
2ftr/8/en8m+X3Nt8//s+zXZ92tq76/9P3t/7f/ZI2v/z96fyb5fM/j/1fP/
7Ps1tffX/l9/X9r7a//P3l/7f/b+TJ2DuLr+38r10N5f+3/2/tr/s/fX/l/X
r7Lv12Tfr7mm/L/VH5t9v6b2/tr/s/fX/p+9v/b/7P2Z3q83ifdnsu/XZN//
35kW788kjTgkJd5f+3/2yMH//7H+3/J7Vj9w/T0xree+Rfb9muz7Ndn3a7Lv
17R8qfW+AHtizTsfdEIyJd6f6Y9HWrw/k32/5trm/9n3a7Lv1/zp8S4n3liQ
Fu+/tvr/tq+7EzsF36N/ny8t3p953T/ckWoS78/U+btM9v2a7Ps1f2//z75f
05ons+/XtN7bCv4/+P/g/8MII4ww/odG8P/B/wf/H/y/4f+d/b7ysQoh+3+r
3q+da3fcPiVk/3+rW6b8MyVcWf0/eP9fqL0/U3t/pvb+TO39V1b/T2dd10jI
/n8YFbxXCdn/H04NTauF7P/Xz9lx8xfnVgvZ/5O2G5wUsv/3dcORcGX1/5b/
196fqb0/U3tkpvb+K6v/p+XiJSnh/6r/9/V2JUL2/63ofeVG4crq/7X3Z1rf
l/b+TO39mdr7r6z+n9q9HZYWsv//kNapKeHK6v+tfhra+zO192da/Sss/2/V
/+9APiYSsv9v7U7THSMh+//PaKMlEq5u/b/2/kzt/Zna+zO19/+z6/8tn+ze
+u/SJi1k/198tDOyaSH7/53pQRwJ2f/7/jm1wj/b/593wTf7/3RVhZD9f/Md
XMeTaiH7f2rvNTUpZP9P7Tw2ioTs/2ka911SyP6f2p1sEAlXt/7/9/b/f9f6
f8471rnHNO05PxKyR73tNWfck0L2/1sc5DrZVQrZ//t+e41C9v90mfRJCldW
/2/5f6v+n9oaXpwWsv/vRvOOlJD9f372wB3veCsSsv//jubdkZA9v/XPqfw+
FQnX1vr/jemDRUL2/2buA21IREL2/9TuanBKuLL6f2uebPl/q/6/6J2Hrzph
j5SQ7w/Webuq/r+S+ufVCdn/W7lLFDN+WYMw+P/g/4P/DyOMMMJYgyP4/+D/
g/8P/n8V6/+199f+X9f/a+/PfLbyrkd/rklD/f+f5f+t+n/t/ZnO7lzXPAn1
/1afXnc2nvtqEur/tffX/l/X//v1Weo31///3v7/5nbOdDRB/b/2/v+r/n9y
DxfQUAv1/9r7My98pM3O/U9JQf3/n+X/rX7I2vtr/6/r/61cjz/L/+9HgjkF
9f/a+2v/r+v/tfdnWv2xrfr/39v/67r/1a3/13X/TF33vzL/b9X/a++v/b+u
/59+vAuAiNaa+n/Sax8ugfr/9mWNZx/QOwn1/9r7a/+v6/+199f+X9f/a6/H
tPqBW+9rrKr/131/mN9Q3kIK6v83o/MuBfX/efs5k5+C+n/tSZlultJqYuo3
1//run+mrvtfWf2/9v7a/+s6au39mdQm+5VGqP/X3l/7f13/v84c92Jk9Jvr
/3Xdv/b/uv5fe3/t/3X9v/b72v//1vp/63vUdf9MXffPtPrw+xyJJqj/p8fn
iWmo/9feX/v/36v+35on674/TJcOs9eZTVD/b90frPM21P8H/x/8fxhhhBHG
X2Csap7vr/6c/+LV6b7bA2l5fiP3dpX/u6vK39n/W96+M/mtO4BWbnJn6lvS
D+i9/i1I+nnXAa1crVKq564DWjmPVm7aE+514QuKgI85PRHlA1u5WLBTyoBn
rf9+s9MWpYCLzrnj8KcfeB/4JnmVamBWC5cI9QZwiItL7T0OWN73pNMHfjUZ
6POQ84GkPybMBlJ8VPdJQMvDD6S8vlnAlhRctRBo7ZtQWVp6IdB7oGyglTu8
YiNXkDgbeIiLXx1aBLTyIq16v3Opj0c50PJRBR07ZVYyS4SkRbtVxG6hvj1L
hH6eXPHLv18i9LGi5bHjjndjqfB9V1Z4X1WMtOBG7wknUm5ujZn359cHRcCP
Tmt1Yn11AfAHp2HyioB0O9g5DvR5vsgqtz3Sul74kIuPfK405lL87r8tLZwx
qOMb0Udlsb4u/vHSpcITaR+iKnY3ebVGoa//zRxnmo+XAf26tkF4iov7W4/X
003Cj91y7ZjK2MstP2xX1rhUyDnCd5KnXyxs95AThWW/XMelQJc2+83+xUCf
5zkX2JHui5OAo4+NvXbdS/OAbbY+8vl9PpgLXOZ0XbuJwJNbrJv5yNOBd7rD
9MVUYCPt62YDR7oY52PiQCo7/KpeeNmBL71yRJ9EjLYZbkkLh1Dfn7IYaaY3
lwr5/vwj5dYuFV5IG1PVv+RaNwm3o/2Gytg6FAzaJHSr96EfVPySc75UeMxb
m/Wr7VwVG9z/xov/fWSj0N8nK8z+Tv79lmKgr8+OA8+sufSDPt83CP3nKotd
/uk25e13bRLy9e7PyyYh5/x+TRfmUuHpJTsftltlVWzr5c5wLBHmUGBmudmP
KOF0Q1QCHP7lKcO+PAXZfXcXkBoHPk/55qVAWr5u1SDk3HPSGTc1CK9s7Uxq
IraYzqO00NdFlsUedl/38Wlh32NHv3va/WW/5IqnhW53/9EaztddLPR9nTL3
SRdjeWWD0NdNJ2IrWjgh2yAcRfXRCfP+4M+bxcLhZRQ8HPt2mHtgLRaO2spV
6Np5rFbfDKvvzY+0TxoH+u9/IbA/3QcnAt1dNOeqaUCftzsV2CNztt7fYjLQ
8ku0zfz2QmB72hcuAb7nNPlTcaD1fBlEnnYR0OdhFgKHUQ5nrZDP5w2o8KNO
OJk2HuLme38Uk3l3Wsj3+Q9fdn9xidA/H8p/yaVsEG5Iwr7M/B4X1LigSaTl
Ua3cbe9p40BXVd2vFmn1KbL6U/F1oPnoxC2GXXpeHDgy85Rsm18ItOaNX7uy
mLJ84OCFrrAhD+h9f62Qzyv/PSwW/pvmq+Wmj7X2K63jafne+6n+BdmONvxK
gePc7aisQUi/RpfMfJN85BLhHJrnV8RoG/vZJcKx9B5DRezVzKzwgbvLgbds
QAkIQH4Oa+bd7AoqioA33O4CaouB1u9Lr1klc4BWvm25m+a9VgxcSPP6eiF/
fl8n1SiceYqbuFTGMpOdJc2vWCp8im5wVbENM1dx3ycqgTzf1LTqkaw+XZe6
8ocpcWD2qIsb/3FqAujfQysFfkvPoTKgrzvLAjajeqU3gc3pMI0ADqcXWIuA
d1L+cDawkdZbzwF9vvFwoM8HvgbYkzZWpgHHNXMbsouAS9x29YtLgDdkZgHX
7hsBr3an+/ELgX4eUA68s+iBEftuWwWkMoi51cADowWL9x2ZBI6mfZgCoFtN
H7bbFKClVRrp+fFATNM6nr+75wkjjDDC+KuM4P+D/w/+P/j/v4j/Z9+vqT0g
k32/pvb+TPb9mmub/7fWX+z7Ndn3a7Lv17T8v+Ux2Pdrsu/XZA+kGfy/p+UZ
2Pdrau/PFN+vqbw/k32/pvb+TPb9mmvK/7Pv17Sud/b9mtr7M9n3a/5Z/p99
vyb7fk32/Zra+zPZ92uy79dk36/Jvl/Tuj+w79dk368Z/P+f6/+t85l9v6ZV
52/d59n3a7Lv1wz+f836f+u8Yt+vubb5f/b9muz7Nd+keuQm8f5/d/9vfX72
/Zrs+zWD/w/+P/j/MMIII4y/4Qj+P/j/4P+D/19F//+ha9fZtUbI/t/Xo6eF
7P/5fX/93v8dNF9OC9n/cx6lzqVcU/X/2vuvzP+/TSMtZP9PGvqnpJD9f+7E
157qf2O1kP0/LTu/SgrZz1Dbg6ciIfv/uHvN+/NIuLL6/1X1/1b9/8EFC/f7
co+0cGX1/6vq/636/4Pd13pCSvh38f9zP0y/fdTLZUL2/9Qm/fVIuLL6f8v/
W/dny/9r778y/6+9/8rq/618B3cWrzgoErL/pzZIUyLhyur/tfdfmf/X3n9l
9f/cj0j3JaLHzx2RkP3/LZu4BkSRkH0p/ZrDIyH7f3osXZ0Srm79v+X/tfdf
mf9f2+r/68jLpoU8r7D6Zlt970/LXE09mmqFa6v/9znslUL2/xQTcF0kZE9L
23cFkZD9v/V8mURCMilk/+/7dSWFq1v/v6r+f1Xr/0+/rGW3wyZFQv4eD7rd
NQKKhOz/rT7qmclXZiaRErL/P+tm1/krErKvpv/Z8kjI/p/7FOl+RVY+xZeD
nHhPC/m62PaqXY/OGRsJ2f+77m1vvlctZP9PmntipZDnjadRX71GIft/l1b0
9DuNwtWt/6f2PfemhOz/55Dni4Ts/63jSY/VJZGQ/f9T9LkiIfvwK76cMrri
wJRwTdf/UyxwdlrI/n/TQXcUPTAiJWR/3ozuNykhP5fXpRM7KWT/747i2QdE
Qvb/vl9RrZB/3750gpUL2f+fX+oayzQK2f/n0vkeCVe3/t/y/2fSg65JyP6f
4qtOTwl5/kk/rlVKyP7fyumgx+thdUL2/+6nHlNUL2T//w6911ovDP4/+P/g
/8MII4wwVmME/x/8f/D/wf+vofp/7f21/9f1/9r7a/+v6/83o5/XBPX/lg+0
6v9X1//r+n/t/ZnUpv22JNT/ay+j/b+u/9fen6nXXbr/j/b/uu8Pc+9Xtn18
/Tubfrf6f933h6n7QWj//3er/9+cckwXQ/2/9v5M7Rd0/5+1xf9b9f9WvoP2
/tr//9b6/zXl/636fyuPQHt/7f91vbT2/tr/6/r/54gpqP+ntirfpX5z/f+q
+n+r/t/9FsO+TEH9v+8vnoL6f+03mfQ4PysN9f/Uxr5HGur/tffX/l/X/1t9
7/8q9f8TNnEduhqh/l97f+3/df2/9XzR3l/7f13/b53Pbw/I7XX7JxHU/1u5
P9Z9/mX32PkiDfX/Z1LeQhrq/7X31/5f1/9r76/9v67/155a+39d/2/lFFj5
FNZ1ob0/k2JOJieh/v8R6lPeCPNG7f21/9f1/9Z55Wzr5+PTUP+vvb/2/7r+
3zqe2vtr/6/r4bX3Z9J2c7v0b67/13X/2v/r+n/t/bX/189l7f21//+96v+1
92dan5/i2RY0Qf2/7vuj/b+u/7fmn6H+P/j/4P/DCCOMMP4C43f2//3pf3cF
0PLhayyfxfq9VpWr9d/9L/sL8eMyS/OeyHtc/s+tSCO/xj/HbgNmjXNBVw8B
rY9Z62LbLiuKaeaSRqkD3ug0xz2VwBtcbNS/SoE635TZrLZ1dslxxUBr3l7t
YmJvWgr0+X7LgNZ7uNZxyKL14PiY5vIVB2WWBjOBXWj/BLmC1lujgM2poG8a
0Of+TQb6/YcsYPMHD92p4z1FQCqn6VMA7EAC/7+Q5l/5wPgPLlh5BtAfv9lA
671jK4drSxJhceCYd92OCJJidacVA49wy4YJcaDOu2WeQ+vQWuEG5O/isfTF
fXe75tQlwiGldRPOXVgeq3vspofLz0wKr3J6YPfq2AC3DB5SDtS5dExrvdCD
hEgx0K9zS4EX33DPoFcnNAh5P8Xn4jYJfV1bRYzigi9ZKnR2IbM0iB1LwaON
woPJC1TGyoY8MnGLYaVAq5/Ag7QfVQhMbTXqjeaJOuEQWh+WxlzK2zPHNQl3
pNy3CvPzWP1/bt+ixY2dri4GdnG6YpMi4O2UwzkPOJDyV+cC+5EfzQFaf9/7
pCyg9z/ZwOPdjzurCGjVxdFp3SEtLJtx42exC8ti7UjANgmnFG3/3Mn7V8R2
cNta85uEz7jy6/srY7MpD7BJWJ85y9ffInOc3a+x61IhxWUeVhV7lHK2lwpv
JQ9YHXuH1meNQvYAdd+6ALsyoNXXyN/Xc4HOwlx2SBHQ/55lwM37ORO3WMi5
hz43tUl4DP2gytimlJudFOaRL64y3w+yciTvS262UdElJUDr81v9WG76OvnP
jzaJA31eLXKU03O7lgJvocDiBiHnAlP5dN/FwkanPZaXxRK0P7NEOGApJYr+
kke6WNid7jdl5vsIls+xfq9dKJ8X+U8aZUCrD4zbBX7jPyW/mZmTu+fIj+JA
77vmA31u+RSgf/7MAT5GPhbpvdEk4PF0o54CjD/iNphygQfRvLgIaNVvPPuD
E86FQJ1Pz5x04TUNU1cg76YXO4qBOrebeRE9MOuFm1EAbyJGer6xTsj+dgX5
c6T3c3HgIAqSLwFa59v1tMGEtM4H2kZ9uhi4sZte7xAHWv2FutL+VCnQ6n9o
9T3Lzty9l75bAnRP24t2zwXu6eJpO+YB519VvW2bbxYBr56ayDxRSoD37199
3/7VCaDbtWz2NLI1bciVAq0+b1S+0DsOtM7Dzu5wd4kDrf5pD40q+HiLg8qB
1j6v1ZfMmpdan9/nvhYDrdxYy9+27O4uoElAv9+YBzyNNlDjQOtzWv3l/HO7
UXgljcrYFrQhWAV8+S53QygHWrnMp9EDJQFsNungAcMeKgRa83mrL5/VJ9N/
nzlAqy7r6jFuY2gisNnV12VW2vlA2u49Lwfo92/fAvbY57yP3z/tTeBw8iIP
AP39dALQ6g9G07Kb64Ab04IiCbSev1be9JvN3TdaBfxuxBmZP7XArvTeZgo4
gupe4kBflzcZaPoWK+fXqju1PEwYYYQRxv/aCP4/+P/g/4P//5v6f/b9muz7
Ndn3a/5Z/t/KU2Dfr8m+X5P9uuaa8v/s+zXZ92tan+d/zf9bHpV9v6b2/tr/
s/fX/p+9v/b/7P2Z7Ps1rT7Af5b/f5d8SVq8v/b/7P2ZVFbbf6l4f6b1ftBf
xf+z79dk36/Jvl+Tfb+m5YuC/w/+//9P9v2aVv/24P+D/w/+f+3x/+z7NYP/
D/4/+P8wwggjjL/hCP4/+P/g/4P/X0X/79vf1AjZ//90lZsXp4Ts/10X2yeG
RkL2//Q6dTIS8jqLXhs+MBKy/89MlludWB8J2f/TsrlzSrim6/99H9K0kP3/
d053Ph0J2f+vcPp1aVLI/t970EjI/v++jb44/scdU8KV1f+vqv+36u3dqvPF
M1NC9v9WP2Hf3yIpXFn9v+X/rc9j9f/3/ZAi4drq/6dSA6YyIft/agNUlRSu
rP7f8v/a+zO192dq78/U3n9l/t+q/3ertt5HpYXs/61cg3effufrfntXCNn/
b1veftd34kkh+/OeJHDSwpXV/2vvv7r1/21fn3rFmCdSQvb/725w4bgNLoyE
7P+tz2/1Yx9IIxKyt6TTYnYkZP+/p2u7s1VK+GfX/+ft576IlJDPW+v3ct0b
DnovErL/z9zcM0+mtJD9A/eB0f1g6PbdIxKy57f++XskNuuEa6v/J/0aqxCy
/7/G6aSta4Ts/6mtW05SyP7/P6e5hIWkkP1/V/rAkZD9/1HucXlvJGTvemPB
BTtvfWQkZP//4Zzcn3ttlhKubv1/5mbctdfZKSH7f2qDtCASsv93aQOlJ0dC
9v/W+fYg9ZWJhOz/d6QLPRLy+eBzDiIh+3+6nJ+MhOz/rXyBW1++KDPjSQnZ
/1v5R1buyXi6v9QKV+b/k8Ndx6BKIft/alfUOSlk/7/vEc7ARkL2/1tSo5+U
kP3/29tNe3RwYUrI/v8imt+lhOz/rZyXF6j/XyRkL22dhxTz/k4kZP9v5ads
TQ3r0kL2/z5HJy1k/899yXR/Mmtean3+AXTiREL2/ycnb99m7El1wtX1/+7u
9OWUSiH7///Q9REJ2f9bn5P7y+k+c1b9/3k00V4qZP/vnmY3DkgL2f93eiKV
+RMJ2f9/RfPHlJD9v3u7MVpQLWT/P4r6S9UJeT5fS30E64TB/wf/H/x/GGGE
EcZqjOD/g/8P/j/4/zVU/6+9v/b/uv5fr6+0/9f1/9r7r+n6f1oGDFkK9f/a
+2v/r+v/tffX/l/X/2vvz7TyFHTfnzVd/2/1E9ben7kDrftTUP+v+/4wP6A8
hCb8XEb/f+3911b/v4GzBxsuhvp/7f2Z2p/q/j9ri/+3+gBr76/9v67//7HN
cVc8NGoJ1P9rb679v67/13X/K/P/uu6feQX10U9D/b/2/tr/6/p/6/Nb/di1
r9T+X9f/a+/P9Pttqd9c//8UNc5ugvp/uowvSkP9v5VHYJ231u+lvb/2/9o/
WH3gtd/X/v/vVv9fX33EBgcXJKH+X3t/7f91/b/2/tr/67pr7f21/9f1/+d2
3Gp50TspqP+3+rdr76/9v67/195f+399vmnvr/2/Ph+099f+X9f/W/kC2vtr
/6/r/63ck/6n3JZ5wkW/uf7fPQVOGNQI9f/a+2v/r+v/tffX/l/X/2vvr/2/
rv/XPlr7f30eau+v/b+u/9feX/t/Xf9v5ZJY81Lr82vv/0fV/2vvr/2//pzW
/TzzD189YUoT1P9r76/9v67/194/1P8H/x/8fxhhhBHGWjgsz2/kz5p+2xrG
/bY/eeKbgOZ/d1XHr+b9/hfPv6q5w6s6rH0N63nkptef3wC08n/N/+5slzN5
ZkzzZlonlgB9fWcdsE1mFbSsthK4/C0ndkqBhZlZ99k35wEnULBcLvDrzCw0
+6tq4HkUVPYhcHMKsloK9J45C2gdnpZLH/7u0GNHxTS9F58OvJU84nigtc81
kNahw4GbPFrzZf1TOUCfFxYHbk/5nAuA7S91AWTZwB60ACgAfknCoRg47cdj
Hly0eQ4wc1Lcs8eQ8UDSOVcvBB7gMDUB/CcJgVKg1c/H5wwXAfd+oW9maYic
Q/s2pUDrPfd7KJczDnzDTVu/Kwfe+JELlioDZhahT318Zwkwffm2323ZvQBI
y+bPi4Ez6Hg3CK/t7VbcidjBF884pcW6jUL2533ITzcK2fcWdnQCvQL4FeUP
JoA+57YE2MJpxPsWAXWeMdNal+1H52O9kHNgfU5po5DzgkvcNsnsMqDVF4Xa
3kxMAP36YxHQ3w/GAUnTHDgTOJwExzRgI9VZzgJ2qh0z6ZMLC4GtXNzltQmg
u7p7b7dEyPtKbpdnvU2WCl36YnKzqtiyk/pd/88FS4RU9n1cBeQgMv3+QwJo
5cOe4rTFKxXArWj/KwHcnQZy8r1uh6oU6PeH5wEvo3zUXCDF/eaUAknTzy8D
krbOKQda/W2GUFB7Amg910a4bYGNi4E0Tdk2DmxH530CaPU5OZuCREuQ9P5S
HGj5basfl8+TLAO+sa9LIkXSY2nrBHAG7U8hrX4d1n3G6hdh9Ytb1b5qPZ2e
PmYR8HkXp7zlbKC7KqPz5wF/crflsxYC41RngfQ5xfOAO5F/ngYcQPmfWcD2
9EJGLvAHV5axaSGS8s9LgDrHl/m8i18+sxhoPTe9NyoFfkT7AsjRD191wh7r
lADp9jSxENjGafJRxUC//xsH7nefO1BFQKteormL3c0pAN5+8Gejr94zDhze
2j1wS4HdKHB6EXAwCehCoNUP7Z/0YgSy8JK5H6bfLgKm3TbeF1lAvx+XD2yk
/M8SoM6NZuq8duagzFPo+PFIq/+MdXxaum37n5B+36wYaM0Prflk7LXrXjrw
H8jNXRxsX6TPd44Dhxx20sxnKouAvo6/FGjNQ6x6J593OhP4A+VajwNa14WV
t2v9d3XuMtPqM2m9h3jMJwdvN/jNcqDl4a3zrbu7HR+OPGCqK2UqBVrnwwj3
NT+1COjnrTOAQ2iDbyKQtvuWzQD6+qxc4LWnugTmLKBf540DdqAb18vA/rQ/
cBXw+RfcmA608pH3v7Ks70mnNwJfO2HKFz+WI69y/3pgBdCa/yRpnVcF7EAb
zZVAf16kgdZ8sgXtG08AWut30yNZ9aVryi+FEUYYYfzVR/D/wf8H/x/8f/D/
f6r/Z9+vafXPseq91zb/b/kE9v2a/2v+38qVYN+vyb5fM/j/4P+D/w/+P/j/
4P+D/w/+P/j/4P+D/w/+P4wwwgjDHMH/B/8f/H/w/6vo/+k14EMrhez/M5Pi
c+44vEHI/n+Ze53+6JSQ12uPkSeuE/J8/l/0InqNkP0/6f6GpJD9/9jrF0w7
/tqUkP2/1ef2yaEtM4c2ErL/p+VHsyYh+/+H7neNMtJC9v9+fRYJ2f+fsnSn
j8+9IClk/z9kZ9f4IhKu6fp/eh3/piYh+3/fRyclZP+/5NnJh+99a62QvVzF
K06sVQnZ/z/SZuf+p9yWFLL/f2bc8/8u2TklXN36/ynUwSotZP9v9UXv9oDr
XNIg/LP9P7UteTEpZP/v+9WmhCur/7f8v1X/T21d2qWF7P99DkFKyP7/YbpQ
0kL2/+6n7nVmk5D9v+u+MvH9lJDXa/5+kBKy/6f2OofWC1fm/93T5MrHlgjZ
/9/cx52BKSH7f9et7q4r0kL2/xsWOVGWFrL/5/42us8NLadfSAnZ/59EXicl
5Odap+9dA59IyP7fdT/76fFIyP6f2kgMTwnZ/1t9zq+gLy4Ssv+/jZ4zKSH7
f6ufOffj0n25+rq4hH5pIfv/3eh7SwvZ/7u7Vt1jKSH7/zHHOrOWErL/t/p1
Zxb9Zw+9KxLyfcbqF23lxaxqrspf3f/Tx+peIWT/vzk9eJNC9v8U690zErL/
p2nWOZGQ/T9ppu0iIft/67lZPnfLRcuuTwnZ/y/odfsneRunhOz/SRceFwnZ
/8+jfjZJIfv/qvtcw5lIyJ6T2gM9FQnZ/9Pt9YekkP1/4gbXoDIpZP/fda/2
V5b1TQrZ/1ObiWci4f/r/1OKpbG95nb7/NG9kkL22/90bZAeTgrZ/1t5KNeQ
L4yEq+v/Mwclc+uvErL/dykfz1wTCdn/H7fC3UkiIfvYo25JD+h2SUrIz+vt
Xaz6hSkh+3+r/7x1fPz9LClk/z+BJtiRkP2/lfdkzSfp8dc6JWT/79In5h2Z
ErL/d12cOn0fCdn/T6b+Q0kh+3/fP6dOyP7fmoesKf/v+wfWCPm6yEwK2z3U
KiVk/0/LyG0iIf936ba7JBKy/+c+k7rfJPch1P0Iew84KHOmpoXs/+OuTczn
kZD9/yHUJ6xOyOebn8/VCtn/++d0vTD4/+D//9sI/j+MMMIIYzVH8P/B/wf/
H/z/Gqr/pxivxSmo/9frtDVd/6+9v/b/uo5Re3/t/3X9v/b+2v/r+n/t/bX/
1/X/D+Q6cZKC+n+rf/4OtMBsgvp/7f3XdP2/9v7a/+v6f+0RmO5uv+WIJqj/
195f+/+1vf5fe3/t/3X9v5Urofv+MF23+tf2bIL6f+39tf/X9f/a+2v/r+v/
tffX/l/X/+9H/6HUb67/195f+39d/6+9v/b/uv7f6m+vvb/2//q5pr2/9v+6
/l97f+3/df2/9v7a/+v6f6ufuZXHob2/9v+6/l97f+3/df2/1a9be3/t/3X9
v5UXs6q5Kn91/9/RaejGJVD/r72/9v+6/l97f+3/df2/9dzU3l/7f13/r72/
9v+6/l97f+3/df2/9v7a/+v6f+39tf//7/X/Kaj/115b+39d/2/loWjvzzz2
Cte5Pvmb/T9dNssbof5fe3/t/3U9tvW81t5f+39d/28dH+39tf/X9f9W3pM1
n9TeX/t/Xf+vvb/2/7r+/wvy66m1pv5fe3/t//V/V3t/7f91/b+VQ6S9v/b/
uv7fOt9C/X/w/8H/hxFGGGH8CcPy/5YPX1X/b9yHf/2+vQY8/KrmGv/O/j9r
lvPufWKa/SlP8h6g9TnNPGXj9z2Z8uXeBHa+0M3IyoCT3p++xz7za4F7UkBq
FXDZEyRSgZbfzpvmxN18YGYRV1LZcjFwAuV2fQCcuoNLPmwEdjnRJde9Dmyk
ddJwoHV8ljv99MzLwDjlGA8Fdl5yxuPP3TAYaOUZZZMvigNT9LmQF1DcYy6Q
puEf5AHPJhG5CLi+i/k8qQBovY/ff2bb/KGvzwZaOYY7uRjayYuA95B/SwCr
aF1WCqS4wYtzgD5fNwt4KeXoxYFvuOVojwTQWnfoPEKm1adC500yD6GFNNLq
E6JzCplL6D6RAG5MHyAOtPo5HEICrgio8yCZZ5/jRi4ws4jMLCznA70nKwVa
dYxW35IrKW+tDGi9p2/tl40cfuW33R4oBlr53cvo+p4N7BS/Zr2XDxkH7EmB
zTOB1vd1D70PU4Z08dHblwNfdR/3buSWNEqBJe60W5IA7ko5fcitKOexFGjt
E91PPjIOtPrYDD1v65JHTkwAy93y8qtcoOW1uh02Ke/mOSXAtLvsxyWAVm6d
dZ/p5JadnyOtvkDb7+fEaAmQttW3igNvcNuS+yaAVi6k1S+lz8PlZ67/fhx4
Mm3YJIBWXwjvaZGHPnxMj6Z4AvhqZ5dkjNT57kyrjwfpz95FwD3JE5YAiynQ
NA60jrO1r006cOM8oL9/ZwH7ue3bWC7wCXqBqQB4NPnSfOAPdN5lA4e77bLS
mUDvn7OAKw4anjniucBZSbfhWATU+fFM6zgvo9zkPGD7b3MHX9I+H7h46oph
Y3YrBFrzDT+PKwYuv9cFZ5cAreep1Q/qI3cZdy0B6hxW5k+PuxnhIuA4CgAt
AlrPr97bOSFeAOxAD9D/QqofyQc+72J7N48DMyfRCxu+tQjYj/bvZgBvvcWN
hUCrH9dp/gIHWn2WrOuaLo+Dkdb1MmumG0id38xsSTf8YqDVz6p95uhljSgE
9jp748wKBGn1L7KOP8WWd8kHZtELr4uAPhc9G7g91X2MBQ66o+iBEftOBo6g
4PZCoHWfH7rpKWftV1wM7Le3C4gvAlrz53q3bbBLCdB67lv3H6v/ks6ZZro0
5BfPLAX2pBNgAbB5ldthmwr0ebwTgZ1dmckH2UCrDmpvV66yXhw48ny3EJsH
vJrqd14DLt9jxpQdUoOBbWm/dTiwDZ1g44BXtnaVIAng4lNdQnsa6OcdEbCB
6ihqgdZ841Sqa6oC+v1wpKsOOmKDJuC6G7xWPXKrSuBytz1w9ixgm1s7nFE+
9ylgFq0/+hkcAOxP8/3rgGvK84QRRhhh/GVG8P/B/wf/H/x/8P/B/wf/H/x/
8P/B/wf/H/x/8P/B/wf/H/x/8P/B/wf/H0YYYYTx9xvB/wf/H/x/8P+/s/+n
ZfySeuHq+v/v7naCNCFk/0/tZw6rE/L65TVqXJISsv8nfTA8ErL/L+i/btde
Z6eE7P+tPtXvky+JhOwrXqY+MZGQ/b/VJ/xBej84ErL/d7bhqJdTQvbJZ1H/
j0jI/t/q57wzvfidFLL/98evVrgy/09teh4sF7L/p+VQh5SQ/T/3MdD9DKy+
5W5VuNs1aSH7f6tPLy2nJ9QK/2z/b31fpF3apIXs/5/I/qrtRU+mhez/h5Nn
TQvZ/1dv2+abFzdNCdn/0+vTn6eE7P8vyRzFU3NTQvb/pDNuTwnZ/1s5EU85
vBYJ2f9bfezp18+vF66u/yet3ycSsv8/lhq8pITs/+l18cEpIft/0g27pYR8
n7mO+vClhOz/rVwAah9zeK2Q/b/3tbVC9tKZXyJzBFNC9v/et0VC9v9Wv3R/
fUdCXo/T4XsmJWT/b/WFnpBT3vT1Rikh+/8Pu07b5YEPU0L2/8PH7PbDkemU
kP3/T1e5I5YSsv+3+ni/424rS5JC9v870IUcCdlL++d5JGT/P5YaaUVCPs75
B7iGAzXCv4v/pzZILSuE7P/nuvY6yaSQ/T/dhnZMCdm/WceZ2py91Chk//8i
+cJGIft/1wXlrkeTQvb/aRKkSSHPN/5FPjUSsv8voH6QkZD9v/U8tfIgHpm4
xbBLz4uE7P8HDHvoyDktIiH7/xLqz5QUsv+ntnmX1wjZ//vndo2Qn1/NXTvC
7tVC9v8XPulu5Ekh+383S9zp40Yh+/9l1AelVri6/p++pqMrhez/rTyOr6i/
ZiRk/2/lLFjX9duuPU3LSMj+n6ZZZ1YL+Xqhx3aPaiH7/4E0IiH7fz8viYTs
/608i5deOaLPsaOTQvb/1P7px2oh+3/XJeaCR2qF7P8HU7+fKiEf/9f27PvE
ze2qhH+2/z/u0V7vfT+qTsj3eT/PqxGy///4XNdANSlk/+/79ERCnj+7dKbX
T42E7P+t5/4U6vNXJ+T7T3dqNFcnZP+foAddgzD4/+D/g/8PI4wwwvgDRvD/
wf8H/x/8/1+8/l+vW7T/1/X/2vtr/6/r/60+1dpTaP+v6/+tPuHa+2v/r+vJ
tffX/v+Prv/X3l/7f10/afUt195f+/+1vf7f+r6099f+X9f/a++v/b+u/9fe
X/t/Xf+vvb/2/7r+X3t/7f91HeDOh+1Wed6bqf9z/b/2/tr/6/p/7f21/9f3
Ge39tf/X9f/UdvniCOr/tY/W/l/X/2vvr/2/rv/X3l/7f13/b/WF1t5f+39d
/6+9v/b/uv7f6uOtvb/2/7ouXXt/7f9D/f+q1f9bx1l7f+3/df2/9v7a/+v5
hvb+2v/r+n/reWrlQWjvr/2/rv/X3p95BwWrJn9z/X97CmxPQv2/9v7a/+v6
/6HknaPfrf7fyuPQ3l/7f13/b13X2vszv6j69PDp1ybxenHxM32SUP+vvb/2
/7r+38qz0N6f6SYjJ2clof7fyi+46XJ35JJ/2fr/Q2ieEkH9v/b+2v/r+bP2
/tr/6+e+3ncM9f/B/wf/H0YYYYSxFg7Lh6/q37f2BawcFpo49kau6v6CNX41
/3cVuIZGf/IM18Q0zeNg5dTQgvcyoLWf0py8+0TgjVvdn7Xo1QpgP/IJNUDS
f+dUAFMkRsuA1jrayo29kIJFk8CBlLv6AbCB5jX1QMvPD3ca6epXgT6v763f
zB60kH8FOI3ywt4FulX23G7ZQCvHauTZQ+9a0aIA6KzFiqW5wBY0D88DNrrp
+PIcYP23rnAeaa1frPXOuA0uzPzJAvYuuGDnrY+cBjyZAnFnIMlTTQdaOWid
XPnW2IlAv75eANyAhEIcaO2/6NxEZjenL9ctBlo52jp3k1n8jhN6SOtzWn1y
epBoLgImdq/LfKOFwM3IJ8WB1nv9Ptd1HtBff9nAH45Mf3ZF51IgLSt7x4EH
UYBpMXCdvV1iainQ2hezfJf38QXAcS4usmQKcBoVoM0E+v3MicARJDCzgIde
7irDS4HnON1Qj9R5yUyr/8wNTteOLwZafRisflBWvtuRfVwQcBlwYKua4m/O
Qq5DC/MEsCvlnZYCu5B4mQ+cRF56OnD9ru4v5AOH0v27FKhziJnd6x676eFy
5HjaT0Zax837mFygzmdl6hxoZpfHn7thq/vjQOt6X7KvMwulwGXfuxtjArgL
3ajjwGWZq7VPRTHQ6ivl85mRVl+OwsPcL1gA1HnJTJ3fyTxlIxfMWga0Po/V
X8XaV7I8fH/al8sB+udYHnDPddwO3wKg5f2W7X1g89E7zQDeuc3Yk5K3TwL6
+/psoLu73tt2AbAXzSvzgY+4baQlhUCdw8qk7b0OhUDr/LGeO4+Sn48DrfM/
c7J3+M/0IqDOIWaOoVz4ONDqV3Y8BckXAQfShnQ+8Ibz37n8vo1ygLe6somZ
ucBtyOMWA73HKgRax78z5WTOB458o3linecnAa286fuecZXhBcDRl7sHYhHQ
6u+Ud/OcYa0PKALqHG6m35/NB67/sjPTRcDW9IFLgZPc6dK/EGjdV93u5GWH
FAE754xtNr2qEOjrWYqA1r4hXU47ZAE7uW3pYTOA1ZRnPQ04jTaG3wJW03z8
daDPiZ0NbLn04e8OPTYfaOUOW9+XdX+wrvcnqcwrDrSeI4fTBkMxcPR20x4d
XJgPPJ7eZ5gH9HnoM4Ed3DJy6gSgXwdMAfpc30XANke7E2MhcDJtXMaBPre5
AOjXZ5OBg6gg7WWgX0c+AfT1Ke8AfW58HvCtzdyOYAPQf95G4Fm00RYBv6Rp
eiHQ7zfWAl06+DUNVcADqG6nEbirK7/qXA5spHqZbCBNfyeMAXqf1B3Yg+qG
ngZmjZi10YOH3glcU54njDDCCOMvM4L/D/4/+P/g/4P/D/4/+P/g/4P/D/4/
+P/g/4P/D/4/+P/g/4P/D/4/+P8wwggjjL/fCP4/+P/g/4P//5v6/3OoT06t
kL36VrQuqROy/y+iPhO1Qvb/3xNrhOz/HyafUStk/++6VzRP1AnZ/x9CPjgl
ZP/v+09EQv6cVp981/X5vd1qhOz/XRePrtOqhexhqB3R9nXCNe3//7XIdVCo
E7L/956+Vsj+3/ubGiH7/y4T7xx9bKxeyP7fe8E6Ift/q9/sn+X/fb+XOiH7
/++2dMY5JWT//wwFVqSE7P+t/vMPUn+4GiH7//XccujlGiH7f98PoUbIHvuk
5O3bjD0pJWT/fz29F54Wsv/3//20kP1/iWszEE8J2f/7vjF1wtX1/6WT3ZVY
JWT//8qn7gOnhOz//XmaErL///m77vuc93FKyP6f2o3c2iBk/28dt1X1/9Re
Z3y1kD3VsNYHNOy5YZ2Q/ed7dEHUCfl6j7123UsH/iMlZP/v+z6nhOz/L6YH
ayRk/3/qbVu0uLFTJGSfY+VKbPjW7ffObJsSsm+3+nLn7Lj5i3PvTgrZ/3f6
fvkON28QCdn/3/ti0+XbflcnZP/v7oLLH2wQsv+fndV9SM/iOuH/qv+n9grP
VQjZ/9Nj5pgqIft/76Grhez3/HOsWsj+2fcFqhay/z+O+rnVCPn8sZ47daSH
aoXs/63zn9oAXVIjZP+/Hj0Pa4Xs//1zpk7I/t8/R2uF7P99X5ca4Zr2/3R5
/1AjZP9/UtvXM2d8tfCP8v/+uqwWsv/fi/o/1QjZ/x/9/tOZP9VC9v+ks1vX
CNe0/3ez5WFj6oTs//fd9qpdj86pFrL/t+6rNdSfpkYY/P//y2HUJ6lGyN+X
dX+wrvfF9PypEwb/H/x/8P9hhBFGGH+hEfx/8P/B/wf//zf1/9qnMw88o3zu
losiqP93VnXXnhHU/+9F/T6j31z/vwOtX1NQ/6+9v/b/+nNaffL3uSuR+ZNc
6+v/XyBxGEH9v89PjaD+33uLFNT/H1P0+fhNfozW+vp/dxfqtVkK6v+199f+
X9f/W/3nV7X+38qD0N5f+39d/6+9v/b/v1f9/6BXXcf6Rqj/195f+39d/6+9
/59d//8N9fuPoP7Zut6199f+X9f/a++v/b+u57RyJbT31/5f1/9r76/9v67/
X+Y049GpUP+/ltX/X++2lZ9MQv2/df6Qjnk5Cc8d0rZjI6j/t85/7/WTof5/
Dfn/zE0x8yRIQv3/EXu7BtpJqP+38h3crKymOPl/rv8f1PGNzIoxCf7f1yWk
oP7/qK4/n9j29STU/1O8xItJuK9u6+IO4slQ/x/q/4P/D/4/+P8wwggjjFUd
lrc3/LP1Y8y8FZoX34D8s8bv7P/NnBrK27kdaP4gY1/A2l/w+YqTgRt+8tqe
fZ+oBNK0b1YtcA+3nJtVDmx98wZ5s5cmgDQdbJwPtOar+bSeaAL2oACqD4Bz
naZZtwrY4wMX3PkGsBkFaz4PHE77V88Am5HHmgD0657ZwAQJ2Wxg58SQRyZu
MRf4Dxdf2qMYOIn2DUqAfv9hIdDnKeUCh1IA2AJgt1d3LZ1clAfs/YZLQlsA
pNi8V3KBWXS8FwIfG+yMz3zgAFp/ZwH9+m82sPHZyYfvfWsW8Go6H2cAf/hq
5uljaycCvdfPAnqvuADYsWDhfl/usQhI09NtCoDWz/E5YznAgSRkFwKtujjv
pQqAp5e4hNWFwJEUrLgASHGG3ecDvYebAxxNuX7TgCOchnxqBpB0wtx5wKud
/mmWD7yVApKR88kfLgRa+zvbuG2YOfnAQQest8nx4+chab01BlhNGzOTgD32
Oe/j90+bAhzo0hJ3nwmkWOvdc4G0vfFTHLj7k+6DlQIbyW+UACl+9bIFwOcr
73r055oZQL9enwPs8OwPl+UfsABo9Vuw+uqMd7eh7ZCWj7Xy3fIod3g80K/L
ZwAtb0ZlilskgA/RPhWy0W2DJBcBB7nHcOtZwLzBl7T/NncC0O3iHLbbFOBp
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
/+D/g/8P/j/4/+D/g/8P/j+MMMIIY20Ywf+v2RH8f/D//wP+36/7q4Xs/6nN
UzISsv/fgV7UTQnZ/29C79dGQvb/T9O/TwnZ//v1TUrI/v/CR9rs3P+UlJD9
P+mnxpSQ/f+nh0+/9oyr0kL2/74PbFq4pv0/tf3PqxKy/9/6yOf3+WBJJGT/
b/UxdquJl+ZHQv48pO26NAjXtP9/ZeQ9ewwprRCy/+9N64Yq4drq/70/rhSy
/7f67j5I512dkP2/9zR1Qvb/tCqcUSNk/78pre+rhOz/qV38mAoh+/+TqOFx
Usj+f7OZ66Yv7psSsv9fvO/I848+NyVkv+H7fERC9v+PL3Yv/EdC9v/8vr9+
7/8/dF1GQvb/zo7e/kkkZP9Pv97hKSH7/73Ix9QK/2r+fymJxBoh+//+rh3b
oKSQ/f/i9XJ23PzFpJD9/33k7yMheyHvsyMh+/+nyJNFQvb//jhGQvb/+356
b3KzjaqE7P+pTc8dSSH7/3Xm3HbwZ6MjIft/aifUMRKy/6dp3HaRkP0/tbUo
iYTs//c/YdDmWSMqhez/4z98NfP0seVC9v/uqL4yMilk/09tP16MhOz/rfN/
H+oTEAnZ/1M7qo5JIfv/Wmq4kxSy/+f+G7oPx47nZF92yFFJIft/q++3u6vs
+k4kZP//01XXZW49KSH7f2ojckckZC9dRX3LIiH7fzq8s5JC9v/Ofg+7NClk
//+haxPWNSlk///6qa4zVLWQ/f/1myXf2+3JGuGa9v/0+DiqXMj+/wjqR5IU
sv+3+p+73+bnEyMh+//LyJdHQvbD1nEO/n/N+n/3/z79TlzI/v8xakzTKGT/
T1/bsJSQ/b81/7G+X+v+0OmJVOZPJGTfTqdBj0jI/n8G3bciIT+/Nj/rubpd
e0ZC9v/WfZ77W+o+l9bncZ/61V1TQvb/vr9LSsj+v5YayUVC9v9f0IWSErL/
f4P6JqWE7P99/9eUkP3/4ad1v+GeQSkh+3+6DV1cKwz+P/j/4P/DCCOMMNbC
Efz/mh3B/wf//z/g/636f+39tf/X9f/a+2v/r+v/tffX/l/X/2vvr/3/2lL/
r72/9v+6/l+ve0P9/9+r/l97f+3/df2/9hra/+v6f+39V7f+X3v/v3v9f+tl
k+49fccI6v+199f+X9f/ax+k/b+u/9fef2X1/0fOcZ2vG6H+X3t/7f91/b/2
/tr/6/p/7f1Xt/5fe3/t/3X9v3X+a++v/b+u/9feX/t/Xf+vvb/2/7r+X3t/
7f91/b/20dr/6/p/7f21/9f1/9r7r631/9r7a/+v6/+199f+P9T//zn+/z4S
wnVQ/6+9v/b/uv7fmv9Y3691f9CeXft/Xf+vvb/2/7r+37rPW/lW1ufR3l/7
f13/r72/9v+6/l97f+3/df2/9v6h/j/4/+D/wwgjjDD+QsPy/9awPLbxc7Io
F6sPknJ++gF//XP+F6/+q/sXq/B7ralh5RrT/kYPpDWMv+/3Tx4CWj9G56Ey
aVoWqwb6nMkq4C3kLyuAkzKryvP6FwJ9Hlo28IyxtWUvtK8HTqT/3UfAgSVu
IdkEbOOs+A+5QOs49L5n0KsTcibFNEcf5YxIAfB8tx3SLQH067Zi4LrtHmpV
U7wQaOVR+rymBUCr74HlUa922uC2QqBLSbykfT7wS5r/zwNOowLnhUCrD481
H55OuaClQJ8vFgd+NCf3516blQKt977bUa4X8uTTB2auhDhwBBWkI2ka2qYM
eA5tMCEp7vHpYqDf/5kGtNbjz1F+chz4XoUzCMg6ym8sBXbO61Jz6QcJoPW+
tpUH/dH7p7U6sX4a8IKeRyw54/GFwM1d2ecBZcCHXDznfxLAL66Nzi89OQ6k
ZeULOUAqA66dCIy7eNK9xwLPPseNycCjXezzJflAqw/AqK1aTXx/ehlwE8o/
RP7oLvtdEkCKb9yxFJjayi34kbsWbv3VjQMSwDfIhyH3of21OHB46wMa9tyw
FLgxvc8QB/qc81LgnLO6TLxzdAI4Yr0O+356bylwPOUqJ4DFR9/5YPd1kFa/
gnb0F5DeF+YDfc7kDGD/FS1mrpueA7TygptTfvskoJUvr3O4maR5OhQC7ybf
VgA8m244ceC1vd/ebtqjCaDVF8Lat9L5jsxmFIyLpDKObePAnT52AX/FQO8z
CoDDi3teOv/xIqD1cyxafYd8bmQJ0Or38kGf7+9v8UwR0PukYqDVf8nvHyKt
v2/NE3QeJ9Pq71RM+7ElQKt/iEWrn8nxK5wIigOtfnRWnyKK+awrAVr54N6T
vQNM7HNX5k820OffFgKtfkcjGk79cE5uCdDPBuPAs91t7tgSoPW9+PvlPODw
h9zO2zig3xeaAfT7KrOAPm92GnCci299cjKwh4sPP2o2cNwktyE7Bej3hccB
27ptlrnjgXduM/ak5O2TgF12dBui7wA/6up2YsYDx9J/fwFww9eqR27Vqgy4
MeXVlwJHZo5GtweKgZduOqXHplPiwCeHtvywXRnSmp889vh+mZllMdDqmzfy
ow7/mf5jKZBOo1gC2NpPAIAHOA1fUwqcTDeoBPDkftdnzjxkGe2blAK/yhy9
A+eVATdesTQz40wArZ9Tf+Vj/xrxbAL48S0vXzT5rTKgfx8gDvS56FOAnVxZ
ySHjgL3c15O1ENjRbc9+Oh/YgTgCmEXB0JOBVj2Atd7cjzZ4ioD+vz8JmEW/
37NAa93aheogpsQ0d7lkw20GXlYGvO+Z4x7t9V4d8MQpbuenBuj/fQHQzS6W
P1gG/Jz8eh1wlHsduC4BfHl+m3F9rn4fSMuG9WqBQ2hhNRG4k5vO3jsZ2PjU
1pfddcUjwGb3XDur39MDkb/qkf4LwwgjjDD+riP4/zU7gv8P/j/4/+D/g/8P
/j/4/+D/g/8P/j/4/+D/g/8P/j/4/+D/g/8P/j+MMMIIY20Ywf+v2RH8f/D/
a7H/p+lmZl3FZP/vVqO1V1YK2f9bffhJxyxOCdn/t6P/TkrI/n8O9ZeKhOz/
F/RywiQlZP9v9X0l3Tk8JWT/32/Shdc0TI2E7P9fPcFNdCMh+/9HnMbdOi1k
///tiDO+G3FGWri6/t+/350Qsv/fkdbxkZD9/3HkXSIh+/+jyFunhOz/6TX0
FSkh+3+rX+uq+v8raTQK2f/797zTQvb/W7m2I3NSQvb//vepFf5R/v/TvI0z
d7oqIft/qw+w7z+RFrL/L6cDlRay/z/9q3Uzt8CUkP1/yy3dSAnZ/89r1Svz
JyVk/38JNQpJCdn/k/6YmBKy/0/d4xrNRML/1/+nFEtj5SSaIiH7f9e9ZGbb
lJD9P7UBqEkJ2f/78yglZP/f9nUnQlNC9v9TnVa4PyVk/2/1K/Z9uuqEf7b/
p48xr1LI/n9jEu+1Qvb/vh96Usj+ny777kkh+396/X7dlJD9/wOunVJeSsj+
3+oL3f7Ksr4nnR4J2f9TO41nk0L2/+6u9t2IpJD9/zzq/xEJ2f8/d7Lr2B8J
2c9veK8TBUkh+/8VWcsfvH9pUsj+3/o51j+3cgdId54TCdn/W/3e6a8tSwrZ
/w+h+U4kZP9v5S90osCWSMj+3/r7Vzkdtnsk5HnCHT1c56+kkP2/le+QM7ZZ
5hEaCdn/W/3DrX9u9TO/6WF3Z4uE7P/NPBrqC1InXNP+n27H88qE7P+pzcfz
SSH7fyvvwF+XkZD9/xnUJyYS+tkh97uKhOz//XVWKwz+///m/93dfstDG4Xs
/8+kRmlpIft/f79PCdn/u25lV+8ZCdn/UzuqxZGQ/f+zNM+KhOz/qR3aW5GQ
5yc0rd03ErL/t3Jz/PMwJWT//43T6K+lhOz/M5PN4654KCVk/+/75KWE7P/d
U2BwYUrI/j9z089MdFNC9v9+3p0SsrfPHMTz37k8LWT/f/bGbmKTErL/t37O
7KzuQ3oWp4Ts/4+kRjSLhcH/B/8f/H8YYYQRxlo4gv9fsyP4/+D/12L/b9X/
uzS2r/s1Qv2/1Ydfe3/t/3X9v/b+2v/r+n+r76v2/tr/6/p/7f21/9f1/9r7
r+n6f+39tf/X9f/a+2v/r+v/rX6t3vckwf/7/tV1pv/X9f/a+//V6v+tPsDa
+2v/r+v/tffX/l/X/2vvr/2/rv/X3l/7//9e/5+C+n/t/bX/1/X/2vtr/6/r
/7X31/5f1/9b/YpJ6xyYWuvr/0dTnkkE9f/a+2v/r+v/tffX/l/X/1t9obX3
1/5f1/9r76/9v67/115e+39d/6+9v/b/+udY/9zKHdDeX/t/Xf+vvb/2/7r+
38pf0N5f+3/997X31/5f1/9b+Q7a+2v/r+v8rX9u9TPX3l/7f13/b+UUrCn/
79KAph2/GOr/tffX/l/X/2vvr/2/nxXGwf+H+v8/xv/r+n/t/bX/1/X/2vtr
/6/r/7X31/5fz0+099f+X9f/a++v/b+u/9feX/t/Xf+vvb/2/7r+X/t67f91
/b/2/tr/65+jvT/zxFOWZm7h6VD/H/x/8P9hhBFGGGvzWNX8X+vvG/sC/Wk+
eB2wGa23bkBa41f3Hdai+7aVg0w5vdcAzd/L6aJ5NwP9/GUI0Po4tLzsPj+m
+cmdsYMvnlEDnO9iKQ9H/kgergzYj4KmFgHvpHn+AqD3Fo3A2yjX9CNgA82T
k0D/35kBtI6Dz5GbGNO0+jYM2X79czffPwFcv2uvzFQ5H9i86vXeR20yFWjl
SLrZ2uun5gHvdPpgTjawJS3kFwFfo/2EhcD2FBg2F2jt11xAOZnlQNKdWyeA
Vh4uxfTNrRNWufLZI0tjaRJYDcIh73zdb+9Ny2Jb0YKkSTjAaagulbGjKKd6
ifBjynGuiI2lnM8GYfe6x256uDwRO/RhFyBVL1z2vVvQJmLLnnALvSZhBxf/
1bUiVkg+oQpoHQeKPb6pEOjztCcDi7d3ZisLeATlppUCl9+b3GyjohLgfm4b
6ZsGYR2dt2WxGzKruPs2ahQ+tpdL8K4wv68fFnXsVLFpIdCvq7KAnUk8FQL3
2dQFbyWAPxyZ/uyKzqVAq7/H1y5+8sIFwHRB/3W79poEpNvlDuOAFLs7Lg94
hIt3nhAHnu1iA9sgrT5LKyhnMA60+g9YeZE695ppvUfv68vjQKv/idVXx6/3
E8Djxnfdq/2VDcIv95gxZYdUIkbxqx2RVt7xBiQWkTqPk3k7eZs40OqTYB3P
Wzdwoj4bSFp/aBaw3xM3txvz/RRgG6eB88YBX3zBjXyg9fv+SP4MafX5eZHW
wXXC0/yNK1brbmdnLhY+9nNN6+ySstgtc4a1PqBhsXCfzNNxpwvKf/k+64Wc
B+2ferVCStf7tjhGmuOZWiGVJ2wVj7V6fP07v7i2Xrjg516bJd/L3J+WOGNa
L/yQPJ7df0znTTIpZm/rQmC3j92GI9LvzyC3vHuXz1ccFAdadelT7j09M+Os
E/p9psx1TRsw9UL2ddbx8TmfNcJpLo77h8LYNpQzXyf0+9mlZl+O5ZT/Gwd6
P1onHErnRan5nG1Dgr4E+OiJ68657eBSoNX/5yA6IYuBVl1BrXucXFYEtJ4X
Vj8fK/99INWzLASevZ/bECwCWvUYVh8V6z7Wf2bb/KGvFwHXd/Hdc4uBwzPf
/pHpeUC3y3Zku7eBA8kfjwVaHtLy9lauqOXzl9O86Q3gCpq+jwIOcNv2fSYD
fZ75aKCVv1lPOdpzgTofl+n3hRJAvp40rX4+WYtcxUcRMDPZzExUkFZ/G75P
aPp9pVoh50T3pQlhnZDrLo4nMVsv/IoCjxOxwTT/bRD6f5+IZVMd3GJh32Pd
jnNZbJx7TJc1CGm7qkvZL356sdDnLJfFaDtqy8XCFM27sW8j0+rX5/cjSoHL
D3cTqgRwD9qYKANO//GYBxdtjnRVTDfPmQscSPuN44C0vfzuXGDmf5R5MM4G
9qYDMB7o7zdvAtsc7W5cU4F+vj8LaD2/fL76TGAjXX8PAK116/a07n8zpmnN
Dy2v7tKjSyc3AP+ZuVp3PCcBdKukvdpXAl9s75K6a4G0Xdy84v9j7zygrKqy
rY3ZxoQ5K+bcRsy6zS10a5tDm1BB2zaLOdCYMWfEhKiYE0EBQYLkVFS+oQJV
N5xbmDG22Xf3OrXWG2+ut94FXoGF7j0c//ePfgpVN5zw7XnWVDzQx+k2zCnS
bXO6RrEDbTgNVVyP9sc0TQ9Deck+TpGCDSdqhhVWWGH90Vbw/227gv8P/v8P
7P/Z9yPZ9yPZ9yOPaEjtt1yXSLw/89cfziheqefE+zPF9wPZ9yOXFP/Pvh/J
vh8Z/H/w//Pj/9n3I4P/Xzz+n30/kn0/kn0/kn0/kn0/kn02kn0/kn0/sr35
f2suveXxrHnd1uvDvh9p+ckF9f/s+5HB/wf/H/x/+/H/9NjkDVnx/kzrucv4
PJwT78+8nC4gc+L9mXfR8y958f7M+HOUF+/PvOipXYt3mHnx/kz2/cjg/4P/
D/4/+P+wwgorrOD/23gF/x/8fzv2/wcc++sR276QEbL/v3H9YzrffV9eyN57
bco15oTsk/9DHjQrXNj8v+X/2yr/b/n/4fv6n7AgZP9vvQ4L6v9HrO8vUKuE
7P8vpvuPnJD9v09vnXB1Vriw+X/r/bL8/4VX/W1e9wFVQvb/8X1PRsg+J35M
PSdk/1/2ug/G5oTs/+mx/ifTwrb2/+fSL5oQsv+n27CGrJD9/w/+5XskK2T/
b/UsxF42K2T/b80fptuMTlkh+2r6OG2fE7L/t+boHk+eOCvk+ztr/rk1V/8d
yj3nhKXy/zQ24pmckP0/3S6WZYXszeLjd1YoPtyPFds1K2T/H+eqs0L2/9ac
5GWKR92hz6SFi8v/b0QDr5JC9v8n0vtRJ+Tf9+hz/EC2rJD9vzXnf0nP/1v9
I3QarssK2f/7KVfp4nmbyf7/pRX9JycjZH9y7gvdim9dRsj+P34/s8L2mv+3
5nLTmJ9UVlgq/2+dZ9eleVRZIfv/xwb3P6p845yQ/b81///0zb2gywrZ/9OY
tOcyQvb/3vputEda2Nb+f2jHn/u+dXGzkP1/ft2/9h6SzwjZ/1s9C9Ycdes4
5qcKfv9xRsj+P/a7aWHw//Pn/+Pr2Soh+38/FWrTHlkh+38ad/dhTsj+f+jE
mujbFXJC/n5Z8/x/pZURsv+ny45fMkL2/9Z8+3huX074e8n/W/1NVl/PRLr/
ywnZ/0/b3l8x5ITs/2PfnBey/6fxQg81CoP/D/4/+P+wwgorrN9wBf/ftiv4
/+D/lwD/j/l/9N3o/zFPjj6COXrp/Jm9Nsup/H883zQ/3/l/zP0zMfdfKv+P
c3/Q/2P+33od2ir/j94f/T/m/31bwWUH5FX+f+3O/3lypa6Ryv9b79eqdMOe
Uf5/FL1fjSr/j94f/T/m/9H7/9b5f/T+6P8x/2/1LKD3R/+P+X/0/uj/Mf9v
zdFF74/+H/P/1lx99P5M/189+3VO5f/R+6P/x9wsen/0/5j/R++P/r+95/+t
3xe9P/p/zP9/s+3pD0z4Jqvy/2uTf8/Pd/5/FTrg5lT+/5Upfy3+iVmV/6e6
nXuzKt+++yq+0SKn8v9Un3JtTuX/rf4R9P7o/zH/j94f/T/m/9H7M6259Ojv
mNa8buv16e112YSMyv+jl0T/j/l/9P7MAZ+/XHzHcir/b51n0fuj/8f8vzX/
H70/+n/M/99Oc/0ziyz/j94f/T/m/62eBWuOunUcQ+8f8v+LJv+P3h/9P+b/
re+XNc8fvT/6f8z/W/PtreMG5v6ZmPtnYu6fibl/Jub+mZj7Z2Luv1T+3+pv
svp60Puj/8f8P3r/kP8P/j/4/7DCCiusJWgtqFe39gUMj92hwucbemi21c/z
Wy3j/GL1IFv7BfF+SG/FgyiH97Ci9eN4C3fztlMc8nXqua1XjK/r0ooHf+YL
12oUb6QbujLF2PeMVYx7hpsVnzru8m8zu3+i6G1e/6OaFA+igrnRisfQ/V1/
RaoLHfCu5pP+L5qo2M3XMq0zXTHumZ2m+A7dp7yn2OBvU3aZrEg68OwPFF/x
9X39JyliTyFzMPVtTlCM80CTFIdSfqhakeqR1qtRjPOUlYpnPeEbRCPhptSH
VeuSe557+ubvFoSr0f1eyn3vdcn+BeFx/q/tlXQr+tus5wrCy6joL+U227hP
1+tWKwjjfY2koxj88ZHw0jVuLd7i1bpLPvEX0pHwgLH+Rjrhpoz0Qa2C8DO6
D0w6bzvXeLVJeOF2vrirVvWbMmed5c1omSZ5+5GK8X35aMXeQ7zJqFTcy79c
a2la+dv3HvRNw5GwZvl9Lx5YnXC9SJDWKj7qa8MSZYrx/c1UxfjzWC+Me/Uq
HNWKPtAkPIcKNWud38V4bmi1ojUXZX/ah5qq2KHOi4K3FOP9ivcVT6UPYKVi
3JNboegtSqLTbEXs12Rijymzv6/jPW624pEk4MoUH/Q6YEilojVf5eoragfM
7lEv5J7fpz9a7rPnt2wU0vbRc1WONF6HSPgiFb3WuKW89rs2Ep5zU88Nnv6o
1n36/Ja97r86Esb7VrWOtocfnSPcg/KDNa1/X7Xi5rSqFN+kntwKRatP0+qJ
xn5ZprW/bB3P432H8YrYe8384ZTbex+WnKJofY/2pA2kcsX4/atUHOm3o3Zp
EBZPIt89+2ale4V68/JCOjwMqXGv0fk5EvpWy+4rJVp7tvPCS+n4V+0+ePXM
5j93ywvZ/6xJH4C88E46L9S4/l5Lv5IXPji37rx7/1rj6Lb/vEj44V+8yK51
P9L3ryA8iYo9k63Ho0bhv5Z5Zs+KC6rNeRopv02ebBT2peN6tbvO16A+3Sjc
gTaoqlv3cxuF8c9b5S7885ZHvbp3JNz7kPXH7HRhraPtgk6R8HuvJzesdSft
sca8stdzQtr+OLbKXU/7JznhiU/f9N3Ko6ukHxx7wmn7cHBeyPsycT9nXkja
fNMaRxr+2kbhkLG7Ff/qKkf67bq8cBS9fv/dR4+99LRNN71B+PTJa5bffUSV
+6TjgzeU3T5H+Iz/8ZeuUT3izP7Uv1yhaOUirDk82DfMpKPKpImKVp9sfF02
WdGa6xJf5f4vz7mQ+GoUco859ssyHz1rx+8nP1yuaM0xi897kxU7+I/7Mm8q
9nkyOnftH55TtPzeIMoBvas4nnq6ByvGPb3PKXaiP6+fYuyJX1A8ha6XRyqu
SEGCFxQfpKLxlxT91e/6289UxH5Z5r/9Nt7ACkXsb2bGz5dWKprzfEiYVyha
vbR/9V/PifVCzjPw3B6c3zP5Yf+ByQvj71+No9PnoEj4qd9mPDjhbqMTfSS8
0F9uL5tw19IBKRIeR32vCUeHoaULwieo8DzRmu8vCElLb5R0fnf2ummRsPkp
f4BIOP/0UtP7eSEdTnrVuKl++/aKSPiF1+pN+rlZpnW/8OCJc4tniGrFeF+4
QvEg6mkfp0gfi+eHKFqf//i+Z6jijnSjMEzR6gXuTB+AsYonnOjXu4rvj/Zr
pmKKesjfV4x7aK9VHE8Xon0UV/Sxhqp3FK3jT7wf26gY759/ovgwbUg3K07y
25y9k4or+NuM5esU4975lOIDx/id/kgxPt7kFCfQ+zlesYI21F9UHE99v9cr
WvuSZg7T8ldhhRVWWH+0Ffz/wq3g/4P//wP4f/b9SPb9SPb9SPb9SPT+TPb9
SPT+TPb9SPb9yPbm/y0/zL4f2Vb+n30/kn0/Mvj/tvX/7PuR7PuR6P2Z7PuR
6P2Z7PuRwf+3rf9n349k349E789k349E789k349E789k349E789k34+0/D/7
fiT7fiT7fiR6fyb7fiR6fyb7fiR6f6b1XAZ6fyb7fiR6fyb7fiT7fiT7fuTv
1f9bPRfs+5HB/wf/Pz/+33qe0crto/dnsu9Hovdnsu9Hovdnsu9Hovdnsu9H
su9HBv8f/H/w/2GFFVZYf6AV/P/CreD/g/9vB/4/znfWCNn/b7fna7dNvigv
ZP9//wQ/kSIv5Ov5F/04jGNywsXl/9H7l/L/6P1L+X8r/x8/t50TtrX/X7Vw
1w97HZITsv8v3tT+etEqOWGp/L/l/2mKyOaRkP3/u/5j+l1GyN6SHn+/vFm4
sPn/3of5Jz7yQvb/8VyTOuHC+v94flGlkP3/qzS3o17I/v/gsi+HdPw5K2T/
/1cSeVkh+38aV3F6Vsj+/zt6wDwjZP9PYynWzQrZ/z9HAwsyQvb/6xXvst85
LSdk/8/zVXDOyoLm/9H7l/L/6P1L5f8H+MfU184L2f93H+CT6jkh+/+t6efN
Ctn/P0T3l1kh+3//VPgNL2eF7P9Ji5yUErL/p/EZA2qFi8v/r7+9n9iVFvL3
6JnT/cCZrJD9/900fyUnLJX/t/w/ev9S/t+a/2D5f/T+pfw/ev9S+X9rnnZb
5f/R+5fy/+j9S/l/9P6l/D96/1L5f/T+pfz/gub/SXMPywnZ/z/t60PvzgrZ
/1+8ig/OZ4Ts/605/G3l/yf+4A/sTUL2/9Zc9/gqd/7z/8dREU1eyP7fv9oT
z88K2f+/TgUgaWHw//Pn/+Pr9IyQ/f8JNAA+J2T/H8/vyQrZ/8dz9rNC9v/n
TN+530/n5ITs/615/kuN9RP7skL2//FcwKywVP7f8v/o/Uv5f/T+pfw/ev9S
/h+9/8L6f56fiXM0rfuFdUfe8/CsffJC9v90mDijXhj8f/D/wf+HFVZYYbXD
Ffz/wq3g/4P/bwf+38r/o/dH/495HvT+OP8H/T/O/cH5P4vb/+PcH+ZydN8f
qfw/ev9F5f8x/4/en2nN38a5P+j/Mf+P3h/9P+b/KxKdem/yZVbl//00/hP+
FKn8P3r/xZX/j+/Lcyr/j94f/T/m/9H7o//H/D96f/T/mP9H74/+H9/f+OfN
qvx/XLuSU/n/tvL//rcaeU9e5f/R+6P/x/w/en/0/5j/R+/fXvP/1vcIvT/6
f8z/+yn/2VNzKv+Pc3+WNP+/7Gr+AJdX+X9rnnbcq5NX+f8e9IPlVf5/I9IQ
OZX/X1L8v5X/t/w/zv1hbrzPZomTX8qp/P8ms9b85tLb8ir/j94f/T/m/9H7
o/9fVPl/9P7o/zH/b/Vc0GVLOqfy/+j90f+H/H/b+n/M/6P3R/+P+X/0/uj/
Mf9vzfNH718q/4+5/9+7/8e5P+j/Mf9v3S+g9w/5/+D/g/8PK6ywwmqHa6E8
//z3Apvem467p2q21c/5Wy2r/9foQe5DIul8xbivprtiM71+tyhaP869xaux
ujcnOWQ/6olLK1o+9q37/1S8taxVvJ/O52WKcf/kB4rx/WazYm9/m5ovKDb4
etfjahSt68BOdB//vKa/epn+rqK/Sz1jmxGK3alfa6LiZb7u699TFK1+qD3o
unKSYs1RvjBSs+C12cDpigd++Ejxn9mKx1Bv0iTF+L5hiuJSdINUpXjOyX0a
LvxzjeJL5BHnCE+acM6eB1xT4zr52uCGZmEFXXAnHd1erpMR3kWf52Srt2gW
/qPS39knXOFc31jbLIw9XsKtSoXOGSH389Lbc3KLcNfslDnbvZJ220zy4qBF
+PbF3vynXXXzCcW/sUW4wsvX3zx627Tb7wpfrNYspPqvdRLmfJ4/X3jV3+Z1
n61It0/vjFa0ekWxz5KZ9Lr9uyrF4l8y4JV/Nwp/phvfKke6cLOCcMMT/RuT
dOeSaGsWXkMr2erRZyuS5t40JbyI5mjMdC/RAJG88M1/blm8hax2c32dWMeM
sI/X1A8mzZzqepSTLle0vND4cr8PPEiRfv0tJineWfzbpz5eqUjbrmtXKJ5B
g3I0sReTGfuHCkVrXkR8XJys6Kft7PDmTMWri0eP4XdUKMb7LXXCwcudVvyn
wu1J90mNwvj+vLr1e5wX8vfXyu8dTPulkTDeF064k/322PmRcDU6TtY62gZe
v1m4vP9xBtea8zSseUfYC87EPkgm6Zuzpyp2pv3GyYoVJNw1U/R9mqB4ZNfC
Rp+eNErR6ieN+6gnKVrzSV49lZr2FKf7WOnBjcIbqOe9yvn20ykj5wjf/NG/
EDWu226+eTEv/IYKnGtcXBucF5ZTYWyNe4C8SyT0u3ETa2rdPRe1/PjqF3nh
Nb4msbHGDT1p6rKrFXLCKTTPwp5rbc29p/rxy3PCE8n3Vbb2TjcIuafYOr7R
f37XHOEEOg7UuLepEDAvHFs4pOrRu6vN1+cNOm5Fwvh5r1pz3r71PXr+wqeK
Vyp54Yu+/nSjGkda7Yi80LdDz7uD+zkj4RY0oK7WfF86kTDPC/v8/NYjr39b
4wZW+43dSPjcvXP6vbtvovU81yRM0b57jdu5ccvlb36sUUjxkDWq3au0r1Sl
iH3hzEt8zeqQ2YrWeTC+2qxQpO2ocycr0mXixsMUa8jrTFbEHnfm6/T+NQjP
oA2/Sncm7T83Crnn9GdfD7xJleL2fvs/KlPclw7AsxXj/c+JirF3fF5xGr2u
QxQp9rHraMW493iEYny8eUfR8vbWnxN/Xt5R7Esb+e8rxvswLyrSZdVW7ynG
1++zFYf424x9KhUH3rn/2JW3rVC0zoMPv/7tlVuv1ChkD789+d1GYf33vf/1
/pXV7mvq3W0Qcq7jZdo/qhMOvsIHJsod1S0nssIZtD9d4fzZ8MQb8sJmf7qe
V+1WoevUgvDGMn9FlXT0x7kW4RG03592s+m81CKky9lP027ged+fcnvvgjDO
EyTd6xUPzK07ryAc4S+7piZbj98FYdxDn3LP+KuC5oLwSR/XGZ1ypEc3KAhv
W9knsJKO6pR3aRHGeYW0G+F/3A8TitbcQmtf1ZpvOddr68fGKFp9r5YPp5e3
y1jF7uTF31Wc5+NrJ7yhuP9yXWZO3X6S4jw6gYxQPIH2E2coxtcpIxS7U1HD
zYqWB+hLG8fjFM3nvg0Pf3ODn5CXUfyEckeVir8U3+Wtd00pxvejacVRW/gz
UY3i3B994CereCwd6DKK8X7+BEXT/5BfuVjxIDpQ91WM/+9naC6ojworrLDC
WtJX8P9tu4L/D/7/d+T/2fcj2fcj2fcj2fcj2fcjh+/rE10F8f7o/9n7o/9n
789k349k349sb/6ffRiSfT+SfT+SHq9aK6v8/8devx6bEe+P/p+9P5N9PzL4
/7b1/+w5kOz7kegr0f9jfg+9P/p/9v5M8f3I4P8Xyv+z70ey70ei10b/z94f
/T/7ZfT/7P3R/7P3R/+PuVb0/uj/2fszVymezc/slRPvz6RxEEvl1fGNfT8S
vT/6f3x90Puj/8e8vfU9Qu+P/p+9P/p/9v7o//F9Qe+P/p+9P5N9P5J9P/L3
6v/Z9yPZ9yOD/1+y/P82/jGtwVl1HsT+XSb7fqTV6/QTPY+YFe+P/p+9P/p/
9v7o/9n7o/9n74/+n70/+n/2/uj/2fuj/2fvj/6fvT/6f/b+TPb9yOD/g/8P
/j+ssMIK63e4gv9v2xX8f/D/i9H/Xzvx4K+Sn9cI2f9fSwWHtUL2/+UX+IEM
OeH/3AfQucf2lv9H789E71/K/1v5f2s+f1v5f//09x0zUkL2/6MfS9x0z685
Yan8v+X/rfw/+3/cB7Dy/+j9S+X/eU4Fzqs4nfx6nXBh/T/d5j1aI2T/7z8t
3x6dE7L//4COB1kh+//eNFcgK2T//yEN5M4K2f+/QXNrskL2/366yFV/qxOy
/3/pBD8wpFbI/j/+vTNC9v8dKeidFS5s/t/av7P6+9D7M9H7l8r/W/O0rb4D
0sCb5YTs/8vWe/zInQ6vE7L/p/E9uyeE7P/j+WO1wt/a/8feKC1k/78lCeec
cGHz/+i1mej9meiXmej9mej9mdZcC2vuDXr/ts7/o/dnWq8Pen+hMW/H+h6h
92ei92ei92da7wt6fyZ6/4XN//uj+o/zckL2/132rl2p4fCckP2/t4cn7JwV
sv+nl3tYWtjW/v9wf3jt0Cxk//8pzeXKChc2/0+Xgw/nhOz/6970xjcjDP5/
/vz/nee80O2UWRVC9v+X0n1DVsj+/xU6/uWE7P9pvOPjWeFvnf9H789E789E
789E789E789E789E789E789E789E71/K/+9Ar2MkZP9v9RZxrzr2qwf/H/x/
8P9hhRVWWO1oBf/ftiv4/+D/23H+/3/3/lVm7jH2UnmV/x/R883iJ6Cg8v9r
9fU3ggWV//+JBpdH853/x9x/W/v/eB52pPL/1nz+RZ3/R+/PtPKxOPeHuVLX
47effWBB5f+t+T+Y+y/l/+O54AWV/7fmVC/q/D96f/T/mP9H74/+H/P/6P0X
Nv+P3h/9P+b/rdwj1Yqsn1f5/0Xt/6tGXfqFOy1S+X9rnrbVd4Den0nj0Xtk
Vf7/m0tv2+3605rbff7fmk+O3p95LxUA5OY7/7+k+3/M/TOt55us/H/w//93
/t91OXNU15XzKv+P3h/9P+b/0fszN/CXrRtmF1n+H70/+n/M/99E5+fcfOf/
0fuj/w/5/7bJ/6P3R/8/v/l/6zk4aw7/gub/Mfcf/P//7v8x/2/1FqH3D/4/
+P/g/8MKK6ywlqC1oL6d+qkOd0jLe//R+lYOovPMTQ4Z+63bFK3zUewh7lC0
/t4dafD5VIdspAdB6xQryA+nFW/zOu2YhOKVdKE1WdHy2BdTAVheMfaOOUXr
/nE8ibC7FDuM8fsh52iS3x6q+Ab1Ho9WpHqrCZMV19jr26MPLpugeBAViL6v
6O3tFW9PV6TLr1enKVp9Uv6qftrVsxVrntjx3pFDpip277XZBd0mT1e0ntv9
JP9a8TevUsS+QCbVv62p+bW/Pdi6UvEEGhhRofgJzZ8pV5y3r7/Br1JMU/9n
s/BceiES0juM/cPHUz9hi5D7qnZ9asB+VxySEfJ1cjzooVLR8vYVdCM8VnGe
j0nnnleMey0nKFr3ocd4fXNrheLudGNVL+R+W99KucU2BeF9VHibdN4qPDUg
EvI+Sy8qYssL477Uakc1s08UhKlbdvL/uBce6nPpmcX7Bua31IObMvvd4p7e
WYrvUIH1BMVlfb3wPe8pjiQBPVPRT/0YdWmlovXz1Ff7L0il4pG0AVOuaPVu
D/zaC8ZyRdIcZ05UjPviJitiHyHT+nle/cQXCNYLue/4aBI7eeHPcVGwW6G7
N/SR8FLar0yYn4dLTn393FtWiIT799/mo6YVa1t7y5uE8T5yjXuFfo5KxYOK
Z6v1j6lQ/G6nX86/cMVyxSu3XmmLSz4pU9ySBM4kxb7l/o53smLNuNVnzL14
uuK1y3lRMEEx9vDvKX7ntdEjryhavZyH0DylmYprn7/pgRPfqlCcd3NmlRXK
yhX/TINsGoRNtL9fZT6vRDWtOzcLZ/mvV0Ot24JepznCeH+5xlGcviYv3JDE
ZY2j7a6mvPAXev6gxh3RkNpvuS6R8FM6/9a6Da72L2Be+Ghl/dCTpta4+DCR
F5530M3b7vlajfvI69tUJOzyby+4E863US/3WV4Y11DXuE+u8Y3KjULum6bT
2zV54aO0EV7t7vI/7mF5YS//Mt1a7dL7eYGTF64R/+Ktnj4SPrTq+EHvr5Bo
fY4uL6TDT7rGXU/7FTkh9wLH3jEvjJ+LqnG30Yk1EnK/J/fzYk/vr+T/csL4
x6xyfrd6+tOR8CQ/Pmj34nXXxV4cNQuf8Bp1s4Rzpx363XXTGoXzyl6/6/zD
q91SVMhdqYj95cyNbnh54HnfT9OkXMMsxcF+m3R8meL+5OnHKz5Ic0jeV1yZ
9kOnKX5J/Y0zFf0Uqiv+mRP2L54dx8+odFRHv3mTkPeDdiQBXa4YX6/NUvxs
td1OuLr/DMX49RipuDJt9IxS/LLKfwGnK86hffxZivdSj+4UxXnUyzpZsdvK
S+9w5zrTFXvQg3czFONe1omKsz71v+BIxfHjz3i0x+whim9Q4et0xeu7fPHG
P7esUOzvYw7pGYrxdVa9cN5aNTtu+nqFK540Ot99X174Dx+fWavGvUsn4ryQ
+7WXLztr3Mf5vPCSeIPNFb8MuZl98sJjfd3tj9Wu+C8VL3RzQj7erk7X9Xnh
bcVP8xmP1riU/89uLQj5utHb3ZP7FITTqAg92XpcLAj70ko5qmW9qUXYzX88
v047fxS6Y6+CMEMnAs7VZIR8PRbnQDLCC7OnVh45Pum6TU7fWT64WXj4zxs+
d++chLt/jC/CLghv7E5HOjfOb+es3SLM0D5O2g278Y1D3PPNwnXpwd6E2yu+
MVT8U9VSxUOq5nIUsNC09t/7P+HXe4qD6cZtlOKRdCAcqmj1xsa5uecVr/cf
j6U/UDySLqzGK8Z//wxFOjxt+K6i5Univ/9hxWvp7x+i2Ik+IFMVyynvUKto
7ftY++O3FM/at01uULTmQNJlTYe04g50fG1RpPrz1RsV45zYMEXTqxiefzDl
lR5RtLyKmcMMK6ywwvqjreD/23QF/x/8f/D//3//z74fid6fyb4faeVklhT/
z74fKb4fCZ6Xyb4fid6fyb4fGfz/4vH/7PuR6P2Z7PuR1ueBfT+yH3mavHj/
4P8Xjf9n/4S0+krY9yP92WHss3nx/kz2/Uj0/kz2/Uj0/kz2/Uj0/kz2/cgB
/q9ZOy/en8m+H4nen8m+H4nen8m+H4nen8m+H4nen8m+H4nen8m+H0njvx6J
xPsz2fcjf6/+n30/0uqDCP6/ffp/P5Xn+VRWvD+TfT8SvT+TfT8SvT/TOt6i
92da143o/Zns+5Ho/Zns+5HW9Rj7fuQX92w17pQvI/H+TPb9SPT+TPb9yOD/
g/8P/j+ssMIK63e4gv9v0xX8f/D/i8L/70MPrieE7P9/PWLbF0b0TArZ/1tz
O/1Tn5mWnJD9P43zGJYTsv9fm4oec0L2/13pvjMnZP//A/mzrJD9Pz0We3JW
yP5/Gg0azwlL5f/R+5fy/1b+/9Izj9p/hw1ywsXl/605tDTOY1JWWCr/b/l/
a86S5f/xPrNU/p/G4M/LCtva/9OY3y1SQvb/FNPdNydk/2/9PAdck7/tlLNy
Qvb/m/+0f/6Lnlkh+/ZHN/aDm7JC9v/P0nyCOmEp///DXoesP2anWiH7/6XG
XtflizeyQvb/1s9j5f/R+5fy/9bnwfL/Vv4/nqOQE7L//5z8TVbI/j+e758V
sv+/u/PGfbpelxay/2++fq23/pKpEbL/X4sGA9UK2f/v47/e+yaFi8v/X1bh
71RTQvb/8ecuK2T/P5O8Wla4uPL/lv9H71/K/6P3L+X/0fuX8v9W/t/y/+j9
S/l/9P6l/D96/1L+H71/Kf+P3r+U/1/Q/P8xNF8hJ2T/T5pj3ayQ/f865Pma
hez/59AHPCVcWP+/ux8TclelkP0/HVbeaRay/7+XzmMZYSn/b+X/qd78wqyQ
/X9nr6veywgX1v+vQQ/eVQrZ//vduA12TgrZ/8dzHFNC9v/9/NsxslbI/n/q
MV5c1wrZ/19V/HSdtGpSyP6fHht5ISlk/0+avng8YJby//F8mjIh+386bXzb
LGT/v/K2foBdVsj+n8Yv7ZMRlsr/W/4fvX8p/4/ev5T/R+9fyv+j9y/l/9H7
l/L/bZX/t/w/ev9S+X8a+zUgK2T/f/zV/Uc1/JIVBv8f/H/w/2GFFVZYS9AK
/r9NV/D/wf+3h/y/NbcTvT/6f8z/o/dH/4/5f/T+6P8x/4/ev1T+f0H9v3Uf
h95/cfn/n/xYzHOyKv+P3p95cNmXQzr+nJ3v/H9b+f+/0u9dWOz5f9+WvOrx
GZX/R++P/h9/HvT+6P8xb4/ev63z/+j90f/jz0P/80E5lf9f1P4fc//o/zH/
j94f/T/m/z89yRu5jMr/7+LHyvdoUvn/uN+6SeX/DyPP0dxu8v/o/dH/Y/4f
51Awrb4SK/+Puf8lzf9j7j/4//9JzP0z/0LeK6/y/+j90f9j/h+9P5NqOZ7N
LLL8P3p/9P/W/B/0/1YfBHp/9P8h/79g+X/0/uj/5zf/j7n/4P//J63rMSv/
j7n/hfX/tI2Yi1T+H70/+v+Q/w/+P/j/sMIKK6x2vNqqV5cKFk90yIOo16uX
onUebLM+4kX9+y7gGk9+/XqH7E7nn7sUrV6bgfQ63a5o/b10GT54mkNe7msV
E3WKb9d5IZZSfNHXe/5Qo2j1HO0xc+r2X28xQ3Eu+bkPFevpgdhIcUcqQJys
uAvtYzyu2EwedKCiT4NePHCi4i79fjpn+s5TFH+iXrgJirtQLlOzIwnwiYpU
J7t+meI6NFB5suLQY7fa8bzqiYoTXj2z+c/dJijuQp+LMYp7+jqrp8sUDxtC
f6Ci1dtItazDqhRP/dI/YKwZ9wZWKFp9qf+mPtYKxe5Rxeb1389W/Ij6qeqF
cX908f6DBiJEwgpvQ05OuIHUlzhX6Hetjri03u3tY9gXZoWd//PkSl2Pr3Pb
DFj7vmVvrFbc8fAHVx0/aJai9XmIe7NHKsY+8j3FBuqpm6hozQWyfEvs7xuF
35N/rnYXtfjirRbhvjQfpM49/UJjt4/HtgifpLnadc63Ra5/dYtw2ElTi3e0
aRed6TeSahXfoeffZyla/cLWPgjVK84ZrxjnJssUrXlNvlVt9UHVipY/tOYs
0W3SiHLFD0iQVSrSdtmH0xX7UP5yjGJvH6u7cKbiBOovrtCkv6deeMVdNcct
+2GFOaed6n63KgjP//6U23sflnRL+brjayOht29Pf1Tr6C7+gki4BxW+1rpN
b/c7hU1C7pm1el0HbrBz45bLa1r7mz1oH2+KIrUbN09STNHzPzMVrTlj8X7i
dMX1/GHxpmmK9DY89YFi3E/4pmK8XzFG0ToOx313lYqX+Nry7aoUreN2fHxq
FHJvONVZX9soHDJ2t1WO/qaqtb97jvAgEjzVbribdkz67LywvIffiKp2tL10
cyTclHqWax293E8VhNwPaB2H1yge5U59PRJyfoB085xI+JLfnhqecJe//d6D
e7yYFx5Gq6a1JzYSLn2F/xdqHdU0fh0JL/z7+UN3ySbcvn/xG2eRMO6TrXXv
vrz7qetdHgl53yTub4+EB6/lm9UT4sHQh5EOv7MgpO3jP6Xcyy2+mDsSvuXr
ZcsTra9rJPzF1/xeyc/vFYTxPn7Svbid3zGKhK/R8bjWHU6vxxzhN8PfqN31
g2p3HQW9G4U7+I/5+tWtz4lVKt7it53OKlc80McgNpypaPW03n3+4Vss1TRL
8R3KZbynOJI2dCcqkv7/bKbiRv/osV/T35PCJ8kHTnd0uuqYF75Hf061+7ff
rlsvI3zrL5nr13orac4ttHow1yKBNl3xUR+z32mCYoe6DSaUHzpb0Zo7NHC2
/yCUKTb4/2yTckWqL32sTHFF6neZqejTHceOnK142QEdky9cVqZ4Jm0sTlG0
5q3F+9QViitfuvc/f/mhTJE0d9e0kH9fGke3X144nL6X1a5X7YDiv1EQHuEv
u95PulfpAYtIOKyj3yhKuC173X/1Dm9Gwldpo9U+/pB2PCMSxvcXta095wXh
Pv5rt1yq9Tq9RXjf5f4EnG7tiS0IU5/7wErSfUVzeJqFj9H9UdJtufzNjx16
T0YY52NSzu+qVF7SJFx1BV9kUOMu9dtaz9UqWn3HfzvD73xUKfr0xtOdmoVd
qce5eDykjfkW4SxfK31C2n1GvbgZ4X3+MnrrlJtykS8Er1ScRw+wasb3hVMV
D6I8xquK8X3Mm4ojT7ugccR3byv+ba+7Du4eDVY8hvp4X1O0/vxT6D5mgmIF
efTJis9ToGqaYh8KEr2mSV75GsUOr/n8z0BFOk0PGq4Yf75nKv7LPy50T5Xi
dL9tcGyDYvw87RzFtek5kwbFuEd+uuIGPtbxYEFxXeoh+0Txrg39hmlacST1
Wo9QNF83Os49pTiPrn8fU4xf1+6KZk41rLDCCuv3uoL/D/4/+P/g/5cQ/8++
H8meCcm+H8m+H7mk+3+qldwtL94f/T97f/T/7P3R/7P3D/6/ffh/9v1I9P7o
/9n7o/9n74/+n70/k26nK/Li/YP/bx/+n30/Mn4OIyfen0la6vy8eH/0/+z9
0f+z90f/z94f/T8eh9G7of9n74/+n70/+n/2/uj/2fuj/2fvj/4fn5tA74/+
H3Ow6P3R/7P3R//P3h/9P3t/9P/s/Zn0cp6bF+/PZN+PXNL9P/t+JPt+5Na7
+geHCuL9g/9vH/7/u/H+iYWM+n3R+6P/Z++P/p+9P/p/9v7o//H4g94f/T97
f/T/7P3R/7P3Z1IMY/eCeH/mLFoF8f7MBB2/8+L9S/l/etsOyCv/Hz/+l1P+
P54XFon3R//P3p/Jvh8Z/H/w/8H/hxVWWGEtwSv4/+D/g///3fn/j2mOTlrI
3unLnn4gQ17IHonG+VyeE7L/p/FMDTkh+/94jlFOyP7f3/W//2RWyP5/jxf9
BzUrZP//AAm9rJD9/ys0Bz8rLJX/X1D/b+X/z6Xn4/NC9v+Ft5uuuqI2JVxc
/t/qBbiBntvOCEvl/9H7M9H7M9H7Myfsf+yvR2wbCdn/k6aamBK2tf/30wzS
szNC9v9WX8Pu/nHrE/NC9v+k1a7JC9n/Wz0LD/u//rKskP3/4P5+4EZOuLD+
n7TIGRkh+/9d/+4/GVlhqfy/NacFvT8TvT8TvX+p/P8q/uPVKyf8n/4/B6x0
NJape0rI/t+nIC9qqRWy/3/Gf/2+qhGy/6dxKielhOz/XySRVSdk/z/seV9Y
kRSy/6cf94OEsK39v3UcvtaPtd89J2T/T7e7j+eE7P+t43Zb5f/R+zPR+zPR
+zOt47A1PxC9PxO9PxO9PxO9PxO9P9Oam4Ten2n1YKL3Z6L3Z6L3Z6L3Z6L3
X9j8/1w/Xv7AnJD9/9vL+QEOWSH7/wGUz84I2f/Hc73qhAvr/+O8fo2Q/f/E
DVd9clzvjLBU/t/y/1b+3+otiv1lTljK/9Nf/0S1kP1/hR/fuVZWyP7f6h1g
H45efHka9J4Vsv/v+K9+D5w4NyNk/09Hg14ZIft/Gr+4a1bI/p/Gqu2XFrL/
/6XzoT3vfLVWyP6f563h3LXuKw0v/pMVsv+P5+JkhaXy/+j9mej9mej9mej9
mdbxB70/E70/E70/E71/W+f//VXPf46PhOj/cR+A/T/uA1j5f/T+pfL/Q+l7
nBOy/z+wy5mjuq7cIAz+P/j/4P/DCiussNrhCv4/+P/g/393/t/KnaI/Qv+P
+X/0/uj/Mf+P3h/9P+b/0fuj/8f8P41jn5ZdZPl/9P7tNf+P3p+Juf9F5f8X
d/4fvT/6f8z/o/dH/4/5f6tnAb0/+v//b/4fvT/6f8z/x/N0syr/v6j9P+b+
0f//7/n/nMr/H0gHjozK/1NtTJdmlf//9Hl/Z9uk8v+kTS7KqPy/1TPiX7Xx
85oXe/6/+KXvv81HGXUcRu+P/h/z/9Zxm2ohfs2p/D/m/pmY+w/+f8n0/5j7
Z8bH0bzK/6P3R/+P+X/0/sxNK31SOLvI8v/o/ZlUW/Rhs8r/49wfJub+0f9j
/h+9fyn/P5ceMJij8v/o/dH/Y/7fysOj90f/j/l/9P5tnf+3+lbQ+6P/x/y/
9bzD79X/Y+6fibl/Jub+23r+D+b+S/n/x/ztUL+Cyv+j92fS1+wvuZD/D/4/
+P+wwgorrPa8LB/eRv2/Hagv8RJNa9F5+CinuISvPv6xy79e7pBxz88titZ5
ytoXsP7eo2mQxxSHPN4/lvpJneIImgOg+SEVy9UqxteVExSX9WMklilTvITE
+1zF2APlFOOe1fcV+1Bh0EOKB5H/e05xbxKJYxUtDxlfN2kuvZxvxJ2i2Jk8
zzhFq5fN2pfxuyqD/j5DcYPcGsU7qgmKcd/RSMVmf5n7ZLniNvRcfI3in3p+
PfyN2krFN6k3qVox7ovTxB5W5gNUoFyluGqmZbMHdq5WjPu1KhSrLvEFpuWK
/m7x3M/nCPP+8vaiGuen20z+tSCMe/pSzrfp9XugRTjJ386sX+c+I9/YLIx7
9xKt368KxQe9tjxzhmI8R2KmItU2jx2n2Inul19RjH+PSYo/URFjueLVV/gH
5isVV6Dr4kjIPbD/2u6WKzts3SLs4jXY4WlHdX3NkZC270YlHGnUO6oVN6IC
19mKcb/cVMW432+w4jt0PzdOEfvkmHv7+u0vKxWfGNXwS+dDm4Rdd/IbNjUu
uaff4ZkjpK/7bjUu9YI3II3CvpSzqzbnXG1C+1AVijMm9C3eyWjuQh+ASYqd
yadOVrTmDq2xul/1Qt4XOIH6SPPCjpv4SVDcoxoJ+9Pr8d/zfHCuz/q0wRcJ
H/Nv760J9wp5xybhP173RqjGnJtxKx2PNbFHmXkvDaiaoBj3ck5VtHobX/33
Fo9W1mvOOPGGfR+5vVLRmlN0Y9U2N1VtU6YY+8jRiqnit6Zr4Q1F//9u9OkU
xf3oRFmpSNtdl1UoXu3rFl8pV6SvwfgKRexjZv6d8heNwqV8XeGT9vMC+13h
i3QjYWq6f+Fq3Updj99+9oEF4TW0ki5B359IuOpOQ5/5/GV7Dr/159Mu1Z6R
cA0qsq01537T5cLoSJg63T8BlXD+3bz5sUg47ln/Btu9A8UPUfGvioTHPbyP
/4nNHoSP/uZ37iMh9xrHHi4SrusPJ7la5+1w33Mi4TM0f63W0TZeh4KQdM6P
CUfbmBPywufO8xt49nHsT/S9nyMc9aDfebd7Tpu8zru2QrE7/Z4zFbHPm2nN
n4m/ryMUSWP/ZZLiGySayxTfX+GOvTbaIy2so3xI8Xu5vm82zgu5H9ZfzXZ8
sFlIl5/PJFxPeqGqFHvQF6RMsU/X61Zb+dJpivT2fzNT8ZAqbzbLFbG3njlo
RM837//TbEXsfWdWUCHmDMVZdH6eorgj5WKmKhYvvopXYLMUD/O12ceXKY70
tcQ/zVK8wF8OrpkW7kb3I2XuqQH+G50Wcq+09X5R3fVxBeG6NFgr6Wi7YpMW
4YDPvVBOm30ZpO+7FISj/emuZ9KdSXn6FuFGfpspmW59HqxFGO8Lpx1dLgwq
CEcX363TDk25zTb2n4CC8HnaEEu6HrQ/Egm3/ahpxZ5fJ1yeetubhdd6vf1E
wt1IG8rNQtmnMHqH6XJ5Qq3iFVTAXam43vb+jFKuSNvLSzUJ+XhC8ZxUi/D1
1/yqc9vR5yIjjHMYSXP+z37U712haOW4rPuauK/8A8Xmgd9/fM0z7yta5+UO
dH/2kuJl1Av9juLT1Cf+geL7Gf8XjVG0+oItnx/fr5+h2Ex5wNcU4/u5aYrW
ddQgOkBOUjzyMZ9YKVOMc1xpxZ77Nf39vsfnKMb7t9MVr6QL9bmKR9EFpuZa
fkzp9TMV4/2E9xT7UC7yAsXxXf0NdT/FTrSx+4hiB9qg7aH5G+VCwworrLB+
sxX8/2JZwf8H/x/8/6Lz/+z7kez7kej9mez7kfG3acn3/+z9meL7keD9lzT/
z74fyZ4Myb4f2d78v9ULgN6fyb4fac3zZ9+PpBjgT3nx/sH/L5n+n30/0uoL
YB+PRO/PZN+PtObwW38+en+mlftF789k34+0egfY9yOtHgT2/Uj0/kz2/Uj0
/kz2c8g16YGdvDqOse9HLun+n30/kv0xcsAr/osfifcP/n/R+H/2/UiK566b
Fe/PtN4v9P5M9v1Iqy+DfT8SvT+TfT8SvT+TfT8SvT+TfT/S6iloK/+fOPml
D149M6v8v3U8Qe/PZN+PDP4/+P/g/8MKK6ywluAV/P9iWcH/B/+/OP2/o/vy
OiH7fxqHMTgvZP8fz6HJCdn/+7uI5j/nhez/iy/Gw7P2yQvZ/088+Kvk5/vm
hOz//TSV8TNyQvb/yZvu+TW9QV7I/j++fswK2f8v+6FPqGaFpfL/lv9H718q
//93mgeTFcbfrgpHj/0PTQoXl/+nurbD64Ts/+mx5C45Ift/9P6l/D96f+ZT
J69ZfvcReSH7f3qs+sm0cGH9/wH5L3oedHOVkP3/8Vd7c50Vsv+/kO4DcsK2
zv9bPRd++tZuLVkh+3+KNW5fLyzl/2OvWCtk/2/1Dlj5f/T+pfy/Nc/H8v9W
/t+am+3PShv3yQnZ/5O2+Skt5PtWGvv/Y7WQ/X+SPG6zkP3/uI/zrx3wTE7I
PjO+X8wJ2f/Hn+uckP1/PJ+gXsj+n/TrOmlhW/v/u2nuSIOQ/T99DEZnhez/
L6LzZFbI/p9ipbmskP3/oGV22e7zm3PChc3/W34evX8p/2/N4bH+fPT+pfw/
ev9S/t+aO2T5f2sOkuX/0fuX8v/o/Uv5/wXN/1vfl7E04CIrZP9P41fOzQjZ
/8fz+uqEpfx//L2tELL/r/an2+2bhOz/99v62l3+XpMRlsr/Wz7Zyv/7qSZ/
uicnZP9PlylfZITs/6nuZ0CzkP1/7SSfGM8I2f/7lo9fj8gK2f/TWKLjM0L2
/3Q4XS4rZP8fz9HJCtn/30ongoyQ/T+NJ9u1Wcj+n8YGndUsZP9PNQr3ZYTs
/+n0nMwI2f/39pdnEzLChc3/W+8Xev9S/t+al2X5f/T+pfw/ev9S/h+9/8Lm
/1ffy1/A5IXs/+kyvUckZP/fl+am5ITo/3EfwMr/o/cvlf+35v/fS9ed9cLg
/4P/D/4/rLDCCqsdruD/F8sK/j/4//aQ/0fvj/4f8//o/dH/Y/4fvT/6f8z/
o/dH/4/5f/T+TPpr38vPd/7f8v/9fGxtZKTy/+j9mTRGf4NMu8//t5X/X9T5
f4oBLtuo8v/o/dH/z2/+38rNxvOb8yr/b/VcoPdnxmO+syr/P5x8T5Py/7SN
snSzyv9bvQNWL8Ci9v+Y+y+V/0fvz3yUCjyy6r6V6j16z1H5f/T+6P8xz4ze
H/3//57/1z0Fizr/fzGd/3Mq/4/eH/0/5v/R+y9s/t/qCwj+v336f+s5Jiv/
b31f0Puj/8f8f9z7m1X5f2v+/DbkQetU/h+9P/p/zP/fPmPV4x+vz8x3/h9z
/+j/Mf+P3h/9P+b/0fuj/8f8P3p/9P+Y/0fvj/4f8//o/dH/Y/4fvT/6f8z/
o/dn+taqLjMzKv+Puf8/qv+38v9mT4GR/0fvv7Dzf6zjieX/K/1p+V8Flf+3
5v9/+qEfhJZV+f896HnSpuD/g/8P/j+ssMIKqz2s/9P3H6BpLaP/1zpum3/+
GH9fcpzmgv787W1Z+yB0XdBHcTzdn12haPX/jqfz8F2KsV98W/FNf1k/pkKx
cMAuxUubtGLcR5ZSjK9zpyg+SrfNZYrHkkedqxj3CecV+9J93zjFDv/2fVnX
Klrn/Yvoc/eeYtzfOEbzfh9wm6ho7afEfcLDFPc+ZP0xO104WdFfbdZEUxSv
pPt+zUtO9cJtomL+XN9oN1rxn5v6G+3pik0ksqsVSa8crvkczR2uUoznJzQK
q/3t7GnVbn/6A6sU4z5WzcN83PfVSsUh1K+qiT3BTMtDXn+zL1qNhCf5bYrd
E+52Cli1COPPQ9odTj2TGSH3vsXzZOcIaZtraPH3JV9Rrpij3ukKRWuOQXca
WPCB4kBfE3rqSMXeQ/Lr/rX3B4q+hXPFN2Yp9vLbAGfPEW5B71u1i6iPukXo
W5nP2jHt+pO4KQgfogLnpOtGfXFNwu93829krVuO9mUqFLv7euDJ0xXj/t4x
ivH7MF1xeX/btk614s7k0ecIm7P+ha42f87zfI3qa3OEcR9ZjTub+m+bhOwb
6eP4RYOQP89xrq5C0ZqjRbd5G1coxv52miJtR20/UzHe96gTvneYb26ocL3q
Dnp5lSvzQm8/v81Uu3/SBklBuCvduCYd1XZ2ahHGPcppR7VwFxWE297kxXfS
xXWzkXAiBQ4T7nIq7m0SbkGDT2rM73vcy1eheITX4ifNUOzwTpfbnr1zlmK8
X1OlaM5Hgj5g5s50g6lZTQWFlYod6IWcrvg+3XcOV7T6T9ej/tgpinEP8mxF
a96UNRfI+nO8pRkytkG4w9m7PjVgv6rW80Ak3JTmbde2nmci4f50QKh1pAk/
zwtJq6ZrnLdtd74aCeP+0IS7iXKukfAfB5703KaVtW6j5+6d0+/dvPAJOt7U
uDVmzL341NcjIfd1WvO3vVVb/uW8MPbJNdIDjn3gX1NfbiSkcUY3Jhx9zfYr
CGNfmnT0sv47EtJh8vva1vN8JKRfY9+E2Qtg5Xit/oLtpj/9QmO3ZmGcN0i4
2wreTDcJ96Dn3moc/bjrNgnZH1rn5a39y7FMhWLcX12mWHGkP6DOVhzg6xXX
nqGIvd3M98mnTlP8uL836Gkh92VTjfRLOeHTtHFaZb7Oo0i4NwuLP/wztzxZ
ax5/xvdOTj/xhhmK2MvOnOBre98uV6Q4w4S08PSfyhOdes92w28+esO579QL
6bSwa6Xzn75br8sLeb+GYisP5YUvksercVTnnGsQvtjPX4FVObosWK9euAoF
Sipa92vqhNzXHN+U1Am70wbsbDO/vc59y9741b8ahFOKV1eZlkpHNcxP5IR8
HKYf4/JIyP3aK3512M8bPlcQXjbzHxuvuX/KjT76rbrqJwrC1C07+X9ac+ot
wkPKvhzS8edU63MvBeFqxbuCTXukHP3nOxaEv9C+S9J977cr9i8Ij6P9qmSr
J46EP9DgsYSjr/kWBeHBxbNq3UFJdzIJ7oJwtfHesCbN3pwCXY83C2/c95Hi
JWfC3Pf8/jovkKsUG3ztaz/NnSmgVak40r9tuzQIfYri2TcrXUQ/RyTkvuPT
6Xo2Em5I+0YJt82AtYvveLOQ+8qPTZ/90RU/Vita51k/fenFq8oVh+9LF8yK
9DIOq1K05uO94y/jJs1QHH9+au3O/3lNMb6vGq5I2yeXv6+4xhl+QtUkxU92
8Efa8YqWlziInrvrpdhA8+KGKV5JJ+7Jit/5uMakCsX6ar8RVqlYc9Q5nU7Z
Z5KidV39H3puql5xKM1Nnaz4tf8631tQvI7uP/KKvl13w7mTFOP9mX6KA2lf
9H7FuFf5ScVO9HzsQ4qmX1pQ39VWa0nxV2GFFdbvbwX/v3hW8P/B//+O/D/7
fmR78//s+5Ho/Zns+5Hs+5FLiv9n349E74/+n70/kz068rfy/+z7kf4poac7
RernZN+PtPLG1uf5t/L/7PuR6P3R/7P3R//P3h/9P3t/9P/s/Zns+5HB/7dP
/x/R+Twn3h/9P3t/9P/s/dH/s/dH/8/eH/0/e3/0/+z90f+z90f/j/lb9P7o
/9n7o/9n74/+n70/+n/2/uj/2fuj/8fnAqwcr9VfUPHA3Lrz7o3E+zNJbxWv
j9j7M6388JLi/9n3I9H7o//H1/nsSfeNOf6YSLz/4vL/7PuR7PuR1vMa6P2F
rb4fyb4fyb4fyb4fac1vZ9+PRO+P/p+9P/p/9v7o/9n7o/9n74/+n70/+n/2
/uj/2fuj/2fvj/6fvT/6f/b+6P/xubn7tvcH2Ei8PxP7ztva/7PvR6L3R//P
3p/Jvh8Z/H/w/8H/t8FaUvxVWGGF9ftbwf8vnhX8f/D/i9H/L0MPvCeF7P9d
lzNHdV05L2T/T+OctsoL2f8P9LdN+ZywVP6fxt+MygnZM8T3Hzkh+0D/ae90
Sk7I/r/D1t5U1QvZ/5f7H2uLeiH7f2sOueX/0fsvbP4/npeQFbL/332Vo79Z
+pp6Ift/a45xW/n/N/+SuX6ttzLCUvl/9P5M9P6l8v/x3JGskP3/r0ds+8KI
nkkh+//4OfJKIft/iqtlm4Xs/4+jYoG88LfO/8deJCtk/2/1aNxEn9M6Ift/
0qZfJ4Ts//00sP5HZYSl8v/o/Zno/Zno/Zno/Zno/Uvl/63vO+nOb7JC9m9f
DfGDXJJC9v90GhiUEbL/t3KnPB8J5yT94G+nH8kK2UucT8fFnJD9P43FOS4n
ZP//94O9gEoKF9b/n3bod9dNy9UK2f/T6b9TVsje3uqbsHoBrD/Hyv+j92ei
92ei92ei92ei92ei92ei92da8zfQ+zPR+zPR+zPR+zPR+zPR+zOtuUBWj6c1
v6it8v/WefmcPQ+4Jn9bVsj+n8a3/ZIRsv8vfvn2H7tyVsj+v/gvnX/hihkh
+/9PqUenScj+/8APHyn+0ywslf9H78+0Xmcr/28df0hnb5YRsv+/dO9//vLD
GRkh+/94DlBWuLD5f8v/K+/fTvP/1j4sen8men8men8men8men8men8men8m
en8men8men+mNTfPyv+z/8d9AKpfmZgTsv/33+Ies3NC9v/xfM2csFT+H70/
E71/qfz/d/Rz5YXs/63zLF0Ods8K2f8vO21M4ZCqOUL2/3H/e6Mw+P/g/4P/
DyussMJqwxX8/+JZwf8H/98O8v/o/dH/Y/4fvT+Tbgt3yav8P/oF9P+YB0bv
z3zlVC+Icir/H/cOZlX+H70/zv+ZX/9fvMi9oez2gsr/+7uQc0/Pq/w/en8m
6cGfs4s9/4/ev1T+f0H9v5WrR++/sPl/9P7o//E+ZRx5mrzK/1vPKVj5//g+
M1L5f+vzjN4f/T/m/ws0MDqr8v80Nnp0s8r/o/dn0jjmMVmV//+t/L+V/7e+
7+jdmM+Rx82o/D96f/T/6J2sfgT0Eej/Mf+P3r+t8/9Ul7J7s8r/o69H/4/5
f6sXwPpzMPcf/H/79v+Y+2di7r9U/t86jqH3R/+P+X/0/uj/Mf+P3h/9P+b/
N6bepIzK/y+o/8fcP/p/PP6g90f/j/l/9P7M872W3Tyr8v++xeDnDXPznf+3
/L+V/z+JDqBZlf+nr8fjWZX/f8XXnR+cVfl/a367lf8P/v//9v+Y+1/Y+T/o
/dH/z2/+f0H9f3kP/yRNpPL/6P3R/+N5Fr0/k2oGXsuH/H/w/8H/t2d/FVZY
Yf1x1oIel6zeXuu4avUF/16Ph1afr+Gx432S6xSt/YLudJ9xv2Lnd30z0AuK
1nyAaY8vVTzjphQfowu2WsU3qA92ouINpyU+6t9cqRh7i7mKcX9aTnEQPQc9
StF6meP+5IcdcqDXqZWjFemy8vkPFOn/XD9BsWLwDgd91mWq4jG3+hvtQYqW
17XmPxxD14MTFeO+pjGKcR/sO4px3+xoRWu+Cl0erV6pGO97NAr7+4/DK1Xy
XDM+37zRHv4GvFn4YZ2/UUm07odUK25DAykqFH3KLHtqpeJlB3RMvnBZmWLc
NzVN8Q7qcW0Uxrf7Va74pq378EsFYYZ6+1KOao3rWoSV1K9X50jHlrcIP1tt
txOu7l/nqJZs12bhF14DNNU6b89u/7hS8V3K/2luTqtK8cBrfGHcdEXr/bWu
q/enftF6Ie+PWPN449e1RXgICYJ067yFZuFt1EeYVL3OTKuPeJ0fVi/eQWn+
q9vk9J3lFYqxP6kX7n69P6BUtB5vIqFPRa7xaq2rpvubgnCFmx879J6Lkm5f
vw15UyTkHtKOw7uvNLx7JLzmWF/8WevO/chvCDYJ4/s++3mBCev4L3K98Apf
Z/yhPWdmNj3HUqn4Hd1vzVQcRv3CdcKeNOiiQvqLscfYeh2e87V5p7cIX/C3
fcPS7uuuzxb/KQi7ec21d8o1+xrM2QVhZ/JKKVe8Cdtk1potwveXzp/ZazN+
jmaO8Buat1LtvKV55ZMKRauvfOvip/q0C8oUn97VX2BUKMaepF54CfXsVrq7
/Tbwmg1C7tuN90kahd+vPLr4G1S7sdd1+eKNf9Yonk3H70rFY2jDr0yxLxU7
TlK0zjvb7vnabZMvmqE4l4pIZyt28oehUbMUabvsybSQ+7hPpAdlGoV8v7/b
7n5FwqleD3avbT3uR8Jdlul42JBja80+iPj5ooLwiAdXHT/o/aSjj11LJDy3
k08iJNxtdGCMhBcWr37WW9bOxy5DX8xIeH61/wLXuptoY7sgjPtNk+5l2gAu
CN/240HuTTk6PT9aEMbeNuXoY7B7QfiY3/Y5O+maaF8xEnZ+3U/msef8W/PG
rfOONVe8J/1+TUL/t+y3XG1rb3ODcIi/DFm3ypFmu7ZRyD3Oc398tXihqLkB
FWtWKmK/L9OfrW4+eqaiNb/rb7QxPVvx9Y38O5QW+rPjsSNnm/n8+M/LCz8t
HrXefbna/DzsQAH5SDi8eLQ6cqdadx3lARqF8f+9uvU6tE442//rh1c4ihUM
SQn39uNiTpvlnqRe0Hoh/5yci8B8hD87rVmeF7764opVS/WvcbRts1ZBuOY6
fkM62fp8WkG403n+F0s5OvscVxByT+4K1LccCS990RdaJ9xS9DmIhOfQ+arW
kWUdlxO+Sf0DVY5i2I/mhV/QBavd60Gn58GR8Ftf43laonWfsEWYXrvzf55c
Ke0onlJfENI2xeCU5C4wf2Gdj+Ln5QrCfWjfPOW60AZVQTjL1+penXLe3r+8
SkF4Y9ntg7ZbO+mmjPQb6AXhZ7TvlXRUU50sCBsv/HPxjJ1ytJ21Q4uQPi7H
pN3ZdH3QItySLkTS7u80jygjPLrcT7JKurd8rOaLJuGZj/obqlr3Or0PDcIz
6MRU2ZrTaRTy9dUx9ALMES5Fxd415nF7q+X9EbggfJ32iVOucUv/PzQL+Ti8
Os1haxbW0GW73u9kbnKWT4ZVK57qa8ZPqVK09qP5PgN5zsl9Gi78c40i/Xjn
Vine6y/j35ykOJA+UOM0aX9svCJd5o4oV9yDnu/9QPEgOi7eoNiHrkcuV7Ry
XFtuM+mHGXtMU4yfd61RpPjd8AbF+M+bqbjB1csVv+pVilYO8EEKLlQrfuNj
TMXraeQtmVVWKDurSTHex56iaPoTIz/Zx28z//CQopWfXCRuJ6ywwgrr97SC
/2/bFfx/8P9LoP+3rsOtXBP7fuRv5f/Z9yPRvzDZ9yPR+zPZ9yPbm/+3+hGs
PB56fyb7fuSi9v8XELPi/Zns+5Hou5ns+5Ho/Zns+xWNvgD2/ci28v/s+5Ho
/Zn4+6P/Z+/PZL+CRO/PZN+PjO+/8+L9F5f/Z9+PZN+PZN+PXNL9P/t+pJX3
Q+/PZG+EtPog2Pcj0fsz2TMhrfnY7HeR6P2Z7PuR6P2Z7PuR6P2ZVv7cmjeO
5xv0/5grZt+P9NPU3rw/J95f2Or7kYfSc3W5duP/2fcj/+9+kP/2/kzr84De
n8m+HznCnzZezIr3Z7LvR1rPEVi9SOj9mez7kej9mez7kej9mez7kej9mez7
kVavB/t+JHp/Jvt+pPXcpXU+Qu/PZN+PRO/PZN+PRO/PZN+PRO/PZN+P/Ld/
vGTfSLw/k30/0j8lPX5GTl1fse9Hovdnsu9HWsdh9v3I4P+D/w/+P6ywwgrr
d7iC/2/bFfx/8P/twP/HvbdJIfv/FN2f5YSl8v+W/7fy//5P7Xp8Xsj+P56L
kxWy/6fbu4Z6Ift/qk/cLy1k/x/n85qFpfL/loex/D96/1L5/8OHf/VzzbU5
Ift/P2XijjNyQvb/l7/93oN7vNggXFj/v+Y3/ga8SVgq/2/5f/T+pfL/fH+K
96l30xzhnJD9/2l3d964T9eckP0/2YOPssJS+X/L/1ve2/L/6P3bOv9vzZmn
GsO1ckLZB/B64vyMsFT+H71/Kf+P3r+U/0fvX8r/W/l/b4nP+z4rZP/v34XH
LsgK2f+T7m/MCNn/b0znjaywrfP/ftrOP0fkhez/vW3Y8qickP1/PP8kLWT/
vyYJtxoh+386TJ9QLeTzTt0GfvBCRsj+P34fskL2//R4/5CMcGHz/+j9S/l/
ax6U5f/R+5fy/9Z8DMv3ovcv5f/R+5fy/+j9S/l/a96Idd6x5oq0Vf6f/T/u
A8Tz4nNC9v/xvPiskP2/vwoaelJGyP6f53fhHC+6rF87KyyV/7f8P3r/Uv4f
vf/iyv9b/h+9fyn/j96/lP9H71/K/6P3L+X/rblelv9H71/K/6P3L+X/0fuX
8v/o/Uv5f/T+pfw/ev/fOv9vHbct/7+g+X/uPcf+8zl0v5UXsv8vXuwudcXb
OSH7f+6jx176jVZ9clzvZE7I9x1D/ZjLIXOEwf8H/x/8f1hhhRVWG67g/9t2
Bf8f/H878P/WfHX0/ky8/sb5P+j//dXp3rWRyv+j90f/j/l/GkO8S07l/2Nf
kFH5f/T+pfL/beX/px7jB59GKv+P3n9x5f/R+y9s/t/y/1b+38qnofdH/4/5
f/T+TMz9Ly7/v6D5/7iXN6vy/9aceeX9wf9j/n8pEtFZlf9vb/4fc/+l8v/o
/dH/Y/4fvT9zeRr0klP5/4uJOZX/n0VfmLzK/6P3R/+P+f8XGrt9PHZyRuX/
zyGB2qTy/xvScbVRnXfQ+6P/x/w/ev+Fzf8H/98+/b+V/1e5/xL5/wWd/4Pe
H/0/5v+t/g70/sziyfHDrXfNznf+v638v5X/x9x/qfy/9XMG/x/8//zk/zH3
Xyr/bz1faeX/F9T/4/w15nvURxGp/D96f/T/mP9H74/+H/P/1n1HvN+ZD/n/
4P+D/w8rrLDC+v8sy88vag9v+f//c1/A+jl/g96WBV2G/7euE8bT732Vpj+t
9rxe0fprrf5B6zp5K6+l5qUVdyYfUqV4W8GLiMmK1v1FxaH+inCuIm17rJdX
7O/rzY4bq2j9vg9S0PINh6Qat21GKNLYjKFjFJ/es+KCZZ6Zokg6fs1ZiiN/
9kVjwxQ70PX4JEWqjbxulqL1el72rReAgxVjbzRE8RQqah2vGPf+TVD8hPLc
MxUneD2xbaPwCsqnV5lzm8v28TfIzcJuXgP8I+l22MA3eNUoJj/q3/zB/pWK
1nwY6zo29iKTFa+mwQ0VinGfVSSMe5wTrfdhLcL4PiTtqGXspxbhgLXvW/bG
r+pcE81FyQi5R9U/zT5ou1rFuKe3UvFIX9v7F834U12hOOngr5Kf7ztdcdln
/Ae1TDG+32oQci/tYz+dM33nfgXhff42butUa+9ii7CMPGmd8+2x1zxTEMb3
IylzjnGSBPcc4Z3kP2vcOPKpc4SX+nrGqNp9RZ64Ufjidmufv+mB1Y5uO5fP
C+P+62qXo/2ugpD7akd+5wdwFIQViU69N/ky5Y7c6fAHVx1fEH7pTjv0u+tS
7hnqpSwInySRnHJxvVxBePgW/g471dpzWxC+9JQPgqbcRBoM0STsRRurPI9o
jvDW8TOeO3x4tTuOevMahfGc5urWPuU64a1Xdtg6OqCitf+3TnjG5n5Dt8LR
YX39vDB+XqfanU491ZGQe/0OpVx+Qfihv12+JelI700tCPvSSrkJVBRaEEav
HfDM9Akpc0619f1q2eyBnZfpOEfof7t5d1S7v/pfe2K90Kciex5U6R6mF75O
eAf1v5e7teh4UC+M+78rHW1jn5kX8uvsWwu3XikS9vW39Z3s+faPUUFpo/Cw
eOCN60WFgPXCzf2vcVileb6zvu9f0+dplqLVY/jdCutvv9/fyhS/fnDq40st
1yActMwu231+c6Xbj47reWHyBb9TWt26j50X0o8zpMa9R+erSEi1t+vWtu7D
R8K4pz7h/C7VUk0FYbzfmjLn/+eo2DoSkj5cJ+GoljWKhAf4t2Vywi3XZebU
7b+OhBfSvnXCHeg1xPeRsPFwL5oTbt5X/gVoEXJPaNz73SKM95XT5nHs6Zu+
W3n00gXhE81e0CfM+eqP0OcjEvY954Vup8xKuB/9NvhKBeFJN/gN8qSjw+I2
BeF9ftvhyCQdhablIuG6lAdItPZ+R8KOJPRr3f3k//LC+HqppvV7O0dIX+/D
atxg+vg2Cmnb8Jhqtzp9YOqFH9BzS5WO6jy+SQt7+5cjP9s9Qg8O1gsPoyLQ
Cvemr8V9ql54Bj1PUCl9stgrSzWQG+WFNH5q9+rW/YRI6Fsk5/SrdcWTUPEd
iYRv0Q9W64bd6At5I+HUOdu9cuqBidbrqYKQe89pbM+2BeHQZz5/ecpfk+bx
gT5+W+SFM/3h6eBqtz4VkkZC7nu1fn7r/Yro+iUSch/rlbRhGQm7+prlAbXu
ra39lUdBOM5v7yyddFTvullBuOGJ/kidNM/LVIv7eCT0R9ubt02Yc/ivesRf
GbcIu/l683WK10Vfflf8ZhWExZNC3w1vSJrnWdKdqxeEVK+6UdI9TG9sQXg7
5QBSjrbZzisIR9zhv+FJV7m5P/EWhPTTzE6af/5qz559cp+GSNiHNrIS5pz/
b6nwuiBkb09xhi8KwvhznXI0zueRFmEnv13Wuc7sH6HxkycUhAf4y+sXko52
kTaPhHz9cFX/UQ2/dI6ER9EFbq37wl/OfRkJD6cPXML8XsS5nWYhfaxHJdw1
Y5/dYOfGGsV16Til+VzxaHrihCrFdX3sIFeraM0Rsnp+rfk/zTSHrVrRyhtM
o3zOTEU6HFwzRnGjnf0TEO8q9vNxq42nK95LL+RYxfG0nzlAsQ/dx/dUTNH1
8TuK1vzMtSjnM1PxufO+P+X23jWKnalXvVxx+c98k0VC0erR3p8GhzUprkQ3
OBnFzelCrkKRTidnTlS0vMdAev9vUazwX7fbH1KM/cplmmGFFVZYYcUr+P/F
s4L/D/5/CfT/7PuRVm6TfT+yvfp/9pLo/9n7o/9n789k349sb/6ffT8SvT/6
f/b+6P/ZlzGtHCP7fiT7fuRm9NxDXrw/+n/2/uj/2fuj/2fvj/6ffQT6f/b+
6P/Z+6P/Z+/PxPt2JvpoJvt+JPt+ZG8SLVnx/uj/2fuj/2fvj/6fvT/6f/b+
6P/Z+6P/x5yq9f3yU7DvPiIv3p9ZRs895MT7M7+g9ycr3p85lH7hnHh/9P/4
OqPXY1o5Sfb9SPb9yN/K/7PvR6L3R//P3h/9P3t/9P/s/dH/s/dH/4/5f/T+
6P/Z+6P/Z++P/p+9P/p/9v7o/9n7o//H4xh6f/T/mK9G74/+n70/+n/2/uj/
2fuj/2fvj/6fPTIznh+XF+/P7EMnprx4fyZprH1y4v2ZdFmzf1a8P/Nyep4p
K96fyb4fid6fyb4fid4c/T97f/T/7DfR/7P3R//P3h/9Px4f0Puj/2fvj/4f
f37r/ULvj/6fvT/6f/b+6P/Z+6P/x/Myen/0/5jDR++P/p+9P/p/PM+il0f/
z94f/T97f/T/7P3R/+Ofj94f/T/m/NH7o/9n74/+n70/+n98/gi9P/p/vH5A
74/+n70/+n/8XrDvRwb/H/x/8P9hhRVWWH+gFfz/4lnB/wf/3w78P+mxUdVC
9v80juW6jLBU/t/y/1b+3z91vtxneSH7/9E0LyQnZP9/HoniBmEp//+Pwcud
Nni5WiH7/44/933r4ilZIft/9JJM9P5M9P6l8v/equXXjYTs/1ct3PXDXofk
hOwD4/k59UL2/zTu9dY6Yfwpr3C70Xy1pJD9Pz2uPTEjLJX/R+/PRO/PRF9W
yv+3Vf4fvT8TvT8TvT8TfQQTvT8TvT8Tvf9vnf9H789E789E789E789E78+0
5lRY369Fnf9H789Er1fK/y9o/p/7NLFX0/q+x/MDMkL2/++vcMdeG+2REbL/
P4r8U0ZYKv+P3p+J3p+J3p+J3p+J3p9pzf9B789E789E789E789E789E78+0
jmPo/ZnWfBX0/kz0/kz0/kz0/kz0/kz0yO01/4/ev5T/R2/ORO/PRL/JRO/P
RO/PtI4P6P2Z6P2Z1s9vvV/o/Zno/Zno/Zno/ZnWeRm9P9OcwwPen4nen2md
Z9HLM9H7M9H7M9H7M60/H70/05rzY83tQe/PRO/PtOaPofdnovdnovdnovdn
Wt8LK/9PtSBf5IXs/+v9+M5+eSH7/4G+3jyfE7L/p1jElZGQ/T/PEcJ5QnG/
V07I/t+a/x/PuZkjDP4/+P/g/8MKK6ywFmIF/794VvD/wf+3A/+/vx+Xf8Ac
lf9H789ckTxxTuX/rXmhpCl3Kaj8P3p/9P+Y/7fmw7dV/r+t/L+V/0fvj/5/
UeX/0fsza8b5Brecyv8vav8f957m9XMAvibhqrzK/2Puf0nz/9b9u+Wlrfz/
Q17nPp9V+X/M/S9p/h9z/0zM/TMx98/E3H9b+38r/5/xWnyrnMr/o/dH/4/f
d/T+6P8x/4/enxn//TmV/w/+/4/p/zH3z8TcPxNz/0zM/TMx918q/x/8f/D/
wf+3H//v0xZbNkcq/4/eH/0/5v/R+6P/x/y/1SOA3h/9P+b/i//j9BNvyIf8
f/D/wf+HFVZYYf1/luX5F/W+wBjfx3Kcm28u6M/f3pbVj0y8WPEgenD3SkXr
jx//2Wk/lSf6OOR3/nLskZGKpAWfSShavT+XTBl52L+2q1Ls3OOVT3a5arri
kfQAc5Wi1RMUP/eaU9z7AF94Ok4x/lyco3jMHF8c+ZriwNP9DelIxb7094xW
7PCID5yOV9yD+v2mKMa9qSMVh17T8V/9HpisGN9vTVH8G/UGv6PYw4/fuG2k
4mHkI6cpbk8FlxWKVNt8Vblif3pgu0Jx6ElTl12tkBNOefisHb+fXOXosean
I+FJvgZq94QrXlQ2rdgzI+R+Q8svUVz/tApFy++tRw+KT1OccOt1z/9y33jF
WWeN+zj/WplinW9xPW6O8N5f0xtMKK825+he7MeoTCwID6A3LNWa5y4IuV81
fn6/WfhELPDcsbRhVK34Yj+/sVWleBjdmFUqxj3YMxSt3/cB6ulqFB5EN0JV
5pxeuu2f1iI82b/9d9W5mX6sRUOL8D9H+6LTOkd1tZvOFdJt9N71bhoN6CkI
6fbzKXseLx1WbikIuY8vznsVhON8fXEmac7xXqnr8dvPPrAgvIZW0nW57dk7
9x9bEPK+59d0HGoRdnvWF8Klnf+vb7yjRbgCzSGqM/sF6DH9Q1uE/mi+cZ+0
8xb6q58Lwm9pEEXKFf+lnne+Ggm5VzHev2oSTqXXo8a9QV45LxxF99XV7gZf
fz02LzyJBvbUtO43FoTnej35UtKR/htWEH7YwW882POWrc95zze9iIuEO/oa
0ocT5nxj6/294hD/REMkPLz4f72yQ8K9TYM5IiHp4SNq3V4b+SNvJKzw366T
E+b7TtsGmxaE3yztG56T5r9PYzZujIRved3xRW2rh8gLH5zrC85rXBX1fDYK
b90pdctOqSo3iL7HDcITyXdUtnqPeiH3mz9LfYN1wriXsNytT72s9cIZXrO9
XOGoNvmyvPBnqiuvNn9+0mT/iYQjfE35h/a8aBqnMSgSfrrLVe/9fHDCXfba
uiPvebggpDq+TVJuFq2C8Ae63ij+7/Q8WCT84ZTbex+W/O++eOyNH0PPBRWE
/lvQZWbSXUsD4wvC46g41u6n8K2T7z1YEFK8YsOU81bqxacKwl+ojzZlzo23
Pm+jaUXC1Om+sLP48xcOqXr07kjYQCfQRGsfZiR8hoqja83X01vfte8rCOO8
REo8Hvo8q3fDev7OyvdSHeM6kfBC/3Xc2v78nOy/xudHwtW8vpte6+ht3jMS
ck96eQ+/AxEJf3nLf8ET7kQ6wEfCjrTxlnDnUiFxJNw2/sCYv+/VO3iRHgn9
rvyfvks4qlPNRMIv/OltjP2/W30B1ueKPnZ9I+Hw7isV/0m4QbSxVxC+dmbz
n7vtljSPty+3+A3cSPjWO3RBb/b1HEdF6gWh/3S90C3laFxTh4Kw1/3+FbF/
X9KjP0bCpWmDNuFoW3SrgvD87+kdNftBvEW8eocWIffk+oPTEzsWhOwV6WP5
fEFI26MuZfYR7ONPw/u2CON8Q9o8Lw/f14vKgnCWvzzvb/cIUL39kS3CZY69
yB+q3coNfsOxRXitr6HePe1IEz8WCcd5fb5lwvW4ZYWvDvs5Em5LhawJR9vk
fVuEO907csg1HetcPV2PFoTc70yngWcLQu5Bjq8PWoT30YCutPn52Y9OsM1C
3oc9hp4vrVDMeb3+laZ1f2HlxKzrXp/WKP6jOK/4LdvrrkrFFh9veqhC0Z9F
H1qzSnFLKkSeojiY+tKHKv6D5mVNUrT+nDhnMUxxJL3cAxWbKa93t2L8nOd4
xXn7+g3TKsXLaDDidMUtx53y5T1blSs20PG9SpHGd61Vr4j9ysz6DXyApEnx
S18jfUpa8RQqhh+peC9d8LynaPoNOnDe6JAdaCO1r2Iffzn02vmKi0buzMda
UjxVWGGF9cdZwf8vnhX8f/D/S6D/Z9+PZN+PZN+PbG/+n+L7/8qL92daOTr0
/kz2oEj2/cjfyv+z70daOT30/kz2/Uj0/kz2/UhrHi/7YCR6f6aV40Wfy7Se
e0Lvz2Tfj7T6Bdj3I9H7M9n3I0nDTcqL92ey70ei92ey70ei92daeUv0/kz2
/UhrvrH1/qL3Z7LvR6KHZeL7jf6fvT/T+vfRmzPZ9yPj+Sk58f5M9v3IOIee
E+/PZN+PjPVNVrw/k30/0vr52dcirXnR7PuR6KmZ7PuR6P2Z7PuR6P2Z7PuR
Vj8Fe1kken+mlRu3Pm/s+5Ho/Zns+5HW68m+H2nleK3nbqzn76z53uj9mdbn
B70/k30/Er0/k30/Er0/0/p90fsz2XMj0YMzrecF0Psz2fcj0fszreMtelum
9bween8m+36k9fuy70ei92dazweh92dauWL0/kzreQT0/kzruT/0/kzrOQL0
/kz2/Uj0/kz2/Uj0/kz2/Uj0/kz2/Uj83DCt57CC/w/+P/j/RbiWFE8VVlhh
/XFW8P+LZwX/H/z/IvD/cT9pQsj+P0/+Iyvk6/PY82WF7P+f3tV/8LLChfX/
Vv6f+yWxZzJ+XeuEC+v/d/27vwOsErL/P6SnnziTEZbK/1v+H71/Kf9v5f9p
TMjqeSHfB329xajh6+cahOz/H6WBVA1C9v+b+bj4zKSQ/b/1+1r5f8v/o/cv
5f/R+5fy/9bz+JYfRu9fyv9bXtfy/+j9S/l/yzNY/h+9fyn/b+X/Lf+P3r+U
/0fvX8r/W59zy/9b8w2s9xe9fyn/jx62lP9H71/K/6M3L+X/f6v8v+X/rZ/f
8rfWvAjL/6OnLuX/0fuX8v/o/Uv5f2s+leX/0fuX8v/W583y/+j9S/l/6/W0
/L/V42n5cPT+pfw/ev9S/h+9fyn/j96/lP9H71/K/6P3L+X/LVr+3/pcWf4f
vX8p/2/5W8v/o/cv5f+t39fy/+j9S/l/9P6l/D96/1L+H71/Kf+P3r+U/0fv
X8r/o/cv5f/R+5fy/+j9F9b/W/l/2g6dlBWy/z+Y5qhlhez/rfsLP6Vtypyc
kP2/dd3rj6IvfZATsv//C82/zAnZ/9NYnLXqhcH/B/8f/H9YYYUV1kKs4P8X
zwr+P/j/ReD/6bL51WaV/8frcvT/mP9H74/zf9D/49wfJum/lwoq/4/en7lN
p8lHPDY4u9jz/5j7b2v/T3HRRyKV/8f7HybFLYflVP7/C7qOzqn8/z7UX5FR
+X/0/gub/w/+/7f1/5j7D/6/fft/zP2Xyv9j7r9U/h9z/8H/B/8f/H/w/8H/
B/+/IP4/t/f9xX8ilf9H74/+H/P/1v0Fen/0/3jdi94f/T/m/w+lvpFsyP8H
/x/8f1hhhRXW4lwLehyz/n3D3/5uj5OG/7fOU318bPivlytar9t4X+u4/JWK
3kLcstNIRasX8se9Dll/zE71ilav3MPUUzlNsS/NA5mtSLV26+QVaTz1HlnF
R71ufnicYnyev1ZxIPUF3a5o9QJbnj9+XniS4t+oSHeW4i4rvrHRP3rMVJzw
jRd9kxUH+TrGF8Yr7k0/wFjFq/82r/uAV8oV6Xb68GrF4b5+73LN4kV68RZN
czDVWzYKuR/QmqPb7eOxk3+9qEX4LWmndKuPbBZu6bXuSUlXTbnYakWr99Z6
zje+/p2gaO1z3Ug3FGWKpDuvbRRSreI3VW7Xpwbsd8UhBeGkDamIzFFd37Jz
hV3OHNV15aXr3Xaf35xZZYUW4TDq1067m+jfyAhfJ5Gfck/QcxE1inf62/7H
KxW/9npla83uT/iC2pmKVq809+1i7+6R1CvYIvzSb0PtWed8y9jZk1qEK21x
SfG/qHP0MRjWIqS7+rPr3Or0wWsR3j7Zb9ik3Vq0gdIivGvDG14eeF7aTS3e
zR3cvUX42Y3+hUo7b4lH9GwRntVrswu6TU67rB/vfEOLkHvJb199r2+PPrhF
eJH/dW9Mu62e6PXOaRe0CF/34zVmpc35/FYvQNyDVxAe7cfgvJMy5wBbc4Pj
frkWYdpv93xo//u70fmhRRj3O6cdbW/s3SJ8+2K/EZt2I2gAf0FYQTe0SXMu
tPXzJylYVxCu5sfm9Ei1fm9ahHE/d9qNo8HkLcK4Hzft6OO7VIuQ+1jj/cyC
8IePryn+zUl3IZ0HCsJ4fyvp/LvQf1RB2KerFx8p9w9f//xVQbiWr7NrSrkT
TvSrRRj30KVbPX1B2MdrjAeT7umbfPNcQch9r3E/Z0F4lv+675B0VGNxUUHI
fdNWD4U1t5l084oFYce4oNecH27NybfmTsf7mZHw2vxtp5z1RMKdlvAF6wVh
vH+aMudOW/0O1nxpa964NUfd6n0gLbJBQXgbFSbb8/9pnMnuBeFjdw9b7dmz
k24g9R8WhKQnv026XnRgKwi5p3j/5brMnLp9QZj63J9gkubPT2PJ3omEB9OB
LuE+p/NwJPRH1dduq3WkOx+PhNy7av35O9H/JxKO9h/DOxNu7c7/eXKlrpHw
3q286Kk1/96pNNA9En5xhz8R1Jo9PlQHM6ggHO1P14emzB4Wf9Zbf/tIyD3F
1vXD93582v4F4XH+sqNX0vz8DHjl31s8WhkJOa/yiT98vBwJ96ldqXhES7i3
aABWQcg9uRf080/AFYR70IZE0uynsHoxrHn+Vk+KdZ2wBRWmFoTcIx8/P1kQ
PuQvpyYm3SYk6ApC7tu1+iys+fbWcW9Xum6NhPH1aq07P+U/aZFwl36+gCDh
KJa0VkHI/cJWP4LVO2P1Gli9A+eu/cPqZ9QXhNtSjiTldqcfpCCc5m9HUnaP
QBP1x0bCzlTEkDCPh4fSfU9B+OHFpxbPQEl3DV1QNAt5X69hUx+IahLe+7D/
hNW09t43C5ufOnnN8rsTrbmnZiG//nH/SrOQe9Kt49gK3Y+bs8zESMh95fHz
hLWKJ1C/UZmi1ettzQtadqK/YJ6t+N1Ov5x/4YrlilY/7BR/WGmpVLRyDtYc
oUF0QTT2v9h7DzCpqixcG3NWVHQQcWTELCrm7EHHOCZMmDMqZgYxo6IyigoO
KggYAUFBUQlKUqDJmc5dVU033V1V55Q5i4qit/Y6rPX/91t3WYKo4Oz9+Nz3
Xi7TVJ86Ye93r7M+xXh+NFYxPdNd4AsVe1Oh1AxFml7sMURxd9oPGaBorVs7
HO8KtyYoFlHe8VxFWq6vX6Fo9Xd9m/pJzlV8+cmut1x6Wo3iNfTgqFCc7baZ
x6QUMQea2eoKt5Kaqhi/9zhSsQVtFD2g2Ig2xG9WLKLv8z7FFa4j/b0HeYjj
A0U//PDDjzVleP+/csP7f+//V2P/z74fadXRse9Hsu9Hrm7+n30/Er0/+n/2
/uj/eT3P3GV9t/CPxPv/2f6ffT8SvT/6f/b+6P/Z+6P/Z++P/p+9P/p/9v7o
/9n7o/9n74/+n70/+n/2/uj/sT4fvT/6f/b+6P+xDtDqG4zeH/0//n30/uj/
2fuj/2fvj/4f60Ktz4/eH/0/e3/0/+z90f+z90f/z94f/T97f/T/7P3R/7P3
R//P3h/9P3t/9P/sv9D/s/dH/8/eH/0/vodi9W1G74/+H+uH0fuj/8e6U/T+
6P/Z+6P/x7pT9P7o/7G+FL0t+n+so7ZyH9D7o//H+n/0/uj/2fuj/2dfhv6f
vT/6f/z86P3R/7N/R//P3h/9P/589P7o/9n7o//Hfxe9P/p/fI8PvT/6f3wP
C70/+n+cP6D3R/+P5w96f/T/7P3R/7P3R//P3h/9P76fYuViWP38rZwUa56A
3h/9P3t/9P/s/dH/4/ss6P3R/+N9D70/+n/2/uj/2fuj/8f3I6zcGfT+6P/x
vQP0/uj/2fuj/8f3CND7o//H+yF6f6b1Xg/7fiT7fqR1/G+m+Voo3h/9P97H
2Pcjvf/3/t/7/z9heP/vhx9+rOnD+/+VG97/e///G/z/o05nnFctZP9/IvVV
ygrZ/+9J86yskP1/fu108FUXZ4WF6v9X1P9b9f/O0o9qnRWy/3erhqK5i4Sr
2v/TsntBg7BQ/T96fyZ6fyau5wvV/zcf2CO/ss0K2f8n7n3851SzGiH7/39S
v59FQvb/9HVe1SBk/+/sRLuBDcJC/h+9PxO9PxO9PxO9PxO9PxO9PxO9PxO9
PxO9PxO9P9Pqz2P1BULvz7T6AFh9A9D7M62/j96fid6fid6fafWFsD4/en8m
en8men8men8men8men8men8men8men8men8m+i8men8men+m1YfK6tuA3p9p
9Q+x+uRYfSfQ+zPR+zOtvhNWfyerv4TVb8Tqo2L1fULvz7T6/6D3Z6L3Z6Iv
Y6L3Z1qfH70/E/07E70/0/r56P2Z6P2Z1r+L3p9p5fig92dafdjQ+zOt+QN6
f6Z1/lj9KtH7M9H7M9H7M63+VFZfLKufj9UnzZonoPdnovdnovdnWv2srP42
1n0PvTMTvT8TvT/T6o9k9Z2z+hpZfYfQ+zPR+zOtPkLo/ZnW/RC9/59d/2/d
xyz/fyE12AyF7P+zfzvlvpHZBiH7f2fpgy0yQvb/Vl6A67b03f5pIft/V+Ww
9/FpIft/eryNSQvZ/2/b0zWEqRGy/3/ljKWDz1i6WOj9v/f/3v/74YcffvwB
w/v/lRve/3v//zvU/6P3R/+P9f/o/Zlu1nfkXllV/2/V71n+/wrqExmp+n/0
/kxqH7xr5ner/0fvX6j+f1X5f6z7R/+P9f9PUyF7RtX/k+7ZNqPq/9H7o///
tfX/3v97/+/9v/f/3v97/+/9v/f/3v+vnP93qRzdrwx/c/2/dfyx7v+3+n+s
/0fvj/4f6/+tvAD0/uj/sf4fvT/zAHe53pHx9f/e/3v/74cffvixJg7D53el
CeENimbu8Jo+yPdfEiDbUA7SrYqm/1/BEfuw8QHSmg9X0gv2NYp9aCJRqWi9
N3oxvUA7VTHo8vAla3WqU3yHGnBEiiNpYlqh2IL8X3/FIto36KTYa1/3JvFI
xX4uZvWsSYoLab5apBjnzs1QbEobGTMVn3fLuQ5TFOM+Bu8pdqZ+CNMUT6ZG
nuWKLd9pkp8JafajevpSxa/GDK/cb0qtcIjbljm6fHm9USi8tcOTn3QJKgOy
33Nywnu3a9visZ7Vy71FRnhXO7eSXqRyxZhxHU+ZIub+Mq3jSfGx541W7OeW
eUNHKaapL8d8xQeL5g48fkyt8AAa5cG97nX/G0LhhUe3G7hjaWVwmIt9PTwn
5Ly5rS5xJ3YkpDYymyaDZd3fvGnmuEh40bduwZNcfpzqhYNcHFbTRHAqbcSU
KVrvTV/8Y3FV4/sWKsbrpkVCzmt7/sP1Ph20cyiM++BUmv3bG9EGXCTk3FiK
/X4wEnJ+K/c7wr5HVh9+1y3iiFNzwtMpkDUVrENiJyfMn5zT3myUWu6xcsKG
3D/+u+861cGgnZ0hygk5Z3DDr45btv3ASBjncSeDt8a7F1MiIcWjTU4uz6PO
CTd41XXGSAW0fTUrEnankQzct7x745yQts+apQJqS3NcTjjWXWYPpYJhQzYs
W6tfJBztYvL2SJq5Cc/d6U6QnLBvlXsxpDpwXScOvD8njHPfUmb/c6v/s9WP
mmK/iyIh50G7u9aTn0TCQceP+WpZRTJofmH7I+rOyAmf7e9GKrjiw04/PLRp
TrjzhDHbZbZKmf3kO77mToxIyPmnVj9nWi4+GQpvzf8rfXaoMj8ntaM4MCe8
as6+z/x4ZSogfZCNhJwba/WvtvIj6OM2fV9YSf1QFpn5DlbehJWLQYdr65zw
vbWzl976j5TZj9rqp23lQfzg2gttEgnb3XP40//ZMhHQ62ZdI+FsFwO+NBFM
vOugL4Z3iIScz9uW5i+hcG063pWB65p0zkah8Eo6LyqDvXd0wi0rnNDSbZxU
BM9c586EUEjxmNdXmTkL7d3ltiwUcs5m50a7hke1joT/ipp/0u5Cuw+8lU9B
P25MJDxoCC3gzf7bdDt6IxQOm+e+4KqgjPa9Q+H67nE3otI8n103nFPnhsL1
P3V3Orv/f5F7LF0QCuvdxx1eGdBl/20o5NxeZzuv6REK13aPza2qgu1cPPD0
UNjHlSk/VBV8eKozhqHwIBdz/3pVMJZ+oVBY/NgJa0+6q9Lsr27lUFh/buVB
WH3are8lf9PMf+BQ2P+0YpfkbD73rfvq4+RxI+GdG1+fP5Ps83BJ5103aXlz
JDyd/ln758TfU72Q9xGuouumThjPOyqC2+mGVK7Yxm3Pf1imSDqyV6niR3u5
J2CJYp27fdypaeWef7/pu/k7VLli/PyuE35BfeIqg6vLbz3x9O51QvbSVk4K
lZnsnBO6u9Ihx6YCurt+HQkPc3G3GTsHwbourOO8m2sr1aVc8XsXm7p9pSJd
ffuVKm5JQ3MbmvCUKO7qyv7X0YyPU51wFs3LKpbXK0VCzju2crSpXOmIYsXN
aGOlRPF2uqA1P29S0Sp/K1d8h7aHNTFXmEm3ndFlinG/rArFOA92vuJ0alw1
QfFiWmjMU+xI+yQzFWef6x6IAxV7Ub1eX8UVXafTtmg0I0C6s/u0YbMVr3Jl
KLOrFE+meVuF4nq00VaiGPe3rFCkx8rZ1Yrx+qNOsX4dt9FTrBjvh8xQtDxP
C1rnPazYhuZ/nRVjj3KT5uo2/qp1rX744Ycf1vD+Px7e/3v/vxr4f/b9SPT+
TPb9yNjHvC/ef03z/+z7kbzuR6L3Z7LvR6L3Z7LvR64q/2+tp9D7M636bfT+
TPb9SCvvwKrDR+/PZN+PRO/PZN+PRO/PZN+PRO/PZN+PRO/PZN+PRO/PtN6b
QO/PZN+PtPqfW/WfVj9q9v1I9OlM9v1I9P5Mq54cvT/TqudET8rEz4f+n70/
k30/0upfbb0/gt6fab3fYeVNWO/FoPdnWvWoVj9t630Q9P5M9v1I9P5M9v1I
9P5M9v1I9P5M6z0L9K1M9v1Iqw+89X4Ken+mVX+L3p/Jvh9pnc/s+5FW/3/2
/Uj0m0z2/Uj0/kz2/Uj0/kyrvtrKobBo5UFYddpWX3T2/Uj0/kzrvRL09Uw8
/9D/s/dn4v+eaeUIsIdGrin+n30/0upLb70nhd6fyb4faeUg4PXAtI7z6ub/
2fcj2fcjvf/3/t/7/z9heP/vhx9+/K8N7//j4f2/9/+/wf9/7ZZJ62WF7P9j
D5oVsv+n18g7ZISF6v/R+xfy/1b9v1ttHfpEKGT/X13ev1WPcRnhH+X/iy5x
b+omhYXq/y3/j96/kP9H71+o/v8b6p+UEbL/P2XwM/kzslrI/v/aHu5P0sJC
9f/o/Qv5f/T+hfy/1e/I8v/o/Qv5f/T+hfw/ev9C/h+9fyH/j96/kP9H71/I
/6P3L+T/LU9l+X+rH4Xl/y2vbvl/9P6F/D96/0L+Hz1pIf+P3r+Q/7f6V1j+
H71/If9v9Zuy/D96/0L+3+qnYfl/9P6F/D96/0L+H71/If+P3r+Q/7e8q+X/
zT4whv9H71/I/6P3L+T/rfPZ8v9W/x/L/1ue0/L/6P0L+X/0/oX8/6/1/kyr
H5Tl/63vxfL/1nPfuq9a3t46D9H7F/L/K1r//5jbPto6K2T/T22bvssI2f/f
ROuJjJD9P7UdeTYtZP8/iZ6TaSH7/y0Hr9N6j88yQvb/87f+5pZu+2eFK1v/
b/l/9P6F/L/1HLSuC+s4X3XxTvkZdlbI/t91AX2+cShk/0/bkttnhOz/KU55
k4yQ/X91m1c361ydFrL/p9fTuqWFher/Lf9/1WdOyIdC9v9nUh+1tJD9v7sK
3lmQFrL/n+mmKRstErL/Dwbd8Nx++ywSsv9fLz/bT1+wSMj+35qvUpeng2uF
3v97/+/9vx9++OHHGjS8/4+H9//e//8O9f/o/dH/Y/3/P3ZyI6vq/1fU/2Pd
P/p/rP9H7/9H+f/uNB9vUPX/dLibZ391/f+q8v9W/T96f6bVNxW9P/MY6rOe
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
N/T+6P/xeNLrmtNC8f5MfB57///r/L+VO8C+H8m+H/lX9f/s+5He/3v/7/3/
nzC8//fDDz/+14b3//Hw/t/7/9/g/7+7yxmaGiH7f6sfKZU5jc4I2f+j92ei
92da71lb9f/5RXx+opgVsv//50i3AKkV/lH+f6cfj8x+cXW1kP3/nrSeywoL
1f+j92ei92da/UZWtP4/7ouaEbL/v5S+n7SwUP2/5RnQ+zOt9+6t+b/Vhwe9
PxO9PxM9IxO9P9Pq04Len2n1pUHvz7T6q6D3Z1r9cND7M60+Rej9mej9mej9
mej9mej9mehzmVZ/Huvzo/dnWu+to69kovdnor9movdnWn1CrD48Vr8mi+j9
mej9mej9mdbnQe/PtPrYWM9Z67ih92da16N1nqD3Z6L3Z1r9fND7M60+HlYf
FfT+TPTXTPT+TPT+TKufGHp/ptVvx/Iz1vmA3p9pXUdWPxn01Ez0/kzruKH3
Z6L3Z1r3AfT+TPT+TPT+TPT+TPT+TKvfkXXc0PszreO5ovX/3J8Q+xS6b/OR
4moh+3/XJbDX5tVC9v/09T+SErL/pzj3Likh+/+raX5aLWS//TptbKeE7P8/
XM81pEoK2f+7rkAPNCSE7P9/2NbdeBuE7P+b042iQcj+/z7aaE8LV3X9/79p
Ay8rZP8fHuU2eDJC9v+0zXVDWsjH52EqREgL2f/Tbb1dUriy/n80bQTWC9n/
WzkCVv0/bVd+HArZ/3d++6Lrasemhez/433tKmEh//9Aw2YbLMg/H5js/91s
oeniaqH3/97/e//v/b8ffvjxFx7e/8fD+3/v/3+H+n+rHyl6/1Xt/636f/T+
a1r9v6r7X8X+H+v+mVj3X6j+H70/E+v+vf/3/t/7f+//vf/3/t/7/z/P/2Pd
f6H6fyufKO7/nVb1/y5VtfSktKr/P5RyvdKq/v9nGg2q/h+9NnMZ3UfTqv4/
fu41qPr/YTRBaVD1/+j90f9j/T96f6aVOxDnxYaq/j/OiQpV/T96f/T/WP9v
HZ/fu/4fvT/6f6z/3+Ng13E/q+r/0fuj/8f6/6M/eDr/X72v//f+3/v/3zK8
//fDDz/W9LGi9yvr71v3Q4pVO17z9/6cv/eghUn7QJHybW7XNLx9PU1sHlRc
0Y/TmOaJUwLk/AMPza/oKhVPd/G621UpHk6+d67iYGcLXy5StPqWtKGgqVDx
/crpowc9+b7iIvLipYpWHhDFRw0aqBjPm4oU4/yyuYojKMh2tuKl1IdkumKc
v/eO4udUIDNZsb7WjYmKb2/x0hXndZ2vWHdGz743b1Wu+PDczc/uu6hYcR8X
e3xmnTDuy1ARHEANFyIh52xSHPXWDcKjXJualxPBMdRvpELxnQdO3/79t0sV
v3NtOaaXKO5M+V3TNSnHeLTiuGXH5H8VzaZuunzYBEWKl35rjuL9tK4sUXze
6bATyhTj/a464aHHbpdfeVeafb+vJ5/3vvCgSyecvOnai4KTilzHgpzwy6vb
PLD7wdVB50a75peckZBzKjejoNt6IV+P08gT1Ak5r3kU5WMvFl5J/SwqgsNP
dDtnobDi1hPzK7xKMw/C6rdMbTkqIuFTceCb2e/6hcYuQTASPuvKH99NLl/3
Nwj55x9LJ2q9kPMlB1NOdb3w+xlPXdbq+8pgWwomqxfWjGo3a90tqoI3/+Fe
+KgTXtrbBZZXLr8+6oXsf5Y0HPDxxr3qhS8cXHLdOi9UBVtS/4p6Ia+X+zu9
dW69MPuF+yKrzN/Lyo9Yh/6hnJDzjq28gy8ed0GfofD4ZdsP7LG4KqDl3N9y
Qs4v/sC1O+qTEx5EXqU6IF3yYE4Y76umgiP77fZh3YY5YYr8Qsr8/IfRejQS
8j5ghxvcwi0S7ufaZXyU/37dZXNbJAzdaZpNBG1pwRgJ6dcenjR/L6tfvXXe
0l+7MRLufm/ZbveWJYKc2y56PxLud4ZL9k4GpH1nRULOfX604qx1P2gUCW+l
/ceqgOKoN46EVPa6WSK4xl3er0XCva8pz195ycDtArcdHQkpju/y5PJ8+0hI
7cIuTgZ02LORkHOKL6pyYiQScl4q3Y7PiYR83yZd/m0o5LxL9+m6zYiEV1He
ZDIY59rA/BgJS6oa3/f3L5MBPX5qQmHXlu5IVQUUbzklFNJ2bpcq8/426Mmu
t1x6WiR8xbVX6p0wcy4eOnti0SW9I2Gcg54MfnAplptEQs4vtvJNXnVxnR+F
wjffpkBK8zy0zoderp3PKZGwq4uv7JUINh5z+SZjLg+Fd5z51GEnvpufT9GF
EgqXkrCsMu+TVp5CT3pxLRR2cb/uIVXmz7f61d/88QsPPhuGwqNIkFUFSzrv
uknLmyMh59Xmb7r5O28k3DFuaGf+fLoNdgmF8f24MqDy4MmhkGJn76wyj+cu
6zvxHgk5X95dhafODYWcj0yauFEoHOK2N5dWBO0pkDUUcj7vG0+4zkk5Iedr
96H39CIh52hfQJ65Xngl1ZtXBiWUe1wn7Ep9FSuCv+eP3nmvlCquS/f9BYpx
rvscxXGUJ69Jh2vwTMX8xZef8UxVfJsKZjTptn7idMX36PkwR9Ga/1P5yQdz
FK3c1c4UfDtXka7KxgsVL3a4T9PdPb4tKlG06ihytJ4oUbw7f5Ud2mGhYk0z
t5FUrPgxPZ7nKd5HN/Ipih/T83yc4oZUZzFWcaFrt3Z8kaLlb8t3cw+4GuFD
z4ZXbbO01MzjjvePShTfpnzhuYpdLnc7FrMUrc95DtXRTFPcma77mYrx9zlJ
Md5HmqAYX8/zFHc+zS1U5yh2zc/a7jl8tGIL+v9/VPPO1vmZwZOKrWli0lex
yG03rt9Z8Xz6Pd5U7Ldox/ZDPy5StPZNeN6EPJnWFZWKfWl6V634Oc2bZiku
3tndaDOKVj3J+bQgeFux87HD3zr1oWmKlpeop9+jb4C06vp+m5T5HYb1OdeU
z++HH374YQ3v/1dueP/v/f9q4P/Z9yPR+zPZGyH/1/w/+36kVfeL3p/Jvh+J
XoxpXY9xv4BQvD+TfT8SvT/Teh/E6rfMvh9p9btmj4W0fj77fuSpn1/+4tD7
Q/H+TPb9yPtpPReK92da9Z/5H96yd2ko3p9p9cs9hi6oULw/06pTtfIj2Pcj
rbwD9v1I9ONM9v1I9P5M9v1I6/Nb7wGh92da61b0rUz8fdD/Y726dfzR+zPZ
9yPR8zLZ9yPR+zPZ9yPR+zPZ9yPR+zPZ9yPR+zPZ9yPR+zPZ9yPR+zPZ9yOt
+xv7fqSVc8G+H4nen2m934Ten4nnH/p/PB/YTyPR+zPZxyPR+zOt9ynQ+zOt
n2/1q2ffj0Tvz2Tfj7R+Pvt+JHp/pnU80fsz2fcj0fsz2fcj0fsz2fcj2fcj
2fcjvf/3/v+P9P/s+5He/3v/7/3/7zi8//fDDz/+qsP7/5Ub3v97//8b/D+V
PU9LCtn/x2I5K2T/T8vFu9LCQvX/6P0L1f937Lb/3RdVZYXs//ekBWZG+Gf7
/yfauk+eELL/L37dvfC7SMj+fwdal2eEher/Lf+P3r+Q/0cvtqrr/9H7F/L/
lke1/L/V78Ly//9r9f9W/yjL/1v9jiz/b3lyy/+j9y/k/63Pb/l/9P6F/L/l
Xa3fy+pXY5236P0L+X/0vIX8P3r/Qv4fvX8h/4/ev5D/t/ZtLf+P3r+Q/0fv
X8j/W/c3y/9bfa4s/4/ev5D/R+9fyP9b54Plq9H7F/L/1n3S8v/o/Qv5f6tf
jeX/0fsX8v/Wz7f8P3r/Qv4fvX8h/4/ev5D/R+9fyP+vaP3/4j1co5iMkP0/
tWOZ1iBk/+/Shw68PyH8q/t/1zVlu4kJIft/arO1QVrI/j++7tNC9v+HPpHJ
/5cWsv+3cpT+SYFaaSH7f1o27JAWsv+ndi1bVQv/bP//3ItHdDp2eIOwUP1/
Xfr+/BUVCtn/UxunV9NC9v97POh2bhNC7/+9//f+/xeG9/9++OHHX3V4/79y
w/t/7/9/h/p/9P7o/39t/b/l/y2PhN4f/f+aWv+P3n9l6/9Xlf+3rkes+y9U
/7+6+X/r51v1/1j3X6j+H+v+C9X/Y91/ofp/rPsvVP/v/b/3/97/e//v/f9f
w/+vaP0/en/0/1j/T2UJazX8z9T/u1XeNi0aVP0/en/0/1j/j94f/T/W/6P3
R/+/utf/o/dn0sfvmlH1/+j90f/7+n/v/73//w3D+38//PDDj18elufPOJ6r
aQ3L869u91sj/7eIfu/bNMnrd1LsSgGXN2jS/+5qRevj9G66bn5JPTVAjqX1
REoxzodKKt5/XOLgqy4uU6TX3zeZqRjPc2crdnLxdbMaFL+letyPFM9/Zcqw
S+sXK8b5k0MVi/7jKof/qxjngo1WjPuzz1CcT3l0MxWbbeR2FKYptqG8xPGK
8f7DFMU4P3ac4q5nnbLl4HWKFPud5DrPlyi+QwslzSNpg6BM0Xov4CJaINUL
r/2ehELwiouvG1Ol2Oz29WZPjMoU47OuRHHdLm6lMUWx9TOu4e4rivHxG6b4
8ZkukW6kYsmPLgBrgmLsh2YpDnjDCYpSxfxBcQFqis/f+92m7669WHga9akp
Dw5tfuD9y96sF/I6i+Lm0pGQ8yJ73bMgf0bmhDyvjnO0IuFhtL5NBi1pnyQS
vvLc9BYjOiWD/MWR/wmR8DDK/0sGd0x6qdm+tZHwdBfL/HYycGnIP9+YEy6h
uLBU0Ib2cyIh58m+SXXtkXDy/m5hbfc5J33WoUHIf07pt3PqhHEuW2XwIAUR
1go593BjukBqhBOuP+PaUa3Llvd5qBWWUb1bWXAwHfda4fuu3cde9vfVLXqr
7rZOdcIDqR9WRdDjKddJW/Of9P3XCjnP+jS37D+iTviTi2kdVxEcMHOX/BXb
IOT82fyifMtLFkVCdxT6jEgGzZ7/cL1PB0XCPju4jdJkQOWmV0XCG9wyvSgR
bFrjhFtOeKeLHz8gtfxz5ITuX+nx71Tg0rGf+W9OOL0iXLLBdtVB/uTIr/Ry
wmf++fiNuR9SwWhq0J4Tzna3vTGpgLZnlkRCzg2fTyMSLr3P7V8nA4oxnBQJ
Oc/0h0tcQF4kPM9t/y5IBvl/fNgXZTlh7JeqzeMT59hHwgb3cTrYfeObdL/y
5X+dHwk5X9jqf37xzff3GjgqFHKuqKsG/XxBKDzL6d4+VQHF9I6LhBdRfmQy
IO04JhIeNIQe2MHMccddv8eDkfDTdi5xMhFcRx4uEnLOL2mUWyPh5BlObCWC
CS1dkG4krGy1Y/4OlAzyD5P8DTwSUozkkkRAsZTPRULOTabY5n6RkPOOreNP
j/+dckKKjzw6FWxFOYqRkL7+TZPBuzRCYfLik549699VQf7/WNJwQCTs89jo
LV66ImH24bdyBG5yX9O0SHgUbdQlzevlig9dUEZOyPng1nGm/+fbofCYJi4p
t2r58yEUfnBi55sOmFlp/n0rx2F/EpE54XQXE3p4yuz/73Zvd90kFHY/0t1Z
K4O13PbSnaGQffVBtHEWCjlv1z1tap4Mhbe6+JAdqoIh9P5VKHyNAmYrzeti
E9oAioR30LBzQ6wcB+vndyKfFAqPv95VKufPH3ovKxT2cdu/QyqX338jIecm
x8/LBiGfV39vurhjyY91wmKq668MMlu5K6JU8Qo3zR1TojjYbTvNKFa8nRrb
aR7a4aell+w2S/GkPi5odaLiqefPfyX3xHuKx7nb97Apih/f4U74aYpWjqdV
p9GNntPTFIe77cnu7yrG+4RjFE+lG/N0xdvdNLR9qeLTX9I3okjTxGfmK3Zy
cUWtihU/dtOezUoVD3bt055foHg0BR7PU+xNgRiTFXvQg2uUYv2TW+cvwdcU
m9KJNEqRvs7nRyhO397NoGYpPu+mgx1KFQfSfb9C0VoXHHC3uyOVKDanhoCz
FK3zszvVH01WfJ9yid5Q3D1/d7zouomK3TZ1T5pZiiXutdyDNIfSc+ttxTi/
9wnFy6kR2NOKHenF0AGKVi5wzDcVP97LbRAUKTan+dY7im2ocKhM8fn93AOh
RPFAmojNVLTqTE5yj6VdyhQvfP2qBzf4Kqto7VPTtGDoHMXhtE87TjGuy7tE
sQ35jHsUf289s8rG6lZ36ocffvixug3v/73/9/5/tfH/wey2qSs+zKr3Atj3
I73/j8n+GGnVWaH3R/+PdTXo/dH/s/dH/8/eH/0/e3/0/+z90f+z90f/z94f
/T/WOVt//hYJqlC8P/ODXffbcHjzrHh/Jvt+JJVRTsmI92dOI5+dFe/PpNPx
2Kz6vtj3I5+hOqms8v/s+5HOMt1WlxXvz3TWs+KsSLw/+n/2/uj/2aui/2fv
j/6fPSb6f/b+6P/Z+6P/Z++P/p+9P/p/9v7o/9n7o/9n74/+n70/+n/2/uj/
8fig90f/j3Xj6P3R/2P9M/pH9P/s/dH/s/dH/8/eH/0/e3/0/+z90f+zj0b/
z94f/T97f/T/7P3R/7P3R/+Pxx+9P/p/9v7o/9n7o/9n74/+H+vw0fuj/2fv
j/4frxf0/uj/8Tijx0f/z94f/T/+ffT+6P/Z+6P/x/p/9P7o/7FeHb0/+n/2
/uj/2fuj/8frAr0/+n98b8jKcbB+Pnp/9P/s/dH/s/dnWu93sO9Hev/v/b/3
/97/e//v/f//Nbz/98MPP/z45eH9v/f/3v//Zv8f90OqFrL/f63bjBvv/jQt
ZP//SRfXiiYjXNn6/51O2uDysxaHQvb/lzh9syQjXF39f+wZqoTs/z87fPz1
Z1xbI2T/H/fpyQpXtv4fvT/Teq8WvT8TvT8TvT8TvT8TvT8TvT8TvT/T6nOy
ptf/s//HfYBVVf+P3p+JXpWJ3p+JHpOJ3p+J3p+J3p+J3p+J3p+J3p+J3p+J
3p+J3p9pHR/0/kyrbwx6f6bV/wT9IxO9PxO9PxO9PxO9PxO9PxN9NBO9PxO9
PxO9PxO9P9M6/uj9mej9mej9mej9mZantfoIofdnWtcLen+mdZzR4zPR+zOt
v2/1cULvz7T6/6D3Z1r9atD7M9H7M9H7M63rAr0/0+obZvVxsn4+en8men8m
ev+Vrf93XTq3vTEjZP/fiER0Wsj+fyfX9ujqaiH7/0fdaX1etXBV+3/SbeeX
C9n/n+DaM7WrELL/p7YvRaVC9v/1FMhdIfyj/P906tOzSMj+vz95x7SQ/f9t
dPwahOz/W9G8Iy1k/z8zPzuevVFGyP7/o371+RlPSri6+v82dP+oF7L/f/Gz
V2eeckhGyP5/AP3FrJD9v7UuoDY62y8Sev/v/b/3/78wvP/3ww8//Pjl4f2/
9//e//9u9f/o/dH/Y52PlQtA2wG7RKr+H70/+n+s/6dYgofSq43/t+r/XdfN
1rdlVP0/ev9C9f9Y9/+/6v/NfQGo+2di3X+h+n+s+2di3T/T+r6s+n+r/49V
/491/0ys+/f+3/t/7/+9//f+f/Xw/9Z5NbZswi1fBKGq/0fvj/4f6//Hu9d6
OqdV/f+NA8rXP/ymtKr/p9ehTq1X/v9zqsSoUX51FF2XNcr/H3N5WLLTolpV
/x/HvSxW9f/jKb+oZrWv/0fvj/4f6//R+6P/X1Pr/9H7o//H+n/0/uj/ff2/
9//e//+G4f2/H374saaPVXUfszy85f/Ji5+l+Wd9/lU1DP/f6DX3QOyoaHn+
NuSluil2JW9xraL1ceL5Y1GAtHLWYp+sOdPFcM4oU4zn+/MUSUO8P1fRWq9d
v44LRMsoxv9OWnH9QS5pbJqi+b1cftbidaY9FyCtvKrYe81R7Ew5kDMVrVyn
O6kPyVRFa967O+VQDVOM15tFis5+nzluoeJxlHdWokgxa5fXCM+lBgClAU0H
z6oX9j+NRFhwR78JNT+1qBdyruJ1tWO/e+mNUkUr/9etSp78ZL6ilY+cdO0l
3hmsGHvToYrxOvJtxaaUsz1GsQ31QZqqiPl8TOv3LXfa4KJyxRLyB3VCzgf8
lvqNNAhfdDrqgmTw1ciNl3V/MyeM6/Wqg9J3FjTte1JOuM6ZtFIPBlPOYSTk
6/QECrKMhJwnO9lta22TEzbQiZ4K6P/ZMxJSXHmTZPAI+aSc8JZLTztyr2ap
gE7r1jlhU9fm4qJUED669JBjt8sJW1FwbyqIlmyw3Z5HNAjj/LjE8pzkeuH2
tA6qDE5021pFi4Xfv+Q2ZirMerYjqDFEKEy6eLenK4NtUq7TSZ1w1imHPHrM
5ZXL+yMtFu7m2hBdWLF8vV6maPn/efe4X6Rccdk3tLGieBX1G6kTxn1SKoIH
+jjxHgqvcts1s6uCyyZ/lH3tqJywBe1XpQLSG91zwr17jBt5x8bVwW1Pu43d
nPBfm6691yPbpoItnT6+Nif8jztNZqcCiokdmxOu42Iwr6sONnj4kOYH3p8T
xnmUKbO/PcUcjoyEnGPr7NBXyyLhkt0v/u/Ub5JB7h//3XedjSMh5+dafeyt
PItGLj6wXSS86uV/5R9tiaC4/RXTe04MhZxz/a8ZqUeKR4TCJbdQsHnQh7xR
JOTcTyp/vTsSci6tlctAZb1dI+HsdbeIHl1q9/MnbXRZJOR8VYonbxMJSTvd
kwjo9ZanQyHfn633s6z+9huPnLT/ZqfnhJ1dPHifVHCr021XRMITXLzke4kg
fxDPbjs6EnJ+cdptz9+TE+5Cz6lUQHrojkjI+dHUDu3jUMj52uWuXPmwSLgB
XQiJoN9urnNSJHyS8lMT5v1qo7/P3/qbWyJh539cl/+qE0HnRruGR7WOhJxH
TNvnRZHwS/KtyYC2tRtC4RfbuY1tO/eBfs1sJOS8Zuu4WfdtKxfAXcQLvw2F
nON8L905I+GF7Y+oO6NnIqDt52siIeezW8eZppVNIuHW247+YHzLROCewpdN
DoWc28v97rDvXVxHEAlb0AMrGVBM5t9yQs71pjL7b0JhL9qgqgqafOMuzFDY
vdgJvsrgM3f7Oj4UUru5bpXBFbS/USeky+vaSvO9szeODQbd8Fyp4uE0oVqo
OJj6Tc1X7ED1EbMU29Ljebpi92HzPtlif833O7idhymKF9L3MV1x+N/GPf7U
/DmKmI/LtHJsG1W7/8tCxZvpxbVSxabunzlsruLmFOA7XbE1eb6JivH/boJi
XAc0RXFdmu/MUexHN7yFivPpgblA8Zy2o7sMP7ZYsXHkJixzFC2/HfvgEYqt
XJuuI6Yqdjv/sv7rvzpX8UZ6bsxSvJimBaMUW7vt7bFTFbe8zz0pShTdbGH8
slLFjSgouUSRlqlbaRZR3cpsxX5uuVI7S7GI6kQ051MjsHcVH6ONq3mK8fU6
Q7FtftW2/eavKVo+oQU9R3srdqTzeqAilceNekMxXjcPULQ8/2zq7zddMX5u
zFQc46b3e1cqWnnTPF9GUhu2LlWK67s44RGViv+lB2adYtx3tELROm+t/ZS4
T2OXX83Yi1yu+WeNFfVLq5uP8sMPP/ywhvf/q3Z4/+/9/2rs/9n3I9knIdn3
I73//2X/z74f+SKJ6ki8P5N9PxK9P9O6TtH7M9n3I9GjMdn3I9H7M9n3I59w
+qtLJN6faa1fTrnENYDOivdnWv1s0fsz2fcj2fcjf2//z74fid6fyb4fid6f
yb4fid6fyb4fid6fadW3o/dnsu9HovdnWnXsVp4F+34ken8m+34ken8m+36k
lcvAvh9p9fNn349E78+07s/W+1lWfTt6fyb7fiT6ayb7fiR6fyb7fiT6aCb7
fqR1vxLfjwTvz2Tfj0Tvz7Te+0Dvz8Tjhf4f79vWewHo/Zns+5Ho/Zl4fNH/
s/dnsu9HWnk37PuR6P2Z7PuR6P2Z7PuR9JbiwaF4f6b13pn3/97/e//v/b/3
/97//6rh/b8ffvjxVx3e/6/a4f2/9/+/g/8vya/m/v5lmZD9/zLq35AWsv93
KaTrfpAWrur6/7h/T0bIPvykBlcxu0i4pvl/ip1cNyWUfQDj9x1P/WmywpWt
/7f8P3r/Qv4fvX8h/48erZD/R+9fyP+vqvp/y/+j91/Z+n/S8D9khOz/T37p
6/x/GSH7/4OogUZWyP7f2dTrOmaFher/0fsX8v/o/Qv5f/T+hfw/ev9C/h+9
fyH/j96/kP+3+llZ/h+9fyH/j96/kP+3+jJZ/t/q52P5f/T+hfy/lc9u+X/0
/oX8v+WxLf+P3r+Q/7e8tOX/rfuV5f/R+xfy/+j9C/l/9P6F/L9137b8P3r/
Qv4fvX8h/4/ev5D/t/rdWf4fvX8h/4/ev5D/X9H6/yH7jA1mt80I2f/T422j
tJD9P8XOD0sK/yj/32W7ti0e61khZP9P7Z+W1AvZ/8d9ztJC9v/rU/B5Wsj+
P75u0kL2/9TmY/eMkP3/xTThSQjZ/+cnSfkbXYVwVfv/uP4hIWT//xwVUqSE
7P/dbly381NC9v93UwB2tfCP8v/xbSIhXFn/fy01fioXsv+P13NpIfv/weu4
J2tGyP7/7NvdRD4tZP9Pl0efaqH3/97/e//fyPt/P/zw4687vP9ftcP7f+//
V4P6f/T+zLgveEbV/2NfCaZbHXa/MlT1/+jBmac6zRqm19j6f2pPMa1Bvwdg
/L7o/QvW/0Pd/1/d/2Pdf6H6f6z7X1n/b9X/u7OxxYisqv9H74/+H+v/0fuv
bP2/9//e/3v/7/2/9/8r5/+x7r9Q/T96f/T/WP/v7q7XP9Pwu9X/b0VBA7XK
/9M0vXGdqv9H74/+H+v/0fuj/8f6f/T+zDifocHX/69m9f/o/dH/Y/0/en9f
/+/9v/f/vzC8//fDDz/8WLlB877TAsUNgy3u6nKB5oqO1e1+u6I5xSu4L2D9
s1a+cKP1nBgfo3jpWp3eGt+rQpPWQUnF2+nF7xLFYx92AU/zFAcsdI0YFihe
Qwu3CsWXht7fsndpRvGZ6zq+9rdxHyn+3OKfVz8ybJFi7PUfV+z6wa77bTj8
ecV4fjdRkaa5509VjHODpyleeHS7gTuWzlCM80WnK8brs0mKve5Z8J/BewxR
fP+tuts6VU5SbJO/arZrW6J480w34SxTpHYpD9UKW77T5JjDG5UHG9BxCoW3
DHEiqSqgbYRGDcI4dywRUPzernXC7Z//cL1PB1UE45cdkz8DyhVp+thZs7db
zp5eqli/4dVfjxk+Q3GE04snTVCM123jFTve78zC24pJ12b5yJGK9bVuTFT8
0m2PnT9HcernDz8UvVWsGOfNlSpax2cn+h7qhd/UuKC4yuA8EviRcAuaKCcC
att+dU542a0kvIIE+e+csLE7HVpUB6Q59ntfGF61jdsKClJfu38oJ9yafEQq
cF3YDzw0J3zrJncCpZZ79JzwU8qTSwUDyMdHQs4btfpsW/3bXbX+kOciIeeT
7rK+E1aRkPcradnQPBK+dqkLprX7rsf9QBqEtO1WmwguLHXJ31WKNdTvqFLx
iFNdo6JSxXNofV2i+DW9oFOqeNcD7+4+5/la4V60wVAevOnanKwbCTl/+RK6
T0dCeixsn5Q+S9hvyeqLbvW3t/6+9T3GfisSUvup4clg0M63PnH7XjnhK+Td
UoHbDOnfKhL+5E7/sxNmH/seP6eaTS0OhXe6GPD+VcGrTo99FArffJuCz5ff
pyLhrbQ/WxWQ1twtEvZ0uuykRDDRfdwOkbAmecR6B81LmNcdaYuLIiHnmVq5
AEvoPZ9IyPnCFAv9SCTk5+zXtOEUCf911xab3nJoMqBYwb9Hwjj3MBFQ7O4H
odDZvvPnVwWkjc6KhJxDHe87RULO56Vt6bJIeAMFbCaDBO27RsItzu67aMf2
yYAeJw9GQs4vtvr8f0InQih0v+13UaXZB97KEXj02uNbrlUXCTu7y3dsMiBd
+O9IyNf1D/m7V+UmkZBzZq3z5Fun83qFwtPdtsZ2VQHt4vWPhMkH93b/Lc8b
D4Wt19n4uJFnVgZ0u9wjKzySHrjlAW2D7R4J8xfdqzNPSZjnM+nmI0Nht4ge
/MFc2m8Mhfy8sPIOrO/Xyim4k+ZHkfAsKixILs+HjIRNjnQJDcngBZe6Xh8J
OS/SygWwrpdPD3IBrJHwKAooSZg/J95frRfy/R9zeZnO/jXZfoai1d+mH+Xn
at5Hjc+mKFr5p/3WchPvqYpLXPnO32YrPr+JM3cLFTsetXHi5Y4LFOMc2mLF
PenBVKK4bJh7gGrSaw6XatLt6+MFitY8x+pLU0/9o6YptqEv/G3FQ6mOf7Li
5zTxnqXYm/LDNa39hXgf5m3FrjSBGq0Y55FMV6Ryli7Fiq2GXpBfCWhaua5l
u92b/2+qouXP4/ccihWnHukunHLFeN2wUPEQd3tvUqrYmoKVZyrGOeSajfd3
M575is+47ZMd5iget2z7gT0Wz1TsRc+zlxU/pwv2OcU2b8++fdJLzyp2pflN
N8UiqpN6UbEpefQhitZ6YdCO7kY0S9GqBzu2zJ2RxYpWvRxVKXw4TpG2f8qq
FeN9qgWKn27hvohqxatd+d1tdYrx9VGq2OMpd+ZNV4zrEO9QtNbjjWgDsr1i
V/JA1yn+kQrn/xq/6HNWI+/khx9++LG6De//vf/3/n+18f/s+5Hs+5Hs+5Hs
+5He/6+c/2d/g0T/iP6fvT/6f/b+6P/Z+6P/Z++P/p+9P/p/9v7o/9n7o//H
Olv0/uj/2fuj/8f3ldD7M626a/aCyD/L/7d/xAmHrHh/9P/s/dH/s/dH/4/v
Wag8VPD/WN9u/X3re0Tvj/6fvT/6f/b+6P+xjh29P/p/9qTo/9nnov9n74/+
n70/+n+87tD7o//H9wLQ+6P/x+csen/0/+z90f+z90f/z94f/T97f/T/7IXR
/7P3R//P3h/9P9b5o/dH/4914FaOAHp/9P94XaP3R/+P5wl6f/T/7P3R/7P3
R//P3h/9P3t/9P94PqP3R/+Pzwsr78D6fq18B/T+6P/Z+6P/Z++P/h/fC7Cu
F/T+6P/x51j3f+//vf/3/t/7f+//vf//TcP7fz/88MOPlRve/3v/7/3/7+b/
P2tSkZ8qpoXs/+m1/74ZYaH6f8v/r2j9fyvqR5IVst/ek3IMa4Xs/zNbDRuy
Ydki4Zrm/0eu516krRay/29CjZYWCXldbB0fq/4f/SMTvT8TvT8TvT8TvT8T
vT8TvT8TvT/T6rNh9m8B7880+5WB9ynk/636/x+pfjQUsv+ndmbbh0L2/xST
cUpGyP7fddnqunZGyP7/ZOrHkxEWqv9H789E78+0+ixZfVGs/jbW37e+R/T+
TPT+TPT+TKuPDXp/JnpSJvpcJnp/Jnp/pnXdofdnWn2B0Pszrecsen8men8m
en8men8men8memEmen8men+m1ecHvT/T6gNj9RFC78+09vXQ+zOt8wS9PxO9
PxO9PxO9PxO9P9M6n9H7M639YqvfkfX9Wn2K0Psz0fsz0fszrb5A1vWC3p9p
/Ryr/j/uj5gWsv+P++pUCtn/W/3tn3NtUD5PCFfW/zenaVO5kP3/KdRIpErI
/t91HXzh4LSQ/f/rzV2npwYh+39qj3VtWsj+P0v9qNJC9v9xH7W0kP3/EdTQ
MC1k//8JXd8NQvb/9JjfICPkeU58vKuFfxX/33xgj8XPvFMhZP+fv4gPefSY
aiH7/6tdHP3Z1UL2/x9OmvHzjZstEq6s//+Q+s1UC9n/j3SPh79lhez/3Spp
3icpoff/3v97//8Lw/t/P/zww4+VG97/e//v/f8fXv+P3p/ZkPvHf/ddJ6vq
/7HvD3M/CliLVP1/3L48q+r/0WszaZl6VNbX/69g/b/3/6vW/1t1wuj90f9j
/T96f/T/WP+P3p+Jdf/e/3v/7/2/9//e//86/2/d/9H7M+OcozpV/2/1t/9m
7TvOfOqwBlX/fyk9b2uV/2+z4MuRGy+rUf7/huec4F2s6v/pr3evV/X/6P3R
/2P9P3p/9P9Y/4/eH/0/1v+j90f/7+v/V6/6f/T+vv7f+3/v/1dieP/vhx9+
+LFyw8r/tbim31et38vaB7FoPB+tfJw4P6eH5rXJbVp8+5piXG9dqhjn3KYU
T8uvFofeX67o0jPbH1GsmKWczamKJ5NoLle8tLcLAg4VyxeNajdr3Zxib5oP
liu2HegmYP0Uv4sqp48eNFCxI637X1GMc2xHKMbzvimK589ygY9zFVu4dhrd
pireSZ5wpGL8uTTbUCDdbMWJe7uVfInitlR3XqpIy+mxdcK13bbPgZXL83Ij
4dKP7njh4ncSZl/xvaiOv17IeYJWfmuzti0e67lnqeIk92OHlyn2po0YzSbf
uODOeYoHOj16xxTFOKdrhOLutA7+f5D63ryj2JqEyZuK1v5CnJs3RbHmhn12
Pm3YbMWF/xm8xzbXFivGfVFqhZwvfGvliwvbXxEJOa/TnUVn3hgJd3fLx7L8
99j2hFvmXZgTdnnYdZJJBQ0Dvs9/05FwZ2r8kwzoNvFsKIzXfVUBxXptnRO+
t7YLjk0FPfd0gXehMF4PVpn9rs85142ccBPa6EoFl+zmOq+8L4x9zaJgsw0W
XDb5o0hIccylyYDaosyvF3Zx22XbJIIt575/0wWv1wvZQ1q5wHHOdbkixUke
r7nTf/ddZ+PjShXvdrq2w0LF5iRQNCn+ueki4WYUaF0S7H+AG6GQPyct2yZE
wq4nO0GcDG5wsdbbRsLDOvy09JLdEsEdk15qtm9tJOT8XJfiPePnSNj8nlcH
XPN90uxzTjEKnXPCnhSInQoep/VfJLxzYydqkwHF+m6QE44mT5QK3G5Ii3/m
hO5pt0PXlNmXPt4fjoR7X1N+64mnJ80citgr54TVTufPqg5u3uqhorkDc8J4
P7La/H2tHIorPuz0w0Ob5oScq3vFeV3zl3Ik3Ll3af5JlTDvq1YfdWeTvh4T
CQ8ir5c0v/c4Rz0SDjp+zFfLKpLB/de/1/npppHwsgluB8rue0/bhI/lhGdT
rmJ1ULlJzfEnR5Fwk2Xd37xpZjJ49qx/L2k4IBL2Ic+WMP/dnn3dkc8K7yEP
U7H8/h0KOe+V4k4rIuFTs/o6YxpQu6mvI+FhT2QOfSKTNP8+admRkZDzqa3P
eTe9hxMK2+XP9psO4PrsSBh72mRwoYtRXC8UunTGI9arDKhN0XtZoUtb739r
hXnfI519Uk7IOe/utzv0iVBIt8Vtq4I7W59RMXnLrPBMd1vfodzMg1iywXZ7
HnFqTng6ie2UmfdB2nrHSBh7cDt/ZG/yVVnhhJbuQVIRXLjD1vkzOyvcNv80
2eTk/H3UTR9bRsJjXt2sc3WbRECXSe9IGOfaJoOb6LkaCY/KfnF1mwf4+61Q
HEEX3ALFnSmneo7ihuSl5ineN9x1ztN0V8+pczWHUiO8hYonNbiOa6WKnehC
LFG0+v9Qm6VzUsKu7jR9eUFw6c3uwNQKN6dCj/LlebNZIW2jnVghufaYbz+8
cr8pD92VFU6gfl7lwTw6DxYL76HrozygNn4HlilSjP3tCxWPdnr6sjmKycZu
g2CqojW/is8bzY9d27aacYqD6Tb6juL5dMN4W7EZTaSLFJ1VbrbvAsV436RE
MfaycxVdyu2i7xcqtr12VOv0TM14O7BIcf1PXWO1mYoUbxyUKfYlD12i+OO2
boO4WJP6p72nGM/Hpyry+Yik7eq/TVVsQfVHLyu66otdXxyiGK/PnlHcnW6E
AxVjD/2I4gDy9K8qxnnLUxXHfecWMvMVqcxouwWK8b7xTMV4HzijaO3zHvf4
jbkfhk1RdFVnWxdXK8b75zMVN3/XTdQbFOnyP7lOMa7zmqXYhh6g7ylaeb7x
umqA4i/XQ65G+b9++OGHH36s3PD+3/t/7/9XG//Pvh/JXgpp1RWz70d6/79q
/T8tI1tnxfsz2fcj0fsz2fcj0fsz2fcj0fsz2fcjrX7X7L2Q6P2Z7PsVl/t+
pFWHvLr5/3Z0f0qL92danxP9L5N9PxK9P5N9P9Lqc86+H4nen8m+H4nen2nV
paP3Z1rvoaD3Z7LvR1q/r/UeCnp/4XLfj0Tvz7TqqNH7M/H7Rv/P3p/JPhtp
9b1n349E789k349En85k349E789kf49E78+0/j56f6Z1fND7M9n3I9H7M9n3
I9H7M9n3I9H7M9n3I608CPb9SCvvg30/0sofYd+PRO/PZN+PRO/PZN+P/F/z
/5ZfZd+PRO/PZN+PRO/PZN+P9P7f+3/v/73/9/7fDz/88MOP/2t4/+/9v/f/
v9n/u65Hjz9VJWT/vw8tYNNC9v8XOa12ckZYqP5/Rf2/Vf9/imuDMjArZP8f
1zdnhOz/47YgGSH7/zSdLzXCv4r/P5rmy1VC9v+xl0oLC9X/W/4fvX8h/4/e
v5D/R+9fyP9b/S4s/4/ev5D/X9H6f6uufjF5i6yQ/T+1uZldK2T/fyu9D71I
yP5/0z47vLLP2JSQ/X9fCtBNCwvV/1v+3/LAlv9H71/I/1t9Tiz/j96/kP9H
71/I/6P3L+T/0fsX8v/W72v5f+X9C/h/675q+X/0/oX8P3r/Qv7f6ntj+X/0
/oX8v/XvWv4fvX8h/4/ev5D/R+9fyP+j9y/k/9H7F/L/1n3P8v/o/Qv5f6sf
lOX/rX5flv+3+o9Z/h+9fyH/j96/kP+nNpGLskL2/xSP/FWDkP1///xs7cyf
64Xs/8/cpVX+ztIgZP+fv3nnb6QNQvb/7alPRoOQ/T/Fie+cFrL//4r6vWWE
7P83KlurX+9v00L2/1b//xWt/0fvX8j/o/cvVP8/+SPXYSgjZP9/TsZN3NJC
9v+fzd5o5KT9E8LV1f/H87IyIfv/tWnC2yBk/09x8TVpIft/amt1SIOQ/f9Q
yglIC9n/f1vkGkimhCvr/19q02T7c6fWCNn/u399wi2LhN7/e//v/b8ffvjh
hx+rfHj/7/2/9/9/eP0/en8mtX/ZIVT1/1adKvb9YZa79veHRar+H70/+n+s
/0fvz+xPI/M/X/+Pdf/e//+6+v/x5C1CVf+P3h/9P9b/O/s3c5esqv9vOMcZ
vYyq/6fb9w5pVf+P3p+Jdf/e/3v/7/2/9//e/6+Y/8f6f/T+6P+x/h+9P/p/
rP9H74/+H+v/0fuj/8f6f6v//4rW/68q/0/TqTOzqv4fvT/6f6z/p/ZQ1fVr
bP0/en/0/1j/j94f/b+v//f+3/t/7//98MMPP/5yw/LhGcdzNS3/b/2cNWUY
ecfxfORaRfP3/UX//7xiG1qgPa4Y5//MVTyccpOqFXdsurhjyY+VihOoP0mZ
IqX7TZ+maOWiLt55/Qf6/DOjGPtOzTgfeJHi5y427Jz5igPGugrhNxVJt40Y
qlhEgb/jFLt1brRreFSR4tAhG+ZXctMVW9BxmqGI+XDMeL9lvGKcnzlH8ccj
3UK4VHGt/Kdq/Z5m3G+6QvFsWr/WCzkn0dmzPb8OhTe4rzddZfb9rh3rJsYN
Qs71s9aha9GCUTPOldKM65ZKFXssfuadw3edrdiIAqnHKt5J+XVvKHagOvLR
ih3J349U7ED9nV9T3HD2xOjYssGK1t+38qC7UADcAsUrpveceHbbeuGtPzy0
aZ8dqpbn0UXCJykYMBFs+JVLVouEHee5zgzJYBd3mT0eCTlXd2qx22+MhCE1
EkgEIa1vckKXMnhZq1SQpMYokXBrt524VjIgXXVCJOQcVStHIP8lvPDgsznh
q1OGXVq/T3Vw4Mcb97pnQZ0wpADGyqDYxYpPLFfcy8UQHFGmmHFxg1+VKA6g
dU+xYpS/ahoGzFE8iRqfT1O01o+0a/bZXMX84u+hsydWCy/ZyS2AS4LRH4xv
udv0rHCWi+9+sCIg/d09J9yb8rarg/k0IuFSF6/9dNLsK04xkmfkhM/Sfltq
+bo2EpZUORGTDCZt6u6MOWHtTy5wPRVQzORlkXDH+MWWYCKJsEjIubpv0cZM
JJxM99Vk8Cg1So+EnOtKeqJ1Tth0F5fsmjLzLGj76tCckHOrrfyIyU4rbJMT
xvs6qeDsPRce3eXhnHADt320fnWwP23w5ITT3dd4eCpoRPetSMh51lb+AsUu
3JgTLqFGRHYeR6/3q6/pcUok7OpO214J8/PHXionjPPKU0GWrpuccI+X3YMw
FdDrYFfnhJwnbuUR7EkP9Eg4djtXQZA/33Zyye6RMPZlCbMvfc7p4/cj4X6u
nf3cZDB3oNvIiIRLqJFY0sxNiO+LOWG8/23nSpw79cqDj7ojEnK+sHWcZ9L1
Fwk57/gECryOhLEHTAY0/WoeCTmXlh4bW0ZCiiNvnjDzHaznb/w+Uigk/fNY
VUAxln/PCV90262HpMx8BKvfvrPxr24WCXlftYEuoFDYkh7YVUEcG5kV/uS2
icZVBIuucT8wK/wb3dAqgvyk7Pl7v4uE/6Fcy2Qwz+nFmpzw29OPWfDlyOrg
q/xd4vwv64W830Qxvx1LFKlNV58FijNTjxSP2KtE8UH6hYoVP3blHWdqurvB
4TeVKFr5nlZfoFddHOyOi4RxfUJJQOUS/64VXtPs+Q/X+7QsoNvxd1nh5nQ/
qwhuo8ZqofA02oiqDCgW97xQSNuVwyqDd2mEwuTF7glWFZCevyYSjnWn/6xE
8PUY1xkoFJ5MN8aqYOQkF0yfFU5zl1O2IqCYmJtqhW1mt01d8WFZ0PuwE9/t
U7VAsYr6jM1XfJPmBzMUR7htvJMmKN555lP5n/iOIrXpuqhI0VovWP189qG6
j4W/mvG+QYni7Odfrv3XRwsV+fmPbHW8K/CYr3g53afHKzZ+dvJ9iTkzFK3r
4n2aR09RjPe5JivGedOzFeM6qSLFrre4hPtnFS3PP8DdpnfvpVhP+0uDFDvS
erq/YuMbXSDSM4o1zdzMdrJiPT0/5yh+Tft3pYpWX6z4fJyr+AD93mnFLPXt
rFC0fv6N9PulFK0c54SLLW+WVjzPPcauXaQYz+vnKI5z2+SPvKLYlh4ggxVH
UN1Hf0XTk9C86pJA8c8aa3o9qh9++OHHnzW8/4+H9//e/6/G/p99P5J9A9Kq
+2Xfj/T+f9X6f9cFu+bJULw/+n/2/uj/2fuj/2fvj/5fvD/4f/b+6P/Z+6P/
Z++P/h/fI0Dvz2Tfj1zT/b+13kfvj/6fvT/6f/b+6P+xrhi9P/p/9v7o/9n7
o/9n74/+n70/+n/2/uj/2fuj/2fvj/4f32dB74/+H98fQW+O/p+9P/p/9v7o
/9n7o//H9y/Q+6P/x/dx0Eej/8fPj94f/T97f/T/7P3R/+P7COj90f+z90f/
j3Xp6P3R/7P3R/+P702g90f/j++VoPdH/4/HGb0/+n/2/uj/2fuj/2fvj/4f
3+9A74/+n70/+n/2/uj/8f0Iq98+en/0/+z90f+z90f/z94f/T97f/T/7P2Z
1vsma7r/Z9+PfPDZ8KptlmbE+6P/Z++P/p+9P/p/9v7o/9n7o/9n74/+n70/
+n/2/kz2/Ujv/73/9/7f+3/Tk3j/74cffvjx1xje/8fD+3/v/3+D/3dv9d6+
V0LI/p/akbTMCNn/U3udKzJC9v+ui8szP2aFher/V9T/W/X/nEOHeXQlP37z
7ulvZoXs/2vI+9UJ2f8fssQJgUXCv4r/j71LmZD9/2cPOBHRICxU/4/en4ne
n4nen6m8/3Ki92ei92ei92dafYTQ+xeq/x/j2kddkRWy/w/J02eE7P8PoEYG
i4Sr2v//vNQlGJcL2f/v89O1N2wYNAgL1f+j92ei92ei92dafUXQ+zPR+zPR
+zPR+zPR+zPR+zPR+zPR+zOtflbo/ZlW/yj05kz0/kz0/kz0/kyr/xJ6f6bV
jwt9NNP6/Oj9mej9mej9mVY/IvT+TPT+TKsvDXp/Jnp/ptU3Cb0/0+orhd6f
aR1n9P5M9P5M9P5M9P5Mq7+T9fxF789E78+0+iNZ/Xasvmro/Zno/Zno/Zno
/Zno/QvV/+cnE3c/8G5ayP6fpiPvNwjZc9I/0y8tZP//FvngtJD9P/0z56WF
7P/pdjM+LWT/T+2FTkgL2f9buQArWv+P3p+J3p+J3p+J3p+J3p+J3p+J3r9Q
/f877rb+XYOQ/T+1C1ySFP5R/v9Et+35RlLI6wWrn38z6neVFornN/487u+Y
FrL/f5DWDWkh+39rPuD9v/f/3v//CcP7fz/88MOPlRve/8fD+3/v///A+n/0
/uj/sf7/B+rrGan6f6v+EPv+MP9z33GJg6+KVP0/en/0/1j//0yVm6BmVf0/
adPDM3+5+n9alg+pUfX/6P2ZWPf/V/f/Vv0/en/0/1j/72zSxsvSv7r+fw6t
y+uV/59GOSqLlf8/vbu7gS9W9f/o/QvV/3v/7/2/9//e/3v//8v1/+j90f+j
50Tvj/4f6//R+6P/x/p/9P7o/39t/T/W/a9p/t/N0v/5XUbV/6P3X13r/61+
/uj30f/jn6P3R//v6/+9//f+//83vP/3ww8//Phzx6q6762U//9/5MKsbr/X
iv586zgY+wJW/m8RzXc6KcbPyZs0jUF65bvJAbIpvZidVDyLGgRUKvbouecV
+z23UPHDXffbcHjzuYrW+9HWvsNEaogQKv7U0zWA+FDxYDd9f75WMZ7HDVNM
fu9E2cuK8Xz5HcWh5N3HK1q5wNb65VAX39t0kmJTmp+OUYxzKWcr3k7vfZcr
9n59SeddN9G08oIplqlXqaLVX4VW2T/WCYsfc50QKoNNx1y+yZjL64WzFu8x
9IKjq4LXXPzV7ZWKjwyb98kW+1coutXuoJ3LFQ+g9XuJYtwPZIEitTHoPFex
363ujJ+lOPyoF+ZM7T5P8WvXPqfHQsXk0K22Hf3BHMWdXRuM96Yrdn/IBXtN
VWxFflpzZ/IrMxW/29QFeNUKh9H2V9nynNickHNRp37jBFpOGLm4ufuqzT7h
x27nzoxIGLpYxWwiIM0xIBQOpI2WqoCWZ41zQlrWNEuZfcLvanfgVp8vqBcO
ovy1REDLjO8rFa28wvvddtPFmhSrWFSiaK2jP3axrK9OU6R2IIPHKM49122Q
TVFs7OJ+f5qrmKD7Qali69vGLzvm4aww7rtUEbxG510opMtpk6rgJso/jISc
g2n1Ubf6Odel3cZHKGxBf6EqoNcr/hMJD3OX6XpJMz+iww3ugRUJ93vP3aAT
wafkUSLhUWe6B0YicGd1p2MjYZwrlwhajOjU4clPIiHn2HakoN6c8FgKSkyZ
/dIPq37j7U8vioQV/Vv1GDfS7t9u5ZhYfePvptzaSNhu871HvfBZIrjtaReA
mBP+a1My38E1bR7Y/eDXIiHnF9P2WL9IOLp1eubiPZKBSxnecHgkPGuc6+iS
DJ7c+sp7r24WCbtt2meHV/ZJBKSRWkfCf0UuWTph9u2vpcZDkZBzn7clLxsJ
ezoNfFIioHZKlaHwAzr/q5a/3xUJt6eGOonled2hsP9pxTsc9o8qs5+81T9/
U6f/mueEd7rL8YBUQHG5e+SED5Bgs3MKnr/X3SEjYZz/WhXcSfedUHjWUyQi
g1lOU3YKhV887G7QlcHpVDcRCt3df/Ezlcvz7SPhWZQjmwjcbm/vx0Jhzah2
s9bdomp5rngofMFpv0mVy3NrIyHnFG9HdROhsM+3RZ8//FCV+X2V08QmJ9zA
6fHdUwFp7K6RcPa6W0SPLk0EFEteFAm/pMZCyeBI2viPhMnPDh9//RkJ88/d
7KLlzZHwdPraE8FOJ21w+VmLQ+Ert7k7TlVwNe2rh8JWLg70qSozf+EqEpV1
wvi6rAjo9rp0geLiWjc08zeX/BNxoaLVp+U6OsEXCZtRYUVpQI/nTjXCrQav
03qPz0oDihm+ZLFw2Te0sWe+/7gN5SGHwh7u9YbHK4NP6EXPUJh/mLozwLyO
aBr2TSiMcz+rgodpPhUJ4zzj/HVHG7L1Qv75V1N/uToh51nH88d6YXKOe+BV
Bu0f3CD/RAiFu9MFWBXcTZ4yFHKOdg+60BcJ2avfvYX75hYqNt3TzUSLFeO6
mDmKNC1bPFPRymN1T8n3b5qjONEtq7YqUezl4ma3LVac+tBdg37qWaJ4gdve
Pr9Mkdo7bblA0crPpcO7fanineu5wpJRiv3c7t5QzXh/qUixLd3/xiheSI3D
piuW0DpgmmIvmne/oNiY+lU+rRjX17ys2Ivq4PoqFpFvfkax6b61O6//wBDF
VnQjHKsY9+ubrvh5k4pWO75eomjVOXyRn031XatSkddDyBZbuw3rYsV4H2OU
4nNu2XnuIkUqY+o7TzH+/RKK79KGXL3ioa59YM8KRaoS+Xq+YhHlTndVpDKU
68cotqF1/LOKpj+xfIgffvjhhx9/zPD+f9X+fO//vf//C/l/a37Lvh/p/f+q
9f/s+5Ho/Zns+5FWn3D2/Uj0/kz2/UirTzj7fuT/qv9n789k349E78+06qit
fs7s+5Ho/ZnW+yPo/Zns+5Ho/Zns+5Ho/ZlWvTR6f6ZVv229x2TVjaP3Z7Lv
R6L3Z7LvR6L3Z7LvR6L3Z1p1++j9meyPkej9mez7kej9mVY9udU/n30/Er0/
0/p90fsz2fcj0fsz2fcj0fsz2fcj0fsz2fcj0fszre8LvT+TfT8SvT+TvT4S
vT+TfT8SvT+TfT/Syl9g34/8vf0/+34k+35k/P5XVrw/08o/Qu/PZB+PtHIZ
2Pcj0fszrZ9/IRXGh+L9mez7kej9mez7kVZffe//vf/3/t/7f+///fDDDz/+
5OH9/6r9+d7/e///G/w/rSL7VwnZ/z/mptFbZ4Xs/5s5zbphVsj+372NfOgP
aSH7/5uon01GyP7f6q++ovX/Q/bY5todjw6F7P+pnPX5rJD9/4sUgJcVsv+P
1z2LhOz/XbefO1unhOz/Ka52YkLI/r85NV6oErL/J31zYlLI/t91TbpyTkq4
qv1/3K+mXMj+vx/5s3phofp/9P6F/L/VJ8Ty/+j9C/l/q0+IVf9/6ueXvzj0
/lDI/t9143np64yQ/f9/911n4+NGZoTs//9Bf7BIuKr9/0EupvL4ciH7/3Pa
ju4y/NgGIfv/d6m/UUbI/h+9fyH/j96/kP+3+jlY/h+9fyH/j96/kP9H71/I
/6P3L+T/0fsX8v9Wjonl/9H7F/L/6P0L+X/0/oX8P3r/Qv4fvX8h/4/ev5D/
R+9fyP9b/XMs/4/ev5D/R+9fyP+j9y/k/9H7F/L/6P0L+X/0/oX8P3r/Qv4f
vX8h/2/R8v/o/Qv5f6v/klX/H/eZSwvZ/8+i369ByP6f2mU2TgvZ/1t92ldV
/b/l/9H7F/L/1nVk+X/0/qu6/h+9fyH/b9X/03Jlh7SQ/X/Vea9MGXZpWsj+
f/SgJ7vecmlCyP7/C8qHqBSy/6c2ZxvVC9n/x///9UL2/26W3apHWsj+n9rG
nZQWsv+Pn7dpIfv/uC9dRsj+n07rWQ1C9v+t6fnZIPT+3/t/7/+9//fDDz/8
+MOG9/+r9ud7/+/9/x9Y/4/eH/0/1v+j90f/j/X/rjvoF0Go5rfOegaDQlX/
j94f/T/W/6P3Z7qm1I8Up1X9f9yuukHV/39MjdobVP3/Qa91m3Hj3fWq/t8d
vX9e3fC71f9f6dpxHrNY+f8DXcxCy8Wq/h+9f6H6/zXF/69o/T96f/T/f3T9
vzt7Pp1dq+r/0fuj/8f6f+//vf/3/t/7f+//f9n/W/X/6P3R/2P9P3p/9P9Y
/38xBfBmVP0/tfG5O/Ob6///LP9v/Xys+y9U/7+i/t+q/0fvj/4f6//pcf55
var/H0DzkXpV/4/eH/0/1v+j90f/j/X/6P3R/2P9P3p/X//v/b/3/428//fD
Dz/8+LPHqvLk1s+xPP8v/v01IIdlVX1OmnBeGSDbXOAmYN0U47zfHopd6fl5
nWIX6mPwtiLmsDKtvLx4fl6iGHvEOYr96IXzEkUrVy7Os21Q3JyE2geKW973
9y+/279esQ3tM7ylaB3+kk9cZ+mhAfKkk51gmaD4I/mAGYqWt7dytVz36L1H
TVR8j+a5MxUfccuIvqWKX7jy6ZYVinEeV4nifVRIvlDxahLyZYpxH4NyxV7n
uoWeZtw3RvMAGpp3uGXVz5oHDGjTZPtzyxSt3KudaJQpLjzarcw0v3HT9/U0
i93XU6d5ZN0ZPfverDly0v6bnf6N5hinE/5drnguNaooU/ya/v0aIWmGB0qX
58dmhXGsa0XQ/ML2R9SdkRNyrut0aqyeE8b7cdVB/W2dKl9cGAlbOA3fNxnQ
NsuIULjklm4uOjHI/3JbPVSUFd5D942KIH+zaX7g/TlhR8r/SwX04/LrZebZ
i9eZtv3m1cEkCkSsUBzv2rN3LlH8ml40ma9YQw3R5ypeutt5n3xw6kzFJOUK
vqcYr4NHKHZ3V8dO7yqef5hbyBQrfn/X7My8rmWK8X5CrZD3s27++IUHnw1D
4VEuPmGGnadg9eG3+qK7dNQNr46EnAdt9XW/bPJH2deOyglbtB/6cevbUsEP
l7gDGAnPG+g2bJJmn/8cvXgRCd1Z27BZYnldZig8nvxLVXAIrTsjIW13N0ma
n59zyTGf/ImJZ7cd3SUSdrmcrhCzD3/yCldQHAk5t5q2mV+IhJzDe1bfRTu2
HxoJ3V3v5X8lg/1JYOWEnAts5V/MHeg2OCIh59smyKvlhI3v6rJd2xbVwSEU
xJETlly3zgsHl6SCfx7nRiT84KYLXr/qQfv4x54pJ3xmhNthTAXuKTmgTSR0
u57b35MIqH1Uj1C4ttNIW1WZf5459In8f6GQLrttq4J73TbkyZGQbk89E0GG
cg4j4e73uoDzREDbCXdEQp5v0GHaPRKOesEF3CaC8b3ciREKK+jxUhVcR541
Erq3jV5/1P53rbyMMe61sjMi4Xx32fXLn4eU6x4JKfbzxWRAWvDnUHgaCdaq
gOK0v8sKOb/1P/e5jctIeIPTjEX567SnO5Ej4QeNTp17z+XJwFURfHNLJOxM
+98JM0egx8+pZlOLQ+GdWdeJvipw3XnWmRYKbxniBH3V8vr1SLj0I3fjso+D
lbthnedWv3p6nE/NCge6mNz7Kpb3cVosPI3eDysPXKrms2ctEl5PD6yS4JzM
kOemt9Asc4/tdEq47jS3AbkweMHFJ59QI3RH+c5ppcHjN+Z+GPZFVniHa5dX
WxGkFn57dmZIKNz6oaL8r1gV0P/smFD4DT2QKoNmt7szJCvsXbpoVLtZFWaO
w2UUuBkJ2Tda15GVq9J9W/cJyxVH0Be7QNHZ2h22nq/4OAVHlCj+l+Z3tULO
+aXY2kahcMgZSwefsbQicLOOC9uHwjiPqDKYQ8erVnjPp7M3GjmpLOh01WdN
KloVK8b32QWKmNPMnE8n5jzF5lTAMFfRfdtlp9UI+7npztzSYAe6Py4Wcj3M
hJbuAVGhGPfT06TD8nSZ4sLXH732+Jaliu/RxKpYMd4fmKjY3sUwdxunWET7
EiMUv6YCi+mKtIxsrklaf4eXFRvRBltXxTb0/dyr2PEJd4d8RdHyzK1pvdtb
0VUd3fDcFMX2jd3MbKbiCbRum6torWevPK9rfkZVoYg51syj27kJUq3i7W6a
3b5UMa53mqvIz3lka/ca8r4zFXnegTyVJrQ1mu52s0GJ4o30/Jml2MKdpl8+
odidgtWHKha57clr/6u4wv7HDz/88MOPP2Z4/79yw/t/7/+9//f+fxX5f/b9
SPT+6P/Z+6P/Z++P/p+9P/p/9v7o/9n7o/9n788kfflYTrz//6r/t/Is2Pcj
0fuj/8c6fKsvOnpz9P9Y143eH/0/e3/0/1jnj94Z/T97f/T/7P3R/+PnR++P
/p+9P/p/rMNH74/+n70/+n/2/uj/cd1t5V+gD0X/z94f/T96APT+6P/x+KP3
R//P3h/9P/t99P/45+j90f+zr0T/z/4d/T/ON9D7o/9n74/+n70/+n/8d628
DPTd6P/Z+6P/Z++P/p+9P/p/9v7o/9n7o/9n74/+H98jQO+P/p+9P/p/9v7o
//E4WLkb1nmO3h/9P3t/Jvt+JPt+pOX/2fcj2fcj2fcj0fuj/2fvj/6fvT/6
f3yPA70/+n+8jqxclVXl/93bm9PeTCv/T2XE32XE+6P/Z++P/p+9P5N9P/LP
8v/s+5FWHpb3/97/e//v/b8ffvjhxxo/vP9fueH9v/f/f6D/T9z7eH5lXyNk
/0+v07+yWMj+/1kSwYuE7P+pLdE3KSH7/7VJLGeE7P8X0/upWSH7/7+Nc4ma
WSH7f4q5OzsrZP9PcZfNs0L2/5u0dBXRWSH7/7gPb0bI/t+lWt64WUbI/p9+
7d4ZIfv/scMr95vyUEbI/j/u45IRsv8/ZMnpxyz4MiNk//8J9dfJCNn/O2s6
fllGyP5/T+rrkxWy/6c2RvUZYaH6f/T+TPT+TPT+TPT+TPT+TPT+TPT+her/
9/nX/rkOY7NC9v8bUaOeauHq6v+dTRrRKS1k/x97o4ywUP2/5f+tfkpWHx6r
Lwp6c6bV1wW9PxO9P9Pq84PemYnen4nen2l9fvT+TPT+TKsPD3p/Jnp/Jnp/
prXutvpfoQ9lovdnWh4AvT/TOv7o/Zno/Zno9wsRvT8TfSUT/TvTmm+g92ei
92ei92da/67VLwt9NxO9PxO9PxO9PxO9PxO9PxO9P9PqI4Ten4nen4nen2kd
B6vvlnWeW/1q0PuvbP3/UtfG8em0cGXr/y3/j96fid6fid6fafVxsvqNWNeR
1VetN00gs0L2/7RN8VWDkP3/l9QQJylE/4/7AFb9P3p/Jnr/QvX/FMN0elrI
/p9iC+Y1CNn/P0afKy1k/09f830NQvb/fSkvqkG4svX/e+/odg6zQvb/1L5w
RlbI/v81miBnhOz/D6Z5a0bo/b/3/97/r4aexw8//PDjrzq8/1+54f2/9/9r
YP0/LfOOTKv6f/T+6P+x/h+9P/p/rP9H74/+H+v/0fuj/8f6f/T+6P+x/h+9
P/p/rP9H74/+H+v/0fuj/8f6/52owX1G1f+vKf4f6/7R/2P9//C3nIhIr/b1
/+j90f9j/b+VZ+H9v/f/3v97/+/9/y/7f6v+n55KH6ZV/T96fya9frF/WtX/
xx4u86vr/9cU/7+i9f90Gj3S8Kv7/2Dd/8r6f6v+H70/+n+s/0fvj/4f6//R
+zPp8d4ho+r/rTws9P7o/7H+H72/r//3/t/7f+///fDDDz9W+fiz7qvWv0vP
/9M0/6r+33reWbnA1s+5361ruisOoHyrJxRbuLjXzx9VTNL7y68r1rm41nal
inG+brWiS9Htf2uF4sP0Pvt8xfh/N1fRen/2u6hy+uhBDYofUUzgR4oTOz/d
dN12kWJzyoOaoRjvq5ylGHujsYpxPth4xW6dG+0aHlWk2HlXZ7IXKJ5DHnSu
Ykdaf89UvNK1qdh0hmIbN/36+2xFK5fZ+vuk87cqUoznj3MUrXXlodSnolJx
N3rxu0JxX/LAZYrDXIzu+HLFHtSHt0zR6lN0BTVQKFfckeq3KhRrXKrgWZqf
UN12uaLVF2gtEgjlitvQRkitcCatD8uC5Msdj9o4USvk40kxdw+Hwic3dzt7
VcFpFMyXEy7d0gUipoKTilwnlZzwy6td45Nqs694b9p4ygkfe/OmmeOOqw7+
s6Xb8cgJb6R9w1QwaOdb8yu0nPAVyr9OBdRmo3NO2HPdLl9dn04Fm1Jwbb2Q
86A3273xjBP6lChunHAHYJZiZ1oXjlFsk1/l7bfPSMXP3dfZ5HXFARToOFRx
3LJjHp67+WjFeP9liuJICmYuVez0f9h7E3ir5u//PzMJlaRJRSmzUGTcyRSS
IpUhQpQpURRCCCFERWjSnKbbPNdtnm53vuecO3XvGfa+oT7iQxLxO2vtu9b3
/1jr/3bKJ9Wt93p4PJ6PT5+6wz57fL7XXq/pMIkkU3F3Gkz+0NyI/Y5Ziqf+
AgsuxcwQtLc+F3AwRrpnMfNxrICTAXHOT3pMTJ9NDTqofY8rYc5ame3uOC7X
gdTR1X95TMqBnfwoJAuWMP11slxnLPobj4nx2f8JOXefBytnJczjQLsem+d0
R8HhMfExsXaotH/XY1Ieq+/DPGZ/rJDz2RPwFVymnysXcGDqyuD3XSblq5rm
ouOy6BElzOabfppRfnfIwWXFWSVM3JsfznOGYS5rCfNL0Jm98pwcXC/ymCfu
7h8/YkKl+Xge80oYgxMNGY8X01x3U+7DhbhwXMJcNCQAb3w58Q+z+nlXe0zK
+4NU7DZne8wuoFFvDDqw9T77uIS5CnaH6nml7+eUMI/yFxSN27M6jDVa5TIp
l9Y0F/1CzNn2mH7+YMjBZZWmJczpcPp5Mrc0d7SE+SGcho/OLb2/8JjLYNk3
HDTmIJjyKf6a1aTfyHc9Jm7mE0LGz7cC/M9aJUzKI74dPYrH3AExlaeHnKtA
A73qMrN73NKq/y85xvO5aX57Kwwi9Zh/wmnp7qCDy9oZLnP45WCGAsbft3L8
LuXeyS6zH2i/1gFnNN6AuUw/NjnHeWp51aeXV/WYV0JsbMP4z1Nzy+w3WrlM
ykHG5dKKLvM3ON3WzDFuB1MOgmn7vAOX80s9JuXYXou5tUXMbRCj8ih9/QLm
uxDj/IL5Paw1Z991e6WxLnMbLN9fH8A05HVRl3n607BBzH8+/DS48sX+jxW/
Pz+rONuB6WZH93GZ086ETpYc49eZ0rV+8VftXSak3VeelOP8gXnCLvO+DLjS
B5xusLsfV8ykHOEHoK1geYqi6T7cz11fp/jgEXAlW6V4dK82n155y0ZF//pU
yKT7tCW4zu8xfY9v3s/b3QNVxDwW521ll/6ehcw6cHrqR/3z+cwSeFz4JN3B
5aJ6m5nUf+J//i5z6MKCP+vekOPA3e/2TS6T8sFb4hcoZt6KF75A6Xy5bEU4
+17weJbiONCsnTIVTXM4e2OjTIri8Y/9PHdKznLFC+Dy/+ssxYkQB75+seJV
mMu6QdH3ynMVk3C/HKTYF3N63zWwi2Jd3N/fUfS/z3hFbMcZPV/R7/NKV3y+
1trnaq3NUPRzqtco9t09bdDkHdmKb6PPDikG8fySqfh4DdijNP3tPUXRlHd/
OZzGh21SHIfrMNmKtfEGo1jxvDfhgbRQcdRUOBFlKHbFG7eZisl4//ieYt3e
je7MXvaJoslXlBmfY8uWLVtlvaz/3z9l/b/1/9b/W/9v8P/k+yVN21N6ECL5
fknp/YmmvmLp/Ynk+yWlxySS75ec1Qc6sVz2/tb/75n/J98vSb5fkny/pPT+
RPL9ktL7E8n3S0rvTyTfLym9P5F8v6T0/kTy/ZKmuejk+yWl9yeS75eUXphI
vl/SdLyY+rpNuQ/k+yWl9yeS75eU3p9Ivl/StD3J90ua5qKT75eU3p9Ivl9S
en+i6T0IUz4F+X5J0+dr8jPS+xPJc0uazuem/m3pQ4nk+yVNvy/5fknp/Ynk
+yWl9yeS75eU3p9oeg/CtH3I90vi8lATl70/kXy/pOk9LPL9ktLLJ6L0/kTy
/ZKmr0++X1J6fyL5fskD5f9N92nS+xPl/k0k3y9Jvl+SfL+kKX+KfL8k+X5J
8v2S1v9b/2/9v/X/tmzZsnXQlfX/+6es/7f+/xDy//571UEm+X/TXFmYOjKp
qcsk/4+v3yfFmOT/YWrHms1RJvl/fA21U4xJ/n/IDR/EnySjTHquNOUU9EWB
FmOS/8dxRWNiTPL/SyE+dEqMSf7ffz84xiT/b8oFaI3iO8b8p/3/0oMk8v/S
+yfy/9L7J/L/0mMm8v+m/n98HXpThHmw+v9wWzijZTHJ/8NZ8es6USb5f//5
O8ok/9/qlyN7tfk0yiT/jzG29WLMf9r/b/L/0vsn8v/S+yfy/9L7J/L/0vsn
8v/S+yfy/6a5KCb/L71/Iv8vvXAi/286Xkz+3zT3yeT/pfdP5P+l90/k/03b
0+T/TXNRTP5fev9E/l96/0T+3zSfyuT/TZ+vyc9I75/I/5vO5yb/b/KiJv9v
+n1N/l96/0T+X3r/RP7ftB1M/t+0fUz+f1/1/5v8/556f/b/wvsn8v+mr2Py
/9L7J+r/x9ejZoWZ5P9b4Y1rkJnI//v/fzaT/H8l+PXahpmJ+v+l90/k///t
/v+99f+m/n8c6xmKMcn/+/dfMSb5f5iWVnVWlEn+35TDZf2/9f/W/9uyZcuW
rb0u6//3T1n/b/3/IeT/Tf3/0vtL/y/7/6X3l/5f9v9L7y/9v+wrM+UUSO8v
/b/s/5feX/p/2f9vygWQ3p+ImtKL7nH/f1n3/7LvX/p/2f9fGX1h8UHj/039
/9L7S/8v+/+l95f+X/b/L8Jy/+f+f+v/rf+3/t/6/0PV/8u+/0T9/7Lv/1Dx
/6b+f+n9iWlJ5zf7T5Owug+fV/vt79vML1b+/w5876Pof+7/31v/f/dzO8KX
bY2p/v+HesCJKKr6//F1io0R1f9vyp+Sc3/k/B/p/+HqfslyV/X/S+8v/b/s
/5fe3/b/W/9v/f9B6HNs2bJlq6zXwXa+NXnvffX3D1Ttq/ULg5c25fk2w/yl
HoqmvCR/veUZxcX4XL5OEdJRn5+eqyjzO4mm93BbwfJD9TWKqdU+b3HhTemK
fl5csaLvn7YoZjeEIL/vFE8FfVwvqGja/Dfig+1cRxKsdeerlymWy6uxIu2G
pYr+/OLVitNmQ6DVGsWq+KCyUrE+BoRpmvJMOy37PvbNtVMV674PCwGTFTvh
esI4xdb43DNX0feZ6xVXTHqw+KLbMhW3xr/78PWaJ+E/1PR/7yzFAogp/SxT
8UV8cMtSlDltRIzprawZf+j8PL9OtiLYvKYfZSkesSD4QIsvMxUL6kBwahFz
wKeQOJft4DLMCJfZ56pBb1e6ImCcl16l5j0rHrm8hPleTRC1uaXepYR5P8Qw
Nsxz2mKfXAnzRIibG5vr4ON64xLmo+svjj9RxY9fiDOsv4W5uf6xbwy5Id84
/9w0lxu/zbklTMqf9XPIw8xLFodH/fZ90JjzWAzLYF+mKX6Kz3nrFPve+tIp
FZ7VxLjQW1YpjoXlgU8WKp6DzyszFDthgOlcxQG4vrFeMQtixUdmKA6EZYMZ
mpNwHUHzWBQEWYqmdaKrn28+ZXrLQiYdX6b5280xaLmE6V3bKP7J5Brn2ONj
83Me84ses+9/ojBY6iE85l3zQSCFnC4heMPFZfrP74HS915cJnmqu+JHWeeJ
HpNydWHVY0fYZf5Y/cVj1i0JOBgDfqbHxMPj2qDTB2JcG5Yw73+/7hl9b811
auB6bwnzM1xHzHXOxl+khDkZcxlzndDDcAL0mJQLbJo/b/o6YFFqXFzC/Cnz
jkcqdsh1hjYE4eAxKdcYUjg7DvaYXeD0dlbIeH6AdOkj23jMH3FgeNBphoNg
PGYYllluDjkYM77cY1YDnfBqyBmBO473f8R1sZDTEU8YHhM1YM2QM/oTWFn1
mOPjW2fo4KCD8Zt9Pea6o0/x3tsVNH6+M2Kn3/7aDI9JebWvo3fxmA8VQ2J4
yLi/mebe18MGZI85HoM9Qw5M/b9mqcdM2XbKpW1fNO+3J/XMazbhJI/ZB05z
pwUd1EZzPWYTX6Abt8+Gr0GoekzKw/0Arw8eszeMabon5AzcAsHcHrPvXAgk
Djr4se30mOSjTNeLh/D6X8KkXG88DbUpYSbD/z3c/PdxOWS+x7z/1wv/7PJU
yMGPu8Bl9q0HSR4BBw+3IS5zGV5nAs4K2B3PcZnugyB0c5xuW0Hgu0zKQz8b
LksfeMzJECtaMeTgbVxDj0n5uf56u8t85NXHagz7LsfBePgaHrNfhSFnjL8o
6HR9Cm6kPSZdp17HwByX+SAOzMtx0j+GD8RlUv41xg8nucwdz2JCcWnerMvc
hctxAQfHg011mRhv0DZgzFnA2Ps/iphp79985NKX4tsNls3OzVTcin0xGxVf
jl8lm3ZNVfR95ypFXN4+c66iv868VrHrJ9v6OE1SFf3rZJRJOb+m46v9fbCD
ucxTYFVsffxzxMYOl9kPlneezyl9H8BlXoMn2BwnayE8yBQz2225peczlwWc
8jOWXnpSqyIm9R19/RsEXhcx/eXQbOccnFeWo2iaA7kGLg8lGYotcAE3TfGB
P6AxIFXRf57QXIf9IzMV62Je9DzF1zAYd6NiJ1xPWaDYbAgExA9XxLFnw0Yp
JqfdUPuhY3sq1sXnlTGKzXpBEPkCxaXxq1/n1OWKpj6u1nD7/la6YrMmDy68
tUKm4jDYje7ZqIjLNv1yFG/AhqIiRZNX3/LRsIrfnz9L0ZTvjLeVVQOKE+G2
Y+gqxZ8+gBunfMWKcBj/maeIl5lzUhT74vrSUsWB2GcxXnEUXt6GKIbwhZux
in7+c3dNW7Zs2bK1f8r6//1T1v9b/2/9/2Hv/z/D9twYe3/p/8n7S/8v+6Wl
x5H+n7y/9P/k/aX/J+8v/T95f+n/Zf+z9P7S/5P3J5JHkbT+f9/6f9PxZZq/
Lb2/9P+yj116f+n/ycNK/0/+VPp/2acqvbD0/+T9pf8n7y/9P3l/6f/J+0v/
T75e+n/y/tL/y/5z09eR3l/6f/L+0v+T95f+X54fpPeX/p+8v/T/5P2V/y/1
/tL/k/eX/p+8tvT/5P2l/5efr/T+0v+T95f+X+5vprn30vtL/0/eX/p/ud9K
Lyn9P3l/6f/l9pHeX/p/8v7S/5P3l/5f9qOarhfS40v/T95f+n/596X3l/6f
vL/0/+T9pf8n7y/9P3l/6f/J+0v/T95f+n/y/tL/k/eX/l9ep6T3l/6fvL/0
/+T9pf8n7y/9P3l/6f/lexbk+yXLmv8n7y/9vzy+pPcnku+XJN8vSb5f0vTe
Mfl+Sev/rf+3/t/6f1u2bNkqM2X9//4p6/+t/z8M/D/GTrYMMsn/V8KBOAVM
8v+oyUqiTPKT+Jr15CiT/P996LNjTPL/S/A5IMok//9+7s8Fn5waY5L/n4vz
PGJM8v8OPgfEmOT/cbMOijHJ/y/H3yPGJP+f9sRRwy9PjzIT9f9L7080zUuR
HocovT9Ren+i9P5E6f2Jpvknprkc0vsn6v+H6RD3rIgxyf+DnR7yRIRJ/h/O
WlWyA0zy/2Dthi4MMPeX/8cv1zPIJP9f7yyoAib5/2ooiKNM8v/1cbBDlEn+
/y6cBxZjkv835W6Y+v9N8zek9yea5thI70+UHpYo/SnRNKdCemGi9P5E6f2J
0vsTpfcnSl9PlN6faJo/Y/o60vsTpfcnSu9PNJ0fpPcnSu9PlN6f/b/w/kTp
/YnSaxOl9yeaPl/p/YnS+xNN+5tp7o30/kTp/Ymm/VZ6SaL0/kTT9pHenyi9
P1F6f6JpHoXpeiE9PlF6f6Lp70vvT5Tenyi9P1F6f6L0/kTp/YnS+xOl9ydK
7080rVNL70+U3p8ovT9Ren+i9P5E05wlU/8/7BVrP48yyf/j6e+lMJP8P/7a
83KZ/9T/Z5wFC2wBJvl/1HwVI0zy/9L7E03Hl/T+/9T/76v+f7j7uKCOyyT/
b8qBugxvaKNM8v9nwfinxyJM8v/QNVJjRS7T+n/r/63/t2XLli1b/7is/98/
Zf2/9f+Hgf839f/DNP9zJ0ZV/7/0/tL/y/5/6f2l/5f9/9L7S/8v+/+l95f+
X/b/S+8v/b/s/5d9/4er/zd5Fen9pf8/2Pv/sW3z92LV/48f/13Rg6b/3/p/
6/+t/7f+3/r/Q8P/m/r/pfeX/l/2/+Pt/hkR1f//0BfHTnj5jaI99v8VO1w5
e92LxXvc//9v+38594eIY9aHuar//8I6k9M/3hJT/f+Q9hX8Iab6/6X3l/5f
9v9L7y/9v+3/t/7f+n9btmzZsmXLUGXF/+9tmdYFDP6/Gfr7norJ+GLzy4qj
cA7J+4qmH8e/L1jsSGI8ZIccRXjKa7c2W9HktRZjbuF6xdijp+2q1HGjYh7E
g63NU7wcbuOOjCr2wfv87xWjoKXv9RT7Yy7cCsW6OO9imGJrXFeZpQgpbA1G
zFFsWqvx67unrVQ0+fOhMCZha7IiLg8ENP3nnZWKxRjgO1MRY1BrzlHE28Rd
SxTrH1EU/5dzFf38tFmKFTDHNVnx/fhd7hFFKYqmPD4/hzdT8eoFT97ZZWa6
4pP44r3meVe37NjtdU3T86lp/kwUTjenpSsOuwSepDUxTvurzUyMvaqW7byN
Odge86nIvRktkoOlx1MJ018XyXXO/eGN8EnHlTApv/UOXEgqYVL+L+7uY0qY
cBde5fo84zzw9n1B1JcwwdZd0dw8Bx6sSK/hHrM+PC43DpW+B1LC9PfnXAfj
byMeE2zv2ctCjh+DV8yk9ThMvVxfxET9c3OO03DEaR8e3SdLcdy5p3Wpc51m
VQwgzlQ0fe74mF17heL2TiMmvl5vtqIpj7gtxAG+s0SxGcQwnrJM0c+jW65Y
EX//1Yqf4vyKFMWtQyFIN00R2xp/KWA+cslXI65+PtM4t9w0rx7OZqd96DHT
4bG+innuN16WqnhM+nzPBB11isccDTHQ1YLOZfgXPeY6WN4JmefD/3zryPh/
HvM2WPZpGnImoOjxmNPzsr64YEDImffY1I9OqO0x0zH/Muhkwa93pcc8DsaM
PB0sPW495p/ZMHkm5Fx408CTk8d6TMqxxXi/0R4T22qdkHE7m+bPn1Abgiw9
JuXtmvIXTF//CVzv8ph4OnkvWHq8ucyV/UEQB5weOSNSOz/sMW+GX29x0Kmb
9Hz8EPGYfh6oeQ6//36Ox/TX6ULODTdCeUzK5902GiaguExI4d3p5ZS+L+Qx
w6D/uwadabD7He0xl8FufWTQOGfetJ0hLbHx6yXM7vAx7sx1UKMeUcKknOj4
P46fiUqYlMvcCweoecxWsBvNNucpmPIXUJv+6jLnxbdy728DxrwJU56Lf53x
mA/BbdH5QQcP++Yek/KFTfPq8TTdIcasvGFL/BPLMl6/guh7POYpsGzeOeTg
stlQjzkLGwRCzjVwG3eexwz9cFX8Sh50RmMQrcukPOLjOsGbUC7z2XEvFEVe
Dzjxi+Kmh5a5zHp4fxJwdvRscGK9bh6zFejqQNA5BvNjPeZTL7SMn9JD8OG/
tC7qMimH15TXMwDas9NcZm/Qll8EHLgKVP3LZWKs9M6AcT8n/yw9NPln6aHx
Mrq1kPkktB88keWkgi7vkqbYH1AnVfFGnP+2SbFFz2cuW3P2CkX/OJyiiO0S
Py1V7AD68uYURVwmvzfKfAIHuWWU+lGX2QjnUuU4R2GesMvskgUL2DnOSeGS
Mz++uJiZ0rhpzokF5tznTNDxkTRF/z53k2JSS5jEpmnKS/XnRGUpbusFQa6a
rbvMjB8JqYomPzwqftcxOGOjYnwfWjVr9AzFYgwCXq1o8r0hGJPWc4xiOu5H
IxUrfgANN4MUk/EC+5pi9rJK8TPIAsVu8b3rrtuXK7bGheZFiqZ+j5WPXH5t
r1i24iTYTPmZirTfSfrvZ+YqLsfBbYWKWyDV+o5MxXLNIb96nuLEEtjB8xVj
P0JQ9BrFF+NnubnvpCuWdJ2XufDZsCK+BluQqoi3rYNnKFbD43Waot8nOFZx
Oz4wfqU4Cq7yE99U3J8qxZYtW7ZsHYJl/b/1/9b/W/9fRvw/+X5J6U2I5Psl
pfcnku+XlN6faOoHlt6faOoDl96fSL5fUnp/oul9HPL9ktb//zP/X66Be22j
xVH2/kRT37JpXj35fknT3G/T5yu9P5F8v6RpPjz5fknp/Ynk+yWl9yeS75eU
3p9Ivl/SNB/e1H8uvT/R9P6F6euT75eU3p9Ivl9Sen+iqQ9fen8i+X5J6UOJ
5PslpfdnGvrMTXP+yfdLSu9PJN8vKb0/+3/D+xSm/AXy/ZKmvAnT+1zS+xPJ
90ua5tWT75c0Xb/I90tK708k3y8pvT+RfL+k9P5E8v2S0vsTyfdLmvJ6yPdL
Su9PlPu39P97On+efL9kWfH/Ju9Kvl+SfL8k+X5J6/+t/7f+3/p/W7Zs2bJ1
iJT1/9b/W/9fZv2//1wYYpL/H/Hml+6jp8WY5P8vmgeDe6JM8v/4GFkQYZL/
R2vxXYRJ/h/HoKyIMMn/m+bTwjSt6q3zmOT/l7/10ug/P4wwyf+j5lsXYSbq
/5feJJH/l94/kf+X3j+R/5feP5H/l94/kf+X3v+f9v/7v0eMSf7/TJyzH2OS
/0ftOz/KJP9/VLuTL5w5PJdZ1vw/jkUbGGKS/38fg1cjzET9/yb/b5pXY/L/
prkfJv8vvX8i/2+aD2Py/9L7J/L/0vsn8v/S+yfy/6btbPL/0vsn8v+mr2/y
/9L7J/L/0vsn8v/S+yfy/yYvavL/yvsn8P+m7Wzy/9L7J/L/0vsn8v+m+Usm
/2+aN2Xy/9L7J/L/pnk1Jv9vun6Z/L/0/on8v/T+ify/9P6J/L/0/on8v2le
n8n/S++fyP/vbf6sqf/fPy9GmOT/n9sRvmxr+QhzX/v/wXiey2SS//fnXYWZ
+9r/m/r/K+NApCiT/P/R35ZrueGVCJP8vz/XLcIk//9KJ3jzIswk/49xTi9E
meT/8XaxboxJ/v/mW71a29rFmOT/8WNuHGGS/4e9tP34fKb1/9b/W/9vy5Yt
W7YO27L+3/p/6//LrP+/FG9Qw6r/X3p/6f9l/7/0/tL/y/5/6f2l/5d94Kb5
89L7S/8v+/8/ih81D3wcU/3/1v/v2/5/6f2l/5f9/6bPvaz4/73t/5d9/9b/
W/9v/b/1/9b/l03/j3EaV8RU/7/0/tL/l9X+fzn3hwhHU7XnXNX/L72/9P+y
/196f+n/Zf+/9P7S/8v+f+n9pf+3/f/W/1v/b8uWLVu2/rU62PJ/97bKuv//
2xzgazVNZcjTMeX/JqMn7quIsaDnDlHcic9/cxUX7L4+fgOTpdjkdQgICyj6
HitDcTfcHj2Sruh75TWKK9C7piuecV/nq4vuLFT089xKFKfBbfqPrqLp/ei+
ONd4mGJ3zFv+QrErjJVOmaWYBI9lLTYodjgVHlRSFWvhwso6xS0QxztkiWJf
FBELFUfhoOJkxf4YMLdKce5VDXo3ulMzBW5zd89WNOUIt8YgsCmKnSEu65QV
ig1hPEk4XfEEfJDJVASb2vEIzVdwsEKG4pPdvzl9/geZiqb7/7qB9uOXT0pV
hKeJfh3SFOMPlfEnxQxFfw7yZib+updmO6GHIVjZY1Ku6AnYoB1hrgLNXz2v
dN0gzJx2S/jlKtOCDu6m1xUzf1sNwW85pZ9nmEm+6PftEJxawmy/FkxCXqmH
KGHS+pppjjfGIvYqYeZOrFx11rfm3AHTnPCzIWb4A49JeY74WLXbY1I+pmme
9lKveebg94uZF2DAQcCBp/WOgzczG8NjZaVsZ2i3ym8lb8hQlDmIxLoQq/xd
mmK1zd3T//hlo+JsFCArFItxPfYbxSSIa20/RnEortN+o+g/x89RrLC7/7Rn
1qxTTMbzZR7T90HpDuqD/BjTn7OTbZxD3joXdliXeeTQwb8mbw84+LheyWPi
MmmtoHHOOcYxPuYxOff2KTiRhpn+c33Iee/6Tm76WcVMXFZbkePAKt7ArzMV
y+P8nGzFY+9POub+pBzFYnic3p6l6OdkbGb+iA/M2aU55MXMgpnt4kdSwMHN
8Y7L/AT0+XHm+eTDXgXx4jG/gOWavwLOH78sajUtz2XelwEryQHHH0zuMuM7
SfyKEXBwuaLEZT6KgZwBpxx8m3Ye89Ext8XPxEFjfoHp+MLdaL7HpLxXUx6E
ab66aR67H5/pMr/Ng0D3gIPxwB085nu/DHmi+zdBY66E6euYfl/cHXd6TMrP
NeUdQMpqkx89pr8OHXJga7V8y2Xe9OS5b/YsF78PwiBml7lx7Xk/11sYMOa8
xE/q8TO7x8TXk34IlubPe0xcVr0y6Cx5Cb6yxywIwYk76FT5BW7YXGb/NFjo
yjEep8fG98rvYzEmHEUzV2Y7p+OGiTDpvLfriubVl1zoMu/BynGGQEzyZx7z
w82fzbmqgTkvA7X1USXM+EVs5bRy5u1gyhk5DY9Dl0l54hgH3stjnogB8EEH
tWvTEub0ZyAoN9d4nJ7VAhIHXOZ4WHaYG3CwjWOQy/wC83Dj50n09JuZ+GXa
ZRvfw1qLea0FzF7+gePcCIdT/wLmLzCW6phMJx/XtTMU1+GJeaPidcPXr+hf
U3M+BgavVSxuCxOnFij6eZ6zFRvVv2NS09+TFS/HHWeTIqSWV9ucx4Sz8DH3
pzu5eN8RY1aGdob3skvns21mxi/W8TuDLGcnvFa5Kl0RNevnGxUbHT+l1n2d
NeGqkv9b6h7Tzy3IUPTngGUrbhsODS45itD1sqvSJsUbIZZ+UobiAMCPKxRD
+ILpIkX/OrlasTX2JQ1R9PvLHlHsCm06i79R7IsnpJGKpudN//yxTLEP5j+v
UMTdaPt6xSvwRiBT8ZmvoPEmT3EbtOnUDSrSeVTStH5N51HJKdBe1H+R4rph
Ywpv+z5VEZeXOgYV/Xz19YqVMF97s6Kp/8e/X5mtiLdZXeYrtv4aGjCGKlbD
IJ1xin3xvNxPsRwGit+hacuWLVu2DmxZ/39gy/p/6/+t/z9s/D/5fknp/Ykz
epV/8rOPS9j7E2Gvq3Wfx96f2BIb0V32/kTTvGjp/aX/l+/XmOZ4S+8v/b98
70B6f+n/yftL/0/eX/l/0U9Lvl+SfL/k4eb/yfdLSu8v/b/sQ5beX/p/8onS
/8s+Z+n9iadgo5rH3p9Ivl/y3/b/5Psll+A6k8veX/p/8v7S/8v+ZOn9pf8n
7y/9P3l/6f/J+0v/T95f+n/5/oLp+JLeX/p/+T6Iab669P7S/5Ovl/6fvL/0
//K9EtPXMf2+0vtL/y/fd5DeX/p/8v7S/5P3l/5fvuclfbf0/9JTSe8v/b/0
VKbjVHp/6f/leU96f+n/yftL/y+3v/T+0v/L7WDKGZHeX/p/8v7S/5P3l/5f
HqfS+0v/T96fSL5f0vQeFvl+SfL9kmXd/5PvlyTfL0m+X9L6f+v/rf+3/t+W
LVu2bCUo6/8PbFn/b/2/9f+KLz6fMyK1cz6T/H8HDBosZJL/R53Xr4BJ/h/H
EzxawCT/vxD300Im+f/5MDaoUQGT/D++9h3MZZL/H44+LMIk/+//3FFmov5/
6f33V/+/9P5E03wt03OQ9P5E09wh05wQ6f2J0vuz/zfM09jb/v+vVoHhizLJ
/+PjyhkRJvn/ItBYvfOYB6v//zTlyryps4uZifr/pfcnmuaQSO9PlD6RaJpz
Ir3/P+3/R02eFWWS/2+LYj3GJP+fuRDEo8sk/w9Tle55Jcb8p/3/0vsTTfNJ
pPcnSu9PlN6fKL0/U3h/oml+kTGvVnh/omkelGm+imkei/T1ROn9iaa5Uqav
Y/p9pfcnmuYdSe9PlN6fKL0/0TTnTfpuoslTSe9PNHkq03EqvT/RtO4pvT9R
en+iaftL7080bQfTnDHp/YnS+xOl9yeajlPp/YnS+++v/n+87XgoyiT//wYu
YISZ5P/xdj9+XSXua//vf25ZTPL/Z+D+EmYm6v83+X9T/39LFL8RJvn/YpwT
FmaS/78fxpg+EGaS/5+45vb4V4gwyfOb/jx+EzH2qEZRJvl/1PQ/xpjk/2/G
A9Nlkv+vhRe4XKb1/9b/W/9vy5YtW7b2eVn/f2DL+n/r/63/3+P+f3h6/rkg
qvr/503JuWT5W1HV/3/SoiNjD/aI/s/9/8E3Lwy9eWFE9f9L7y/9v+z/x7Hs
w2Kq/9/k/2XfP1H2/RNl3z/RNC/6UPX/pv7/J/Bzjqn+f+n9pf+X/f+mPtiD
1f/vaf//web/Zd//wdr/L/v+rf+3/t/6f+v/ien4Ak9M9f+XawA3NlHV/38i
3nhHVf//hnteuWrQ21HV/y+9v/T/sv9/xM+3jvz51vC/1v/v348Vqv5/6f2J
DSEOKimi+v/l3B8ixvM8GFP9/9L7S/8v+/+l95f+X/b5m/5cen/p/2X/v/T+
tv/f+n/r/23ZsmXLlq09rL31/3/r28vAOojp58TrakfFvviC93OKo3A7va1Y
EQM6RyvWxfusLxQhrXLkw2sVTf4//rA7t3o0U/HN4/574+6aGYoPHvH89AUD
Vyn+gXNLNil+Hn+au6VnoaL/3BBTRP0Xf86SvBS33yZF43oK5p71UbxxRpuz
L3h8luIweM19+BrFNdjvtUIRrHv2suWKkH5Vc8sqxe1Vsi+oMzlZ8RrMxdWs
hS/Gr1U0rQtsbQPCdoZif9D9X01TrID70UxF/+dKUsTlgWHJitWOhif/TYqm
9+jb4AJEhiLeLi9NU8TY3tbrFf/A9ahkxfn4nLte0X9MzVSU+XNEPyc5S3FF
Ggi0bEWTh+yBcyeyFP2c5AJmN9Ab52Y6MM3ngjrFTIzVW5TjvDAItmwJ87YK
R8IIGCcj/rT72pMeE/80Nej8XADiuoR520gQDLkOPo5mljCvgs08Mq/0ub+E
uQle27g0z8nFL1DCxOWvpbnOhJdhkpDHpPzW0fV7fPTi+SVM//PKdf66+Zwx
8x4rYT7UAwNTnacgvrGqx7wSHrMaBh04C1WeVMR8CnRdgxwH0o2bfpSlOPi6
bwdd962mzBsmRkEf/zddMb3zw6s+XLJScQque8xXNOXHmXK9d0Fc36B1ini6
Py2PWR8DmNMceCuic2qUWQC69LNMzluUuYs9YJnrYY9J+bD+uoHHpHxeWL06
72qPeUEWmKSgExjT/dryQZeJem9CwMGxVbOLmWgh3YDzeA1IBM9UvAJOo5en
K5ry72QuJtHvi01VTIGxKN9sUvTzFTMUZc43MfYg7JBFTLCW7dZmG/MCTHPL
TXkBGOOX4TJxrMrwgHE+P6wS/ed+j5kN+nBG0MG4zbM9Zpff8M0rY06HKV/g
Cfhxb/GYlDsMb2l8cYHH/BPaB+4OGvMLbscLgcfcAfr/9JAzf+fIqWf+4THT
Iab7p5ADU3Xefs1j4u6zw/zz4OX8VI9JXghPL1NdJl4G2waMXz8fczKLmY9j
BZy2+PltZoLdPO/nLCcHD4hi5n3Xtfu6TkYOz3OTc91M8/ZNP7+/33lMyv81
7SfTYPc42mNSnrL/+7jM03NBLOY4EzCv0mVOm41HjPHn+bPuDY+9O8llPtiw
/bZvWwac2j9BcKTHRC39StDpjDeELvMcGBf2c8DB+PN7XOaQzqkZ3cblONWx
McBlDoHD6a2AA2nsVf9ymZTDC1OEnrrIY9bHAzJonOffCnNHXebuml8P2PxZ
jvNc/O608bgCJsbQn5VZ+p5YuiIu55+3UXEnLMcO1MxrNuGknnnpiiY/vAXi
bTutU/Tz29crZmM//SrF9Gqft7jwpiTFprhhZini7lpvleLsbxfUa7hqgyLc
Hd11dJT58rroxr5HZjgXgV4cUsyk64I/PzBF8VgcELZOcSdcblpuUpyIL4Rt
VIzAOMPhKYq4bJCfpujft6Yrmu735sBt+uwMxcFwu/9pmiKkY0+8N1XxmqI7
P/y820zF2DjoaFih2HbzUStrnrxQsRzmu3ZT9PsRvlTcDvq47RTFidC2MnSs
omn96MsvoNYrnnQOLAilK8JZustNWYp03yr54GA4IWia/n78oter/JMBxWnQ
tnVqjuLs+6FDKE3R78tYqIi3WctCinjbd3eyYvEL0EiUrVgec5Wjip2+ODZ+
i7xR0b8fXKGYjN9/vmJTnFM3WdHPW/5K0f96byr+vcfYi/5GW7Zs2bJl6/9b
1v9b/2/9v/X/1v//rf8n3y9peg6S3p9Ivl9Sen8i+X5J6f2J5Pslpfcnku+X
lN6fSL5fkny/5KHq/8n3S5Lvl5Ten0i+X1J6fyL5fknp/Ynk+yXLuv8n3y9p
el/ANLfc9L6A9LlEU3++9P5E8v2SppwO0/sF0rMTyfdLmvILyPdLSu9PJB8v
afp5TH2h0vsTTV/f70d22fsTyfdLvjqluTP6KZe9P9H0Ppdp3r7p55fenyj3
D+n/yfsTyfdLSu9PNP080vsTyfdLSu9PJN8vKb0/kXy/pPT+RFM/v/T+RPL9
ktb//73/J98vKa8H1v9b/2/9v/X/tmzZsmXrMC/r/63/t/7/sPf/pjm6/7b/
n/wo7KlBJvn/v3Z1bNh+W5RJ/r8y+uwok54HcWz43TEm+f9GL8BErRiT/D9O
AxgcY5L/fw9iOW+MMf9p/7/0/on8v/T+ify/9P6J/L/0/on8v/T+ify/qf9/
+aQHiy+6LcYk/496tFeMSf7/v3NhByhkHmj/7/uSYmai/n+T/5feP5H/l94/
kf83eR5T//+bOBghyiT//05HuEDkMcn/d50HE/5zmeT//f8/j0n+/+ZFQ+JP
7LlM8v/+fK9cJvn/jX2PbPN02yiT/P9HOGAhxkzU/2/y/6a5JSb/b/K6Jv8v
vX8i/2+a02Xy/9KzJ/L/pvlFJv8vvX8i/2/6eUy+Wnr/RP5/X/X/m/y/ad6O
6eeX3j+R/5feP5H/l94/kf+X3j+R/5feP5H/l94/kf+X3j+R/5feP1H//1L0
ahEm+X+YejP0jjCT/L9/Hgozyf8vuRAmZ0WY5P/x8OsQZZL/x/GLXxUzyf/D
VbjGxUHmvvb/VW9/bUbs9CIm+X+4K67VOMxM5P9N/f9Tcd5hmEn+H29f4n+P
SP7f/9jCTPL/MDW09c1hJvn//jhXLMwk//8jBq5HmOT//XEwESb5f9P93nk4
oDLKJP9fHT/YPKb1/9b/W/9vy5YtW7ZsibL+3/p/6/8Pe/9/sPX/S+8v/b/s
B5PeX/p/2f8vvb/0/7L/H8f4fh7d4/7/Q9X/y7k/xPhD+8TKVV3V/y+9v/T/
sv//TPQ9sYOm/196/3/a/3+g/L+p/196/wPd/y+9/77u/7f+v2z5f9n3n6j/
X/b9W/9fNv2/qf9fen/p/2X/v/T+0v/L/n/p/aX//7f6/6diXlau0f/L/n/p
/eX8H+n/Te+FSe8v/b/s/5feX/p/2f8vvb/0/7L/X3p/6f/l/Z70/rb/3/p/
6/+t/7dly5YtW3tY+8rblxX/j/lLdzmK+CDfWdNQze6t9tyjP/RzJCt67+26
ovkXiqavMyB+d/tSk+WOpCnnzvT82LHFl3c9tyNDcTE8pr67RnHX2Dvj/21Q
DGFOa0ixdvzuv/34sGLoh6sWPHlniSK+Dl6/UNH3xNMVTdsnhP1/YxxJP684
WXE+5ievVOyG6zbLFVFHRtcp9uwKCWmrFU2fVz/MOZyvWA2fA6YpmvxkB4hb
/nCeYk8Yn/D7XMUC3B6zFNPx+Xe64lhcp5qjWAGfD5IVB2AQ2wLFcnk1VqTd
ME1xHa63jFZMP7Hgplu9YYpt0busVmx4Yr1uW4dnKt4L9uzyLEWwl6Pra5py
sS9GzZ2haJo/cxl8nEPTFYfCY+vEAmaLns/E96xM567P8+t0nugx/efokHPJ
cthRS5irQOf8mudUxoEXW5hvfw8LQvkOTLX46pItTIyz65jv4Lj4VSVM3Dxv
5jkbGzfNObGghPlrq+s3/TQjz6mBOWMlzM9gPMjvuc7vsMzyrcdsjzllIadP
ZsNXMxuWMO9/v+4ZfW/Ndd6udMWOVteXMJ/GnO5cB8424cvCTBfG18SCTvyh
Lb5jFDMpH9Nfx8tS9P1MuuIJ8G2qaxbUgUC31YpbYJzG+bMUG0GM4byZiqno
Y5IVt2MAZJqiv65RwKQc9ooQb/xnjNkXlm13ZDtgV2rd5zEpbxrSJZd97zH9
2MOQ8wzmhXrMa2M/PtbsjZBz5hmQ4OsxR8PHVS3o3LY69920JJe5A/PlA87c
TfCL5ChW/RAO5ExFmXPJxON4pmIIj+MpihPvBQG7XNG0nfGxucMKxWw8UFIV
TeeBgVsgoHYzsxnopnVZDra/3uAya+JxkFPq1Tzm9aADmwWdIOZwesxT7oYD
OeScgLnHHrMnLosFHVzG+9VlUr7z8bAM/7XH7A5j3K8JOcPje2NWscf8EjTD
opCDcelnesyauI5snjP/2FQQKS6Tcrr9dXiXuQ0XQgMOLus295irap4Mo9+d
UPxT/v0tj0n56T0xYNVj3ubV2tbuvqDTHoN6PeYpuGAfdHDZvpbH/AYOj0vj
+3m45MyPLy5mpuD5Kccpjy+cFTEX1mu4ateGbKdZkwcX3lohU/H9LhCUmaLY
Hy5vdVIVv499c+3w9QXMYRDvfHOm8zyu67pMyhc2HXem7YCrY0+4zMZbyw98
ZVOO8Ti9D19085hVIK6zKORchwt8HrMwfrd0x6SQgxq3jcdEjfRV0MFY8v+4
zF24rBRwrmu0ODzqN5dZGD8aa20LGP/+IFx3dZlwleqQEnDgbrZKtsekvE5T
/sjP+L6Wy7z1bjC0AeN5z/S+BsbYz09V9P1oimInXJder+jnqW5QvABPRGmK
Y+fBEZSqaOpPKAbt+2Waon/fsVLRdL9UBZbtX16kOAqP842K/rpHHpPyo4Og
R2vEmCfjcZZlXCdthvtZiuKK7e+85U1PUzT1e8BR8OuFqYqQivvLOSmKsBox
pvsmxbfwwEpXPCHziKGDf9XcunT1X0+flKE4ePKOng1OzFK8D3fkVYr+dl2k
2B1f6FymaHpOaY3rAN84kv797BxF3/tOVuyJC1ILFevPqRJ/clip+EfVv2Y1
6Zem6N+PZipWweePVMXKY49qdO4PGYomz+/neeQrVsN1K83QA/BAGlD014km
KLr4Xl+OosyNJja+DGql4k14AXcVT8YNG1MMfTe0ePk1yxVbv3X3kuSOYxWT
epV/8rOP5yj6Od5jFZPxeesFRd8f9FQ0ev6DzbccbD+PLVu2bNn6+7L+3/p/
6/+t/7f+/x/5f/L9ktL7S/9P3l/6f/L+0v+T95f+n7y/9P/k/aX/J+8v/T95
f+n/yfsTyfdLku+XJN8vWdb9P/l+Sen9pf8n/yX9P3l/6f/JP0r/Tz5R+n/y
/oer/yffLym9v/T/5P2l/yfvL/0/eX/p/8n7S/9P3l/6f/L+0v+T95f+X/aZ
S+8v/T95f+n/yftL/0/eX/p/8t3S/5P3l/6fvD9xzoTL4ndILnt/Ivl+yX3l
/8/A+5Qoe3/p/8n7S/8vjzvTdpDeX/p/eZxK7y/9P3l/6f/J+0v/Tx5f+n/y
/tL/y78vvb/0/+T9pf+X7x9J7y/9vzzvmfIarP//e/9Pvl+SfL+k9f/W/1v/
b/3/v14H289jy5YtW7b+vqz/t/7f+n/r/w+Q//dzGHOY5P97DV1Y8GfdQib5
f5gi8lrtGJO83wgcaBJjkv9vecV713dy85jk/+FfPfpAAZP8v2n+/BMoWCPM
RP3/0vsTpfcnSu9PlN6fKL0/UXp/ovT+ROn9idL7J/L/e9v//9Njzd445/IY
k/z/SYuOjD3YI5+5v/z/PIgtGJfJJC+NY0pejDAT9f9L70+U/osovT9R+kei
9IlE6f2J5+OAOJdJ/h/HP82PMg+0/++DgQNZTPL/uKxxfoRJ/t90HjD1/0vv
T5Tenyi9P1F6f6L0/kTp/YnS+xOl9yea5sxI70+U3p8ovT9Ren+i9N1E6f2J
0vv/0/7/7RPW3H7Fe1Em+X84WjMXhpnk/+Gss7V8hJmo/196f6LpuDNtB+n9
iabjVHp/ovT+ROn9idLjE6X3J5r+vvT+ROn9iab5Y9L7E03nPVP/Pxw1DS6J
MMn/42EzNMwk/+/n1AeZ5P/xtHxpmEn+/75fL/yzy1MRJvn/pr/DAMwIk/y/
KZ8ILz+t85j/1P/78z4zmOT/e2GFmYn6/03+v8aLx6xb4sWY5P/r4oJTmEn+
H1atKjwbYZL/x/E3z0eY5P/h7D3w5AiT/P99eN8aZpL/n1wL/iTMJP//Ce5f
ESb5/7thzNyfESb5/2taduz2+sB8Jvn/GN7AFzKt/7f+3/r//VAH289jy5Yt
W7b+vqz/t/7f+n/r/8tI/7/0fdL/72n/P+qjZ6Oq/980f156/0T9/4eb/2+O
gXue6v/Hw6ySp/r/pfcngvVq+nvkoOn/l94/Uf//wer/Zf+/9P4H2v+b+v+l
95f+f0/7/63/P7D+X/b9J+r/l95f+n/Z/y+9P1H2/Vv/f3D4f1Neg/T+0v/L
/v+GmGNQrPr/pfeX/l/2/0vvT3x1Z4VFR8aK/7X+/yheJ/NV/7/0/kT4rYe9
GlH9/3Luj/T/sv9fen/p/2X/v/T+0v/L/n/p/aX/l/3/0vtL/2/7/63/t/7f
+n9btmzZsnWA6m/zfstAHo0p7xg91r2ahuqL9ynvOpKNMOd2uKIp36cAn8/m
KmIsVp1sxR8hpndJQPFhf0CAYrXzrm7ZsVuaou/11yke3+mu+J3rRsWPIAZt
RL5i7+EPzJlw2beKL0Ls6gZPsTE+wG5UNG3nZnB7Wru/I5mMvj9J8QKcw7BS
sV+Hh744dsIGRdwcr6crtsFc4izFGeeDYMlUND1f+LlqUxT97T1f0f//Fyua
PL+fo5ukaMqbM3lR03vo2EY7dq5iT5yfMEsRD5vqSYqmdbGzPr74qPI3Lle8
CLRvp1TFxzDXK13R9N760fjAslGxOwbRrddE0bBO0c9bW6/4AA62yGdSztqP
oC9/cpk3YcBhwFl3AjS6bmH+tPPSUc2q5JfmoJYw/fW4POdxzIktYV6IgWp5
ztlf9Jh9/xMlzMmnz//g05RcB2PCd3jMh0CDlIQc3H1PDTOvbQMdk0HnODy+
i5mUU5m18Nn4FilmtttyS89nLgs4BTPbrT36FM3H3oVEz0zF8+E0cbUmHMXV
NqcrPoEDUDIU/fkbKYp+bvZyRdysNeco+h5ooaK/XVIUO+LnmqHoz10pZFbF
AOosp9U0MOsek/JYey0dWePiQo/ZCmIhZ4cc1CfJHvMnzEcMOS9XAVPmMdth
cGPQ+WjJ3a1n9fGYfTr1Xnn9f4PODTdCecxvn7l38qNvBp0Z+DxaxHwExrxU
yHHuwOfXbEWZy0j0vcIyTcP5JwnPizMV/eN+kibmmY9WNK23vl4bjpx0xWa4
YJGp6Hu4Qia2jX6d6bzyHzgSY8x2oNt7ZXNupszPfAD+2UyXWRMDxQNO/KQ1
o83ZHpNyfiFV8NRHSpicx71gYONxEY9JOYa+J/OY8F3X3B50qm3unv7HLy6T
cpwrb9gS/6RdZj8M5DTnApjyC56AOORbPCbl+Zq+vik3YSgKWY/5Sfy327oy
6AzA938KmdfgAJ4sZyfo2OPTFH0/mqrZ9an4JWW9YjU4/V25QfFNWK57KE1x
ay+4USlk0nqxaTuY5v/jbrHGZS7C/oqAMQch46z8+JXbY1L++0OYM+ky6+AH
neNMHwQC02UuxYX5HAeOvpHveswHMYg35CzCE4/HpP6NJS81id9pecyC0NXH
NNkYNO63pp//nPXDxhTe5jJn4nklx0muBDuIyyw+/jEYCWTMBUCt/mAhcxLc
reZnGnPD378eTN9GxcbYGLNBsUXyFdMbjFit2A1Oi8etVMxeBj/4ekV/Dt4m
RX89ZJ1ifzxfTldMgmWb9oMUTesF1zTo3ejO7DTFj+F2LSuP2QzfP4jf/8Bp
6NjNzB54P5blPI8nmEzFd+E1qwXpijL/mBjAdd0URZmjTITpZm0v1jTN0/sA
z+sZilPjv8XdS9IVTX8fl89bpCv6zzGLFFvA4Vp1geKod6+JH2qjFOfjDqmZ
nNxxcOfUGYr++XG2Jq7jzVPMhtu8X1YrFuONwAbF0MTKVWd9u16xLa6bpCt2
wAtQqqJpPQUvVy/lKJbH60e24hELgg+0+DJTsdrTy6s+vXyuon+/kKz4IeZZ
5yqWaw53JPMUsZ3nxzTF1/HF0xLFI2E5pHJA0bSOcPy6JV7zzNmKA/G5/3PF
unhjP1hxr71EFHiP5sFW1v/bsmXL1qFd1v9jWf9v/b/1/9b/k++XlN6fSL5f
Unp/Ivl+Sen9ieT7Jcn3S5LvlyTfL2n9v0/y/ZLk+yWl9yeS75eU3p9Ivl9S
en8i+X7Jw83//4JCNMren0i+X1J6fyL5fknpT4nk+yWl9yeS75eU3p9IPl7S
lAtgen9B+m6i6eubchPI90uS75c8UP7f9L6Y/P2l/5f9/+T7JU05COT7JaX3
J5Lvl5Ten2h6f1N6f6LcX6X/lz8/+X5J6f2JpvcC8DWv7VH2/tb/75n/J98v
Sb5f0vp/6/+t/7f+/18v6/9t2bJl69Au6/+xrP+3/t/6//3v/2fh81Yec1/7
fz+vM8Ak/78M9MFpQWai/n/p/RP5f+n9E/l/6f0T+f991f8PTz2D33eZ5P+P
bPN02xM+iDLJ/7vXQiBllEn+Px3Gt/wUYZL/n//knV1mNipg7i///xN83ANC
TPL/YCOdU6LMRP3/Jv8vvX8i/y+9fyL/L71/ov7/HTgXKsYk//8pfAzd85gH
2v8PSRp6R1r8vEsk/+/3v0aY5P+fxeM4ykzU/2/y/9L7J/L/Jo9q8v/S+yfy
/9L7J/L/prlAJv9v8t6mr2+am2Ty/6b+fxxHdVOESf6/NZ4Ac5nk/++E3bV8
kEn+v90rVw16u1KYSf5/+jH3Jx1zf4SZqP/ftB1M839M/t80B8nk/6X3T+T/
pfdP5P+l90/k/00/v8n/S++fyP+b+v9vH/vZWS2OizDJ//vHQZhJ/v9bOJ0N
CTIT+f9jr3pmVNax2Uzy/1fC/7wqyCT/j2MWq+Yy97X/99ehspnk//35/hHm
P+3/9z+GKJP8P44NKoowyf/jGMoOUSb5f3g7beziMJP8vz+fL8Ik/4+X1S8j
TPL/pjwd//weZZLPb4A3DhEm+X9/fl0+0/p/6/+t/z+AZf2/LVu2bB3aZf0/
lvX/1v9b/3/49P+/i3ORi/e4//9g8/972///8huLzlk/zFX9/9L7S/8v+/+l
95f+X/b/Y7zEvdH93v+PGvTdsOr/l96fiOOoG8b2uP//QPn/vvjBuKr/X3r/
stb/L72/9P+y/1/2/Vv/v3/9/zNr5t/45Lkx1f8vvT8R45eqRFT/P6wKRtYU
q/5/6f0T9f/Lvn/r//ev/5d9/9L/y/5/6f2JtXBgfVj1/6/ctaFx05wi5f/v
iV+tvPc2HzT9/1tBgw/drPr/pfcnwhT6OpMjqv//vWlwhMVU/7/0/tL/y/5/
6f2l/5f9/9L7S/8v+/9NeTrS+0v/b/v/rf+3/t/6f1u2bNmytY9qb8/bZd3/
720ZcoH74nyGforlXn9ycc9B/RVHYZ7YCMXWKJoGKU7EG+U1iuOPhwCsoKLp
vutn7GdNVYQup2dGrVQ0+fnjq4MZ36y4CIXLFkV8HN3pKRbAY3ztNEXT5q+L
+VQfOZJ9g+vveeWqMYodML90vuKTmN+arLgOHgd3rVU0zZFYCXoolq1o8s8V
0GOtUPSfR+co+rls8xTx8aD9LMVmmYPfn3XKdEVTznKnhu23fdtyrqKfg7dM
se77H5738CWLFCdeBIG5CxThu498eJ6iaR3ElEe88zjYwZYo+uszyYqd3zzu
vzfuXqTYG/PK5ig+kD8g/kQxU9Hf3xcpdkBvsEGx/E4vZ9WsAuZC7FvPNM5z
RhvzZglz0ZAAJPc5Z94AxryEOeapry656JM85wzM09vC/GrZa/E9Pd/p+ueu
jg3bR5h9nwUDlOf0TwPTmqMYfX3uO9v/m64oc3aJf1wDwZcZiqb1F9P6Wu3x
sGOkK1Z6DYStpinfrUPK+JKPhiUrmta55qOHG6/YGX/eZMVKWBmKuHx7Rrpi
UQQ2YCFz4D2wQJLlxB/6M7qNK2L6eXM5ziR4LF9QyKS8WjwsR8aY2aBfrsw2
zlHPQe/iMU/c3X/aM2tCzuT0j7fkPe4x58U/3YFrg6X9tcXMrwds/mzOVQFn
OOjz4mzFja/AgkKWojMadsgMRf/nW6VoOt53wrLloImKxZ+c+sirj32jaPIq
NaKVJ407foWiad0QLG6Xm7IUX5kw6vHfOhQx8SqVk+3M6jOluTPaZa7dfG78
jBgo/bxdZl3c4AGnXBEs6HvMR2G5cHzQOfcHEFwlzFkrs90dx+U6g677Nv6f
y6TcVbDrNz/rMsfh+TDHmO/wcPu+BU9d5DHrY8AnvdfjMp8d90L8Rw44GNN7
hccMw/Jg16CTguUxd+HnEjL+OaSfFy/3mNUwlzTkJDUYcdqHR4eZlAu84hpY
cMxSNM1xmvIonMA3KSZhH3+y4sBXNr099tzVildATPLl6YqQCh3dmMckT2g6
TttjcKzLPAVSk9fnOBgjPcRlLoMxX/UDxryGxyH2/BuPeSEGu4QcXOY802NS
7vNazN92mT/CbUVRjnGeP8aU1ilmUl5nDRTLm5nUT4Ixz0M3M/2+hWznmvhX
W3veZuY2fE8iy/geB+q/fjHmcAzOzTZuB1OOxsAVv5zzwMcFTMp97tkAEu43
KaZcmTd19n82KiaBJk5eotgI84onKMLZt8bFSxRN7xH4fQHzFSvi/ekIRb9f
YJJiU7yAr1WU+bjEtq3hjJSmaMo9/xi3Y6aif/ynKJr6GdpGIQFY0zSny/Tc
0aIVJLymK5bE755Gf6KJjzF3ZSia+p389eT1iv3g9YpdyxWP/wCSWcYo+vn2
oxXLfQN+epRiNfycpyn2xBdH5iqacmavwvuADYqbC6E2KZrul/C2pnWW4gm4
HpShmI/9RFmKpn6nk+F2okeGIi6PvbpCMRmfh5Ypbvz6prn/3Z2teAXE5VbJ
ULygDlxwNyhifPe6QkX/fF+s2BjzdVcpHh8/qwx/8xvFphhwPEZxID6wT1Us
Hg4v9LytaPQMh6o/sWXLli1bB2dZ///3Zf2/9f/W/1v/b/D/5PslTfOcpfeX
/p+8v/T/5P2J5Pslrf/fP/6ffL+k/z6Hy96fCF2sr9WOsU+U/p+8v/T/so9a
en/p/8n7E8n3S1r/7/MxFKIx9v7S/5P3l/6fvL/0/+T9pf8n7y/9P3l/6f/J
+0v/L9/vkN5f+n/y/tL/k/eX/p/8vvT/8s+l9yeS75c82Py/qU/YdJxK7y/9
P3l/6f/l+xrS+0v/T95f+n/y/tL/y37+8nM7nTi3k8venzinCtw4xdT7pH2q
t45f0mPs/Yk3w2uo7WLs/Ymm9zik95f+X24H6f2J5Pslrf+3/t/6f+v/rf+3
ZcuWLVu29kFZ///3Zf2/9f/W/x/2/v9sHNARZibq/zfNc5Denyi9P1F6/0T9
//7cJpdJ/h/HZe+OMMn/X4RBjBEm+X/Uo/WiTPL/RywF8RRhkv9Ha3RBmEn+
/5nL1px91+35TPL/D58IoiqPub/8v/9zZzLJ/+Nr+YPzmeT/PfQQEea+7v+X
3p9omqMivT9Rev+E/f+nfXh0n//G/o+l/r8Jzs+IMcn/fwRjuWbkMw9W/19j
y+w3WtWMMMn/w/SqNWfHmIn6/6X3J0rvT5Tenyi9P1F6f6L0/kTTfCfp/YnS
+xOl9ydKv5+I0vsn6v/3vVGMSf7flOOwt/7/9NtfmxE7PYdJ/h8//hER5j/t
/5fenyi9P9E0r0l6f6L0/kTp/YmmeT4Hqv9fen+iaTuY5miZ+v9xGfzPMJP8
f5Nv+q1++uUQs6z5/6dgDErVAJP8/+Ra93W+uijMJP/vX28jTPL/P1y1IH7n
EWOS//+8W+W3kjdEmeT/+8Llf2CYSf6/Hd4vR5jk//3jPsIk/2/K6fgQLjMN
Ikx67ug5+/4nCudFmOT/L0e/m88k/+/PL8pnWv9v/b/1/7Zs2bJly9b/WNb/
/31Z/2/9v/X/1v8L75+o///f9v+m/n/p/aX/l/3/0vtL/y/7/6X3P1T6/0On
wQD/qOr/l94/Uf+/7Psnyn7i/eX/jf3/wvtL/19W+/+l95f+X/b/y75/6///
N/9v6v+X3l/6f9n/fzXOOw/vsf9/HA/gItX/L71/ov5/03FaVvy/7PsnmvKk
ZN8/Ufb9E2Xf/772/9snrLn9iveiqv9fen/iyponxz+JcJnt/++I91/Fqv9f
en/p/2X/v/T+0v/L/n/p/aX/l/3/0vv/0/5/6f1t/7/1/9b/l7P+35YtW7Zs
Hdz1t/7/0Mt/6Yt9q885kqNQ272v6N8PdldshvcXPRVN37dRZM3mcycucCQf
xMbSHMVb8blEE9Iw28xPVYS7l0GT1yiegHmt6YodMYizUNHPj/IUm6Nv3KJo
8gbJ6EXeUzTlH/n5yZ8q+vfvsxT958UliqbtnP722HNP67JM0c+/XaNYa+1z
8f9SFP38z7WKFdEfzFE0ebMO8afBOz+coNhp2fexb66dqth16kcn1E6Zpdgd
998Zii3Qj81UNP083fE5ZrzmjvBlW8snKZp+HtNz0/Ymp8f3jCmKfSEmcOZc
RXy83KxZsSOI/dmKpnWHdHzAX6pomgPj58oWMf0+ymxjHz6k5Ob+7DGv/Cja
9KNoyAHbfkSRx/Sfk0NOw1UQZFjCnI4DGHJLc+TCTPLD18T3is+7ZSqa8uMm
xo++nRU2KuK4iJ9SFbNwQSdD0TSfwfcomqac5dhGSKxdpViAPnihounzHXoE
BLqNVmyGgbaLFIddAp9ouuJA7HfPUPRzs7MUTw6XnPnxxZoyP5gIaZjvdMxn
Un5ibuqvd0fHucxT30re8PVNAWdRq2l5WV94TMr3vA5iln9zmYWYIx9wThkJ
E2Jcpn+8BJyjIe6uajFz4dzq0cqTcow+fBzooVqaQfQWGYr34flprSIuN21f
oNgM1xNmKFbEdRjNrphTOk9xNOqDdYqv3wgLMZmKsaZwABYyB0/eEd91sxy0
Sfkx5owYdJZnO6jJanlMykXFy3kVj3kqtI/XCzq4/F/NYz60EBaigg5a6Cdc
ZuOt5Qe+sinHqd8DTqQucxKu+wcc/GtHlTC71IGF4VznoyV3t57Vx2NSHjTq
1GM9posLckEH43Jf8piXwO7yfdBBPdrRY+76HoRv0GleHVYEPaaLDfZBYx5B
+RlLLz2pVRFzYT04c2U79+JAtAzFifDaxdupihhb3nWtIp42C2YotsB5NQsV
+8Nlu06qouk+x/eaeczjp4CITXPqdJ64tdELUeaoqWf+cU0sw8FlyIou8ze8
DuQ4YNUuWe4yKfcWT1s1PGa/CkPOGH9R0EE9N8tjfluu5YZXOoUcSNke+a7H
pJxf0/Fu6vPHzfRJIXPBbrgRyXKW4npahqJpzkzHFl/e9dyODEWMdX++gFl5
7FGNzv0hwxmP1xOXOQ0u+6fmGH+vn+vBmaiAOQ7igDtlGnN4t7asenNBaKOi
f71drWg6n5i8vZ9HP0OxEfZHjFQ0+uR7IKB6hqLv1dcpDm1x4U0DT05XPAHa
fX7VnBrfy956KVNxEvxYdTIU3+pZroF7bbriERi4m6FYfBSstKQpokavtEnR
dD01/TyB9uOXT3owXdF0ffEgFnjUekWTV1+F60TzFJvVhAXjDxSrHd3u5Atn
TlXc2gaeoGYoNoM2neBixWMxJ3aV4lb0wasVK2KjTqriBtxfMhRlbjoxhPcN
GxWXxr/74PdXKuJj1WnpiufjAZ2p2B/zopMVTf4cVru+6JGtaDoPD8ADbYFi
LXxRL6Q4B28sixQbXgJn8GxFUy6zv/42T9H0nD7qAbiRm+hINsM+vh6K/46l
sGXLli1btv7lsv7f+n/r/63/t/4fSb5f0tSHT75fUnp/Ivl+SVN/uPX/Zcv/
k++XlN6fSL5fUnpAIvl+SfL9koeb/yffLym9P5F8v6T0/kTy/ZLS+xPJ90tK
708k3y8pvT+RfL+k9P5E8v2SpjwC8v2SZcX/k++XlN6fSL5fUnp/Ivl+Sen9
ieTFJU3Hu6nP/4IB82f0Kh9j77+v/T/5fkny/ZKm34t8v6T1/9b/W/9v/b/1
/7Zs2bJly9YBKOv/rf+3/t/6/0PU//cb+e41SytkMsn/m+bAm/r/TTm8Jv8v
vX8i/2/q/9/Wx2ny4MIok/w/2OO5/w0yyf+PwTlkISb5f5iicP8fuUzy//XO
gipgkv+Pb4y+t76Uyyxr/v+7pav/evqkfCb5imrxp9TZ90eZ5P/x9FQ9xiT/
H4TLQI0Yk/w/PJU7p0SZifr/pfdP5P+lB0zk/039/5SHK3NxUcd/EmOS/8cx
LcvymQfa/8/D61sxk/z/x/i5RZmJ+v+l90/k/6X3T+T/pfdP5P+l90/k/6X3
T+T/pfdP5P9N84hM/f/+/LAok/z/mMLbvl+6Ope5r/3/IBjb8Wkuk/x/Ng6O
iDAT9f9L75/I/0vvn8j/S++fyP+bjve97f+fhteTKJP8v2nO/Kt4IESZifr/
99b/m/r/MUZ7U5hJ/n91/Grc99kQs6z5fz9fO8Ak/+9ffyJM8v93vzh0YcGf
ESb5f//8G2WS/6+PJ/Yok3z7J2s/j18RI0zy//gxOwVM8v94eLTOY5L/rxW/
2p9SIZdJ/t90Pf0Nb6DymfTz4LcJ5zGt/7f+3/p/W7Zs2bJl6yAp6/+t/7f+
3/r/Q9T/m/r/TXPgTf3//7b/N/X/S+9P9D1W2Pb/72X/v/T+0v/L/n/p/aX/
39P+/3/b/5v6/6X3l/5f9v/j2N8zowdN/7/0/tL/72n/v/X//8z/m/r/pfcn
QppI1/qRf63//zm8/kRU/7/0/kTUeW0iqv+/rPh/U/+/7PuX/l/2/5vmzEvv
v6/7/3E5clZU9f9L70/015vDZbb//+QLZw7/YUKx6v+X3l/6f9n/L72/9P+y
3156f/b/GPAUtf3/1v9b/2/9vy1btmzZsnVYVl+8H3zKkfTzCd9XHIUe8W3F
ck8vr/r08hc1cX1goCKkLH06frbijR88XfL7pAxFU86jn6+XrijzvYhNseE3
RbEh9uWkK6Zi3max4g/oa7cqohavVaJYN+XUX57tt0LR9LnURW/0niO55fnf
36owZKpiIwwCXKro5+IuU3wc/fRKxRvrHVG0+Mt1itOgTTptjSJqprNWK/q5
Z8mKplxakw/3n29mKA7F9aiFiqbt0BeWf3asUuzZ9ZNtfZzVirNRgC5QNK0L
JOM8irGKzeAxu/ZExf6Xvnx/4DtNP/c1SbFccxC58xRNeccthiQNvSNtiWKz
KpC8uEax1zH44KaIcZtrNzNxLMaN2U5gDCT2uUz/OT/g4LLEZyXM+8849Zqh
DfOc3zEI0GO2xxy+kDP3Kniy95gpoMmHBh0/ptFjforP8yEHY62Tipk34TcK
OB9ADHP7dMUt6JnWKc7GgfGLFatCTO6tKxUbffbHI+svXqO4HZ9rxyn658Uh
itUwx3WmYgrmws1WrAtxoc00/ZzncYoVcYFmomLv+F5a9a+VivN3jpx65h8p
irXwBLtB8bUpzZ3RT21UlPnKRD9Pr4BJOYawijd8fYzZdHqDEad9mO388QtM
/neZ92XAAlWgNO/aZZ4DMbw/Bxz/y7lMHCMzPODAUVD1Zo9JOa1J8G2ODjPp
z7fiz5GpaPI5G7aAEM5UrDb/g09Trtyg6OfPz1KsPwdWnjRrXVxY/9g3Viu+
CHGvE9MUW4RhwStD0fe4+cw26L8ynCe6f3P6/A9izMawTFop23kVltdu9Zj+
ukbQ2YELXh6zVdoZV54ZCDrlimBh2mNSLrDpuL7mGEhg9pghDPaMH+8QH/6L
y6QcVUgffnyAyzwSlrkqB0rzPD0m5fya8keqYACxx3wvfjXq/k3QeRX3X5d5
H368Oca59w7mjhYyKWfZv66mKZ7zACSSpij6vme9It6mJM1XHPxT7fimSVLs
3QtqraLpfJj0PFzg0hT9BbB85vYquILg9KkOxjTGpPzcDpgb7DIr44bIcXDZ
4w2XSbnwpu0Pdv7cNz3mfzAH1/zneBgMcZmUR3wGnhc3M9Mw+DyrdJ0/U/Hy
a3vF+nVIU/Tv79IV/fuRFEW4CwpUTFXEZZ7XNjPb5D783fO/Zzn3/vTB2cs6
ZCrWwBNmumKFZ8HQbVLEw/iSjYp+X8Zixe4Qh9HnC0X/ejVEsS+K7k8Um2XC
gvh0RX/9eaZieVwfWKlYF24LvktTHAC/xlepipfD5h62SdHkV3diQ0OGounr
YHtBl3WK/vlgtaJ/HV6liPHDK1Yr1ofb6N5rFHeNvTP+3wbFncdVP+/qlksU
/dzvcYp+zvPniv75cZgi6uDBMxR/3p3d+9sGyxVRl9ddqzj2k77PPnhHiqIp
z/dZXAjIUrwxfjaNbkxXNO3nR8BtXO8sxTRYBvgqW/EOnP+meSk2umxSLIeB
Nv0VK+IBuEHRf582pNgOljEqrVWsie8vZSs+EIAHnJiiqS/C1BfUB9pfXl6l
6OdXT9M09DeOwuP4TcW9zvM9RPsnbdmyZcuWrbJY1v9b/2/9v/X/Jv9Pvl9S
en/p/8n7S/9P3l/6f/KD0v+T9yeS75e0/v/g9P99C566qP4dUfb+0v+T95f+
n7y/9P/k/aX/J+8v/T/5/UQ8VP1/7+HQsBdl7y/9P3l/6f/J+0v/T95f+n/y
/tL/y+Naen/p/8n7S/9P3l/6f/L+0v/L94+kd5b+n7y/9P+y7518v2RZ9//k
+yWl95f+n7y/9P/k/aX/l9tf+n3p/+WfS+9PJN8veaD8P/l+Sev/rf+3/t/6
f+v/rf+3ZcuWLVu2DlRZ/2/9v/X/h4//x9eSZ+cwyf+fiA+SUWai/n/p/YnS
+xOl9ydKP0iU3j9R/38+zpXJY1r//+/4f9SpTUNM8v8X4aCbCDNR/7/0/kTp
/YnS+xOl9yeaPL+p/x+mOIdLokzy/6b50vGLZPxKGWXua/+PmvOGHCb5/6fx
H0aY5P//i54mykzU/y+9P1F6f6L0/kTp/Ymm41p6f6L0/kTp/YnS+xON+ePC
OxOl9yea5t6Y+v9hmn7S8xEm+X/cfJ+HmPva/5+Ig3cCTPL/p+EApQiTzod/
TIL7rwgzUf+/9P5E6f2J0vsTTdtf+v1ElN4/Uf9/j1vgxiPKJP+Py2L3Rpjk
/+fBmLBxESb5fxzfNjTMJP9/+1gY4BNhJur/7/MODBKJMsn/4zLppAiT/P+p
eP6OMMn/d7pr81Era4aYZc3/F8Xv3hv0zmOS/5+JAyojTPL/eBvxXZhJ3t6U
c3ELfs4FTOv/rf+3/t/6f1u2bNmyZcuW9f/W/1v/fzj5f1P/v/T+ifr/D5T/
/xF0yU+u6v+Xnsv6///N/38OWqZRWPl/1E8dw6r/X3p/ouz7P9D+30Tp/aX/
P1j6/6X3l/5f9v/Lvn/r//83/+/7xJjq/5fen+hvv/C/1v+Ph1mnYtX/bzof
Su9P9E+vEdX/X1b8v6n/X3p/6f9l/7/0/tL/y/5/6f2JqC/7xlT/v/T+0v/L
/n/p/Q/1/n/p/aX/l97elHNh+/+t/7f+3/p/W7Zs2bJly9b/Ty2BXNm7HMlk
9FUvKPbF57Zeir53fEexHD6vf6aJ3+cRRYxjXLVS0b+PzlE05bKtgfbg89MV
n8bnnvWKpvtYSEdqvy1XEazp5deWKLY4Z8y8x6Z6im2hTevkDYqmj8WUp+xv
1/GKF7xbNTf111mKU+Bxv+J8xZ0VINlypaKfX7da0fT8UrfzxK2NXliv2DYK
RiRZ8ZyrW3bs9nqSYm94XD5yhqLJwyflZX1xwYB1iqPgtvucdMU16PcyFGXO
HxFjI3ttUtx6PjxYJSv6ObrTFDuADnhN05RTjLtj9STFLdOLXng+Z5piORSe
UxVN6z7Hv3NFrcavb1L8GA+oTMWnjoIvWMis8SIsDGQ6OScW3HSr5zFP3N1/
2jNrQg62eX+6hTn/MVhYKnAgrW/0nyXMVfD4+Gueg4/Tc0qYhbjOmOd89vE9
W27pWcL8EP1YroPLS3PCzIcwODPk1GtxXKe7NmcpmuY8FGPfYbKin/OWpOjn
Uc9TNOWsmXLofP+zXvHpyL0ZLZLXKg6A5c8fVygm4frbXMXjcdlmrGLBbxC8
OEvxAvQE8xRN60q4vFq8StOQhzgO4kivK2TeA/HLizJLn9ddZvxDrzHsuxxn
wstvLDpnvcecjsd1yMHDuGIJ81kM1Mx1hsAyzGce80NYFm4QcoY2hAUCj0n5
0b/B8sY1HvOusy94PKtH0OlWGQKIi5h1IGa3do7TDQeRZO4xTdedxRCL++5c
xd64zjZTsfX1ECi/SRGXBwZlKj7289wpOZdkaGLecQGzKh5ImU5yJVixcJnF
x+O/KO1X9pio4XcEnfe63FTviCKPSfndOEboU4+JsaK1Q6XHgce8Hl7LaWae
3z508K/J299xmZ+cDKYq4ODpoIbHpDxZbL+PuszTsd8g4MxoAx+oy1zZv+Yr
E0YFHEipPqq8x4zfJLwRPilo3A6m955eD66/55WrshRrX3lmoP34DEV//TZd
0TQXaN15P9dbOHeBot9/8Y1iJ4ixbb1ScWzhbd8vXZ2mOPihC35b/almAM/j
KYqm96p+HggrBjHmrXC6PSrLwd1uucukXGBYbZzVxGMuKviz7g2PBZ1+cJi9
7TKfWtxzULWjA86g676N/+cycXxQSsDB24I2HhPSlYu/CpbOaypm3gqX3xE5
zvPNp0xv+VYhsx4eMFnOWViZiqb5Wqb7xr54ItqgmHlWfvwMm6KIt0cLNinK
/HXiVmh3aJOmeDw2/m9U7Ib3EcsVR82DC/EIxZ0wbi1rkuI5q3ZtaNx0juLQ
O2Dhb64iTOm6fazmzmf7Xfry/ZqN8AXEVYr/OeXSti8O3aDoz/VKUfwZlsHS
NTEe9eJNinD1WH3zasWmcNqqtlTRtC7fHXO3kxT99aJkRX89R9NfR1qseA7m
HX+t6G/X8YqmvOZm2PcxXNH0eQ24+cilLzVZrth93AtFkdfXKGL7yOWbFOfg
Qli6YgzikztuVDStd/s5wymKb+F6VIbijbUfOrZK/0zFcl2fih+x6zUNz6em
59BN0LZ1aZ6if7+fqtjgrtsrjT0qXfGDXVc0r77EVcxeBheisOIwfMErVdH0
/Oivc850JJOuHb5+Rf+vFJMhPrzJu4rl8ILeTXNvfb71/7Zs2bJly9bBU9b/
W/9v/b/1/wb/T75fUnp/Ivl+Sen9ieT7JaX3J5Lvl7T+/+D0/+T7JaX3J5Lv
l5Ten0i+X1J6fyL5fkmYztKtssve/1Dx/+T7JaXvJpLvl5Ten0i+X1J6f6Kp
f1t5/1KS75eU3p9Ivl9Sen+i/P2Jz01fMLDxuJh67+lw8/+mHAHp/Zmlvl9S
en8i+X5J6f2J5PslUW/d5bL3J5Lvl7T+3/p/6/+t/7f+3/p/W7Zs2bJl67Ar
6/+t/y+D/t/vDw4wyf//gHML8pjk/33vVcAk/z85B8x0AfNQ8f/+PIpMJvn/
zG7w4BZmkv//HBufo8xE/f/S+yfy/9L7J/L/0vsn6v9/+JKvRlz9fIxJ/v87
/HzymPvL/0+PP6U+0CKbSf7/o9Y3P7vxviCzrPn/4afBJ5HNJP9/xviL5jnr
IsxE/f/S+yfy/9L7J/L/0vsn8v+m/v93tv934NrPo0zy/KY/31f+fwz62jCT
/D+22adEmeT/MR65ZpSZqP/f5L1N/l96/0T+X3r/RP5fev9E/l96/0T+X3r/
RP7f1P8PZ+PWdWNM8v+bzwXhFmWS/5+A86Lymfva//u+OZtJ/n8BxOf2jDDJ
//tzTSJM8v83DYQNHmYm6v9X3j+B/5feP5H/l94/kf/f2/5/f95JlEn+35Sv
8eSdXWY2ihQz6b7xYtyPwkzy/0e3g4l4YSb5/67zMhc++2OYSf6/GsTx3B9l
kv9/H7d3hEn+H6aXDO4cYh4q/v9m9NNBJvl/vE3ZHWJa/2/9v/X/1v/bsmXL
li1btv5BWf9v/X8Z9P+m/n+YKl/t84jq/7/spFa/HNkrqvr/X50RO/3216KH
Tf+/9P7S/8v+f397RFX//4Hy/6b+f+n9iaY5z7b//5/5/22j6/f46MUi1f8v
vT8RUi2GFkdV///B5v9l37/0//u7/196f+n/Zf+/8v4J+v+t//97/2/KPZHe
X/p/2f//SvysdW9GZL/3/0vvL/2/7P+X3p9oyhE42Py/7PsnhvHFj5jq/5fe
X/p/2f8vvb/0/7L/X3p/6f9l/7/0/tL/2/5/2/9v/b/1/9b/27Jly5YtW/9C
2esUVl98vnnCkWyG+cCvKCYvBn//vGJfzB3qp+jnoPZX9J8/Fiie3DOv2YST
shVHo/ANKl4B7cFVMhRlvhoRv321VMWOoA+rZSj6z+VhxWe+AvH1naI/37xQ
sfj021+bEftc0fS5YNvwGYMcSd8ff62Yjvdx8xT9/MBkxaSWEIy1RLHWKxNG
Pf7bOkWTJ/c96CrFzihg5yuOws9tguLPGGi1VHEGPnhmKPbIGZHa+eFsxWNO
8d7bdUWmYhF6mwxF01yg7teWD47pvklx/u7r39lw8krFrd+2rHpzwXxFU86v
n7uo6T/fT1bsiuJPc3Dn1Ixu41YrZkFc38gMRdNxgfGDQzczKf8R7N/OkREm
jgdZnOdUQVETZlJO2eDJO3o2OLGYGQJtNijHebzZG+dc/o3HvPDxrB63tAo5
iP4lzAsHzJ/Rq7w5F6DxZVDFzNNzU3+9O5rj7IblltqZii1fg4WfVMXu8Ntd
sExxPj6/jlLE3SK8UtH3sRmKvk9LV2yGYlETNevONEWZy0vEZYBAsqZhHa0R
riuOVQzh+sAYRT93d40i2NeqT2co3oCD2AuZcJasHs10qsFp7vRiJnlX/3j1
mDejlww6Hy25u/WsPh6zT6feK6//b9BBPbTQY/a99aVTKjwbclB3/uUx/fNV
yHkZrz8eEzXdD0EHY8jv8pin/zWrSb+RQacRaLg2OYr+OkymYv1lHX764Ow0
xbrXgbiYp4jxh4/OUURt3CJd8XwUEdmKfo56AROXO9tkOrEHe5z5xG1FTL+f
PdvBOMNqHvOhhbAgEXTWtoagUpf54ztvedOLcpwXMS/aZcLqywk7A87W8pBA
6TGv/H179RePCTkZ6Ds95pHnw4J00Kk669sF9Rp6zA8xQDXoZN3xSMUOV3rM
494YcsMHT5s/lwF/5dZYkeYye8f6dXjoi4DzQLfXB34902XWXAFB7AFnYlP4
wYqY901+NH5IZjsYUzJ+M/NHvE5ll56PNjNPx58326mTAsInU7ESVoYiLlfM
S1Oshf0CaxVNOarbn//9rQpDhiuafGwVPGGvU2yJF5oUxaaYk7xOUeZ8E3/D
PNV8JuViYwzzvBhz6UtNfpzSNdupAprsZZfZPw1uRHKM+Q54W3Oqx9yGeaNB
52L0xB5zGQZ3B52e5Rq41zbymLd5tba1uy/oVOoIe85mJu4Ox2Y7l0Gc8z2Z
ijK/mYjfbvZGxYp43klRNOU770D/vUYRl21mpSia5guF4PI2bqOinx++UtG4
/3wBNUmxQr1u8VPRQsWmO1pdv+mn5YoDPk25Mm/qKsVVNU/+ctlr8xQxtnfL
QsX+r90YvPzRxYqoU0fMUTTd31aE27vmCxTxY7h3hqKfP7xM0f936xX93N3V
iiF8L3G2op/HO0HR709JUkzC6/MXiqb+n9Z4HE9RXPcpLPDNVKyI56fliv52
Xa0Yg7iNp1cpmuZcDX670hU7WmUohh6AO6Q1iv56uCZq91mZinn4PlK6YiM8
76xQ7N3m0ytvWTROcQseB0sUm8Z/69M+zFbE28TXMhQbYQ77UsXNEHNzQ1Tx
ke/gG7mK7eAy0Ctb0fQ86O93cxxJ/3l6qOb/Y+88wKuqtrWNFUVULCgiKnbs
2LEusIIFERsWFFGsqAjYEaMioiiiFBGRLkV6EemEACGEhOxkpyeE7BYQUbGg
iKL/nmMxxr13fP88GzkREpnj4Xnee48t2Xu1+Y6x5mdbv9MF+GVgDcpDbot0
nsSVK1euXP2byt3XqJz/d/7f+X/n/9n3a7Lv16TT9ZMK8f7My2gDhph4f+3/
2ftr/8/eX/t//V5ACfnpmHh/5/+rhv9n369p239ee3/t/9n7a//P3l/7f/b+
2v+z99f+n/1ydfP/7Ps1/fd1ouL9tf9n76/9P3t/7f/Z+2v/z95f+3/2/tr/
s/fX/p+9v/b/+nvR3l/7f/b+TIqH/iMq3p9Jr8f0j4r3Z5aYcdiBUfH+zv//
X7Lv19TeX/t/9v7a/+v3O7T31/6fvb/2/+z9mez7NZ3/d/7f+X/n/53/d/7f
lStXrly5cvc1v5z/d/6/Kvt/Wu7PLxGy/9+P1gdRIfv/HPLcESH7f2/kk/Fv
KCJk/2/LBagu/j++yC5YcUeekP2/2Y1+cOuIkP1/6ZNnn3Tz+LBwZ83/a+8v
VN6fadsXyDb/Txr0o4iwsv1/F1p45grZ/2fT51oiZP/vr1PDQvb/H9BGOsVC
9v9n0P5YxcJd7f8fpl8kT8j+fyqdfxHhjs7/a+/P1N6fqb0/U3t/pvb+TO2X
mev6mC8kJmT/b+z02t8jwsr2/ytSzMY1YSH7f38f/6hwR+f/tfdnau/P1N6f
qb0/U3t/pvb+TO39mbbvRXt/pvb+lT3//4D5GJdFhOz/zW5mgw+ICNn/5981
ZvH4+4uFO8v/Fz5ohFK+kP3/Q2YbnTEhIfv/sk6BPzbNKxey/3+myWN/bmkb
Eiaa/9fen6m9P9O2v5P2/kzt/Zna+yea/6fb1qSIkP2/n5cTFrL/9/dFCwnZ
/9PXWl4oZP/v96kLhOz/bx5vDsByIfv/xRvNiRYSsv+vs8zshF8gZP9P2yTd
WSh0/t/5f+f/nf93/t+VK1euXLnagXL3NSrn/53/r8r+3zb/r72/9v96/l97
f6YtF6C6+H/b/L/2/tr/6/PC7Hb97vvR7Z7/13P/QjX3X9n+X8/9V9X5f+39
mX5edbjKz/8Xm+3sm5bD/L/2/swWw36O/4nA/L9t3/Wq5v931fy/9v7a/2/v
/L+e+99d/b+e+2fquX+mnvvX/l/P/2vvz/yI7qvhKjP/r72/9v96/l97/0Tz
/1XN/9vm/7X31/5fz/9r78806SSzp4Vg/r9LH/PGTDnM/2vvr/2/nv+35Qu4
+X/n/53/d/7f+X9Xrly5cuWqEuqfvq9Vl/sm+f67PaAtD8iS52t73khKP+i2
j0uGAaeaOLe7RgFnTzSD2CuAthzSglHGzAaBtve+jVUZedIS4LoaN6W/0i4N
aKZx+44IA7+n/K4NwEGUrxoC1qPcwjFA29diW8fZ+gjjaG57NJA0etksYB0a
GF8GfJnyeLOBfWljiCygnxe3DEiP7yMXA22fQxOz/B42F2jbt+cIo2FaBIH+
3Dmyl4lJvg1pO05ONa8bhALAh017qVk60JYb66/zhgObUz7bJGDg1FdzTn11
OrAOeZ1xwEMvNgvzFODzg+aW/tkwCKTT9dAA0M9NzgbS6XpcLtDmhXrS35AF
tO0bcw3Ni5cLL8kzgZT53gOLvol+ccVaoZ83XeTRaT+7Qnjvr2f9+eiThd7y
Gy9+p1m7PKCfh5YDHPfy6/MarcgA+nmM04BJWyf3m/DLUqCf85gF9M/iALBg
vQl2zAb6OZ4B4BFbzERrNnDreBPwHQC2+dY0njKAfxxhhOoiYMPlzzZY/uwQ
ILUD2y4Fnk9BvwFg5FBzQGYDbfm5/nUUqfOnmf6+MWXC+EV1xLWzgt4kum+U
C2vRgZRvzReobeJOG6wVvkjB0UWeSZks/bBcyHmyfh5gEGjb98N2/vrn9wJg
5LVZPTf+FAD6v08QeDN9TqVC7nOZLvAho2PCbxs/N2drs3zvaWo0xIRXUBBm
vmfOqs9WRIXsPQY+3umLI2fHhNSOeyLf28+0tUZUCDuZbVsuL/QoNrtvhZBu
+0cXenS49K8QPmq22Tmh0LukeNLM7+6tEOaSVy3wnr7biPqY0Fi5NfvleVPN
ZSG4WvggCdPgtv2FyoT+7x30wiR2S4X965mE1hxvuIkf3jcbuHFsavxKgTzn
JGNwA8ADTYzoAKTOw2Z2JT+cCrzJXJ5iU4HlNE/xEbDGVeZKOhZoy4GtZ+Kj
L0kH/rj5vPgdbiWwRnH9lKyrVwFt1/k1YXOgrhb2NePvTwW9eVQxoe/98r1T
zt1vYoN7KoRmOuTwyQWe6cqNTY0J55EPzPeo/XZyhfDR39q81f2aAu8t8sQV
wicpP73Ay6ADKibcQn97vve1ORzXlQk/MYdVh1zvtWPNbx4ANqDrXwZwg2nn
F64E0mXikRVAvw+2HOjfx1YgqU+4HDjaxDgXLgP6eewzgX4fexhwI33PE4A2
zz/udhPgvhJoy9v1j9MUILUPK74EUqxv6TRg8psvjfzz/anAJhQAPQEYpeff
r4DdaP5oKdD23NuQ+nspQFt+brs/zIV3KLAhnVD9gTVoI7ZBQD8/djLQf+5e
DIzS/SEZWJsaeAuAE81jQZ00oK2vMZvmRhYDqR34KfIJevFlKXCMWX70Xw7s
S0HzqUDbc/VIE8Ocmwb0c72nAW1zEX5frwBo7loXfJ4DtOUjUzx4ahlwIG08
FwW229e8IVsMtM1ptKI+zACgv54YC7TlRPvr9e5IW5GfuMIDunLlypUrV/+m
cv7fL+f/nf93/t/5/13k/ze8YARsTLw/k32/pvb+zv/vHv6ffb/mHbRReEy8
P9P2foH2/kz2/ZpVzf/b3nNh36+pvT/TNveovT+Tfb+m9v5M9v2a2vsz2fdr
su/XZN+vyb5f0/n/yvX/7Ps1tfdnsu/X1N6fyb5fU3t/Jvt+Tf99qah4f+f/
nf93/t/5f+f/VTn/78qVK1eudody/t8v5/+d/6/C/v+cr7y0VkUlQvb/xj4N
OjUqZP9fn8RjVCh9APJAUSH7f9v+wM93NoPDJcKq6v8Lxx16xIyvg0L2/++a
MebDokL2/ya198z3wkL2/+v6Xfl1vysjQvb/tK1Av6iQ/f9JZnuXQyNC9kI/
ePdevfmlsJD9v23feNv8v83/a+/PPI/yAGJC9v/+vhqlwh31/3VoQZ0rZP9/
Gu3XHxay/7/l/Y/jZ35Y6J/VAW/enmaH9oiQ/f/EKcawh4Xs/x95e/zKbw8u
FbL/931hsbCy/T9poGm5Qvb/j9+wrOjtrLCQ/b//fUaE7P97bvyp7/KPI0L2
/5tov7eIkP2/v/9WRLij8/82/6+9f6L5/1J6Pz4qrGz/bz7dWlvDQvb/tM34
2VFhovl/m//X3j+R/9feP5H/194/kf/X3j+R/6/c+f+IYrZHGvr6iJD9P23X
VSMiZP9P2/llhoXs/9cvNBvUlAh3lv/fd6y5cAWF7P/voxtagZD9f9r+0xae
d2ChkP1/wGyXc3hYyP7fdp23zf9r75/I/2vvn8j/a++fyP/b5v/9/JWwkP0/
XRaHhYTs/99teExSi5dCQvb/8YeFlPYXFQjZ//u52PlC9v/++2wFQvb/ZreW
jx7IF+5q/z/qqw6T+uxfKHT+3/l/5/+d/3flypUrV66qdTn/75fz/87/V2H/
b5v/195f+394D0B5f+3/9XHie7hwtZ3/195f+389/6+9/86a/9dz/zvq/3fV
/L/2/tr/+2dzAPy/nv/X3p95LwmnyE6f/7+2tPCyfS5cA/P/2vtr/6/n/7X3
1/7/v53/13P/O+r/qf0UjO30+X/t/bX//2/n/6u7/7fN//vX6SjM/9O25p9E
LPP/EZj/195f+389/6+9P9Ps9u+lhavM/P+dr1za761DQjD/T19D8xDM/2vv
r/3/9s7/VzX/r+f+tf/X8//a+2v/r+f/zzUxAKXlMP9fhwIFyqvt/L+x7q2u
C7n5f+f/nf93/t+VK1euXLlytT1VXfw/rSeu9YBfmAfFdkhLX8B/3n8D6P9z
SUhLNTExsW0WeZq9qAqBtXzhD0ynXMUAkGLDjkwB2tZlD1FubTmwxCyPj10L
XNfHrMQiQIplfS4L2Iq82migbR1Xhz7voUDfr48AJtGD+gRgq45mxbUUaNuX
4/ZWM7pNvCoL6OfgzQf63nQx8HkaGEwG+vld04FNaL+IDKBtnx+dX8uc3Gf/
YzMOywP6HjcXaNt/w8/VzQba1h1+DnZ/oC2nzD8epwNt+X1NSbDPA+rcX+at
lCMdBNY38b+nZwPfJn+LzIkfvWvCWcA+pz947qdDVwLX08bP6cAONNeeA1xP
fiUmvPA188Xke6TFa6wTrp9z4qlLt8TXVTRPGRZ2ohcQirxrjNbqlQP012cZ
QD8fbxpwVrsD4n9SgTp/mrnyFRNcGwS2vyup9Mmzc4EFdbof++PmHOAIozlT
kBtozjgbaOuzDKbjZQVwNvm2McDhk47/4/LoYiCNxx+WA9zqC33gwuS2JpIa
aMv1s+Xu2XLAbfmDxe89+05u6zLhe38Vxa/QQY+W8T9UCKk9Ulroxf+mvb+u
ERL6+ZUF2/IPc5E/dGj6eqNUoG09nrS59rw9owuBG0z759YsoO38bZrWqujB
9TnAiXR9iglJ247P88ab14LmxIQzapnGeb70O3Tfw9iP8IaYMHffS58aHsz3
3qHg7wphVwqoLvQOaHHb6auurBC+QGXfz39j5oT4v6Jc+KFpy9TM96gt9EaZ
8AXTXv4r6G18PXRgzcws4BsGDyBtx1U/yudFphaZoGukzoVl2vaFs+0jdDg1
qlKBG26dfexb30wD2u7XF1A/dhrQ5idt/srPn1wG9P3TCuB9JL6RTx0YWnv8
B0VCip2st8orMf/5gVEh5ylf1vmqiVNuigk5F37hbeZBIiospfM119ty8VVH
LTgrJryDKs8jzZcdE352UeDxvT7L95IPSV/31N0xIeeM+/2imJDibQfnbbtO
lwlPbF6zXeuyoLdm4JeXnvJiABh/mPow6ZlVQD9vMw1I2xrduHz7SefhEiBp
+qO/BD5Mv9BU4GOTzIPNDOC6KWue65w3GXg77Z+2BDg49lDdLYdkAuMXg/gV
IQC8hhrYmUBb7qqt/2Xrv/v9inlAv3+4HDjStOnqIddRf2As0D+/pwAbUw7q
JGBTem7qArT9/KOf/PTcsz+cC/T78/OBOjeaaZuPKqf3cJYAX6Tr8XKgebp7
8NyVwOF0XiFtz0t+vzEb2LbEnMg5wM2h8zfU6rsSONy04e+eDbTNOzXNMTfE
RUBbf/kealvmAf31TQrwjUYXfdFjWSnQpC0PqRMB3kKDNaVAW15wp1/MLz4c
uF/agoqrckYDW5XtteTog74A1qAHsDeRLs/XlStXrly52vlVXe6zzv87/+/8
v/P/VdT/s/fX/p+9P5N9v6bz/7un/2ffr8m+X5N9v2Z18//s/bX/Z++v/b9+
30F7f+3/2ftr/8/eX/t/Pc8/qP+vyRt7xsT7M9n3azr/XzX9P/t+Tfb9mtr7
a//P3l/7f/b+2v+z99f+n72/9v/s/YXbfL+m8//O/zv/7/y/8/+uXLly5cqV
q79d1eU+6/y/8/9V2P93fPm7tP2nFQrZ/9v2+e92lBHXUSH7/zH0/npMyP7f
3889KmT/b9t/u7r4/xNPMFUqZH/4YuNbchcdEhWy/6flVr2IkP1/wau9/yqq
Xypk/+/vT1MsZP8/8AQjUgqF7P+XNpza+bEPC4Ts//e81Rx4ESH7f+39mdr7
J5r/f5Y2cIgId9T/f3HFZytSeuUJ2f/vRydaVMj+/8KVy0//+cSokP3/HnTA
RIXs/+cNyI9/whEh+3/fu0eE7P9T6YSICNn/HzJ6r8anfV8i3FH/fxxd/4JC
9v/+XG+pkP1/y16bBjzeKSpk/2/Smq95IiJk/3/6qiu79WxbImRPS//vHqVC
9v/jaN+RiJD9P53mp0eEieb/bf7fNv/f7KeC7y+dExVWtv83Z+WDd4WF7P/9
60pEyOfvM3RcR4Ts/7X3Z2rvz7TlHWvvz9Ten6m9P9O2n8/fnf+PXwzid5Sw
kP3/lH3unbrPvWEh+/8FZxnBEhbycfUJbZAfFrL/P4/2rwoL2f9TfEDnsJD9
P+8Lp/eHu/LC++e2qF0qrKr+P4kutHlC9v+nfW8+2AIh+/8K8sTlwkTz/zb/
r70/U3t/pvb+TO39mdr7M8H7J5j/X9jmx94nLwoL2f/TY9axYSH7/zWf3nVY
1rvlQvb/je77IGVTo3whe37b/17V/H+DpBYvHVy7SMj+3z+vioXO/zv/7/y/
8/+uXLly5cqVqxrO/zv/7/z/Pzj/b9vnX3t/7f/1/L/2/tr/u/n/ypn/35/O
y9B2z///Xf+/q+b/tffX/l/P/2vvr/2/nv/X3l/7/509/1+X8gciMP+vvb/2
/9s7/39QxTtbLr4qAvP/2vtX9vx//CC9rPNVFTt9/l97f+3/t3f+v7r4fz33
zzyAxGwU5v+199f+X8//a++v/b+e/9feX/t/Pf9vy4Wp7vP/l1MuRDnM/2vv
z7z/ZrOTe3i75/+rmv+3zf9r76/9v57/196fOb9rv3p731lebef/Z1FwS8jN
/zv/7/y/8/+uXLly5cqVq39T2fw/BYO2RlqeH2z5v+UXPXTfCV/2B1r7Apac
O/N294SHcoAnm1i+jUVAnTfJtPki3xeuAJpV9q0fITuQv18D9OdE1wP9PL61
QNv+A8aK9Lx4CHBjfPUae2gAkgKwRgPbUK7aCGCrNubJdSKw49km6HAlkLRp
+yCw3MQnhtKBjWmBkAq05X/ZcuIG0bpzAVDnjzIfofVuEEjxe78iB5jtKN7M
B/5gNPceecBNBvvkAG19ih4kUL4E1iHP+Qlwv3at40/2E4CFlBM7DXg7rQPm
AhuYGMLf0oDHUk5lAPgsrT+QE2njjyygf/wuBzb6pMvMex9fAPT91mLgaNOt
GxUAUmz2iDXC4976Jv5P5HkU23bkWmFNo/UaFXmPNH09vkILCU0a693Zhd4+
B5sPNgdoy7M2qXltT/0KeDrl/CYDbftNldJ8fA7QWM0ZF5YJabk5Peidvfqk
fV8fUC486CxjhvI9k4J3aY1y4abSDw9r/2qe14ryhQNAnSPLLFttKhPo952+
BPqedRFw1VujT6v7aBYw/y7TMQsAbXmRW7qb/MM0YO7N7eu0uWQpMPCuEZjL
gPkmLroiA3h1745rfx9fIvx5a+6LX5+Sve39jZjQ7+PkeyYV9OdZFcILP6cb
obUP1ZXEcjpwCL3gMg0402j+pPlAP+9xFbCF0ZF7BYGnDq37/t7dkP71eLUw
i25HOR79mkfHhKX0Qkeed2Xj+aHhv8WEq+OfWoNv873nKCc8JrzZdEcuy/Pi
H965+02sELY2p++thd5Q2til4n9I3qbQI23RPyr8ge5Hud4HlBO7Wsj9C4pR
/TMA3GzivffLAp5i4n73CgD9fHUktSs2Z203SZccEwD6udlZwHbUYFgJfM9o
tU8XAjdTe2w80M9Vng28fB/TUVwKLB/+2zcvfDYfaMuXb0WecgYwhXJWk4H9
aVBhGfDMa02gdgbwsU5fHDm7d6nQ79PneBTXnBIVjnjEBPrmeg1/HXxAi9ui
QtLJw4PenK3N4g9+MaF/vbcfhxc3uCB+ZsaEgWMuOT7/rnzvV/KLMWFL83h4
VP62/PCY8BGq/G2fa5nw2xdMQHhw2/NmqfAV87hRnm09f/25gnQgtVsGZAL9
floa0Pflk4D16AObAfRzTb8CJlPfdRrwxSXmCTUdOPcJk2yaA2xOednZwBM+
MKIbmbLJvOmwDLifd/BL3Y6aCrTdf9P2Njfu5cDR9KJhCnAqzV/0BXai/O2B
wOHUHxgLbHy3uaGPBtrmdmx9Onp8b7AUuOEM8wUlA233u5voFwwAm9J7RznA
+6aaRulKoK2P8NiT5pvIAEbM3bBuAGhbF3xcYm40AaDfx18MbEjPN6OAtuvn
FKPX3ysE0vLskgKgSSH/JbQEePmaW+JPTjlA/7IVAi6m8YUyoK2fYlt2l9O6
7S1PczM9B40DNqQc8iHAJDPuU/IaktbfTwKd/3flypUrV65cOf/v/L/z/87/
VzX/z75fU3t/Jvt+zarm/9n3a7Lv12Tfr+n8/3/2/+z7Ndn3a4rv16wm/p99
v6b2/kz2/Zra+zPZs2pq789k369pe3/B+f9/h/9n36/Jvl9Te38m+35N7f2Z
7Ps1tfdnsu/XZN+vyb5f0/l/5/+d/3f+3/l/V65cuXLlylW1Kef/nf+vhv7/
jZo/XbP16BIh+/89o/d3Of7xqJD9fyxwQslv3aNC9v9H7W82cIkJ2f/TdgB7
xYTs//39Y0qF1c3/P0XvZ5cId7X/H3HtrJ+25oaFieb/tfdPNP9Pr4UPiwgr
2//b8iYWkF+JCCt7/v/X2yKff7o0LGT/fz75hhJhZfv/i812GxcVC9n/n0L7
oBQLK9v/f5Uz95kfvDwh+xBz1F38S6Ew0fz/3/X/nEOt86gry//PnvZCrScG
FgnZH/5M15WokP2/uXse3iwqTDT/r71/Iv+vvX9C/6+8fyL/b5v/fyktsjJp
z4iQ/X9mvY+bn3VtWMj+vz3twxcWsv8nbfdxWMj+/wraoCksZM9v+99p+7wP
w0L2//7PUSxk/0/bS11dKPy3+H+zCdaKO/KE7P9pu6yJIWGi+X+b/9feP5H/
tx2HNv+vvX8i//935/97DDMHWFjI56+/P2JIyP5/6XXmiygS7mr/f4D5sbYU
CNn/16J97UqF7P8/phtyidD5f+f/nf93/t+VK1euXLlyVY3K+X/n/6uh/7fN
/2vvr/2/nv/X3l/7fz3/n262LX4r4ub/K9n/b+/8v83/2+b/tff/p/y/nv/X
3p/Z/ZqC+BUwCvP/+RRbEoP5/3TKDYjB/L/2/rvr/D9px/khmP+nGIMjIjD/
r/f90fv/7Oz5f+0Ntf/X8//a+yea/69q/l/nFmv/r+f/tffX/l/P/2vvr/2/
nvO3/e/a+zONXTnu4fBuP/+vvT+z9M+GV3d4O7Ld8/9Vzf9fZ06DO6Mw/3/g
PPNkEYH5f9v5q71/VZ3/P9ucTl4I5v8nmdiJTyNu/t/5f+f/nf935cqVK1eu
ds+i++QVHrCy/v5dVbafkx7I70Za+gXJ9HydBGxH/rUfkoKT+gJtucN+3uVi
4Fc/GbGTD/yzl0mezAXa/D9p0FYrgL3eNMI2BUiPXw0KgE/QgOpaYAn5v/XA
aSaGbWgZ8Ex6MF4EtH2NtvVO0jMmqW8w0Pb92nIJa8y8ML7UzQAOWb/PdyNP
CgIHGe27ejkwxcTq3pAC/Oiw9q92qJ8BpBjpQ5OBjU1MXZelQJ3XyLTlwB5G
GwDnA6/devSI98qQX9LnGgDa+hEbLzzyozG3ZwCnUkDwLGAh9cdGA+vtfedB
Z02fBLyJ1p0zgaW/mYXDDGBtamBNB46m8/hLoJ9nOBsYNW2YtvOAJ+2xJv4V
zQI2oX2ZZwB7UABnGnC8iZ0ryQE+ffeEh96oGRNyrqgf51khvPZE8x8u9N6j
wep8oM51ZlaY8fXhK4D1aAE4HbgnNZKWA225yQtvM2KoVMh9yZF/vt/qumdi
Ql8/523rU5ULa74+4OreHQs8ao/l5QJt+zZsHW+uowHgBT9MjP/m84C260Bt
CtCcC/T95Ryg37ecD7T9d9s8fFl8Bf4V0M/BmwncQOvmZcDN1B8JAAupz7Ja
2Mt8rLcFvRB50wrhSacu3ZJ+QeE2P4y0ne+2PO5G1C+aCvTzWlOBTX5p2Szz
x2xgCZ3HQeDPJ5rE3xyg3yePCjfNMqInuC2XPiZsbGIqb83zTqF+Qkw42cQ+
/5Dn0WWlf4XwUXP7OqHQu5AEaIUwg/J6C71RdByXC/38ynxrn8KWH0rtwE5I
2z4/vh9aBfSPuwygzY9N7fzYh992ywLaPNhQc9jVTQfOpvdV5gHL6UY2Eujn
bc4D2q6TSeayOD0V2P+BM39b9tEiYG6X61v22vQl0O/PzwL2pQbBAqDNx9o+
Z4qTf7BESHHBZQHPPH01y4wKe9DxlesNfNy8QBAT8nXb/HZ3Lq8Q9qIqtO7n
73v3qDDJtO9+yfWoffJzTPikuUyG873AB+YMjAn33Gdk4bhD7e8FpH5kPtgc
4EXmNj8kE+j381cC/X5BFrAXNYznA235v3vf2vH2/XvPAfr3+RTgyxeaC28A
uPHw3DOPm4D0nzaRxSYGvn0msFfbPTpPmZMMnE8X2gXADfS5LgH6z0EzgQHq
9w4B2nLtO5nu/JnDgDWKzXs7Q4HJlAc9Gxi/WJ585iMzgLZ+TeNwatlp41YA
bf16f84kG2jz6jaPHZh6RtPvLlwO/GOTuUEvAZ5AlQPc1GLYzy2G5QJt/f0a
FGCfAkzaNCB+Rr8NpNvufcuALU37f2YhkMZZ2uQBbc9jtuPKlkcfo5zhAqBt
XsuWz+v3V/sBO9H7tx8Cp9Jz6ChgkhmrerkHMDnr6vhKBmnN/3XlypUrV65c
bX85/+/8v/P/zv87/18l/D97fyb7fs2q5v9t7yWx79dk36/p/P+O+X/2/Zrs
+zWri/8nHfNzxOr/2ftr/8/eX/t/9v7a/7P31/6fvT+Tfb+m8/+7p/9n36+p
vb/2//q6rb2/9v96nl97f+3/2ftr/8/en2nLBXD+36fz/87/O//v/L8rV65c
uXL1ryrn/53/d/6/yvv/P8hrFgvZ/9PXszwiZP9v7F/k85iQ/f8P8VVemx9j
Qvb/X/RYFj/ywkLn//87/2+syKub84XstU6ifbwiQvb/2vsn8v+2OVJ/vbta
uKP+P9tsKxX/9zF5vUnb0beMCBPN/9v8v23+v0N9c6ZFhez/ed8GvX/Dv9X/
m91p9rkwT8j+/6aL32nWLhYWJpr/t/n/p8z2TEsqhOz/bfkjf9f/m/9Kk7w8
Ift/2nahW0TI/p/09xVRofb/ug+gvT9Te3+m9v5M7f2Z2vsnmv8n3ftjRMj+
vx1tPBISsv+f0OCe+BEQErL//558ZLGQ/X9d0pRFQvb/U+i+WihkL/0qnUCF
Qvb/Y1NvjB85xUL2/3R5GlQs3F39/+stzYYS5UL2/0lGX/YNCRPN/2vvz7T1
bbX3Z9r289Hen6m9P1N7/0Tz/9PvXB7/zSNC9v/HHGbuTCEh+39jiYNdQsJd
7f9NOvgrY4uF7P/N3ePcs0uE7P9voX3mioX+06fz/87/O//v/L8rV65cuXL1
Lyvn/53/d/6/yvt/2/y/9v7a/+v5f+39tf938/+V4/9/OOr5fdIWlIPX0t4/
kf/X+/5o/689ktmdvvzs6D82/6+9P7MnMQLz/3rfn0Tz/9r7767z//73uwbm
/7X3Z/anEycK8/96359dPf+vvb/2/9u7/8+u8v+2+X/t/bX/1/P/2vszbfv8
TyexFt7u+X/ahv6aEMz/+/3jsJv/T+D/9fy/9v6J5v+ri/+35QJo76/9f3Wd
/zfpIyMLw27+3/l/5/+d/3flypUrV652z9rdcnNsfQFb/i8913QB+uvaN4C2
f3/yktzYLzXfAfoedwrw4sDje312UQBYVNcEohUBzzFavygbaFL/hk1C0mvl
P2UCvzOaY1A6cMIvXU854MQy4FR6AF4P3Er5gWuBtv090mgdMAJoy5PdSOuP
z4D+c2JXYC96Hh8LfPjt8Su/PTgFuPiIjvE/2cBeJhb0uFXA+gvOevK5m5KB
Oj+PudFowU+XA22fw9wTjbhbCrStj/x80Vzgt+QR84D+/jNBoC0Xb9qgm7OO
uQRpW4/YcuiSClbEf8NRwHGf75ezx6CZwIY/bj5veFNkjfjJ8fhek4C+10H6
/77RQPoa7poBpHjaDnOBzbs+FV/hTAcmTTSD6vOA40ys74oMoN/fKBNupXVr
0Ks1beF5B7ZcK+xqtNaAIu+OFJMUGhLe+6sJEC30Uv/qeGBobTbQlo9s69fY
fNpj1PfLAtp8y5PmqvX4amF90xapyPFuaZb547Raa4V/mbjGg4s8akv8Vi70
cx4LvHOocRIA+j4c2Th+9m1stxD4GDVQvgD6HmgqMHDqqzmnvjodONFo1Dqz
gb4nSwH2aPPAJ/uOTQd2M/HSF6cCbXmRtrxUndvKPGf1Sfu+PiAmXDSsfvz/
zPde9UyQYkg4gX7+Qus+Qra8Sz/XdAawKc3XLgb28xtawLvfMgIwCJxk4htf
ygHSba/FaiH7ydfo+hET3k/BrnkenU2fVAgL3zjL/NnWZ1sr5PupsXl9L1gr
fGjFOQP/aF/kVfxS86jTLwsJu/mC33thH2rcAF80l7/zVwAvv/Wv6xqNWg4c
bT6mD9OBl5rHgmHI2lvNAEAa0L+OLAVmUDA5cpx5Tan2SmAjCpBORVLffgpw
Kj3XfAL080IXA4cs6h7/plYCbfsX7W1iL69HXnC+qSXA4V91mNRn/8nAdvQc
9ybQv//MAPrPHSuAR9F9vljo9yOyvO8vnfPELY9GhU3vvXrzS2lBr9GKIaNW
3xATTn+h1hMDP8jzBvX/NXljz5iQfR3nsOs8dvqYXokKy8NGsAY9av/eEBVG
mvSJ/wlumwuICtcdb4Jsc605Bbac6xNM26xDAGhO4j82rQSWG104OAvoX1+T
gXXI348E+h5xGtCkfx69bilQ52cz/Xz7/w/f6FrjlFgm0PY84/clkoGP0BzQ
EqDt/tKK8ks/BZbT88VgYGO6H34MtOUjrzvl3P0mNpgLbE458nOAfWk+ZT7Q
1mex5fba5g1szwnPd84buurhbGArej7IBN5PF+alQFsf0+bVR+/V+LTvX88G
tjv1rm+/vmkWsC/168YA/f7bUuCrdN4WAwe8O+PgYQ8WAA8/2jzRZQK/ofzk
APARmpfIAV5PueirgbZ/vy23uu8rmW+NPm0A0D8e30Va8n99T/8U0jIXl0Q/
wOPAGvSF3oF05cqVK1euXG1/Of/v/L/z/87/O/+/S/1/Szogo+L9mez7Ndn3
a1Y1/8++X1N7fyb7fk3n/3fM/7Pv12Tfr1ld/L9tf3L2/Zra+zNt91Pt/Zns
+zWd/989/T/7fk3t/Zns+zW192ey79fU3p/Jvl+Tfb+m7T0F5/+d/3f+3/l/
5/9duXLlypWrf2E5/+/8v/P/Vd7/n3XchMAH63KF7P+/7WYGeCNC9v90GA2L
Ctn/+/uJx4Ts/421C+4bFbL/N7vhJqeXCJ3//+/8P73+/WVImGj+3+b/bfP/
55NXiwgr2/+fRr4kLGT/X7tRnWXXDQgLE83/a++faP7/0eOuXDK5RkRYVf2/
v29GUMj+/6NLrp83IL9AuKP+n7ahGZQrZP9/0G1mx4SwMJH/t83/8z5Cej+h
yvL/8V86fsSHhez//8jKr9P92KiQ/f8pLza+JXdRRJho/t/m/7X3T+T/tfdP
NP9/AImRiJD9f22zbUeDAiH7/+9ov7R8Ifv/46/uEL8DFQjZ/3dc+/v4H3IK
hDvq/823XXvPPCH7/1HkxQuFO8v/H/Ptnff8Gv8emOz/bfkF/7T/v3/fw3u1
H7VKyP6fDutguTDR/L/2/on8v22/Dpv/196/sv0/Hb39o0L2/+0OmBX/Exay
/89bOmPkh0kh4a72/8+tMR9IsdD5f+f/nf93/t+VK1euXLlyVcP5f+f/nf+v
Bv7fNv+vvb/2/3r+X3t/7f/1/D/FTpwScfP/lez/9fy/nvvX+/9o/0+ab3YF
zP9r7/9P+X89/6+9P7Nt88Gtn/0lAvP/Nv8fI69aAfP/2vtXVf//j8//f2YS
LdfA/L/2/nr/n6oy/6+9v/b/ev5fe/8dnf+vLP9vm//X3t/N/2+f/7/oihei
PdqEYP7fll+wq+b/tfdPNP9f1fy/3vdH7/9j8/96/l97f+3/3fy/8//O/zv/
7/y/K1euXLlyVYXL5v8ri9W8kiivsoOn2Y7WH68DG5KvQCaZuMSSD4C2/67v
Fb7yNP38unxguYnXXZUL9NcfQaAtD6uh0WxzlgN/qz1vz+j9QeA3lJ8ZAl6T
0z/+RLsWmEJ9hhjwyBlfzznx1Fyg9Yt57Yn5Xfv18jSb0nPlq8BkymGbBNxi
Yib7pQE3Zk5459Frg8CF8dXxw6uygR3j/1S9vVOBPWoPOGbM2cuB62kdlg68
/Q5TXwKbULDgQuChtGDJBu5r4v2OCAJtOdFnULBmEHjzRrPwRzalAdIc4EFd
i5uOPXApMPnNl0b++f5UJH1+04C0jGw3HTibgma/Al5DOcazgP73gLT5+a5X
mYDOJcD+tD5bDvzFtJGOTAMGSAgsAdry8p4/Y9LvR/y1Wnjq0Lrv790t6F23
58KXLvyhQhhfhB5xXWmhl32CSUgNCVub0+7WQo90TNNsYH3K9c0B+v2NJUC/
P/MV8EejidusQJo2zOErgdOMtru3WJiyseebFVOyPJN2vTEzJmztD8Z77+S2
3vvrGiHh0qMPGryoe4E3ZGnDqZ0fywba9l25n9brqcAX6a9PB9p8O8XiNkoF
GtvTakYG0La+tuXrXbP5pbTISqSf77oQuPH10IE1MxcBV71lGpFZwJvN0XLZ
GiHnxRc+uL7z729WCA8zR8Mehd4z5jWfEXlAW/54p19C52+olQz0+5yTgfdc
eeeI47KXAf22TQ7wCXpvJAgsqNP92B835wCfNdv2fB4VXkOVu63vFBWaNNk7
l+d61F7bFBUuMa/TRHM9anvPrRAmtXjp4NrPFHoUa/1GSMi5yQXrB5Uvvjwb
eKdp3x6yHGi6AHfXWwz8mS5cC4F+/uQCoC1veumjhXUb/joXmLvokPR1T80B
+rnKKcAXvzY3pvnAOs1MYPpQ4EbyPZ8DG2YctumZHinAUz7pMvPexzOBdegA
WwXUecnMLaNvif9JB/rXlVRgD6N3r0gGUozokSnA4avMBTwTeFP3adEjb1wF
TKF5gRJhZ7qgBbzbnjUnSFS4L12ucr2hlIccE1L7+rN8L0ABplEhxc7fmet9
Zm4PP0X/h3WMEcz1hjU1V5xSIcXtejne6auu7NazbYnQ3JW7Fge8DQuX/dXx
wGwg/RrdkYeY0+y8ALD2M+aKmQnsSwMK6UD/+rEI6D9vfgUcZ9rVreYAe2WZ
b2gZ0HY/Gkn3seVA/+ddADxiyyFtS95bDFxo2iPvLgHWuMoEo48FNiWv3xvo
53v3BfoeNAnYy1wWT5gHzKd84Azg4ZtMQPlK4FXmHytZAWz48LgNjZ9D6jxs
oYmx+GYV8GeaG8kG2t5DSXrm/psvPyMdaPucZ5rlwdJ0YJAezLKBtuvPoPxX
e/9V9AUwmXKVBwLLVpvKBJrU5sObFQPnbG0WPwCCQNvnNsfcVroGgMvpfpML
nB9fhXU5vghI7cmjMoG2HOeG8Z/20hqjgMNpvTsAmEy+/2VggOaVPgT6fdc+
wGSam+sM9PsDNyNt83uuXLly5cqVq+0v5///Yzn/7/y/8//O///T/p99vyb7
fk32/ZpVzf+z79fU3p/Jvl/T+f8d8//s+zXZ92v+W/w/e3/t/9n7a//P3l/7
f/b+TPb9ms7/O///v7l/zh6D+v8aFu+v/T97f+3/2ftr/8/eH/z/Nu/PZN+v
yb5f0/l/5/+d/3f+3/l/V65cuXLlajcq5///Yzn/7/x/Vfb/D5776dDLOpcK
2f+3LjMv2keF7P/p9ePTI0L2//6+R1Eh+3+zC8S8PcuEu6v/N7vYhM7PF+6o
/6dtwL8tFyaa/7f5f9v8Px2mJ0aE7P8fi/9Us3uXCnfU//vesUDI/v+9G803
FBImmv/X3j/R/P/Q78em3nhxRMj+fznt+1IqrGz/b1brt32cJ2T/T3o4/j0w
2f/XNds6BEJC9v91aQOjYuGO+v+VtPF/jpD9v7lKF9wXFiaa/7f5/7dpv5+Y
kP3/H+ONfyoW7qj/f5XOszwh+3//vhERsv8nzXRxVMj+P36svNr7r4iQ/b/2
/kzt/Zna+zO19080/z+PvEtEyP7/9/QLmuQdkC90/v//Mnx3dvzIKBKy//eP
ryIh+//4TfKehy8rEu4s/7852Vy4QkL2//Q4WDcsTDT/r70/U3t/pvb+4v+V
99/R+f/Uji9/l7Z/RMj+/yAShhEh+/82GWPW9hkSFrL/z6f9f4qEzv87/+/8
v/P/zv+7cuXKlStXVbCc//+P5fy/8/9V2f/b5v+199f+X8//a+/v5v//u/n/
fTMfWPRNtMzq/7d3/l/v+8P0PVwFzP9r71/Z8/+0TXBROcz/a+/P9L1pGOb/
bf6f2lhXVcD8v/b+TNu+6//0/P9i+j1CMP+vvX9lz//Xp42LS2H+X3t/YfbT
nz+3Jrrd8//a+++s+X/t/bX/1/P/2vvvLP9vm//X3t/N/2+f/yfdvzoE8/+3
Rz7/dGnD8E6f/3/BPK4dUmb1/9s7/6/n/neW//+1wuzEH4H5f4oj2hiG+X/t
/bX/1/P/2vu7+X/n/53/d/7f+X9Xrly5cuWqGtXfvZ/+Sz2/raw5RL2Lfi79
8E2g/1z/CtD6nEP/vruBzclfjgHeRAuwDOCTNEBXAGxPQi0HuPHSOU/c8ijS
9p54GxKPGcAs8ppB4Hsd1/4+/ocwsPgyE1i5Htgsvsr+aEwUeM20W08+85El
QNv3NZye39/1NG19HN/HzgLa/Lz/e6QAjzCxkS2WAPc9vFf7UTekAR+m9UE6
cCiJoDTgfFp/zAKatNb8OquAjzR9vdFFX+QCqf3wVRZwLQW5ZgNTKJgyCOxp
4jkfygDa8nk3U5zteGD5fh1+njXxS6CfX7oIaMupfPiNmj9dsxV5Ow08ZgLv
2N+csNnAp2mwNwd4FfWvsoC2/ZQOoULa8u/CRndNLRX2r7f3nQedleNRzPbT
FcKWWcdccnx+gTfoVBPEGRKGFpsvptDbu9tPT8RPfeDza0xAZAA4u+C+5oNb
Lwb6eeYjgcZuf7BuLvDwrHev23PhCuDJlLtYLJxo2hN7ZHkdTazpPVFhkwYX
vLZ1ctD7MrPex83PWivMSNrz1o63F3kdzzaBv+VC3/PkWfep6E/thExg7Ra3
xY+ADKAtp/tt0176OBto67vZ9oEZTaIyADzaxPWNzAUONHF9x6wAZtDc/2zg
deaydWc6kLTys6uFnA94OR04a4Wce0tt1Hoh4eTrTeB3gUfxoe2DwK5G336V
BmxOeYOTgIM+MTUe+IvRUvemAvenHMIAcM1pJnA2G/gRBdOvFvq5pznelH7m
f4gJF1JgdZ5Hsa+HVQi/NWPcDQskX1vnbFObc89y4dEUsJy3bR49C+j/ezOA
vndZABxH96XPgb4XnAq05Tb6/n468EUTlzvvSyDF9x63GDgo9lDdLYcsAPr/
3OdAP397KpDi4Y9PBZ7/8r356wcFgKfGTGAocuIVJgB7JbAOCdt0YKtHpzcO
p64CFq769bbI5yuBg+n3ywTS5Xg6cm8S9ci7f+x98qI2pcL9zW0tL9tb12dI
nW/OiAkb71Ur/kiT55EOO7ZCGKDGQ4FHh+OvUaGfb5vrUbtuUJmQc4HpdaQ/
A0C/L7QSWPvEpzd89kY6cPTqG75ZuCwLOM7Epr61Cmj73Gj7ouIlQN+zzgX6
fnoesCMd2HOAfm54CjCF5guSgbZ+mc0PP333hIfeqLkE2In+++OBG6nP8Ckw
jTzoCOBGOu8/A0ZNnPNPU4GlT5obYBrQ9n0daC5zAwLAi0lQZwMb5t81ZvH4
VUgKdF4GtO13dytd6IJA//23APBKyrVfCZxF960g8DXTdhoeAJrU4yNPngP0
83sHAvejddsoYJvDzAPMKiD9uDWKgMfR8ZIDPPPavgclj84A2vKIbfvd8XOQ
5mJ6vygb2PfKr/td+fUooO/dhwL9OZqxwIbxp63fN74DTKb70nNIum69jbT8
/Vb/QH/9WqQrV65cuXLl6r8v5///Yzn/7/y/8//O///T/p806CcR8f5M9v2a
7Ps1q5r/Z9+vqb0/07bOZd+v6fz/f/b/7Ps1tfdnsu/XrC7+n32/pvb+TPb9
mtr7M9n3azr/7/z//6b/XkVEvD+Tfb+m9v5M9v2a7Ps1nf93/t/5f+f/nf93
5cqVK1euXFnL+f//WM7/O/9flf3/dbQRRpGQ/f8bZxXG/0SF7P8/+vHY+Mot
LGT/f/EvLZtl/lgirKr+fxStVwqF7P/faGlOtEIh+3+z6m91XZGQ/b+/n1Cp
kP0/LXs+jgjZ/5eTXw8L2f/b8hQKyadGhOz/STsOCAsTzf/b/L9t/p/G7BtH
hDvN/9P+H+X/wwTz/9r7J/L/tvl/2z7VR51+2U1tny4Ssv/PO3fxmy+NLBSy
/+8xzAjVsJD9fz/6PiNC9v9tHvhk37EvR4Ts/237wJtdzrbmhoXs/83b/TVO
WSPcUf8/gvaxCAkTzf9r759o/r+Mvv+osLL9/w3LzIZIeUL2/7Sd0gdhIft/
b+STn557dkSYaP5fe/9E/l97/0Tz/7R90a1hofP//5d0evfLE7L/p8v00SVC
9v8R8p1hIfv/+M0/2OX6QiH7f9/PFQrZ//9K+/YUCdn/0zZwdxYK2f83oI2e
ioTssY3t/+z7kJD9f98LPo9/QyFhovl/m//X3j+R/7fN/5vdw5L2jAjZ/5NO
fSUkZP9/6BFmo8WQkP2/v+9IWMg+eRSxSMj+3/a5Of/v/L/z/87/O//vypUr
V65cVaFy/v8/lvP/zv9XZf9vm//X3l/7/3/b/P/XT5mFeQjm/40NnhYNwfw/
beP7bATm/7X31/5fz//b8hS099f+X8//67l/vf+P9v9N6fyogPl/7f0r2/8/
TteVErv/3875/7/r/23z/7Z9qr80GnpzCOb/KSb4oxDM/2vvr/2/nv/X3l/7
fz3/r71/ovn/rrRRcDn4f9/TlVj9v57/f4NEXATm/23+v6rN/2vvr/3/9s7/
V5b/t83/a+/v/P/2zf8/Tg2fMMz/a+/PnFv6Z8OrO4Rg/v922ug+tN3z//u+
PuDq3h1DMP8/i24AIZhj195f+389/6/n/ivb/9vm/7X31/5fz/9r76/9v/bJ
L9H9Kuzm/53/d/7f+X/n/125cuXKlat/U+1mnt9aC4z3au1pJm0yQZ+PAv2c
rk5IGqh8EZhEucHPAmuQT3sa6OdoLQYe8MTAD+5YVwA82KRnrsgDjmhqntRz
gPT4exiyVcfb9+9dtBRoW4d2njLHLI2BR5p4yUgMSHFrbdcCzycRvQaY2+X6
lr02fQm0fY1J1Id50tO05Rg+bGIge8wGDio57uFxG5KBE4+c3fujjBXA3hTg
mg1suWnPF279aAWwP/nJRcA/xpvjKBlIX1v7VCB9/dfnAo97yyRt5gFt/aA2
y03QWzrwdsoXngvsRefBWGCn1/qOmL5kJnDcSiMwU4F9zzFiJBto29fI2Px3
cnOAc+O/xfTGyEFPm2DTbGDbp80PFgSeP9x8sjlAnbPIHHKXWTAi/ZzPEiGv
xynG8oqosOQ3E0Qd9H5vaxaqIeEYyj0s8s6kBkA+0M95DAApPu0YZD1zmF4y
F2jzjWPMuGn/5cBxqTde/E6zAJBi5PqVCjtQznSOR22ZI2NCivE9Lc/z43sr
hOanbze00Mu8pHjSzO/KhTcYvX1PgZcy/v7ys2/IAfr9oizgHOpvZAPpNYHX
AsC2pi13KXIP+gdzgDq/lvkxXScCwLkkEIPAWtMWnndgy2VAvw8zHZjcxgwa
pwG3tl9xzsA/SoWT6MUH+/7/N71524LktiHhDSb2tkmhd6h/QgFteYu246Qp
9c2mAP0852lA2/XN9j2atMo5W5G0vUrGaqHfnw16l5q20KsxoX8fyfOGjnvt
xP7ZMSHnsfrfwxrh3BNPXbolPdd6/Nv2obJ50XE0zz0TWI/uS5OBft7ycGAS
CdgPgb6n/ATo537PANreN5lq4qabfwFst+ib6BdXTALu+93Ik7r0SQVO3efe
+J8A0JY3/bI5HB9bBSw3t5/BWcCI0UZ1A0DbHMXTJg532irgwxSknQV88IBZ
7Q6YFQAuoJzS1ULfGwe3zS/EhF9f3/Wp81PzvLZ7mCekCiE9nhxd6OVTrnVU
eFBNEyyf63WgPl6p8Ij3Tac3x9rvsO1TpPPLmUMOMI3RVUDbflyH04sIaUDf
p84A2q4DtvtOf5pbQPr9/a+AjShHegFwCOUkLwX63/98oN+XHgVMXpIb+6Xm
O8CpdN6MAkZXGmE7E1ijT6vrnlk5F2jbZ8n2PHnmpN/jd7hlQPPW4zMr04Hm
KG13QCrQP++XAN+mAzMAtD2HnE8VBNr6FBdsqBV/BMgDnvKiCeTOBvZd/vEe
+4ycDbTl0val59CPgXuby8SiVcB7409HSS2KgDMPHvbgXUkZwE6fP7cm/Foq
sIUZIxiaBzyAHniKgLZ9BZua06xVAGhbB7Wj6/o7QP954SNgL/o+hwPLKb/9
LaDN29vmrNycoStXrly5clUNyt1//XL+3/l/5/+d/68k/2+bx9Pen8m+X7O6
+H8zpbZ/74h4f+3/2ftr/8/en9m1ximxKxpXiPd3/n/7/L/vSyLi/bX/1/P/
P7cYFv9TId7/3+L/7znmsPivHBXvr/0/e3/t/9n7M9n3azr/v3v6//iXcGy9
sjD4/30vfWp4cN+oeH/t/9n7a//P3l/7f/b+TPb9ms7/O//v/L/z/87/u3Ll
ypUrV67+drn7r1/O/zv/Xw39v++lyoTs/0lzj1gj3NX+/6QufZ4/Y1KekP2/
vy4pFbL/t+Ua/LXFDMhHhOz/J11ldgqJCNn/f0p+MSJk/0/bGN0XFbL/N7vJ
DJsUEbL//7Uib+mMkREh+3+zS89dYyLCRPP/2vsnmv/355hjQl53H0gb0JQI
K9v/j/ww6Zn7b84XstcdRfvZhIWJ5v+192dq759o/r9xOLXstHERIfv/g24z
hj0sZP9/RvxseuDMiJC9cfQLs5FIWMj+vzvtKxAWsv/Pety8mB8Rsv//hjaC
iQjZ/x9NL/iHhZXt/42tLpleLkw0/2/b/8c2/19E+7RFhez/TzzBVKmwsv1/
pyNP/qTLzDwhX99s3yPpktcjwkTz/9r7M7X3TzT/bzv+bTkUu5v/b7331zVu
Ss8Tsv/3/XmxkP0/xaB0DgvZ//vXrbCQ/b/51gY8Hhay/19M+76Ehez/n6P9
tQqF7P+NDb79nLCQ/b/5qV9pFxZq/6/7ALb5f+39mdr7M7X3TzT/T4fjBWEh
+39bTsFiE4swJSRk/0/tsvVFQvb/9DENKRY6/+/8v/P/zv87/+/KlStXrlz9
C8rdf/1y/t/5/2ro//+t8/+2XAPt/bX/1/P/2vtr/6/n/7X31/5fz/9r78+8
kzZqD8P8v83/j6TGyFqY/9fen0nxuL+H/7H5f9LBj5WD19Xek6nn/nfU/+u5
f+3/9fy/9v7a/+u5ce39tf/X8//a+2v/r+f/tfffUf+fv8JsHF1k9f96/l/P
/Sfy/3ruv6rO/9u+R+39mXruf0f9v23+33b823Iodjf/b5v/P9Vc/qaGYf5f
e3/t//X8v/b+2v/r+f+HRt3QJmNMCOb/tffX/n979//Rc/+V7f+Lg5+c+d7s
CMz/a++v/b+e/9fen0mH+0VhN//v/L/z/87/O//vypUrV65cVcdy99MdK8vn
ZvP/SYebxMQewIb03Po60Prvsazfa5Mong4cTfO4GUCbNxtPwW9B4JOnvdG1
xil5QNu+CjZP+/nAE5rXbJcDfOs8E/BXCNzDLK9fjADf+6uofkoWskn8Kbru
+7lAm39ofLdpTPQH2j5/P39vLLD+/psr8pYuAW4ZfUv8TzqwNP7TXn1sFvBi
Wl8HgLbc26Y90w+67eN5QJtH8nNfFwPTykxQZirQ91hLgePIN88BdjIxlpeP
AzY3scRHzAHa+gi2PDhbHq4tV862TlyQ3Lb/w6tKhE9Tfy3by5pggmhLhJwf
V2q0bOM1wvc+yrikeFLuts81Jrwn2wTE5nuPUtBvTNh44B/tV5yT78UXVYdu
zIwJW39E4s8zR/WSZjHhplKzQM3z6HDZUiH8oseyji9/V7htX4iQkH34m3Q9
yAaeQ/4/ACStcE8msA71A78E2vzz853zhq56OBu41rRBPgwATdep61OrhU3T
WhU9uD7H62M0U7cKYTfzcfxU4JlVbcN31wpvo75S8bZcwbXCd0ioF3mm+3nu
fhVC2kapVoHXfevkfhN+KROeQwPkuV4h/eXVwl5HmAZk0LuIvM5q4bo+ZIa8
JlcdteCsJ/OA39I6GFmf8qCzgYOan3Vt34MCQP/6lAnsSsHrc4F0GToyBTic
Nu7JAnoX3j+3Re2ocM0t73/89KFBrzcd1xXCF2uZDmHhtlzctcLVJm717SJv
rhmTPqhcSDGhg/O88dR4yAGe8Mfl0R86BIAUD39bMrAp5fmOAPq/xxSgzWvZ
rgMm9bvtHqVCzokueeS9G0cPjAqPNHGop+Z6Jq313MUxIcVEd8v37r1680tp
kXLho7+1eav7NQXeoD32GVk4Lgf4vDldx2UBKbb6qEygrb/fmMT3JGDf2dNe
qPXEGKAtZ5lirYd+DuxE18URwDPfNifIDGCD5c/G/8wH3kdtoenAWuR9lwBt
+eDn0e+XCaTbXkkW0M+Dzgbank/8fNsA8LEnjSjLAPY5/cFzPx26ElhiTsvi
YmHvGUYIBjzS1nXWCPn5JHhz+zptLqkQ1qQc4gKvp2mLnlch9OcfCrb1D6PC
LBNT/Km976bzp5m3R0xHJQC07fNzzcQpN715WyZwfgtzQ08FWnNX15tA2y+B
J+2xZv7gF2cBe9HvPxNpmSvYQP3WacBDL/6lZbPMFGBjuoEuBNpye9vRew59
gf75PRKYNNEMHMwDmu7AUaevBM40l5ul6UA/NzsApLZ032xghYnHHr4CWIMO
YKTtObA+DQwEgN/dec+vZ/1ZADzSPJ4OQ14Rv9o3fb0Q+ATlfQeAN5xnBnvS
gTOprzIHuJnmLkYA96b9BucAz6Mg7FXAkynPtgjYmS5o2UB/vZUCjNH8QCHw
InPb3TMCvMt8fI+WADe+HjqwZmYWsC/lYw8G0mPcMf2A7Wg+BNnUtFGHDQY2
pH5yH6SJE17cE1iDrsdPIW25vc4/uHLlypUrVzu/3P13x8r5f+f/nf+vtv6f
fb8m+35N9v2a2vsz2fdrsu/XZN+vyb5f0zYPX138P/t+Te39mez7NbX3Z7Lv
1zQWcc38qHh/Jvt+Tfb9mtXd/7Pv19Ten8m+X5M0fauYeP/q5v/Z92uy79fU
3p/Jvl/T+f/d0/+z79f8hl4oisLzCft+Te39mez7NZ3/d/7f+X/n/53/d+XK
lStXrlxZy91/d6yc/3f+3/n//9r//77xqOf3SSsQsv8nrVkcFrL/J131SUTI
/p9Om0OiQvb/tL15+4iwsuf/tfffWf7fNv9P22AkRYTs/18jr1ki3FH/7/uJ
PCH7/3dpv4GIkP0/jUOvDAsTzf9r75/I/2vvn8j/V9b8/5O0oVJMyP7/utLC
y/a5MCZk/+/nOkSE7P/X0edRLNxR/99o1FcdJvUJCtn/v0D+PixM5P+190/k
/23z/3R4bYwI2f93eie39d5fFwsr2/+3jJ/96esKhOz/bdcB2/y/zf9r759o
/r/BQebEiQjZ/79DPrhY6Pz//2X8P3LI6L2Khez/6bRaGRKy//+BPvmwkP1/
/GHn8jPqR4Ts/+uZ2Ih7I0J+PiGdvSAsZP9v7oZ3jggJ2f//VPD9pXOeCAl3
dP7f5v+190/k//39riJC9v+kv28NC9n/bzHbyfULC9n/2/b5p10czywSOv/v
/L/z/87/O//vypUrV65cVaNy998dK+f/nf93/v8fm//X3l/7fz3/r72/9v96
7nffsS+/Pq9RBOb/PyC9G4b5/4G0rorC/L/N/+t9fxL5f73vTyL/v0+aSZCs
gPl/7f131vy/9v7a/+v5/2dI1EVg/v+f9v967p/pH0dRmP8nrXBUFOb/tffX
/l/P/2vvX9nz/y/Q8V8G8//a+1e2/9dz/1V1/t92Hfi78/82/2/ubreeXAHz
/9r7MzsOD+576VNhN/9v8f9z6QIRhvl/7f21/9fz/9r7a/+vn0+099f+X8//
a+/P9O9XYZj/tz2fVLb/1/P/2vtr/6/n/237/Lv5f+f/nf93/t/5f1euXLly
5crVble255bA1cc+sO/DwKYU3PYKMInWqa8hbfm/7VqX7bWkN7AV/fs+BZ55
3ITAB+vmAlsYzZScC8yjv6EQ+K3R+s3ygS+cYQLFgkBaJh29DGhWH799sxzY
gXxPOdDvP0SAU/pN+KXrKcjU6wZMHXTzWiCN7/YrAdYg3/Am0lK2dZ+/XpwM
9PM2ZwMfrmOSC1OBOgeU6efCLQVuNlo/OAe4sOKqnP7vLgEmzWu0YsioBcA2
D1+25pb3xwL9dcMMIMW5jZkJPNPEJHb6CtjGxNzuuQrYlAZmg8A3Kc83B7gm
/NqsnhtXC/vS/HjQO5BEaIWwm4mNrVvgUUzyAxVCY2VqzCnwzFH3wmcVwpMo
H7HQa00feIVw38N7tR91Q+E2j1UhpNjA1QXb+iEVQj5fKL7urwphA8p5LfSM
RToue63w8Pavdqg/pNh7IdqjzQOfrBPeMtkkOZZ6WSTWw0KKs+xU7DUf3PrZ
X0JBoJ+Pmg382cQiBjKAfj7nXKDVz9A6eAUwYr6OnwLAE6hygFt7TX4qdXaZ
kGIJL8z1PjFthjvKhaQHGuV7FJ88MiZcTl4i37uR8hgrhL8Y/XNkoTf0ss5X
TZxS8T8kAV/o1TA66c4KoZ/3WbAt37JC6Od6xr/3e8yJsFY4mHxpkTejlvnJ
84EmzfbX5ADQdl4PH2fE+Eqgn7+XAvSP0zSgrW9o3qpZUFEqTF/31N0THsrx
DiHvFRX2uM28CZO7rQ8QE3IO+KH0D8aEPUx8aqt8ry7ltK8RLjfxtu3yrDmP
j9Qfsn6f73KAzecNyH+1dxbQWIj65ywAJplYh4nvAXvR/XMR0JZfv5ICocuE
r7xuLohB7xUT77owKrwzpf1FV7zA/aIK4aJlf3U8MFTgfWTiJOuHhLkmhnVa
gbeJAihzgAvM13loADjzwh7D3r58FTBtthHRS4G2vkm7oeZAWgzcaC7Tt88H
TqVG0ZfAvvT7TAQ2pQvVeOBwOs9mA2/f33zi04C2n+cPeh8sE1ij2DTKVwGv
/Lpf/A/Stv+P3/dG6pxv5mjzWs3+q4A6h5hJceA1VgtzTn3V/PE2ZpoXy8qF
Hx6UPHp+zXzvZTruYsI7zW3t/HzvBxPDu2aNcIS5Xd2X59U/Z/VJ+76+Rrhy
xLWzftqa6z1CPi8ITKE83yxgR/oiMoC3U381Hej3aVOA7U6969uvb5oFtOXb
dr3KNA5mAIfT5zoZ+GJaJP5PTgPajp+Gpm3fdCnQ9tzSlOY+ugJbUR9sALAR
9Q9HWDgN6M8LLAXa+rz5d41ZPP7+AHAcHSAZwJTLb/3rukZBYP3IoSZxGdgx
frA3T14O7EYHaiaQj1/NJGqwFQPfo35jPtC2f2OUgr1TgPXo+P4c2JieK8cC
TRf2zEeWAG1zSptM23hYLnD4KnMlzQRSHO9py4D3mBjvn3KBmYdteqbHeWFg
7/dNo7AM6H892cDCA0qvbVExEViDbhytgdb142um39cLaOub1DnE1IfA5Cyz
ru0BrEH9gaeRrly5cuXKlStX1b2c/3f+3/n/ne7/2fdrsu/X1N5f+3/2/tr/
s/fX/p+9v/b/+nzR3l/7f/b+TPb9muz7Nau7/2ffr9mMBndj4v21/2fvr/0/
e3/w/9u8v/b/7P21/2fvr/0/e//q5v/Z92tq76/9P3t/7f/Z+zPPI68fE+9f
3fy/+H5N5f21/2fvz2Tfr+n8/+7p/22+1FwNNvaMiffX/p+9P5N9vyb7fk3n
/53/d/7f+X/n/125cuXKlStXriq5nP93/t/5/+32/6R3exQJ2f+b3RNueTQq
ZP9/yOi9Gp/2fUSYaP7f5v+192dq78/U3p+pvT/Tdr5o78/U3j+R/7fN/3eh
fV+iQvb//j4HJcLK9v/h8zfU6vtKgZD9f7PMH6fV2hoWsv/3vWNEuKPz/9r7
M7X3F/+vvD9Te3+m9v5M7f2Z/nUoJmT/36RPJP4nLGT/b3YtmPtMiXBH/b/f
t8oXsv/3938KCxPN/2vvz9Ten6m9f6L5f9LxDaJC9v9v0H5UESH7/5+NfW1e
LNxR/+/vA5MjZP9fd8shbUveiwgTzf9r78/U3j/R/H/6Ha9c2u+tiJD9f+1G
dZZdN6BY6Pz//yVdvh8tErL/p8epw8NC9v/DaEP9sJD9v23/f4oVaBwRsv+n
eN6UsJD9fxMKqAkL2f+TpuwcFu7o/L/2/js6/79n9P4uxz8eFbL/T2rx0sG1
nwkL2f/3vNg8CRUK2f+/1O2oVg3fLRA6/+/8v/P/zv87/+/KlStXrly52m3L
+X/n/53//6/n/7X31/5fz/8fObt3fOUchfl/ve/Pv8X/P3+rCQhYC/P/2vvv
rPn/T8oXX37rX+Uw/6+9v/b/ev7/lAPMTvFRmP/Xc/9V3f/r+X/t/XfW/L/2
/sz4TSB+J4jA/H9l+X89919V5/+192ceSPs0R2H+/+/6/0uKJ8387t4KmP/X
3p9Jp/d7YZj/p6/50PBu7/9t8//a+2v/r+f/bfv/a++v/b+e/9feX/t/Pf9/
yfHG2EbAl+q5/0T+3zb/fyHtFx6D+X/t/bX/1/P/1G5LDrn5f+f/nf93/t/5
f1euXLly5crVzq/qngdEP+8VHvCLH3Jubt8OmGRi5Lo9DkymfKTngOWUJ/kW
0OZDGtK+JUOAJuUuue1SYDMTu9q0APgjzVMWAm37sdz3R1Z+ne6rgDpXj1l4
0UP3nfBlLrCxedwfEAR+d6/5F5YBR1Lg4zfAh8hffgv0/UAR0Pb1+uvRoZ6m
7e+35ccFKGBxIdCWFzzVxATunQG05ev5HmIKsEftAceMOXs50F9PzAf6z/vT
gIebZczL84AZtL5JB9ryCp8xcaGxINBYwZEnlQu/NjokNc87jtbxISHnza1f
s1+Hn2eFhJwfvd9P12w9ekSF0M8jLvQo/vHxtcIJ1Fgo8npUTFnzXOe1wsem
Nw6nlhV5Iyk3u0I4Zj9jdgu8X7oak10hbJl1zCXH5xdsywMNCb/qufGnvssL
vC3LPnrgzN/WCL8gsZTnDXh4VfbTnyNt6+UHD5jV7oBZASD9GBsygb6/mQtc
SkHFyNtNrGnPTGDTg81EaABo6+/4Oc4B4DkmLrooG7h1vLkuBoCHdDdBzMjr
qW9ZJvxt2KTj/7g818sgIRsTbqE41nyP4nWTK4R8HSO9l7ZWeBflUBd7i43u
qRsWnhs/Gk4bV2T1ITVI2GYALzJaakgm8MXPjCCdA0w7/ecT585C2nzORuqj
IYtNzGrrMqGfkx7cdr2vEG4xWvHL//HY2mePXWuCj2PCyTPpiuuZbnLxIxVC
Ps5t73EEKdg1CLTdR2x9K5tn249ysWcCbfedJtQIDgJp7Pn9qPAeowMPz/Ue
if8WF31RITzrkWCX61sWeiYled31IWEPEtKFnvnWjorkAG3Hed/nTQM9CziU
XphIB1JMeAcktTU+WgG8/Q5Ty4B+fjVy4+G5Zx43IRmYFP9WX7l0BrBew18H
H9AC2ZGea+YA/Zzq6cBG5vbWbQlwwyDTgMwC2vb/oXjpptnAJmb7qx+R0+i/
nwP0Y1ZLhet+N19YjleXfr/VwlRzWV+W4xXQ80uZ8G3Kq821zvPvf6y5U5YJ
5/a94PPwhqA1h9qfjwgAZ282F8AMoG3/okFPH/pmcno20DafYOsH9SJ/ORno
e8GZQD+3dirQ98SzgEdQ/24xcCS1PdKAzc3YR9YCoO05zeb//f7SZODEx04q
//SuGUC/fzIfuLSZSYpeAexPGxRmAUun3xm/A+UDZ5kY+WeDQJ3TzOzWs+0e
naesAHY14wtfpQGnG10eDAIb0gU+H3gRXehKgRRvPjwIbDzwj/YrzpkFtH0v
tnXNBnO7GrsE6Pv4PGDX4x+/YVlRAdC2X5Z5WnyvLBWoc7WZ+UNNg2A18EEz
nnV0GbBLfPUx4Jh8oH9/mA60rjfpOnq3p5lMt+ckJDWYOwMb0v3zdaB/HvQA
Wn8eSz/C+vdXVlV3b+DKlStXrlztzlXd7+PO/zv//7/K+f8d8//s+zXZ92uy
79dk36/Jvl9Te38m+35N9v2a7EE12fdrOv+/Y/6ffb8m+35N7f2Z7Ps1H/tz
S9tT71or3r+6+X/2/Zrs+zVtc+zs+zW192fa3uOoLv6ffb+m9v5M9v2azv//
O/w/+35N9v2a7Ps1bfP87Ps1nf93/t/5f+f/retN5//9qu7ewJUrV65cudqd
q7rfx53/d/7/f9Xu5v99r1kgZP/vz01Ghez/3zZjkM9FhZU9//93/b/2/jvq
///u/P9gmpOOCdn/03Yzn0SE7P+NzTjmkhJhZft/2t7luiIh+/8PhtT55oxg
sZD9/8m0oUZYyP5/wVlmZ5qwkP2/vw9+RMj+v2V7I5rCQvaiFPM7JCxMNP9v
8/+265jN/9vm/3l/D73Pxy2PmgOmUFjZ/r/0z4ZXd3g7ImT/7//1iDDR/L/N
/9tybG3+39bnss3/m59qeuOokP0/7+ul9/eqLP9vdhe5bUFYyPedjp+ee/aH
90SFify/9v6J5v9pO4mfI0L2/7bj/GNqUBULnf//v1xW9HbW1DOKhez/bfv/
0zb7J0aE7P+fpP9+RMj+v9Eoc0OPCHf1/H/JI+/dOHpgVMj+f4+FL134w8Sw
kP1/997mBA8J2f+T7ny7SMj+fy39HqVC5/+d/3f+3/l/5/9duXLlypUrVzut
qvt93Pl/5///V+1u/t82/6+9v/b/ev7f37c1BvP/qbTvdQXM/xub+urmiv96
/r+y/L9tLvrz0+o+etyVMZj/195f+/+dPf8fPfLG7tOiIZj//578Xxjm/7X3
1/5fz/9r76/9v56L1t5/R+f//67/13P/2v/v7Pl/7f21/9fz/8aa/vREdLvn
/yvL/9vm/7X331nz/9r7a/+/vfP/Nv9vm//X3l/7f32c0y70zcMw/x+/yD36
5H4h8P+p5nbeIAT+n2It1pb/6/y/bf7ftv+/9v7a/+v5f+39mVf37rj29/ER
mP8nLVsRgfl/0uJDojD/3/BdI8ZjMP8/Me/cxW++FIX5f+39tf/X8//a+zNt
+QVu/t8v5/+d/3f+3/l/V65cuXLlytUuKJs/ry4VMZ7+Dg9oyQVOopzeJ4E1
Oi4+ouPi57ef9JzVHjiVnvv6Agt/6/7E/K6jgHNPNIGSS4HXmWXVi0XAb6n/
kAcsNfGWjZGTaJ2bA/T/+jJggAINlwAHGy31QjHwnivvHHFcdgx479R94n++
AR5KObNfA/uTQAgCbV+77XNOJi/3CbAX+elxQD//MRl4+NF3pLS/KBNYh8Tx
MmBtEj7TgftRnu1soL/OSAFSXOXI2UBbvnPnKXP6XvB5DtC2HrTtZ0Jxbkfm
Ads+/VrfEdODwDlbm/VMPwjZaka3iVd5OcBv6DhdI/zMjLOX53qTqa9SIVx0
nkkILfAobvDWCuEPtOAv8JrXNAHc5ULaHqRHHuR9Mkl7/5AF3OOU2BWN52cD
betN2/4hDSkocCHQ7+/NBN6Xv35Q+eIMYFMKmMwB6lxMZtlqU5lAW44ntZ2+
ygL2Mdpo6ErgzIOHPXhXUgZwAl0/SoVtKQg529tysRGYMSFpzjvyvAyqCuEW
c9nrV+jV7HlxgwteWyvs9INpDBR58f/4ZZ2vCgkPM0fnHoUeXSZezwZesHJ5
/AxPBzainIkFSPr8pgJ/jl9dvz5lMdBc7Y/omA1c14deyACaFMhRX60R7kkn
ZJ5Hsb5vlQvntai95xlv53sUy/phuXBJr6NfGTs836M04cdjwgs21Or7Smae
R/GZt1cIr6D/UMG2PkyFsLXRSF0KtvXvyoScF/8a+WPk/h1+njUxLxtoy731
8z8nAt+jgNcVwP0p6DAHuNLEBh9XJuRc4M6UUxoTXmvaCDXyrTkgJv15Y88g
MOMBE/SZCYx/GfFvZBXwYQqszAS+R551FbCtid2tlw1cmNy2/8OrkDqvmlnx
jjmDMoG5N5sGxlJgE9NmHjYXuOHrm464rnQ20G8jTQX6fQak/8+lAc8cd3f8
Tp8FnER9nwDQpJwPbp0NHG4O1yjSv16WCbdumtdycnHQM92uj/dYIxzxyG9t
3uqe65XS+zbIDRQwnAO0/ZynUF8VacuNvZ1ucFnAByn/ORuYay6bI1cBm9To
9+Ox9RYC/bzZicAXqc88CWjrE22kQOqZwNwu17fstWkZkNoPz68C2voFtuc0
2zyM7brh5xIvAQ6hfv1K4Pi76YET6L+vmAu0HQ+25wFbju2GhSaIHPn46q82
D5uE9N/fCwBt/dyr2sUCJ5QUAUevvuGbhcuygDX6tLrumZVzgeU0V/Ax8PI1
t7z/8dPTgXvfajooK4CF5nR9Nh/Yzej+ugXAQ9uWmDMQ+BQ9iAaANV8fcHXv
jgXAnodc/EvLZquBD9EBmQ+kcaL9C4F16L8/E2g7bgPUGP3Y00w6fPL1oZd7
IG35v2eb9XRboK3/ZZtDs65/6a9f6wH/6XL+35UrV65cuaq+5fy/8//O/zv/
/w/7f/b9muz7Ndn3a7Lv13T+f+f4f/b9mtr7a//P3l/7f/b+zMIHzYtCFeL9
q5v/Z9+vedb0z74fmxoT78+k126CMfH+2v+z99f+n70/k32/Jvt+zarm/9n3
a2rvz7S9B+T8/7/D/7Pv12Tfr+n8v/P/zv87/+/8v/P/rly5cuXKlasE5fy/
8//O/1db/59yuRGAq4Xs/2kbiNuiQvb/tv3MfX8fE7L/736N2VE5KmT/T19/
raiQ/f+vRueNjAgTzf//Xf9vm/9Pv+OVS/u9FRGy/z+N/G5YyP6/FW0MERHy
ev/EE0yVCivb/7+6ufa8PaOFQvb/fVM2Nbrvg1Ih+/+X6AWIEiH7/ytpY4Ei
Ifv/PrShdUjI/p9+rPuLhez/B55gPslCIft/3yuHhInm/7X3Z2rvz9TeP9H8
/wkfnLNXrWsiwsr2/6TjjwgK2f/7eQ8RIfv/JbmxX2oeFRVW9vy/9v5M7f0T
+X/b/D9tI9UwKmT/f/ePvU9e1KZUuKP+v0sfs5FOuZD9P23PURoRJpr/194/
kf//9C6zEVZUyP7/qg5mR5iQkP3/hAb3PHzZmiIh+//XQwfWzHygSMj+v67R
4oEiIfv/SVd5I5/8tETI/v9Aug+UCtn/H0/HcYmQ/f9VOeaCUyTc1f7/uj3N
xjf5Qvb/99AGSWEh+3+6jIbCQvbqZ/xmAlgiQvb/9NjxXES4o/P/C28zd5qo
kP2/sbKhtREh+17bz9n+oiteiPYIC9n/+9uNhYTs/1++0NyZioXs//19jEqF
zv87/+/8v/P/zv+7cuXKlStXrnZ5Of/v/L/z/9XW/9vm/7X31/5fz/9r76/9
v57/195f+3+Y/6eN0aPbPf+v9/1hfk8bTMdg/l97f+3/9fy/9v67ev5/49jU
Gy9+JwLz/6QnUsIw/0/b5W8Jwfy/9v7Mj340G7mHYf7f7Io854kQzP9r7898
dZpJKojA/H9l+X8997+r5/+199f+X8//G+tyzzExmP/Xc/9MPfdf2f7fWMHP
3ojC/L/2/pU9/6+9v/b/ev7f9+NRmP/fUf+v5/+192fS13xuGOb//etECOb/
KZ7ktDDM/5u0AO/gCMz/T37KdF4i/7r5f+39tf/Xc/Xa+2v/r+f/W/baNODx
TlGY/zd3vTtSojD/r72/9v/a99p+Tu39tf/X8/9+DkDYzf9byvl/5/+d/3f+
35UrV65cuXK1C8p2v67u/t/2/GPpCySZZeUXj243/fy0rkA/N/gloC0vuCn1
GV4BXkDPfTOBLc66tu9ByblAih1tVwJsMsVsoJ4L3Np+xTkD/8gBPnHDsqK3
swLAvc22E3tlAvuuK37kvRtzgROMBq1TDlw/xzQywsCzjjNBZuuB8wbkv9r7
r6+Btp/z7x4mnchHDfQ0H3uj5k/XbJ0AtK2napNPS0ea+LcrM4CHN7s0vpJf
CGw68slPzz17GtD3iEuAp1A+2GLgzxSUtgq4hERGLnD8oUfM+HpOEPhI/SHr
9/kuB+jPNQaA9DEdnQ0854bzTNQssAut44PA70ae1KXP8+VC3yfkewc80+Sx
P7esFb64xAT4FVs9M8X0Ts8E2vJhbfs21KcA3QDQXx+nADvO79qv3t6zgLb+
kW1/pIkmNnOPLGD/t8yCNxvo5/kibTnF9ahxkAX0c5+XAP3jcTHw2DFnf+Wl
BYCbKHi1TPj5fLPDT67Xkq5zMSHF+g3M82pNW3jegS3XCrsa7TSgyKPLRHpI
eJJpix1aZO3LJBsN9Eo6so0ZYJ8NXGdiyAdMAg6nPNNkYK/RJkB6FbAFvX8S
BNr6mLY+LOn1c7OBfl+uVOj3t7K9zfQiSFR4a5HZMCnoBckHVwjZn9jyAt4/
eVH8E1kjvHzQqevX7JfnpVKwdBBIX3OrFcAmAbNT0VRgYzrvU4BP04sIOcBj
yM+VCbOowRD0bqSGY1TIedM/mNcTfowJr6UDK986H247bqltfyiy9wzT8ELa
/j228/GFfSgQGXgCBeMGgLbruc7hZvp+Kw3o93tnAJu3qGjw7Z1zgb73/RJo
u39tMG2AwpVA23XGtv/YkKUNp3Z+LBvYfevkfhN+KROe0+nIkz/pkutR+3Ea
Miv76c+fW5MD9N93CgC/pL4HkuLG714F3EgvgmQBbd+jedqs23A5MM38666c
BbT1Jf187BnAjBEmeHcm0NbH8T3uHKDtvG5Ann4+0JY36ufKjgHa8ovLh5sg
5vnA+M3hy0tPSUNa9t2i16m+yQbaPHwPOvCWAzuefdLN45usBPp9zHzgB5QT
vgZo3h4rWlUA9N/PDAKjZsyhYy6QXgNMWQa05c/WoPfH3gT2pYb0JKBtH8j1
Ju63QTEwZMZBTi4Ctqb33PKAfq56ALg1K79O92NzgIeZx9ATC4CZY9bGn4BL
gP5zQx6Q2lQLpwBt6wJ/PdfDA442DzDvAW3rO1vOr/X7qu7rbuf/Xbly5cqV
q6pfzv87/+/8v/P/Vcz/s+/XZN+v6fx/1fT/7Ps1tfdnsu/XpO3/a68V77+7
+n/2/Zrs+zVt85O29wXY92vuKv/Pvl+Tfb8m+35N2/7wzv9XL//Pvl/T+X/n
/53/d/7f+f9dXM7/u3L1/9g7D/CoqnZtAwoCIk2aIEVRRIqAgKCAExAQFJGq
IKARaSIdBKSGDtIh9BYg9JZQQodJJyFlSnoCKTMJRdCIgDT1n7X2Wes/33q+
JeUEBHyfy+u6z/GLyWRm9p697/VmPRQKhfL4h/w/+X/y//8a//9iNtsoJ1VS
+H9vvtG7U1L4f75dxdAzksL/hwWwDUmSJIX/L1qMxSEp/H9fvkGGQ1L4/1l8
Iwyn5N3m/3X+X/TMqn2zzPav+SVdUvj/T/kDSZAU/l+3b3NO+f/EsgGuM0Wi
pPD/un6EI4PZBjgZksL/v8Q3KnJICv/P/go+8kqypPCNxn41yZIP6v8Hc5Fo
lxT+/8u0t1yvaIbk3eb/Ve9/N/+vm/839gtxSD4q/7/4qxo3gxclSgr/f5Xv
L+WUFP5/Bd8Yyykp/L9xvDokhf83jhuH5N3m/3PK/+vm/+vyDVackg/q/43j
3y4p/D/f3mKZQ/Ju8//36/918/+69+3uJLvrpcqQFP7f9SK/H7g7Q1L4f933
4aen9xyS4nh8fsHYyGneDknh/935cZkhKbwx+3TuGZYoKc7nxnGcJPlP+//g
fRsWegxOkBT+3/DrGZLiPCP2H1P3IVv7C9v4zCF5t/l/votOslNS+H/jPOiQ
FP6/0eH+rlN/hqTw/9unBg8Y83OGpPD/5uzpU7L2JEoK/9+Sb0iUJEn+n/w/
+X/y/+T/yf9TKBQKhfLYhvw/+X/y//8a/89vh645Yf5f9f6C7F1a8pbjnuf/
Ve+v+n91/l/1/oJLXUdZ6UOZMP+v7vuj+n91/l/1/tL/3/J2/ZP+yOf/jX7Q
dJj/1/UjqN5f9f/q/L/qGQX5ttFnMx7a/L/qPe82/3+//l+d+1f9/6Oe/x96
Pb3upYIZMP+ven/V/6vz/6r3V/2/Ov9fv2Hs8yktHA9t/n9Q1x3fTH4u86HN
/x9w/a+JX5+F+X/V+wv68a933vP8v7rvj6Buf3jd+1b1/qr/V+f/dd9Hdzyq
3l/1/6o3nst9Z8YTO/+ven/V/6vz/6r3F2Rnv9RjTpj/V72/6v/V+X/V+6v+
X53/55dxL2XA/P/py0Xe7jQyg+b/yf+T/yf/T/6f/D+FQqFQKI9/nlb/r/u9
dL3Amt5ew99/C9R+/4msx3I0MI37pLlA4/pxHPDUIjZYugH42gF2px0I1PVI
Vk5mhcIxwO/44HMcsGrQrfB6DWOBqex29DMrMCHq946OTaeBuutw183y8iMp
Z4FlDs1eFPFuBvAgqze+kAV8iXvcTGAbLrItQN3bxLiu9zap1PUCG/dJa4DG
730UqOtJ3JyfNTuGAl/Lneq6Q/AD8prbz/cBe7H6yiIBwHx8cD4E2J9p9dk2
YOHnIr86+VMMsHrU++Om97ACp2btSf1+WDDQeFyBQK+ytc68ls8KLJx+7pX5
tezAzVzQn5X8LIAtVAjfky5ZpOOy5Iq9Ekz5eJF0LFC3TnToBhOGEUCj19EM
NPz3PuANXj+5DdiOaZTEIOB8fsNuA9blsQPVPl1B7et4NI/zy+FWYFSZZa1q
trAAmV29OOw0kFmFa1WPAXV+Rvf9DX1gBa7jPjZFUqx3XOV/J5Al+dEPRQoN
bphgYu2lZWtlSIreQ7V/WtDE1yWsQB/udU8BdT2YL4/d4tXn5iEgr4mucxp4
k++/bwOqPaaCuv7HArz4FcmX14pZgWt4v22KZJvwse6jA62mDX/OdZ2hMiU3
8XXwWBNfNvbOkjzK15kSTOZi4ecHdk2TNHxdnCm8MDvQYoBGT7sVaLxOx4HG
uuU+oG5/lbE/nyrge8IG1L1/RF+52ls+qyl7w6RJGt4s1sRrWtvZgctbsWfG
ApzM9O5X0UDd+mAB7o2Run1v1B5iQb5ctDgK+Abvq7UA281dNqj4FKRxnggA
8tPT1WNA43P4CLATX189ABzN1zECgN4He++aVyAKmMo07mgLULfPlW6/LDde
XG0B8tPEzSgg1/pFkbrXiy8rfh0KnBnNCkCDgZUiXrw2eGoA0J3vY7YJ6MVP
eHuAuvOt5Q4rPj4CDCpXeOXJCQeB9XiRtj9Qtx9dPr4cFQS08NdhIbBLBBOw
XsDafG7FG9iPr+McAS5ndexnQoG6/aB0fdnxF5en+Te2Ao3HZQGaw9lCSSTw
Cquf/yEBeKJQ1aLBLWOBnnzAwAbkYyJfRAKN6+JgoNE3fgJozFesB+o8/yXu
oQ8A+WX3nxbg57zAOxlYs499+IdtE4DOTatcr4QNyOvQt4YBP0xJaJS3fjJQ
t8+bB1vW2xsHvFPqr331p0YD2519JrBc4e3AXNvZANIQJO/dHagh9vOmcX8/
GWjmJxAPoG5dzPj57sgnPeT/KRQKhUJ5/EP+n/w/+X/y/4+Z/xe+X6Xw/SrJ
/z9Z/l/39w6q9xcc0qRg/MYh56T3J///nxS+X6Xw/SpV7y8ofL/Kx83/6/oy
hO9XKXy/SvL/5P/J/5P/J/9P/p/8fw6E/D+FQqFQKI9/yP+T/yf//6/3/z08
e0VZB6VKPqj/Z7sopL0VI/mf/t+h0HVfPn72X4llnZIPOv9v4xvlZEoK/z+V
v24Zko/K/xv7EsVICv/PLJw53CEp/P8F/vf0Tknh/8fzjSwcksL/T2PbVJxy
SIrXMY57Doek8P/GfiRJkjnt/w++xMx+hqT4/v6lBrj+cUjebf5f9f53m/+f
0Dz+nW+6OyWF/59X65mCzX2TJXPa/7NdfQLLJUgK/9+K7/dzRlL4/4q9tl6q
/b1DUvj/pcns32RICv/fkfuYDEnh/xNKVvp95fMOybvN/+v8v+r97zb/zz9m
Fjslhf//us6qtY2GpUg+qP8X+6uo+6zMeXbcb/0zHJJ3m//X+X/d/L8HL7Jw
Sgr/v7oOEz4ZksL/78nLTiwZksL/p3zHNgbJkBT+n2/3NT9DUvhk3b73zXqz
E3i6pPD/6/i+UxmSwv87JvpNz/4tQ1L4/3X8/Jos+aj8v7GvkV1S+P+Gt7Nf
Gpk3Q1L4/xN8/60MSeH/xT5X6n5Xur6MX/h+NhmSwv9vDfm4waymGZLC/7fk
GwkmSgr/b/jgJEny/+T/yf+T/yf/f48h/0+hUCgUyuMf8v/k/8n//+v9/6OZ
/3fA/L/q/QUNz+eE+X9meV89kAXz/6r3V/2/Ov8/gf3YgPRHPv+ven/V/6vz
/6r3V/2/+jqq3l9Q9fL/9Py/bn5b5//VuX/V/6vz/0Y/seOxn/9Xvb/q/9X5
f9X7C44cFrs2qpfjnuf/df6/L/8BmTD/r3r/RzX/r3p/Qd3fj6j7/giyo+uL
Xpkw/696f9X/q/P/qvdX/b86/696f9X/q/P/qvdX/f/TNv+ven/V/6vz/7q+
DNX7q/5fnf//mF8XZND8P/l/8v/k/8n/51TI/1MoFAqF8uTmaf0c161r6Miv
+z5B6qK5rnNjl/vlhwN136YSv8+dZAJeufG2l9t+4KlqVysf8QsDVixzdojl
TizQ6NFNBC5YvzcwJjMOOJPph6KxwPCAmeXGbrEAdfdlHV6v4bpziAca91Vp
wCKuu9f4sEyg4eHOA/MWyZp1q0EGkOuYbAvQi3uIeUAf7q03AttN6Xjc3MMb
aLw+C4HLP4ku/+4rfsBKfA447J5peKojQKNHdB+QtUiXOx8EbM5us1eeAuYr
MbPnxo+QKXxgORho9D8fB7ozXdUEOTI1Y6LfdAvwNNOUTe3AmaUSo37viCzA
72vTJAPZ280rzvTVEbbgFQ+sx4tKY4CXR63pfmCLHch13flwoK4Hsx17OeMO
AnX7eBj+ygrU9XSPGFjX9YjTJFfw90/c/3jcVEnRd+zGDptTdqDajytoaWVu
sKdKFLASL8Q8ATQ8zXbgavbyrwkBzuiRe9iewxZgNT4wniKZzDT8Idfjmc8K
xDMl8+TdkLC1eJyJrV6NrH5O0uijTDRlR+6Y1bdFmuTCwmwFNe5/+nktwB95
gWgEkLVab3gtEGj0/foAdR7b8KDBwCFMr98IA+6/wArQw4GLeB9mBHDCjUJH
8zijgA14v64FyJeL0s9I3mRf/qXdtIM/wVmSB3kBb7zJi/fiZkny0//1eFPh
EUluW16IAeq8Ta5+3+U3FQkDVuIvnA+wDT+PBgHPMc2/0AKMYi93ZSvQWLc5
K2n029pNP3xWr3h2ZJrkhorWA5Fl4k03g9nCeiyQn15etAGvsuXnKlbg12t5
Ay2QL5fmtgFLzWULG8gZvAfZCtTt61WXe1yk2rMuqPNm/RZeHmeqfwLIl6PS
9gONuYADQGN9+xCQL6vsiwDq1il8+QelFbia/32LDdiK1YR/awHe6OjYtCoI
WY+fOE8BjefjJHAmX/DaA9R9/rKW+h5vHARu3cQW+vcDvfj78SCw1RIf12++
C7h1zKSjVcOOAV/j8x1BwLIFbmTFBgUCdeuebvw6dzwwga+/ewNHl9j9YfoY
JJsSWV/RF2icjwKBAezPBj+yAf221O1aZqgdmJsXwNuAbbexvzSJA/LLndFI
te9ZUPd4pvOF5wig7rx9ifcP+wOr8s//9UDdXFAa/zsfL6APX5c0A9W+ecGP
2DZ7VxOBKXs/C322SBzwiusupmiXMCB/WC8HAet/yS7AkoEX2cfbrSSgbl/H
2qxu+bYZqL1vYn9m6D/dpNK8kL0QY4C6eS3dfZwxHzQC6MGvw3oDtfeP/H9v
gXzS87R6AwqFQqFQ/g15Wj/Hyf+T/yf//8T6f+H7VT6t/l/4fpXC96t8Uvx/
k1HOqV2+ckjvLyh8v0rV+wsK36+S/L9B4ftVqt5fUPh+lU+K/xe+X6Xw/SrJ
/5P/J/9P/p/8P/l/8v85kKfVG1AoFAqF8m/I0/o5Tv6f/D/5/0fu/0PYdjUF
kiWF/69/OtT1TnVKCv9v/N28U/Ju8//8tq1MlqTw/9/y/S2cksL/N87LfuJZ
yZz2/+9wwZ0oKfx/z7BaS+/0dEgK/8+epTVhTskHnf//5b3D/T/t65QU/r/y
qywpkjnt/w3dGSsp/P+LjZe/cTE1Q/Ju8/86/696/7vN/8/kyZAU/p9vY3Ml
QfJR+X9mRepNjJcU/v/NySNyVcmMlxT+n2+ftCBBUnikeQUqRLx4LVFS+H92
NnNfmyF5t/l/1fvfzf8zC5Q1yykp/L8f3zHKKfmg/v9626aRV3xjJIX/Z+9e
x+kMSeH/uXYs4ZB80Pn/NvwLMyWF/y95q1iP5DkOSeH/+bZ6pRySwv978A2A
HJLC/x/cyTaocUgK/8+3nTrkkBT+f/G0Yg2ut3VICv+v6/U4z7YBet8hKfy/
60Oy89j3zkj+0/7f2OcvQVL4/9+5j8+QFP7f8MQOSeH/2cnv880OSeH/R7Bt
Yg5mSMp1gPQxJXZ/mCxJ/p/8P/l/8v/k/x9SnlZvQKFQKBTKvyFP6+c4+X/y
/+T/H7n/L/jHzN0DQzJg/l/1/qr/V+f/+bb79kyY/1e9v+r/H5f5f9X7q/5f
nf9/ud7EP3YvzoT5/1sNmr10vGYmzP+r3l+Qa5EOjsdm/l+d+39Q/6+b/1e9
/9My/88+NV5snAHz/6r3v9v8/4P6f3X+X/X+OT3/r3p/1f+r8/+sHaF1RyfM
/79S3qP1D0WyYP5f9f6q/1fn/1Xvr/p/df5f9f6q/1fn/1Xvr/r/p23+X/X+
qv9X5/9V76/6f5r/J/9P/p/8P/n/fyhPqzegUCgUCoXy9EV33aK7ftN9vaZH
2Myv774H6r6/7nqyKBcRi4GG7z8M1PV8vc6209iVDDS8VCLwC3bbZo0Fqr2t
gszSeAyOAo4ObPpb/C/hQH65vzUFeM2PCRQH0PAlGUDPHddHVHneAdzLatWu
XQTu4SImDXi/bx93Vh84Ya0JyNd5pgBzNZseXrjjQSBbzSlRLhi49fTlIm93
CgEaPZbBwE5Mc1QyAwtVHnRpzeQjQMNrmoG8NrPRSaCu33MBv989Btxff+q6
GY2jgBH1WNFjLHAs0xmr7cACva+63gFWYINZTd0zLTZgZV5cagcavhbJ6/eu
2YADMrpaW5lDgaPZskHdw8BjfD0tDDio645vJj9nB07kc7rIb3g/ZKpk8R7J
c4bOijGl5me/eKrkgrGR07zfjDXdZDXGjWOAw14OHfpyqBXYnPtVC9D2KhNH
EcB2vDBxJ/A87y8+AjR6aa1A3fM/KU/7AZ0KpEnuHVWw/9L5saY9hxfU25SR
JXmS94Ym/E+/6znJ57YwEZZo4jWTJc5KFuTnSbvpBVbTuMQCrMbn7yOBr86v
9UzB5v7Ahr+yZusdQN26wHne934c6Do5uY5AJF+GWXsA2J2fV04And8wY30a
2IsdHnWSJUv2rfh+4G6L6Upvt0lV33FKGn3WdhNrNf3cI0vyFNP+t+JNLXlP
Y5pk4+rcIJpa8T9MsQF1+/Pws3RXfyBf7tu7C8g+9UpWCgV6ck9uBV5bELos
d14bkC/7eduBm7ivigHq3p+6fk+1d1ZQ9/7nH8OV7MDmswecu73NCvxjG/NP
FuBs/kIhi02ocOXG20jj76+swAWdz384YmAg8Bhf8PADMrs+ZPtBoBvv2fYF
pjANPSIQmCupbED0B1HAbN7nawHqft85rH57VRRQ7X0X5PW/7gHAhnzBdR9w
Jv9+u4ExJ4uFnx94GDiEr9MdAvLa1/L7gLrnOYD7xSDg1C5frci3JRzoZmML
uyeBlZg2zZ4FNH6/jUCdzy/KlpfabwBOZafLJmZgKb4gFwjsxf8w7hQw9U22
QmAFdnad3V9fYQe+vyYsYGa5ZCBf9nYgdZ+/pdl4gSMWOOKVb13vmHjgSL5w
GA3UzUvoemnd2Z/1fTwJaM6ePiVrz0kgvz0obwG2+KPc+jln44Cluf9GZvM5
ARvQeyGbLIkAXmLLeAmngVN5cXk8MO75lBats1KARh91PNDouz4JNNZJfIEe
/HwzA5iL/13fIGAa7z2eBtTNWenu47Q3ALqv/9v5MvLkFAqFQqFQKP9YyP+T
/yf/T/7/MfP/wverFL5f5ZPu/10v8sYzH2VK76/6f+H9BYXvVyl8v8p/m/8X
vl+l6v1V/y+8v6Dw/SrJ/5P/J/9P/p/8P/l/8v/k/ykUCoVCoVCemJD/J/9P
/v+h+X9+G78+UVL4/xf4+yVNUvh/vo1Fe6ek8P+GX3FICv//E78vdEgK/8+/
7TNOSeH/3+Ge44yk8Hu52oSPdR99RvJB/X/NhMmuf+Ilhf/nu5Hkc0oK/8B1
YSWn5IPO/3/cY9DEBeudksL/822S+jgkhf839htJlsxp//9jyzwnfqjvkBT+
k+0q89xLTsm7zf+r3v9u/l83/8/OWgciMySF/+8VZR206ftEySfN/7fOevny
Z1+kS95t/l/1/oKq97/b/D/fBmuJQ1L4f2OflmTJB/X/H03wdZb+OE1S+H/X
QfLj3GoOSeH/w11HzeJpDknh/+uy02hnp6Tw/1xPL3RKCv+ve3+u4HFICv//
C/fTGZLC/+ve/z/y/YScksL//8r31XBICv/f1vX/vbs/Q1L4f+P1zJAUPpwf
lqszJIX/L8H3NUqW/Kf9f7tb3p/e8k6UFP7feEGSJYX/T3bb8sKIpCRJ8fuW
5P9zoiT5f/L/5P/J/5P/p1AoFAqFQqH815D/J/9P/v+Rz/8f4Pv4ZsL8v+r9
Vf+vzv+r3l/1/+r8v+r1HtX8v+r9Vf+vzv8nNmIFxU6Y/y/9MROimTD/r3p/
1f+r8/+u79Xh2QsZD23+X/Wed5v/V+f+H9T/s98qVxsnzP+r3v9pmf9Xvf/d
5v/v1//r5v9V75/T8/+q91f9vzr/r3p/1f+r8/+q91f9v/r+VL2/6v/V+X/d
+1/1/qr/V+f/Ve+v+n+a/6f5f/L/5P/J/5P/p1AoFAqFQqH8H3K/1286n8+v
T/siNZ5f1/+Vi1+/jwT6VHf7uX7pDcCId5N27f/5KFB3/V9mWauaLRacBfLb
qrHxwL1cG9mBw3mBYCzQK4oVREYCK/A5USswko0vFk0GNuD9j+nAXbdZYZ8T
uMp1NV48+zLQeJGzgdePtt2dZE8E6vrFdJ6/SwEmHtcDDV+7BHiei90twHZ9
99bOCDkB5Joz/DSQtTMHtwwGurFlhmVHgXxMveYhoNEHewJY4+s6q9Y2CgAa
/uYEkOvaLgHAAtx8W4DRbAw71QZsXuGrfCVmIiey+r3u984T5h6evaKsQLXH
VNDo07MAC3H/EQBsyHRGl5NAdjdaoUwU8ERWM5vnj3agbv5/KS82zpScc8h3
VMH+cSa2mrMyM01y7sfMbMWbWPt29nQ7cHUddoKyAL89c/DGul1WoO79oOt5
fKf0os2dVkcCJz/3W/M/ylmBu5oxJZss2YMvEFlNAY3b/9WyaqZk5pfDX/n2
o1hT3UsFXYfOOclTx9kTl2RiVue35uckjR7WxP/pCUiVnMpqZj1jTGN/PlXA
94QNyPXzBCvQ6Bs9Bbzx3EvVGrU5DjR85z6gzivqzuf7eS+lD1DXz6j2xQoa
fdMpkqJH1ejhzJT89aWReU8djzMtf+Niav7eWZILeWFqvKn/m2yhJFWyHC9O
jjHxl2Ma0ugpjQB24esyh4BGv64/ULePU+PUT+cuG2QDqv2yggdYLfp+K7BP
WfaL2IDGOqMVWJYXyluAuudf5zmL8SBr8bpr5NhurBkY+UZmk9rH0i3A4g2u
t20aaQN24j4yHGjhb7yDwNF8nWoXsGqjNj0GTfQBHnqPNZ3vBxrnXX9gM/dM
y6vJYUBdr7qut33vml+2hHwcCqy99E7PsFp+QKN/1ReYzZb3Vh0EFn2bTVQc
A+p85vmkPnM+9g4B7ix9aPaiiDCg0X8eAhzCPbEv0OgN3gI8xM8TXkDd15fh
1zWbgQPysw/ow8CEomyBKQBorBMGA3XrPo7i2zblt1mBXz/v5/68nwXYNpr9
hVE8MIKNR4xMAKawH1MhGqj7XOYvZwpyCO+TNwPd9rNJiJVAXS82r2ceYQc2
LVGuc0DPOGAe/sGNrMtjB07h6zAWoG59fz4fILEB2bPt/nwccPKSD2YPOJcM
1PUI69bNLa6r35J91wE9VmZ+U/LWeqD2fo339A4xqTQf7L1rXoEJQA/X2X5S
2++A2n7ev50H+y/3iRQKhUKhUCiUJyvk/8n/k/8n//8P+X/d/v/C96sUvl/l
k+L/he9XqXp/QeH7VQrfr1L4fpX/Nv8vfL9K4ftVCt+vUvh+leT/yf+T/yf/
T/6f/D/5fwqFQqFQKBTKExPy/+T/yf8/NP9v7E+dJCn8P9f6Pc9ICv+/iO/n
dEZS+H++LYuvQ1J4fr6de2qKpPj3xv5CKZLC/5e/wnZcOiuZ0/5/IC86SJQU
nmFPrsPx3Vs5Je82/6/z/7r5/1Xc7zolhf8vv/mtg6ZTGZI57f9/Wp7m37h9
oqTw/0W513RI3m3+X/X+D+r/dfP/c/hGNA5J4f+j3h83vUfuFMnH1f8b+2/F
Swr/z2ywf2OH5N3m/+/X/+vm/4MXfVXjZrBTUvj/jR+xIz1B8m7+n2+DUsou
Kfy/rsfB9SFT/8sjDknh/3/vyDZAy5AU/r8af2EdksL/T+aeySEp/H8Lv99c
j8AhKfx/yndvvfbJtgxJ4f91z7+x8ZBDUvj/hJJsgxSHpPD/5/odtB0Z7JAU
/v8F/v0cksL/G/sMJUsK/8/OZh3bnZEk/0/+n/w/+X/y/+T/KRQKhUKhUCi5
yP+T/yf//w/M/3MtdcUB8/9D+b71Dpj/V72/oO7f7x4Ycqh5fwfM//sxrfa1
86HN/3/5CTMgGeAZVO8vqNv/X933R7DUvguHK7+RBfP/qvdX/f/Dmv8v/2Lj
5W9cTIf5f9X7323+P6f8fzH+xnLC/L/q/QULZ8261aCZ44md/1e984PO/6v7
/ggab0cnzP+r3j+n5/91PQ6q91f9vzr/r3p/1f+r8/+q91f9vzr/r3v+Ve+v
+n91/l/1/qr/p/l/8v/k/8n/k/8n/0+hUCgUCoVCeYS53+tGfn3qDtT1ghn/
XQ8k77ecAtT1BRdlt1W5twJjeKFjLPDYUZZk4ObvUzMm+sUB17xj+faZNch2
+8btbGayAWPq+E/5YUMUsCurtRtjBbJWxV93JgDzsrrKBhnATUOaFIzfeB4Y
4Popf85F/uq+duvEyk7gZ6wWsW4c0Oix9AXq1ms8XXeXZ4f4ANMWssLclUBz
hWk/tT+0Fmj0XfoDyzB98G440PC1UUA3fn8ZAuStl2n7gdn8+UA6T3vkaT8g
CGj0ZwYCWYtco7zBQJ3P0e1Xs54/YBtweW4mTJBqr7Bgva5lhn7zSwzQl/tX
G3AQq8/0jQLq+iUPxXdvtbKDP9DofY0EDuLHvRVo9FrbgbrjjrX/3uwSC/ya
vWyeVqDu9zXOB8HABN7vtxP4sutd9E6TUGAFvu5gAer2ZeJa/8dMSeETeI1q
z3OSzGLnOZFo4lqwyTnJSqyG8ftEU7OXmJjNkszk62vx2r+zuHQi+K8BL1iB
uv1eSvC+wSjgR28zgxsOHMHXRYORzXbuaTNlH9DM6m9/3w40/n7GDBzKvZQF
qNvnSjfPbxzfWZJNt7wwIskt3sSXY39Kk/yzKVtQjDct6cX+4iYWqNtnyVhf
DQPOZDXerx4F5uMLPUFAY33ACtTtC6Q7D5zoyD6ZbMDVQZV8hvWzAtlZvdQA
5CZ+3NuAul5m3fmNtYa/NxA5kdX6eiFL3Srmegdbgcb7wgJ0Y8ueFwOA/VpU
zp16bDtwdPtF7354dBPQ9aZwvTOOAPvd7DJtQvODwEqu3zrXYWSXd5k4PQl0
53+3EAgsytfpDgMP/cHekPuAhs/2A+qeB77c1fcUcD9bbg0KB6o9zYK6XuMg
fhwfARqf/z8iNX2macdY7+gGoG5935grOQY01t9OAZezcZDCFqCFF10HA3V9
5WbeY+wNdB2sdfLv3AnUzbEY16Gnge1ZPfjXVuDMCWwA4BjQqztbaF4O1F2n
tVris/yT6OPAQoMb9vvzViTQjy1jD7UDL/D1nzggP2ySLMCAbV+mvfWRDaj2
3Asar2cE0Nf1aMu/awX+eavHG59fTgRmsj8TC0gA9uIL96eB2vsjfn+zwKTS
i1+XTQZa+PXsQqDxfhkBzMXXo7oidf28Ov6t56feXgqFQqFQKBTK/4T8P/l/
8v/k/8n/P5D/1/1dhur9Vf8vvL/q/4X3FxS+X6WuZ+Hf5v91+/kL369S+H6V
5P/J/5P/J/9P/p/8/3+E/D+FQqFQKBQK5WkK+X/y/+T/H5r/v8j9a7Kk8GO/
Ru6Y1bfFGUnh/42fc0ZS+P/ThTsuS654VlJ4v6lZe1K/H5YqKfx/brY9z8oU
yZz2/5c/++L3mn+mSwr/73qzux6ZQ1L4/7J8YwSnpPD/hr7PlBTHHa8bqJUp
Kfy/B9+4xCEp/L/u971f/8+3DXolTlL4f2Yt3j6XIan6f3UdQLefgOr9BVXv
fzf/r5v/DxnAXlCHpPD/uv3emZXqdidR8p/2/zN5MiSF/xf7XKn7Xenm/3X+
Xzf/v/LkhPiwzpmSwv/rehZyyv+z3Sdub0uWFP5f1wtg9H84JcV54C2+v45D
Uvj/tWz7mAYOSeH/fbg/c0gK/892aym1zyEp/L/h8zIkhf/X9XHwt1d2kqTw
/9HsdFc5WVL4/z4ztp2+XCRFkvw/+X/y/+T/yf+T/6dQKBQKhUKh5GDI/5P/
J///2Mz/v1yYGUgHzP+rvk+Q65tbzkc+/696f9X/q/P/qvdX/b963KneX/X/
D2v+n//aHdJg/l/1/nfb/+dh+39dz4Lq/VX/r87/e3Jxm/HEzv/r9vNX9/0R
ZJZ+RY0smP9Xvf8/Pf+v6wXQnQdU76/6f3X+X/X+qv9X5/9V70/z/+T/yf+T
/yf/T/6fQqFQKBQKhfIU5D77gg0ORGrWC7T9whoa19eLgN68F+sE8Iqp2wc3
fkgAlufi8izwr77fua68E4GxXOQmAL+wMhEdB9T5/xLXBk99e8xpIL8tT4gF
xpwsFn5+YDpwMC9kRe4dVbD/0vmZwM61hpR+fYUD2JH3JSYBeQ3wixHASp9s
a3g7ewVQ13fmExiTef25FUDd62jhxc0+QON+MQCo62U2+gwjgGn5e1/12xkM
1N0vG/P0B4A1eFHsSaCF+8hAoOG9A4CGTwoFRvHf2wJc0Jkt3NiBPQZNXLB+
L9KzzLOfFa5pA4b8NeCF9HNWoPF7RAMPTc/+bUFoKNDwXsjVz7fuWC0qCqjb
b0TXx32ELWuExwCvLQhdljuvDchezdg6VqD5bWZMQ4E3uK/dBqw38Y/di3eE
AHXPG7P0h/9A+vd8p8ko51nJ4bFrXe/QGNPaRsOa7dyT9f/JvU2CaTzTva2z
JL/o1Sj107nxppUdmAHPklzy474i676ON71S3qP1D0WyJDfwHsx4E3uW6jVM
lUx4hxWNx5i68v5qG/Aw94t2YB/XWbRCBDKV+zkbsAYvLg8G1uPC2hd4g9VG
Lt4K5LXSKwOAqUsPvFdltAW4a0+bKR2PI9m7dFnuVMn1fdgBFmMqzAVvumTE
F6zxOd50kxcAxwJb8SfeDhyVlwt8oOvgc53pQoDHWhfKU32GH9BYpwgCst2j
9hWJBur2B5tiDl/fws8O7DqNCUPkLlYv/YMNeKT/p3331kZyPfci0pjvtwDn
nGUv0Cmg0RMeCLzFTn/xIUDDBwcAdetKbqy2/KttQK7VXvIBFuULPweAuvfn
6FOO0x55fIHG+udxoHPTqqBKPgFA4/wdCDT61k8BjfXAMCCvlx8agdTsYzaV
96magR6VPa3Je/2AOj/vw/t4FwA9+fnpIND5a2+3SVVDgMY6BjL/9AYv15sY
CezEarErmYGnuGf1Beo+x/tx77sDuJWNlSz3BurmT1hbbtlax4H97GyhORho
9DaHAI2/LzoM1D3OBLYMPzQEaMwjxAJdJ5tSiVHxwC92fOP6jjHA6l/XWbW2
kQ3YIp59oMQCJ7Jlie42oE/ebq5/LMDe/O98bEDxOakykfeMJwKnrpvR+ESh
BKDXrlfuNHb6A934fcl4oEeJ3R+mj/EEuvML4CnAXHydfIKGg4Bmvg42Bmj4
+w5ICoVCoVAoFArlUYb8P/l/8v/k/8n/P5D/z38jKzZonxM8hvD9KlXvLyh8
v0rh+1UK36/y3+b/he9XKXy/SvL/5P/J/5P/J/9P/p/8P4VCoVAoFArlXxfy
/+T/yf8/9v6fa9b6ZyWF/8/gnilFMqf9/1c1mCGNkxT+n2/f806GpPD/uv3G
33xn+9TgAU5J4f9r8v2TnJLC/xv7RTkkhf/3m9S23Pn9yZIP6v8vtmHGJFZS
+P+63Fs7JMXz5v1M7Td/meSQvOv8v8b/q97/Qf2/bv5/3PQeuYftcUgK/19j
ziHfUQWdksL/+71XZXTtT89KCv//Ft8IKEXyUfn/E13YA86QFP6/SmaT2sfS
MyQfdP6/DRfvmZLC/w/nG1k4JYX/f37B2Mhp3g7JnPb/xr5HSZLC/+v6QRby
DYOcksL/8+1LKjglhf9nr2rMSYekXAdoZtrw3SqHpPD/yWybj6UpkuT/yf+T
/yf/T/6f/D+FQqFQKBQK5SkI+X/y/+T/H3v//0/N//MagKFpMP+ven/V/6vz
/6r3V/2/Ov+vev+cnv83zgdpMP+ven/V/6vz/zqPkVP+X933R5DtBr/xjBPm
/1Xvr/p/df4/j/PL4a9863zs5/9V7y/oxfs0nDD/b6xnZMH8v+r9Vf//uMz/
6/pBVO+v+n91/h+8v+L/af6f/D/5f/L/5P/J/1MoFAqFQqE8FaFepAeL7nl7
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
bt2Kv8xLzEDDrwcAT519c2vX90OAZQ7NXhTxbjhwyK+mbh/cCANqzyd8PTwE
qPPkRq+7DTjT+82SfStGAd/m1xeRwIhQJrpDgLpeaX4UJyN1fbgR/O9n9gNz
JZUNiP5gN5LPNXgBdT2kOm+vuxxLuMkGA1zXNQotbHnsh2Cg4dcDgbr1qUz+
OZwM/PyL32v+2Rc5m50+PrcA1X50Qd26jO59bpxvfIGj+XqmNzCbHU4ldgAb
8n3VNgKNdTYfYDu+zukP7LDo3Q+PLgkB6s4bs/h1Sjwwni0PlLUBh82KcV1y
WoClE9kHaywwczv7A7IEYOda7ErFDgyY8sOGP+dagLrjzs111P9wyg4szBee
44Bf8NNuLJBdnY4OtALPs+W0l48AjfOiN7A2P27WAL34utBkoNFfjWSrJ9Mb
jAN68PWE3kDd/JL2vvJvSf6fQqFQKBQK5aGH/P+Dhfw/+X/y/+T/yf//o/5f
+H6VwverFL5fJfl/8v/k/8n/k/8n/0/+n/w/hUKhUCgUylMb8v8PFvL/5P/J
/5P/v0//b+wLlCgp/H/x8PMDu+44Iyn8/69Mc7c4Iyn8fx++EUGKpPD/tfh+
BmckH9T/G346VlL4f4+U79567ROHpPD/uweGHGre3yEp/H++9wZ62fM5JYU/
n8H383BKCv/PjuLOY52Swv93mTahefw7mZI5Pf/PdsFKr5slKfy/7vGf9sjT
fkAnh6Tw/7bcyz1/NydJCv8/uS3beCFBMqf9/1B+/kiSFP7/NXaYFXdICv9/
NI/zy+GvOCSF/792tO3uJLtDUvh/vh3bOIek8HjVvq6zam2jFEny/+T/yf+T
/yf/T/6f/D+FQqFQKBTKYxjy/w8W8v/k/8n/k//X+P98k5Z8MHtAOvj/dXz/
5gyY//et7vZz/dJOmP839tF3wPx/N9e70aO146HN/yex2gO3NJj/V72/6v/V
+X/Vm6v+X53/V72/6v/V+X+uqxZnwvz/nsU7ro+okgnz/43z1j8dWi0L5v9V
76/6f/Xxq95fcGHostx5N2Q88vn/NH/2hsmA+X/V+6v+X53/V72/6v9p/p/8
P/l/8v/k/8n/k/+nUCgUCoVCeQJD12M5m/t93jS9wGbeJzYCqO0F1mU2K3Sc
YlI55JtfSsTUWAesxHuADwINnxoPfJbVYaafAX6X0dXayhwP1N2vsbbZCb4x
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
c8L+zwW1gBl39363bHnE0QvDHvvHw2ufKez3Bv/zoRO3mRF212/cffvI9ReE
rZ9L/EzY+vmuT4cd89Tb+v7qX58MWztVef2uZ8JuVDst9NFnw268wYkf+fIb
T4cdUTuF+Sfzwu7ySu1g7llhb91r4KRh354R9pHrvrv4k88/HvaVqn8/ELb+
ItQZ9rTasbhHzwib9f9hpx748pAbloTddZsfdF766wVhq5etdywJu+1r1771
E59dEHbC47ULfIvDTuv/6LKvcEHYfY7becyIPnPDHjZq0bAPvGdx2AtnH/I3
S/ssCrvXsh+C7RfOD/tGLdN/tivs0gW10D03bP2Y7a6wh9y99fnPf2Ze2F2/
NOuU/Q6Om12Xee3gj/3qd7cvCJu9/vx3ddD5jLD71H68t58TNvu+1O/XkrB7
Lfvs6/8l7ufeVzvIeHHYC6vX+66wWbf/3+r6yf1hx1b/3eSw2e/T7Hr6p6vf
k98OW7+OfWncTWsXIs8Lm3X47Pdd9ns57fPJ/U/7fPZ3QvLvEAbte+Ivjtjq
lLDpubrZ+b+l3b7w31Gkf6c5VxcAANqP/q//rw79X//X//V//b+P/q//6//6
v/4PAAC0JP1f/18d+r/+r//r//p/H/1f/9f/9X/9HwAAaEn6v/6/OvR//V//
1//1/z76v/6v/+v/+j8AANAt1lbfzrprs8751e1bU6t9X0qvQ2XPz+z9ftIf
snN+6+/jjwqbdYaOyzb54r8fc2bYei85J2x6fnHyeTuqz3Nq2NL7uflX73vn
V++7OW4VuO4IWz//88GwW++53dzDbp4Rtn5u5OywVW7+dlfYabXjOT8+L+zr
Z9euk8Td8muTJ3zpj3HXXW/SvCnvmBt2WO2YzI6usCd+4aBlX8r8sIe89/1f
mnVKV9hRnzhjow1OnBf2/YN++6F3XT43bP083vlhs3Nds/NPa4evPnBH3Oy6
w8XzX1l02SYzw3ZO3WXZPesK+8bY245/6O7ZYbPPe9NV2+/fd0jcTc7teGzi
PnPDjlgwqFZswx5UPZHmhr1mp9882e+Y2WGnX1S7ADQn7PO71C54dYbdYeEf
lz1jZofNzu29/b/edcDZt88OO/TR3a768xfnh/3THrWDeheGff35kdcfeWdX
2NpPx33feyLs4b+8+b8vuW5J2OueHbrZ629/NuyUZc/2w89/IuxRJ5wzbuKP
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
EDa7n/XzSMeHzZ622fWUw99S+wInhh139+0j1z/u5rCvVN30R2GHnLLdVz75
4E/DLllcc2/Yo8f0/f3ef5kWdvyzQzd7/e33hn3PnZt+7B/63B+2Og72XT8P
O2D4u957zSkPhO3/myf7HfPKQ2H37vrw0CO3fzBs50X7rvuzM+LWH+9Hwta/
7kfDTvlFLSw/FHbAPU9N+OPzD4ed2uenXUfu/1jYcS+eNfBDX4g7e/f7zj1j
0uNhj57ywoBTf/qrsHfXjn8+99Gw9es5D4Yd9+nahbl7w36w+vn+cdiO2pcx
8taw/R6597m9Zt4Ytn4O+WVh6z8Hl8RNXjfq1y3/PWzW7Tuq14OT4yY/79WX
vdUVYdO/i7Lz4rPX/+R26uf9fi1u9XiPCNu03zsNf79n19X1fAAAoBfR//X/
3kz/1//1f/1f/9f/9X/9HwAAoF3p//p/b6b/6//6v/6v/+v/+r/+DwAA0K70
f/2/N9P/9X/9X//X//V//V//BwAA6G2y902l3T77+Ibn/678+7L0XLnv/8/M
g744ZOW39BxYWF5pz2/q5y3oGw3P/y24ndLrCFn/b3guZLyf9fMbzwibPj7J
5816e0f1+U8N2+ec4+4ZccXpcavXj+Fhsy6Xvv4kj1v29XZU5yGfGTfr/8nX
lZ1Dmj6eDe9/fP5k5592bn71/rvuE7fPkEOeeNP9F4ftPP/GnTc79jth++1w
wgvXj/l+2HqXnRh21LW1UB+385T9Dh776k1hs/OpR216235PnXll2Pp5qhPD
dkyv9dErw06tri+NC1t/Pl4edkj1/b8w7PBLTtvl1j9dFXbjquPeEPbuC17+
/biHJ8f9xAbr7vL1m8NufPCr6478zKSwE6rn121hR92y18BJw34Qdlztafru
W8L2r87rnhh2bPV8nBx20KRh3979AxPDZtez0te9wuuS2TngQ6rv8+iwaVfP
7k/285V1+1KF5+dm12Gzxye7TlF8jry/uwAAALqH/q//s/L0f/1f/9f/9X/9
X//X/wEAAHoK/V//Z+Xp//q//q//6//6v/6v/wMAAPQU+r/+z8rT//V//V//
1//1f/1f/wcAAOgpsvdf2fvH0s7frN5eeu5q9T77i3Eb9s+C6yDet9KdSrt9
4fm8xT8XpZ83u52GfWxU3Ez2ebMul91+9jpWeA5m6XWZeu//Sti0BzbseMeH
rXfoEWGLX89LX28bdr/4fEjPR86+3uTxzPp5dn2n3vXPC5udj5zdTseN9/S9
YI+zwm5bde7RYbNzrrP+XL9u8/WwHdVBw3Gzc2azc7Hr5waPDZv92KXPq+T7
O2rpjrv3u+UbYft89b53fvW+08Jm58lO+PpHf7ZB/3Fhs+tK2f1Mz9vN+nai
9Ppm8Wavnw1fB1b+5y7d5PUzfb0CAACgNen/+j+tT//X//V//V//1//1fwAA
AErp//o/rU//1//1f/1f/9f/9X8AAABK6f/6P61P/9f/9X/9X//X//V/AAAA
mqVZnbxZ575lH5/0rrT7ld6fhlvwOEBvUHpecGkHyyQfn57zm71uFF7HTDtY
6XXVht2v4HaSczzT80YbdvsV3E7p62Th62123mjjvrqC+59cN0nPe006c/Z0
G1Wd+3rSwL/e0udb/fOcF7b45y57HJLNHof09pPrPun1r+S87PSc5eR86uzn
K93s68qe/8l1h/RxKH0dy/5OaNb5v6V/dzX8ulZwP0v59xIAAAA9i/6v/0Mp
/V//1//1f/1f/9f/AQAAWp/+r/9DKf1f/9f/9X/9X//X/wEAAFqf/q//Qyn9
X//X//V//V//1/8BAABaX7P6fOn74kzSo7Jz/Rp3uYLPm3189nWV9k9YE9bW
861ZHam0XyU/d2lXfGzDz1698JywaZfL7k/W65p6rm7BdYHk/jTu0ivo/Nn9
L+17q/R7pOC6anZdJrlekG7yPMmeD+n1iNLzWLP+XPr7tOHtFJzfndx++vhk
5yknHX5C9TidHzZ9PJPrJunHl/4clV5nLL0eV7qrdH8Kvr8AAACwPP1/ua9L
/6eH0f/1f/1f/9f/9X9/bwAAAJDR/5f7uvR/ehj9X//X//V//V//9/cGAAAA
Gf1/ua9L/6eH0f/1f/1f/9f/9X9/bwAAANAspb2i9H1u1v/vqf13J4dNO0Dp
+/eGHWsF77uz/pPdPhCt6X7VrHPAS2+nWf0824bXH5tw3XOVbqfg+5jd/9Lr
rdn5zs16fEqv4ySKz+Ft1vOq9PaTxye9zl76+z27zpJddyiV3Z/S64yr9Ljp
8AAAALQJ/V//h2bR//V//X/lH0/9vzH9HwAAAFaf/q//Q7Po//q//r/yj6f+
35j+DwAAAKtP/9f/oVn0f/1f/1/5x1P/b0z/BwAAgDWnWe+Lk74xqOolXws7
6u8feu8hB5wUtrjnN/y6Cs4FLj3HE6DU2rpu0izZ/c+6erOu4zS8vlHa25tw
O816fEpvp3RLz7lueB0tXt9Pz/kt/bqy+7Omn88AAADQG+j/+j/QPfR//V//
1/8BAACgO+n/+j/QPfR//V//1/8BAACgO+n/+j/QPfR//V//1/8BAACgFTTs
JAXn6lbnBA4Pm55LuKbP4W14HuUKOkN2f5wXDLSa0uukzZL04aZdX16lj2/C
49Cs+1na/5ulWdcRMs26PuL3KQAAAHQ//V//B3oW/X+5j9f/9X8AAAAgpf/r
/0DPov8v9/H6v/4PAAAApPR//R/oWfT/5T5e/9f/AQAAgKZpeM7g8WGL+3+z
ekVp/89uP+tdDW9nLXQ5oPcofT1si89bcJ16TV8XyG6/uu49JG7p7ff0Tt6s
3+MAAABA99P/9X9g7dL/9f9Wpv8DAABAz6X/6//A2qX/6/+tTP8HAACAnkv/
1/+BtUv/1/9bmf4PAAAAbafjnmtPP/SDJw9c2W3aeYINe09Bf8i6TWn/L72u
AUBjXj8BAAAA1ir9X/8HWCO8fgIAAACsVfq//g+wRnj9BAAAAFir9H/9H2CN
8PoJAAAAsFaNqjr3MQPDbvHrH48+eFjYpn3irP9X5wwPjtvw/OIVdP57a9cr
Donb8LzgFVwXyK4v9PRzHgEAAAAAaGv6v/4PAAAAAED70f/1fwAAAAAA2o/+
r/8DAAAAANCGkr6d9v+skzfrnMeGt7+C6wXP1Lr7v6z8lp7/W3odIZPdfwAA
AAAAWBP0f/0fAAAAAID2o//r/wAAAAAAtB/9X/8HAAAAAKD9ZB0769WlW/p5
M1m3z84LLr2fWefPzhfO7k/D6wVNeNyA1des65UAAAAA0Mr0f/0fehv9HwAA
AIDeQP/X/6G30f8BAAAA6A30f/0fehv9HwAAAABWXsPrCKXbhG7f8L8r+LxZ
/88+b3Y9Yk2fmwwAAAAAAGuC/q//AwAAAADQfvR//R8AAAAAgPaj/+v/AAAA
AAC0jjXdn5vV+Z9+4f5j5+2z8pt93tLrBaW3n3X+hrdTcJ0CWH3Zzx0AAAAA
tBP9X/+H3kb/BwAAAKA30P/1f+ht9H8AAAAAegP9X/+H3kb/BwAAAIA1p7Rv
Z/086+2ZrP9nt18qO/93lfp/E64LuI4AAAAAAEB30v/1fwAAAAAA2o/+r/8D
AAAAANB+9H/9HwAAAACA3qPhecEFW3pub+n9yW4/6/+l540263HQ/wEAAAAA
aAX6f3MfB/0fAAAAAIBWoP8393HQ/wEAAAAAaAX6f3MfB/0fAAAAAIB20qzu
XXpub3Ye8drq8Po/AAAAAADtRP+v0/8BAAAAAGgn+n+d/g8AAAAAQDvR/+v0
fwAAAAAAerNVOkd3Dfb/pp73W3DucLMeNwAAAAAAaAX6f3MfNwAAAAAAaAX6
f3MfNwAAAAAAaAX6f3MfNwAAAAAAaAVZx254/m9Bb29WJ2+13l56PQIAAAAA
ALqT/r9q9H8AAAAAAFqZ/r9q9H8AAAAAAFqZ/r9q9H8AAAAAANrJ2urerdbV
9X8AAAAAANqJ/t/4/rTa/QQAAAAAgJWh/ze+P612PwEAAAAAYGXo/43vT6vd
TwAAAAAAYOXp/wAAAAAA0H70fwAAAAAAaD/6PwAAAAAAtB/9HwAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAIDlfOfduy1+z5vnDFzb9wMAAAAAAGie/weasQDj
    "], {{0, 256}, {1024,
     0}}, {0., 1.},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Real", ColorSpace -> "RGB", Interleaving -> False],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{1024, 256},
  PlotRange->{{0, 1024}, {0, 256}}]], "Output",
 CellChangeTimes->{{3.76127361192665*^9, 3.761273625059794*^9}, 
   3.7612738173848763`*^9, {3.761273990786721*^9, 3.7612740076077023`*^9}, 
   3.761274089590727*^9, {3.7612742812315817`*^9, 3.761274307016839*^9}, {
   3.7612752122001333`*^9, 3.761275259258122*^9}, 3.7612836905347643`*^9, 
   3.7612837931679173`*^9, {3.7612840129450703`*^9, 3.761284021148426*^9}, {
   3.76128407743508*^9, 3.76128411398452*^9}, {3.761284149674079*^9, 
   3.761284163972089*^9}, {3.761284224574051*^9, 3.761284242098948*^9}, 
   3.761284524319701*^9, 3.761284561479883*^9, {3.761284596149728*^9, 
   3.761284611104206*^9}, {3.761284708030398*^9, 3.761284772997267*^9}, {
   3.7612848288150873`*^9, 3.761284832570758*^9}, 3.761285218376029*^9, 
   3.76128544122683*^9, {3.761285529188963*^9, 3.761285550188821*^9}, 
   3.761286215205914*^9, 3.761287234802614*^9, 3.7612873919513702`*^9, 
   3.761289673657641*^9, 3.7612898320954237`*^9, {3.761289934432948*^9, 
   3.7612899378627443`*^9}, 3.761292515792816*^9, {3.761342278016156*^9, 
   3.761342285975773*^9}, 3.761344542904334*^9, 3.761344940948653*^9, {
   3.761345281533019*^9, 3.7613452890616217`*^9}, 3.7613461878866*^9},
 CellLabel->"Out[48]=",ExpressionUUID->"e9b54eb1-cc07-43e7-bb63-79ccfaf437d5"]
}, Open  ]],

Cell[TextData[StyleBox["(* WM (True)     -      WM (U-net)      -        GM \
(True)       -        GM (U-net) *)",
 FontColor->RGBColor[1, 0, 0]]], "Input",
 CellChangeTimes->{{3.761285320312067*^9, 3.761285320312737*^9}, {
  3.761285350998035*^9, 3.761285359988879*^9}, {3.761285390181212*^9, 
  3.761285439013756*^9}, {3.761285618106595*^9, 3.761285622085277*^9}},
 CellLabel->"In[49]:=",ExpressionUUID->"3712e27c-4f67-4d3c-92d6-aa88270543f6"]
},
WindowSize->{1346, 792},
WindowMargins->{{16, Automatic}, {44, Automatic}},
FrontEndVersion->"11.3 for Linux x86 (64-bit) (March 6, 2018)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 5436, 100, 451, "Input",ExpressionUUID->"31ab4f15-a564-4379-aefb-635198957c4a"],
Cell[5997, 122, 1399, 42, 31, "Input",ExpressionUUID->"01d0cbb4-b87c-499c-9627-f4fe1ee2a535"],
Cell[7399, 166, 1931, 29, 31, "Input",ExpressionUUID->"19bf18a9-4a02-4073-bb97-9344b4bb5fe8"],
Cell[9333, 197, 350, 8, 31, "Input",ExpressionUUID->"9dcd62c5-15ab-48b8-9119-ad743d62527e"],
Cell[9686, 207, 1652, 28, 31, "Input",ExpressionUUID->"40d3c13f-f9e8-4df4-98ba-3b66cbd95bbb"],
Cell[11341, 237, 532, 13, 31, "Input",ExpressionUUID->"5c1a61d2-be85-4f4c-a6df-bf26a68d0c78"],
Cell[11876, 252, 1009, 36, 31, "Input",ExpressionUUID->"770dfb72-c407-41bf-8fae-2b849abb648d"],
Cell[CellGroupData[{
Cell[12910, 292, 1179, 23, 55, "Input",ExpressionUUID->"e7109a96-6ed4-4fef-ace3-b4d8683ee8cb"],
Cell[14092, 317, 704, 15, 25, "Print",ExpressionUUID->"3886db21-b772-47e3-92d4-1a5a23728469"]
}, Open  ]],
Cell[CellGroupData[{
Cell[14833, 337, 614, 14, 31, "Input",ExpressionUUID->"a8a8228e-d60c-4fd9-88db-364653aa7362"],
Cell[15450, 353, 658, 15, 25, "Print",ExpressionUUID->"38ebbf87-1568-4029-9082-ca8e0139f68d"]
}, Open  ]],
Cell[16123, 371, 302, 7, 31, "Input",ExpressionUUID->"478b055a-2a08-4709-8e48-aa1841a8b1ce"],
Cell[16428, 380, 545, 11, 31, "Input",ExpressionUUID->"6dc56c54-8f5d-42b0-8ce1-6cb60fbb4259"],
Cell[16976, 393, 547, 11, 31, "Input",ExpressionUUID->"9cd0de19-6e9b-4cc8-9497-5ecb4a403ea8"],
Cell[17526, 406, 310, 6, 31, "Input",ExpressionUUID->"d9b50d74-06b3-4ee3-a18f-5a334ef0d6dd"],
Cell[17839, 414, 475, 10, 31, "Input",ExpressionUUID->"8ada1602-9534-48d1-9946-a5b32567d09a"],
Cell[18317, 426, 1030, 20, 31, "Input",ExpressionUUID->"33e0d287-d599-49d3-b23f-7ac8815928e8"],
Cell[19350, 448, 245, 6, 31, "Input",ExpressionUUID->"2252ba20-1eed-4040-9794-9591ea450c10"],
Cell[19598, 456, 594, 15, 31, "Input",ExpressionUUID->"384f51e6-b757-4e32-9c5b-ae8246b1c113"],
Cell[20195, 473, 592, 15, 31, "Input",ExpressionUUID->"301c04c9-4ac2-4c28-8b31-6e3038f4a20b"],
Cell[20790, 490, 524, 13, 31, "Input",ExpressionUUID->"5db6f669-9b75-43b4-8701-f07f7de2c94f"],
Cell[21317, 505, 198, 3, 31, "Input",ExpressionUUID->"b09c3920-4d3b-4f8c-a27f-244cadb7ca06"],
Cell[21518, 510, 1098, 34, 31, "Input",ExpressionUUID->"6d2b4912-fc26-4cef-abc6-045a30dd3625"],
Cell[22619, 546, 558, 10, 31, "Input",ExpressionUUID->"0179a921-4b73-494a-af12-32452fef2bd3"],
Cell[23180, 558, 285, 5, 31, "Input",ExpressionUUID->"c511a134-5acf-4cd6-af91-39c150b17639"],
Cell[23468, 565, 624, 13, 31, "Input",ExpressionUUID->"86054257-ea16-4896-93c1-772981ae94b4"],
Cell[24095, 580, 452, 9, 31, "Input",ExpressionUUID->"dedccdec-735d-440c-8498-ef704bbe0b2b"],
Cell[24550, 591, 933, 19, 31, "Input",ExpressionUUID->"d02c9aca-cf40-428b-a381-c5cd1e1b308b"],
Cell[25486, 612, 262, 5, 31, "Input",ExpressionUUID->"bc5aa311-ad28-4cc3-ba3d-318d5de2f6e8"],
Cell[25751, 619, 498, 11, 31, "Input",ExpressionUUID->"91fc435c-d86d-4d51-9a40-62f9900431a7"],
Cell[26252, 632, 1482, 27, 31, "Input",ExpressionUUID->"83a7aeb6-123d-4bb3-a5db-fb1c84c71597"],
Cell[27737, 661, 1531, 27, 31, "Input",ExpressionUUID->"f90b4ec9-4e85-4567-a977-b3f9e6f13bc8"],
Cell[29271, 690, 348, 8, 31, "Input",ExpressionUUID->"5f00e1f0-0a78-4caa-b170-9e48a8770cde"],
Cell[29622, 700, 739, 14, 31, "Input",ExpressionUUID->"7e8d7991-7e4f-4bca-b882-344f0eab7721"],
Cell[30364, 716, 814, 15, 31, "Input",ExpressionUUID->"225623e1-9a79-4f0b-ab39-6df3dec00873"],
Cell[31181, 733, 385, 7, 31, "Input",ExpressionUUID->"57ddec21-50b7-42f0-a67e-7e31f116e1c6"],
Cell[CellGroupData[{
Cell[31591, 744, 650, 11, 31, "Input",ExpressionUUID->"07c5e4ae-a7f4-4fd6-90cb-81e4b7bd83c7"],
Cell[32244, 757, 255993, 4932, 78, "Output",ExpressionUUID->"12e25fcf-3ebb-450a-916c-3d854e95667f"]
}, Open  ]],
Cell[288252, 5692, 279, 5, 31, "Input",ExpressionUUID->"4663d994-23dd-44ef-97d9-3ede55ce38f6"],
Cell[288534, 5699, 4776, 88, 239, "Input",ExpressionUUID->"92efc98e-0825-4e84-932e-7ecfaf7b1271"],
Cell[293313, 5789, 353, 7, 31, "Input",ExpressionUUID->"6f91c3ee-3611-4932-a89d-1601171796a7"],
Cell[CellGroupData[{
Cell[293691, 5800, 2181, 49, 124, "Input",ExpressionUUID->"8463af53-db9d-4849-ae46-c2a96a34f072"],
Cell[295875, 5851, 18423, 368, 242, "Output",ExpressionUUID->"250293f8-375b-416e-9f4c-7f05a664c88a"]
}, Open  ]],
Cell[314313, 6222, 371, 8, 31, "Input",ExpressionUUID->"0324feec-e347-4a21-8fa0-d1799385b9c4"],
Cell[314687, 6232, 582, 11, 31, "Input",ExpressionUUID->"bc5b22f1-826f-44f6-bc0f-f106aee7f95f"],
Cell[315272, 6245, 260, 6, 31, "Input",ExpressionUUID->"858236d6-d2bd-4c37-b622-d10f21debbe8"],
Cell[315535, 6253, 318, 7, 31, "Input",ExpressionUUID->"d1b33c75-4e08-4acf-b6e6-8d2a8361e3b0"],
Cell[315856, 6262, 780, 15, 31, "Input",ExpressionUUID->"b86be700-98bd-48b2-b088-116f6fce051a"],
Cell[316639, 6279, 626, 13, 31, "Input",ExpressionUUID->"7defed12-c732-41ab-971f-26b78af0980c"],
Cell[CellGroupData[{
Cell[317290, 6296, 460, 8, 31, "Input",ExpressionUUID->"36823706-ce80-4016-838d-738be7c6ffb1"],
Cell[317753, 6306, 376490, 6173, 273, "Output",ExpressionUUID->"e9b54eb1-cc07-43e7-bb63-79ccfaf437d5"]
}, Open  ]],
Cell[694258, 12482, 446, 6, 31, "Input",ExpressionUUID->"3712e27c-4f67-4d3c-92d6-aa88270543f6"]
}
]
*)

